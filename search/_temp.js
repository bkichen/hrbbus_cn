/*!
 * jQuery JavaScript Library v1.4.2
 * http://jquery.com/
 *
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2010, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Sat Feb 13 22:33:48 2010 -0500
 */
(function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll("left")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:"script"}):c.globalEval(b.text||b.textContent||b.innerHTML||"");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b==="object"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o<i;o++)e(a[o],b,f?d.call(a[o],o,e(a[o],b)):d,j);return a}return i?
e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=
j.length;n<r;n++)for(k=0;k<u.length;k++){i=u[k];if(j[n].selector===i.selector){o=j[n].elem;f=null;if(i.preType==="mouseenter"||i.preType==="mouseleave")f=c(a.relatedTarget).closest(i.selector)[0];if(!f||f!==o)d.push({elem:o,handleObj:i})}}n=0;for(r=d.length;n<r;n++){j=d[n];a.currentTarget=j.elem;a.data=j.handleObj.data;a.handleObj=j.handleObj;if(j.handleObj.origHandler.apply(j.elem,e)===false){b=false;break}}return b}}function pa(a,b){return"live."+(a&&a!=="*"?a+".":"")+b.replace(/\./g,"`").replace(/ /g,
"&")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=
true;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=/^[^<]*(<[\w\W]+>)[^>]*$|^#([\w-]+)$/,Ua=/^.[^:#\[\.,]*$/,Va=/\S/,
Wa=/^(\s|\u00A0)+|(\s|\u00A0)+$/g,Xa=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,P=navigator.userAgent,xa=false,Q=[],L,$=Object.prototype.toString,aa=Object.prototype.hasOwnProperty,ba=Array.prototype.push,R=Array.prototype.slice,ya=Array.prototype.indexOf;c.fn=c.prototype={init:function(a,b){var d,f;if(!a)return this;if(a.nodeType){this.context=this[0]=a;this.length=1;return this}if(a==="body"&&!b){this.context=s;this[0]=s.body;this.selector="body";this.length=1;return this}if(typeof a==="string")if((d=Ta.exec(a))&&
(d[1]||!b))if(d[1]){f=b?b.ownerDocument||b:s;if(a=Xa.exec(a))if(c.isPlainObject(b)){a=[s.createElement(a[1])];c.fn.attr.call(a,b,true)}else a=[f.createElement(a[1])];else{a=sa([d[1]],[f]);a=(a.cacheable?a.fragment.cloneNode(true):a.fragment).childNodes}return c.merge(this,a)}else{if(b=s.getElementById(d[2])){if(b.id!==d[2])return T.find(a);this.length=1;this[0]=b}this.context=s;this.selector=a;return this}else if(!b&&/^\w+$/.test(a)){this.selector=a;this.context=s;a=s.getElementsByTagName(a);return c.merge(this,
a)}else return!b||b.jquery?(b||T).find(a):c(b).find(a);else if(c.isFunction(a))return T.ready(a);if(a.selector!==w){this.selector=a.selector;this.context=a.context}return c.makeArray(a,this)},selector:"",jquery:"1.4.2",length:0,size:function(){return this.length},toArray:function(){return R.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this.slice(a)[0]:this[a]},pushStack:function(a,b,d){var f=c();c.isArray(a)?ba.apply(f,a):c.merge(f,a);f.prevObject=this;f.context=this.context;if(b===
"find")f.selector=this.selector+(this.selector?" ":"")+d;else if(b)f.selector=this.selector+"."+b+"("+d+")";return f},each:function(a,b){return c.each(this,a,b)},ready:function(a){c.bindReady();if(c.isReady)a.call(s,c);else Q&&Q.push(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(R.apply(this,arguments),"slice",R.call(arguments).join(","))},map:function(a){return this.pushStack(c.map(this,
function(b,d){return a.call(b,d,b)}))},end:function(){return this.prevObject||c(null)},push:ba,sort:[].sort,splice:[].splice};c.fn.init.prototype=c.fn;c.extend=c.fn.extend=function(){var a=arguments[0]||{},b=1,d=arguments.length,f=false,e,j,i,o;if(typeof a==="boolean"){f=a;a=arguments[1]||{};b=2}if(typeof a!=="object"&&!c.isFunction(a))a={};if(d===b){a=this;--b}for(;b<d;b++)if((e=arguments[b])!=null)for(j in e){i=a[j];o=e[j];if(a!==o)if(f&&o&&(c.isPlainObject(o)||c.isArray(o))){i=i&&(c.isPlainObject(i)||
c.isArray(i))?i:c.isArray(o)?[]:{};a[j]=c.extend(f,i,o)}else if(o!==w)a[j]=o}return a};c.extend({noConflict:function(a){A.$=Sa;if(a)A.jQuery=Ra;return c},isReady:false,ready:function(){if(!c.isReady){if(!s.body)return setTimeout(c.ready,13);c.isReady=true;if(Q){for(var a,b=0;a=Q[b++];)a.call(s,c);Q=null}c.fn.triggerHandler&&c(s).triggerHandler("ready")}},bindReady:function(){if(!xa){xa=true;if(s.readyState==="complete")return c.ready();if(s.addEventListener){s.addEventListener("DOMContentLoaded",
L,false);A.addEventListener("load",c.ready,false)}else if(s.attachEvent){s.attachEvent("onreadystatechange",L);A.attachEvent("onload",c.ready);var a=false;try{a=A.frameElement==null}catch(b){}s.documentElement.doScroll&&a&&ma()}}},isFunction:function(a){return $.call(a)==="[object Function]"},isArray:function(a){return $.call(a)==="[object Array]"},isPlainObject:function(a){if(!a||$.call(a)!=="[object Object]"||a.nodeType||a.setInterval)return false;if(a.constructor&&!aa.call(a,"constructor")&&!aa.call(a.constructor.prototype,
"isPrototypeOf"))return false;var b;for(b in a);return b===w||aa.call(a,b)},isEmptyObject:function(a){for(var b in a)return false;return true},error:function(a){throw a;},parseJSON:function(a){if(typeof a!=="string"||!a)return null;a=c.trim(a);if(/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return A.JSON&&A.JSON.parse?A.JSON.parse(a):(new Function("return "+
a))();else c.error("Invalid JSON: "+a)},noop:function(){},globalEval:function(a){if(a&&Va.test(a)){var b=s.getElementsByTagName("head")[0]||s.documentElement,d=s.createElement("script");d.type="text/javascript";if(c.support.scriptEval)d.appendChild(s.createTextNode(a));else d.text=a;b.insertBefore(d,b.firstChild);b.removeChild(d)}},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,b,d){var f,e=0,j=a.length,i=j===w||c.isFunction(a);if(d)if(i)for(f in a){if(b.apply(a[f],
d)===false)break}else for(;e<j;){if(b.apply(a[e++],d)===false)break}else if(i)for(f in a){if(b.call(a[f],f,a[f])===false)break}else for(d=a[0];e<j&&b.call(d,e,d)!==false;d=a[++e]);return a},trim:function(a){return(a||"").replace(Wa,"")},makeArray:function(a,b){b=b||[];if(a!=null)a.length==null||typeof a==="string"||c.isFunction(a)||typeof a!=="function"&&a.setInterval?ba.call(b,a):c.merge(b,a);return b},inArray:function(a,b){if(b.indexOf)return b.indexOf(a);for(var d=0,f=b.length;d<f;d++)if(b[d]===
a)return d;return-1},merge:function(a,b){var d=a.length,f=0;if(typeof b.length==="number")for(var e=b.length;f<e;f++)a[d++]=b[f];else for(;b[f]!==w;)a[d++]=b[f++];a.length=d;return a},grep:function(a,b,d){for(var f=[],e=0,j=a.length;e<j;e++)!d!==!b(a[e],e)&&f.push(a[e]);return f},map:function(a,b,d){for(var f=[],e,j=0,i=a.length;j<i;j++){e=b(a[j],j,d);if(e!=null)f[f.length]=e}return f.concat.apply([],f)},guid:1,proxy:function(a,b,d){if(arguments.length===2)if(typeof b==="string"){d=a;a=d[b];b=w}else if(b&&
!c.isFunction(b)){d=b;b=w}if(!b&&a)b=function(){return a.apply(d||this,arguments)};if(a)b.guid=a.guid=a.guid||b.guid||c.guid++;return b},uaMatch:function(a){a=a.toLowerCase();a=/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version)?[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||!/compatible/.test(a)&&/(mozilla)(?:.*? rv:([\w.]+))?/.exec(a)||[];return{browser:a[1]||"",version:a[2]||"0"}},browser:{}});P=c.uaMatch(P);if(P.browser){c.browser[P.browser]=true;c.browser.version=P.version}if(c.browser.webkit)c.browser.safari=
true;if(ya)c.inArray=function(a,b){return ya.call(b,a)};T=c(s);if(s.addEventListener)L=function(){s.removeEventListener("DOMContentLoaded",L,false);c.ready()};else if(s.attachEvent)L=function(){if(s.readyState==="complete"){s.detachEvent("onreadystatechange",L);c.ready()}};(function(){c.support={};var a=s.documentElement,b=s.createElement("script"),d=s.createElement("div"),f="script"+J();d.style.display="none";d.innerHTML="   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
var e=d.getElementsByTagName("*"),j=d.getElementsByTagName("a")[0];if(!(!e||!e.length||!j)){c.support={leadingWhitespace:d.firstChild.nodeType===3,tbody:!d.getElementsByTagName("tbody").length,htmlSerialize:!!d.getElementsByTagName("link").length,style:/red/.test(j.getAttribute("style")),hrefNormalized:j.getAttribute("href")==="/a",opacity:/^0.55$/.test(j.style.opacity),cssFloat:!!j.style.cssFloat,checkOn:d.getElementsByTagName("input")[0].value==="on",optSelected:s.createElement("select").appendChild(s.createElement("option")).selected,
parentNode:d.removeChild(d.appendChild(s.createElement("div"))).parentNode===null,deleteExpando:true,checkClone:false,scriptEval:false,noCloneEvent:true,boxModel:null};b.type="text/javascript";try{b.appendChild(s.createTextNode("window."+f+"=1;"))}catch(i){}a.insertBefore(b,a.firstChild);if(A[f]){c.support.scriptEval=true;delete A[f]}try{delete b.test}catch(o){c.support.deleteExpando=false}a.removeChild(b);if(d.attachEvent&&d.fireEvent){d.attachEvent("onclick",function k(){c.support.noCloneEvent=
false;d.detachEvent("onclick",k)});d.cloneNode(true).fireEvent("onclick")}d=s.createElement("div");d.innerHTML="<input type='radio' name='radiotest' checked='checked'/>";a=s.createDocumentFragment();a.appendChild(d.firstChild);c.support.checkClone=a.cloneNode(true).cloneNode(true).lastChild.checked;c(function(){var k=s.createElement("div");k.style.width=k.style.paddingLeft="1px";s.body.appendChild(k);c.boxModel=c.support.boxModel=k.offsetWidth===2;s.body.removeChild(k).style.display="none"});a=function(k){var n=
s.createElement("div");k="on"+k;var r=k in n;if(!r){n.setAttribute(k,"return;");r=typeof n[k]==="function"}return r};c.support.submitBubbles=a("submit");c.support.changeBubbles=a("change");a=b=d=e=j=null}})();c.props={"for":"htmlFor","class":"className",readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",colspan:"colSpan",tabindex:"tabIndex",usemap:"useMap",frameborder:"frameBorder"};var G="jQuery"+J(),Ya=0,za={};c.extend({cache:{},expando:G,noData:{embed:true,object:true,
applet:true},data:function(a,b,d){if(!(a.nodeName&&c.noData[a.nodeName.toLowerCase()])){a=a==A?za:a;var f=a[G],e=c.cache;if(!f&&typeof b==="string"&&d===w)return null;f||(f=++Ya);if(typeof b==="object"){a[G]=f;e[f]=c.extend(true,{},b)}else if(!e[f]){a[G]=f;e[f]={}}a=e[f];if(d!==w)a[b]=d;return typeof b==="string"?a[b]:a}},removeData:function(a,b){if(!(a.nodeName&&c.noData[a.nodeName.toLowerCase()])){a=a==A?za:a;var d=a[G],f=c.cache,e=f[d];if(b){if(e){delete e[b];c.isEmptyObject(e)&&c.removeData(a)}}else{if(c.support.deleteExpando)delete a[c.expando];
else a.removeAttribute&&a.removeAttribute(c.expando);delete f[d]}}}});c.fn.extend({data:function(a,b){if(typeof a==="undefined"&&this.length)return c.data(this[0]);else if(typeof a==="object")return this.each(function(){c.data(this,a)});var d=a.split(".");d[1]=d[1]?"."+d[1]:"";if(b===w){var f=this.triggerHandler("getData"+d[1]+"!",[d[0]]);if(f===w&&this.length)f=c.data(this[0],a);return f===w&&d[1]?this.data(d[0]):f}else return this.trigger("setData"+d[1]+"!",[d[0],b]).each(function(){c.data(this,
a,b)})},removeData:function(a){return this.each(function(){c.removeData(this,a)})}});c.extend({queue:function(a,b,d){if(a){b=(b||"fx")+"queue";var f=c.data(a,b);if(!d)return f||[];if(!f||c.isArray(d))f=c.data(a,b,c.makeArray(d));else f.push(d);return f}},dequeue:function(a,b){b=b||"fx";var d=c.queue(a,b),f=d.shift();if(f==="inprogress")f=d.shift();if(f){b==="fx"&&d.unshift("inprogress");f.call(a,function(){c.dequeue(a,b)})}}});c.fn.extend({queue:function(a,b){if(typeof a!=="string"){b=a;a="fx"}if(b===
w)return c.queue(this[0],a);return this.each(function(){var d=c.queue(this,a,b);a==="fx"&&d[0]!=="inprogress"&&c.dequeue(this,a)})},dequeue:function(a){return this.each(function(){c.dequeue(this,a)})},delay:function(a,b){a=c.fx?c.fx.speeds[a]||a:a;b=b||"fx";return this.queue(b,function(){var d=this;setTimeout(function(){c.dequeue(d,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])}});var Aa=/[\n\t]/g,ca=/\s+/,Za=/\r/g,$a=/href|src|style/,ab=/(button|input)/i,bb=/(button|input|object|select|textarea)/i,
cb=/^(a|area)$/i,Ba=/radio|checkbox/;c.fn.extend({attr:function(a,b){return X(this,a,b,true,c.attr)},removeAttr:function(a){return this.each(function(){c.attr(this,a,"");this.nodeType===1&&this.removeAttribute(a)})},addClass:function(a){if(c.isFunction(a))return this.each(function(n){var r=c(this);r.addClass(a.call(this,n,r.attr("class")))});if(a&&typeof a==="string")for(var b=(a||"").split(ca),d=0,f=this.length;d<f;d++){var e=this[d];if(e.nodeType===1)if(e.className){for(var j=" "+e.className+" ",
i=e.className,o=0,k=b.length;o<k;o++)if(j.indexOf(" "+b[o]+" ")<0)i+=" "+b[o];e.className=c.trim(i)}else e.className=a}return this},removeClass:function(a){if(c.isFunction(a))return this.each(function(k){var n=c(this);n.removeClass(a.call(this,k,n.attr("class")))});if(a&&typeof a==="string"||a===w)for(var b=(a||"").split(ca),d=0,f=this.length;d<f;d++){var e=this[d];if(e.nodeType===1&&e.className)if(a){for(var j=(" "+e.className+" ").replace(Aa," "),i=0,o=b.length;i<o;i++)j=j.replace(" "+b[i]+" ",
" ");e.className=c.trim(j)}else e.className=""}return this},toggleClass:function(a,b){var d=typeof a,f=typeof b==="boolean";if(c.isFunction(a))return this.each(function(e){var j=c(this);j.toggleClass(a.call(this,e,j.attr("class"),b),b)});return this.each(function(){if(d==="string")for(var e,j=0,i=c(this),o=b,k=a.split(ca);e=k[j++];){o=f?o:!i.hasClass(e);i[o?"addClass":"removeClass"](e)}else if(d==="undefined"||d==="boolean"){this.className&&c.data(this,"__className__",this.className);this.className=
this.className||a===false?"":c.data(this,"__className__")||""}})},hasClass:function(a){a=" "+a+" ";for(var b=0,d=this.length;b<d;b++)if((" "+this[b].className+" ").replace(Aa," ").indexOf(a)>-1)return true;return false},val:function(a){if(a===w){var b=this[0];if(b){if(c.nodeName(b,"option"))return(b.attributes.value||{}).specified?b.value:b.text;if(c.nodeName(b,"select")){var d=b.selectedIndex,f=[],e=b.options;b=b.type==="select-one";if(d<0)return null;var j=b?d:0;for(d=b?d+1:e.length;j<d;j++){var i=
e[j];if(i.selected){a=c(i).val();if(b)return a;f.push(a)}}return f}if(Ba.test(b.type)&&!c.support.checkOn)return b.getAttribute("value")===null?"on":b.value;return(b.value||"").replace(Za,"")}return w}var o=c.isFunction(a);return this.each(function(k){var n=c(this),r=a;if(this.nodeType===1){if(o)r=a.call(this,k,n.val());if(typeof r==="number")r+="";if(c.isArray(r)&&Ba.test(this.type))this.checked=c.inArray(n.val(),r)>=0;else if(c.nodeName(this,"select")){var u=c.makeArray(r);c("option",this).each(function(){this.selected=
c.inArray(c(this).val(),u)>=0});if(!u.length)this.selectedIndex=-1}else this.value=r}})}});c.extend({attrFn:{val:true,css:true,html:true,text:true,data:true,width:true,height:true,offset:true},attr:function(a,b,d,f){if(!a||a.nodeType===3||a.nodeType===8)return w;if(f&&b in c.attrFn)return c(a)[b](d);f=a.nodeType!==1||!c.isXMLDoc(a);var e=d!==w;b=f&&c.props[b]||b;if(a.nodeType===1){var j=$a.test(b);if(b in a&&f&&!j){if(e){b==="type"&&ab.test(a.nodeName)&&a.parentNode&&c.error("type property can't be changed");
a[b]=d}if(c.nodeName(a,"form")&&a.getAttributeNode(b))return a.getAttributeNode(b).nodeValue;if(b==="tabIndex")return(b=a.getAttributeNode("tabIndex"))&&b.specified?b.value:bb.test(a.nodeName)||cb.test(a.nodeName)&&a.href?0:w;return a[b]}if(!c.support.style&&f&&b==="style"){if(e)a.style.cssText=""+d;return a.style.cssText}e&&a.setAttribute(b,""+d);a=!c.support.hrefNormalized&&f&&j?a.getAttribute(b,2):a.getAttribute(b);return a===null?w:a}return c.style(a,b,d)}});var O=/\.(.*)$/,db=function(a){return a.replace(/[^\w\s\.\|`]/g,
function(b){return"\\"+b})};c.event={add:function(a,b,d,f){if(!(a.nodeType===3||a.nodeType===8)){if(a.setInterval&&a!==A&&!a.frameElement)a=A;var e,j;if(d.handler){e=d;d=e.handler}if(!d.guid)d.guid=c.guid++;if(j=c.data(a)){var i=j.events=j.events||{},o=j.handle;if(!o)j.handle=o=function(){return typeof c!=="undefined"&&!c.event.triggered?c.event.handle.apply(o.elem,arguments):w};o.elem=a;b=b.split(" ");for(var k,n=0,r;k=b[n++];){j=e?c.extend({},e):{handler:d,data:f};if(k.indexOf(".")>-1){r=k.split(".");
k=r.shift();j.namespace=r.slice(0).sort().join(".")}else{r=[];j.namespace=""}j.type=k;j.guid=d.guid;var u=i[k],z=c.event.special[k]||{};if(!u){u=i[k]=[];if(!z.setup||z.setup.call(a,f,r,o)===false)if(a.addEventListener)a.addEventListener(k,o,false);else a.attachEvent&&a.attachEvent("on"+k,o)}if(z.add){z.add.call(a,j);if(!j.handler.guid)j.handler.guid=d.guid}u.push(j);c.event.global[k]=true}a=null}}},global:{},remove:function(a,b,d,f){if(!(a.nodeType===3||a.nodeType===8)){var e,j=0,i,o,k,n,r,u,z=c.data(a),
C=z&&z.events;if(z&&C){if(b&&b.type){d=b.handler;b=b.type}if(!b||typeof b==="string"&&b.charAt(0)==="."){b=b||"";for(e in C)c.event.remove(a,e+b)}else{for(b=b.split(" ");e=b[j++];){n=e;i=e.indexOf(".")<0;o=[];if(!i){o=e.split(".");e=o.shift();k=new RegExp("(^|\\.)"+c.map(o.slice(0).sort(),db).join("\\.(?:.*\\.)?")+"(\\.|$)")}if(r=C[e])if(d){n=c.event.special[e]||{};for(B=f||0;B<r.length;B++){u=r[B];if(d.guid===u.guid){if(i||k.test(u.namespace)){f==null&&r.splice(B--,1);n.remove&&n.remove.call(a,u)}if(f!=
null)break}}if(r.length===0||f!=null&&r.length===1){if(!n.teardown||n.teardown.call(a,o)===false)Ca(a,e,z.handle);delete C[e]}}else for(var B=0;B<r.length;B++){u=r[B];if(i||k.test(u.namespace)){c.event.remove(a,n,u.handler,B);r.splice(B--,1)}}}if(c.isEmptyObject(C)){if(b=z.handle)b.elem=null;delete z.events;delete z.handle;c.isEmptyObject(z)&&c.removeData(a)}}}}},trigger:function(a,b,d,f){var e=a.type||a;if(!f){a=typeof a==="object"?a[G]?a:c.extend(c.Event(e),a):c.Event(e);if(e.indexOf("!")>=0){a.type=
e=e.slice(0,-1);a.exclusive=true}if(!d){a.stopPropagation();c.event.global[e]&&c.each(c.cache,function(){this.events&&this.events[e]&&c.event.trigger(a,b,this.handle.elem)})}if(!d||d.nodeType===3||d.nodeType===8)return w;a.result=w;a.target=d;b=c.makeArray(b);b.unshift(a)}a.currentTarget=d;(f=c.data(d,"handle"))&&f.apply(d,b);f=d.parentNode||d.ownerDocument;try{if(!(d&&d.nodeName&&c.noData[d.nodeName.toLowerCase()]))if(d["on"+e]&&d["on"+e].apply(d,b)===false)a.result=false}catch(j){}if(!a.isPropagationStopped()&&
f)c.event.trigger(a,b,f,true);else if(!a.isDefaultPrevented()){f=a.target;var i,o=c.nodeName(f,"a")&&e==="click",k=c.event.special[e]||{};if((!k._default||k._default.call(d,a)===false)&&!o&&!(f&&f.nodeName&&c.noData[f.nodeName.toLowerCase()])){try{if(f[e]){if(i=f["on"+e])f["on"+e]=null;c.event.triggered=true;f[e]()}}catch(n){}if(i)f["on"+e]=i;c.event.triggered=false}}},handle:function(a){var b,d,f,e;a=arguments[0]=c.event.fix(a||A.event);a.currentTarget=this;b=a.type.indexOf(".")<0&&!a.exclusive;
if(!b){d=a.type.split(".");a.type=d.shift();f=new RegExp("(^|\\.)"+d.slice(0).sort().join("\\.(?:.*\\.)?")+"(\\.|$)")}e=c.data(this,"events");d=e[a.type];if(e&&d){d=d.slice(0);e=0;for(var j=d.length;e<j;e++){var i=d[e];if(b||f.test(i.namespace)){a.handler=i.handler;a.data=i.data;a.handleObj=i;i=i.handler.apply(this,arguments);if(i!==w){a.result=i;if(i===false){a.preventDefault();a.stopPropagation()}}if(a.isImmediatePropagationStopped())break}}}return a.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
fix:function(a){if(a[G])return a;var b=a;a=c.Event(b);for(var d=this.props.length,f;d;){f=this.props[--d];a[f]=b[f]}if(!a.target)a.target=a.srcElement||s;if(a.target.nodeType===3)a.target=a.target.parentNode;if(!a.relatedTarget&&a.fromElement)a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement;if(a.pageX==null&&a.clientX!=null){b=s.documentElement;d=s.body;a.pageX=a.clientX+(b&&b.scrollLeft||d&&d.scrollLeft||0)-(b&&b.clientLeft||d&&d.clientLeft||0);a.pageY=a.clientY+(b&&b.scrollTop||
d&&d.scrollTop||0)-(b&&b.clientTop||d&&d.clientTop||0)}if(!a.which&&(a.charCode||a.charCode===0?a.charCode:a.keyCode))a.which=a.charCode||a.keyCode;if(!a.metaKey&&a.ctrlKey)a.metaKey=a.ctrlKey;if(!a.which&&a.button!==w)a.which=a.button&1?1:a.button&2?3:a.button&4?2:0;return a},guid:1E8,proxy:c.proxy,special:{ready:{setup:c.bindReady,teardown:c.noop},live:{add:function(a){c.event.add(this,a.origType,c.extend({},a,{handler:oa}))},remove:function(a){var b=true,d=a.origType.replace(O,"");c.each(c.data(this,
"events").live||[],function(){if(d===this.origType.replace(O,""))return b=false});b&&c.event.remove(this,a.origType,oa)}},beforeunload:{setup:function(a,b,d){if(this.setInterval)this.onbeforeunload=d;return false},teardown:function(a,b){if(this.onbeforeunload===b)this.onbeforeunload=null}}}};var Ca=s.removeEventListener?function(a,b,d){a.removeEventListener(b,d,false)}:function(a,b,d){a.detachEvent("on"+b,d)};c.Event=function(a){if(!this.preventDefault)return new c.Event(a);if(a&&a.type){this.originalEvent=
a;this.type=a.type}else this.type=a;this.timeStamp=J();this[G]=true};c.Event.prototype={preventDefault:function(){this.isDefaultPrevented=Z;var a=this.originalEvent;if(a){a.preventDefault&&a.preventDefault();a.returnValue=false}},stopPropagation:function(){this.isPropagationStopped=Z;var a=this.originalEvent;if(a){a.stopPropagation&&a.stopPropagation();a.cancelBubble=true}},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=Z;this.stopPropagation()},isDefaultPrevented:Y,isPropagationStopped:Y,
isImmediatePropagationStopped:Y};var Da=function(a){var b=a.relatedTarget;try{for(;b&&b!==this;)b=b.parentNode;if(b!==this){a.type=a.data;c.event.handle.apply(this,arguments)}}catch(d){}},Ea=function(a){a.type=a.data;c.event.handle.apply(this,arguments)};c.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){c.event.special[a]={setup:function(d){c.event.add(this,b,d&&d.selector?Ea:Da,a)},teardown:function(d){c.event.remove(this,b,d&&d.selector?Ea:Da)}}});if(!c.support.submitBubbles)c.event.special.submit=
{setup:function(){if(this.nodeName.toLowerCase()!=="form"){c.event.add(this,"click.specialSubmit",function(a){var b=a.target,d=b.type;if((d==="submit"||d==="image")&&c(b).closest("form").length)return na("submit",this,arguments)});c.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,d=b.type;if((d==="text"||d==="password")&&c(b).closest("form").length&&a.keyCode===13)return na("submit",this,arguments)})}else return false},teardown:function(){c.event.remove(this,".specialSubmit")}};
if(!c.support.changeBubbles){var da=/textarea|input|select/i,ea,Fa=function(a){var b=a.type,d=a.value;if(b==="radio"||b==="checkbox")d=a.checked;else if(b==="select-multiple")d=a.selectedIndex>-1?c.map(a.options,function(f){return f.selected}).join("-"):"";else if(a.nodeName.toLowerCase()==="select")d=a.selectedIndex;return d},fa=function(a,b){var d=a.target,f,e;if(!(!da.test(d.nodeName)||d.readOnly)){f=c.data(d,"_change_data");e=Fa(d);if(a.type!=="focusout"||d.type!=="radio")c.data(d,"_change_data",
e);if(!(f===w||e===f))if(f!=null||e){a.type="change";return c.event.trigger(a,b,d)}}};c.event.special.change={filters:{focusout:fa,click:function(a){var b=a.target,d=b.type;if(d==="radio"||d==="checkbox"||b.nodeName.toLowerCase()==="select")return fa.call(this,a)},keydown:function(a){var b=a.target,d=b.type;if(a.keyCode===13&&b.nodeName.toLowerCase()!=="textarea"||a.keyCode===32&&(d==="checkbox"||d==="radio")||d==="select-multiple")return fa.call(this,a)},beforeactivate:function(a){a=a.target;c.data(a,
"_change_data",Fa(a))}},setup:function(){if(this.type==="file")return false;for(var a in ea)c.event.add(this,a+".specialChange",ea[a]);return da.test(this.nodeName)},teardown:function(){c.event.remove(this,".specialChange");return da.test(this.nodeName)}};ea=c.event.special.change.filters}s.addEventListener&&c.each({focus:"focusin",blur:"focusout"},function(a,b){function d(f){f=c.event.fix(f);f.type=b;return c.event.handle.call(this,f)}c.event.special[b]={setup:function(){this.addEventListener(a,
d,true)},teardown:function(){this.removeEventListener(a,d,true)}}});c.each(["bind","one"],function(a,b){c.fn[b]=function(d,f,e){if(typeof d==="object"){for(var j in d)this[b](j,f,d[j],e);return this}if(c.isFunction(f)){e=f;f=w}var i=b==="one"?c.proxy(e,function(k){c(this).unbind(k,i);return e.apply(this,arguments)}):e;if(d==="unload"&&b!=="one")this.one(d,f,e);else{j=0;for(var o=this.length;j<o;j++)c.event.add(this[j],d,i,f)}return this}});c.fn.extend({unbind:function(a,b){if(typeof a==="object"&&
!a.preventDefault)for(var d in a)this.unbind(d,a[d]);else{d=0;for(var f=this.length;d<f;d++)c.event.remove(this[d],a,b)}return this},delegate:function(a,b,d,f){return this.live(b,d,f,a)},undelegate:function(a,b,d){return arguments.length===0?this.unbind("live"):this.die(b,null,d,a)},trigger:function(a,b){return this.each(function(){c.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0]){a=c.Event(a);a.preventDefault();a.stopPropagation();c.event.trigger(a,b,this[0]);return a.result}},
toggle:function(a){for(var b=arguments,d=1;d<b.length;)c.proxy(a,b[d++]);return this.click(c.proxy(a,function(f){var e=(c.data(this,"lastToggle"+a.guid)||0)%d;c.data(this,"lastToggle"+a.guid,e+1);f.preventDefault();return b[e].apply(this,arguments)||false}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Ga={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};c.each(["live","die"],function(a,b){c.fn[b]=function(d,f,e,j){var i,o=0,k,n,r=j||this.selector,
u=j?this:c(this.context);if(c.isFunction(f)){e=f;f=w}for(d=(d||"").split(" ");(i=d[o++])!=null;){j=O.exec(i);k="";if(j){k=j[0];i=i.replace(O,"")}if(i==="hover")d.push("mouseenter"+k,"mouseleave"+k);else{n=i;if(i==="focus"||i==="blur"){d.push(Ga[i]+k);i+=k}else i=(Ga[i]||i)+k;b==="live"?u.each(function(){c.event.add(this,pa(i,r),{data:f,selector:r,handler:e,origType:i,origHandler:e,preType:n})}):u.unbind(pa(i,r),e)}}return this}});c.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),
function(a,b){c.fn[b]=function(d){return d?this.bind(b,d):this.trigger(b)};if(c.attrFn)c.attrFn[b]=true});A.attachEvent&&!A.addEventListener&&A.attachEvent("onunload",function(){for(var a in c.cache)if(c.cache[a].handle)try{c.event.remove(c.cache[a].handle.elem)}catch(b){}});(function(){function a(g){for(var h="",l,m=0;g[m];m++){l=g[m];if(l.nodeType===3||l.nodeType===4)h+=l.nodeValue;else if(l.nodeType!==8)h+=a(l.childNodes)}return h}function b(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];
if(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1&&!p){t.sizcache=l;t.sizset=q}if(t.nodeName.toLowerCase()===h){y=t;break}t=t[g]}m[q]=y}}}function d(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];if(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1){if(!p){t.sizcache=l;t.sizset=q}if(typeof h!=="string"){if(t===h){y=true;break}}else if(k.filter(h,[t]).length>0){y=t;break}}t=t[g]}m[q]=y}}}var f=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
e=0,j=Object.prototype.toString,i=false,o=true;[0,0].sort(function(){o=false;return 0});var k=function(g,h,l,m){l=l||[];var q=h=h||s;if(h.nodeType!==1&&h.nodeType!==9)return[];if(!g||typeof g!=="string")return l;for(var p=[],v,t,y,S,H=true,M=x(h),I=g;(f.exec(""),v=f.exec(I))!==null;){I=v[3];p.push(v[1]);if(v[2]){S=v[3];break}}if(p.length>1&&r.exec(g))if(p.length===2&&n.relative[p[0]])t=ga(p[0]+p[1],h);else for(t=n.relative[p[0]]?[h]:k(p.shift(),h);p.length;){g=p.shift();if(n.relative[g])g+=p.shift();
t=ga(g,t)}else{if(!m&&p.length>1&&h.nodeType===9&&!M&&n.match.ID.test(p[0])&&!n.match.ID.test(p[p.length-1])){v=k.find(p.shift(),h,M);h=v.expr?k.filter(v.expr,v.set)[0]:v.set[0]}if(h){v=m?{expr:p.pop(),set:z(m)}:k.find(p.pop(),p.length===1&&(p[0]==="~"||p[0]==="+")&&h.parentNode?h.parentNode:h,M);t=v.expr?k.filter(v.expr,v.set):v.set;if(p.length>0)y=z(t);else H=false;for(;p.length;){var D=p.pop();v=D;if(n.relative[D])v=p.pop();else D="";if(v==null)v=h;n.relative[D](y,v,M)}}else y=[]}y||(y=t);y||k.error(D||
g);if(j.call(y)==="[object Array]")if(H)if(h&&h.nodeType===1)for(g=0;y[g]!=null;g++){if(y[g]&&(y[g]===true||y[g].nodeType===1&&E(h,y[g])))l.push(t[g])}else for(g=0;y[g]!=null;g++)y[g]&&y[g].nodeType===1&&l.push(t[g]);else l.push.apply(l,y);else z(y,l);if(S){k(S,q,l,m);k.uniqueSort(l)}return l};k.uniqueSort=function(g){if(B){i=o;g.sort(B);if(i)for(var h=1;h<g.length;h++)g[h]===g[h-1]&&g.splice(h--,1)}return g};k.matches=function(g,h){return k(g,null,null,h)};k.find=function(g,h,l){var m,q;if(!g)return[];
for(var p=0,v=n.order.length;p<v;p++){var t=n.order[p];if(q=n.leftMatch[t].exec(g)){var y=q[1];q.splice(1,1);if(y.substr(y.length-1)!=="\\"){q[1]=(q[1]||"").replace(/\\/g,"");m=n.find[t](q,h,l);if(m!=null){g=g.replace(n.match[t],"");break}}}}m||(m=h.getElementsByTagName("*"));return{set:m,expr:g}};k.filter=function(g,h,l,m){for(var q=g,p=[],v=h,t,y,S=h&&h[0]&&x(h[0]);g&&h.length;){for(var H in n.filter)if((t=n.leftMatch[H].exec(g))!=null&&t[2]){var M=n.filter[H],I,D;D=t[1];y=false;t.splice(1,1);if(D.substr(D.length-
1)!=="\\"){if(v===p)p=[];if(n.preFilter[H])if(t=n.preFilter[H](t,v,l,p,m,S)){if(t===true)continue}else y=I=true;if(t)for(var U=0;(D=v[U])!=null;U++)if(D){I=M(D,t,U,v);var Ha=m^!!I;if(l&&I!=null)if(Ha)y=true;else v[U]=false;else if(Ha){p.push(D);y=true}}if(I!==w){l||(v=p);g=g.replace(n.match[H],"");if(!y)return[];break}}}if(g===q)if(y==null)k.error(g);else break;q=g}return v};k.error=function(g){throw"Syntax error, unrecognized expression: "+g;};var n=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
CLASS:/\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(g){return g.getAttribute("href")}},
relative:{"+":function(g,h){var l=typeof h==="string",m=l&&!/\W/.test(h);l=l&&!m;if(m)h=h.toLowerCase();m=0;for(var q=g.length,p;m<q;m++)if(p=g[m]){for(;(p=p.previousSibling)&&p.nodeType!==1;);g[m]=l||p&&p.nodeName.toLowerCase()===h?p||false:p===h}l&&k.filter(h,g,true)},">":function(g,h){var l=typeof h==="string";if(l&&!/\W/.test(h)){h=h.toLowerCase();for(var m=0,q=g.length;m<q;m++){var p=g[m];if(p){l=p.parentNode;g[m]=l.nodeName.toLowerCase()===h?l:false}}}else{m=0;for(q=g.length;m<q;m++)if(p=g[m])g[m]=
l?p.parentNode:p.parentNode===h;l&&k.filter(h,g,true)}},"":function(g,h,l){var m=e++,q=d;if(typeof h==="string"&&!/\W/.test(h)){var p=h=h.toLowerCase();q=b}q("parentNode",h,m,g,p,l)},"~":function(g,h,l){var m=e++,q=d;if(typeof h==="string"&&!/\W/.test(h)){var p=h=h.toLowerCase();q=b}q("previousSibling",h,m,g,p,l)}},find:{ID:function(g,h,l){if(typeof h.getElementById!=="undefined"&&!l)return(g=h.getElementById(g[1]))?[g]:[]},NAME:function(g,h){if(typeof h.getElementsByName!=="undefined"){var l=[];
h=h.getElementsByName(g[1]);for(var m=0,q=h.length;m<q;m++)h[m].getAttribute("name")===g[1]&&l.push(h[m]);return l.length===0?null:l}},TAG:function(g,h){return h.getElementsByTagName(g[1])}},preFilter:{CLASS:function(g,h,l,m,q,p){g=" "+g[1].replace(/\\/g,"")+" ";if(p)return g;p=0;for(var v;(v=h[p])!=null;p++)if(v)if(q^(v.className&&(" "+v.className+" ").replace(/[\t\n]/g," ").indexOf(g)>=0))l||m.push(v);else if(l)h[p]=false;return false},ID:function(g){return g[1].replace(/\\/g,"")},TAG:function(g){return g[1].toLowerCase()},
CHILD:function(g){if(g[1]==="nth"){var h=/(-?)(\d*)n((?:\+|-)?\d*)/.exec(g[2]==="even"&&"2n"||g[2]==="odd"&&"2n+1"||!/\D/.test(g[2])&&"0n+"+g[2]||g[2]);g[2]=h[1]+(h[2]||1)-0;g[3]=h[3]-0}g[0]=e++;return g},ATTR:function(g,h,l,m,q,p){h=g[1].replace(/\\/g,"");if(!p&&n.attrMap[h])g[1]=n.attrMap[h];if(g[2]==="~=")g[4]=" "+g[4]+" ";return g},PSEUDO:function(g,h,l,m,q){if(g[1]==="not")if((f.exec(g[3])||"").length>1||/^\w/.test(g[3]))g[3]=k(g[3],null,null,h);else{g=k.filter(g[3],h,l,true^q);l||m.push.apply(m,
g);return false}else if(n.match.POS.test(g[0])||n.match.CHILD.test(g[0]))return true;return g},POS:function(g){g.unshift(true);return g}},filters:{enabled:function(g){return g.disabled===false&&g.type!=="hidden"},disabled:function(g){return g.disabled===true},checked:function(g){return g.checked===true},selected:function(g){return g.selected===true},parent:function(g){return!!g.firstChild},empty:function(g){return!g.firstChild},has:function(g,h,l){return!!k(l[3],g).length},header:function(g){return/h\d/i.test(g.nodeName)},
text:function(g){return"text"===g.type},radio:function(g){return"radio"===g.type},checkbox:function(g){return"checkbox"===g.type},file:function(g){return"file"===g.type},password:function(g){return"password"===g.type},submit:function(g){return"submit"===g.type},image:function(g){return"image"===g.type},reset:function(g){return"reset"===g.type},button:function(g){return"button"===g.type||g.nodeName.toLowerCase()==="button"},input:function(g){return/input|select|textarea|button/i.test(g.nodeName)}},
setFilters:{first:function(g,h){return h===0},last:function(g,h,l,m){return h===m.length-1},even:function(g,h){return h%2===0},odd:function(g,h){return h%2===1},lt:function(g,h,l){return h<l[3]-0},gt:function(g,h,l){return h>l[3]-0},nth:function(g,h,l){return l[3]-0===h},eq:function(g,h,l){return l[3]-0===h}},filter:{PSEUDO:function(g,h,l,m){var q=h[1],p=n.filters[q];if(p)return p(g,l,h,m);else if(q==="contains")return(g.textContent||g.innerText||a([g])||"").indexOf(h[3])>=0;else if(q==="not"){h=
h[3];l=0;for(m=h.length;l<m;l++)if(h[l]===g)return false;return true}else k.error("Syntax error, unrecognized expression: "+q)},CHILD:function(g,h){var l=h[1],m=g;switch(l){case "only":case "first":for(;m=m.previousSibling;)if(m.nodeType===1)return false;if(l==="first")return true;m=g;case "last":for(;m=m.nextSibling;)if(m.nodeType===1)return false;return true;case "nth":l=h[2];var q=h[3];if(l===1&&q===0)return true;h=h[0];var p=g.parentNode;if(p&&(p.sizcache!==h||!g.nodeIndex)){var v=0;for(m=p.firstChild;m;m=
m.nextSibling)if(m.nodeType===1)m.nodeIndex=++v;p.sizcache=h}g=g.nodeIndex-q;return l===0?g===0:g%l===0&&g/l>=0}},ID:function(g,h){return g.nodeType===1&&g.getAttribute("id")===h},TAG:function(g,h){return h==="*"&&g.nodeType===1||g.nodeName.toLowerCase()===h},CLASS:function(g,h){return(" "+(g.className||g.getAttribute("class"))+" ").indexOf(h)>-1},ATTR:function(g,h){var l=h[1];g=n.attrHandle[l]?n.attrHandle[l](g):g[l]!=null?g[l]:g.getAttribute(l);l=g+"";var m=h[2];h=h[4];return g==null?m==="!=":m===
"="?l===h:m==="*="?l.indexOf(h)>=0:m==="~="?(" "+l+" ").indexOf(h)>=0:!h?l&&g!==false:m==="!="?l!==h:m==="^="?l.indexOf(h)===0:m==="$="?l.substr(l.length-h.length)===h:m==="|="?l===h||l.substr(0,h.length+1)===h+"-":false},POS:function(g,h,l,m){var q=n.setFilters[h[2]];if(q)return q(g,l,h,m)}}},r=n.match.POS;for(var u in n.match){n.match[u]=new RegExp(n.match[u].source+/(?![^\[]*\])(?![^\(]*\))/.source);n.leftMatch[u]=new RegExp(/(^(?:.|\r|\n)*?)/.source+n.match[u].source.replace(/\\(\d+)/g,function(g,
h){return"\\"+(h-0+1)}))}var z=function(g,h){g=Array.prototype.slice.call(g,0);if(h){h.push.apply(h,g);return h}return g};try{Array.prototype.slice.call(s.documentElement.childNodes,0)}catch(C){z=function(g,h){h=h||[];if(j.call(g)==="[object Array]")Array.prototype.push.apply(h,g);else if(typeof g.length==="number")for(var l=0,m=g.length;l<m;l++)h.push(g[l]);else for(l=0;g[l];l++)h.push(g[l]);return h}}var B;if(s.documentElement.compareDocumentPosition)B=function(g,h){if(!g.compareDocumentPosition||
!h.compareDocumentPosition){if(g==h)i=true;return g.compareDocumentPosition?-1:1}g=g.compareDocumentPosition(h)&4?-1:g===h?0:1;if(g===0)i=true;return g};else if("sourceIndex"in s.documentElement)B=function(g,h){if(!g.sourceIndex||!h.sourceIndex){if(g==h)i=true;return g.sourceIndex?-1:1}g=g.sourceIndex-h.sourceIndex;if(g===0)i=true;return g};else if(s.createRange)B=function(g,h){if(!g.ownerDocument||!h.ownerDocument){if(g==h)i=true;return g.ownerDocument?-1:1}var l=g.ownerDocument.createRange(),m=
h.ownerDocument.createRange();l.setStart(g,0);l.setEnd(g,0);m.setStart(h,0);m.setEnd(h,0);g=l.compareBoundaryPoints(Range.START_TO_END,m);if(g===0)i=true;return g};(function(){var g=s.createElement("div"),h="script"+(new Date).getTime();g.innerHTML="<a name='"+h+"'/>";var l=s.documentElement;l.insertBefore(g,l.firstChild);if(s.getElementById(h)){n.find.ID=function(m,q,p){if(typeof q.getElementById!=="undefined"&&!p)return(q=q.getElementById(m[1]))?q.id===m[1]||typeof q.getAttributeNode!=="undefined"&&
q.getAttributeNode("id").nodeValue===m[1]?[q]:w:[]};n.filter.ID=function(m,q){var p=typeof m.getAttributeNode!=="undefined"&&m.getAttributeNode("id");return m.nodeType===1&&p&&p.nodeValue===q}}l.removeChild(g);l=g=null})();(function(){var g=s.createElement("div");g.appendChild(s.createComment(""));if(g.getElementsByTagName("*").length>0)n.find.TAG=function(h,l){l=l.getElementsByTagName(h[1]);if(h[1]==="*"){h=[];for(var m=0;l[m];m++)l[m].nodeType===1&&h.push(l[m]);l=h}return l};g.innerHTML="<a href='#'></a>";
if(g.firstChild&&typeof g.firstChild.getAttribute!=="undefined"&&g.firstChild.getAttribute("href")!=="#")n.attrHandle.href=function(h){return h.getAttribute("href",2)};g=null})();s.querySelectorAll&&function(){var g=k,h=s.createElement("div");h.innerHTML="<p class='TEST'></p>";if(!(h.querySelectorAll&&h.querySelectorAll(".TEST").length===0)){k=function(m,q,p,v){q=q||s;if(!v&&q.nodeType===9&&!x(q))try{return z(q.querySelectorAll(m),p)}catch(t){}return g(m,q,p,v)};for(var l in g)k[l]=g[l];h=null}}();
(function(){var g=s.createElement("div");g.innerHTML="<div class='test e'></div><div class='test'></div>";if(!(!g.getElementsByClassName||g.getElementsByClassName("e").length===0)){g.lastChild.className="e";if(g.getElementsByClassName("e").length!==1){n.order.splice(1,0,"CLASS");n.find.CLASS=function(h,l,m){if(typeof l.getElementsByClassName!=="undefined"&&!m)return l.getElementsByClassName(h[1])};g=null}}})();var E=s.compareDocumentPosition?function(g,h){return!!(g.compareDocumentPosition(h)&16)}:
function(g,h){return g!==h&&(g.contains?g.contains(h):true)},x=function(g){return(g=(g?g.ownerDocument||g:0).documentElement)?g.nodeName!=="HTML":false},ga=function(g,h){var l=[],m="",q;for(h=h.nodeType?[h]:h;q=n.match.PSEUDO.exec(g);){m+=q[0];g=g.replace(n.match.PSEUDO,"")}g=n.relative[g]?g+"*":g;q=0;for(var p=h.length;q<p;q++)k(g,h[q],l);return k.filter(m,l)};c.find=k;c.expr=k.selectors;c.expr[":"]=c.expr.filters;c.unique=k.uniqueSort;c.text=a;c.isXMLDoc=x;c.contains=E})();var eb=/Until$/,fb=/^(?:parents|prevUntil|prevAll)/,
gb=/,/;R=Array.prototype.slice;var Ia=function(a,b,d){if(c.isFunction(b))return c.grep(a,function(e,j){return!!b.call(e,j,e)===d});else if(b.nodeType)return c.grep(a,function(e){return e===b===d});else if(typeof b==="string"){var f=c.grep(a,function(e){return e.nodeType===1});if(Ua.test(b))return c.filter(b,f,!d);else b=c.filter(b,f)}return c.grep(a,function(e){return c.inArray(e,b)>=0===d})};c.fn.extend({find:function(a){for(var b=this.pushStack("","find",a),d=0,f=0,e=this.length;f<e;f++){d=b.length;
c.find(a,this[f],b);if(f>0)for(var j=d;j<b.length;j++)for(var i=0;i<d;i++)if(b[i]===b[j]){b.splice(j--,1);break}}return b},has:function(a){var b=c(a);return this.filter(function(){for(var d=0,f=b.length;d<f;d++)if(c.contains(this,b[d]))return true})},not:function(a){return this.pushStack(Ia(this,a,false),"not",a)},filter:function(a){return this.pushStack(Ia(this,a,true),"filter",a)},is:function(a){return!!a&&c.filter(a,this).length>0},closest:function(a,b){if(c.isArray(a)){var d=[],f=this[0],e,j=
{},i;if(f&&a.length){e=0;for(var o=a.length;e<o;e++){i=a[e];j[i]||(j[i]=c.expr.match.POS.test(i)?c(i,b||this.context):i)}for(;f&&f.ownerDocument&&f!==b;){for(i in j){e=j[i];if(e.jquery?e.index(f)>-1:c(f).is(e)){d.push({selector:i,elem:f});delete j[i]}}f=f.parentNode}}return d}var k=c.expr.match.POS.test(a)?c(a,b||this.context):null;return this.map(function(n,r){for(;r&&r.ownerDocument&&r!==b;){if(k?k.index(r)>-1:c(r).is(a))return r;r=r.parentNode}return null})},index:function(a){if(!a||typeof a===
"string")return c.inArray(this[0],a?c(a):this.parent().children());return c.inArray(a.jquery?a[0]:a,this)},add:function(a,b){a=typeof a==="string"?c(a,b||this.context):c.makeArray(a);b=c.merge(this.get(),a);return this.pushStack(qa(a[0])||qa(b[0])?b:c.unique(b))},andSelf:function(){return this.add(this.prevObject)}});c.each({parent:function(a){return(a=a.parentNode)&&a.nodeType!==11?a:null},parents:function(a){return c.dir(a,"parentNode")},parentsUntil:function(a,b,d){return c.dir(a,"parentNode",
d)},next:function(a){return c.nth(a,2,"nextSibling")},prev:function(a){return c.nth(a,2,"previousSibling")},nextAll:function(a){return c.dir(a,"nextSibling")},prevAll:function(a){return c.dir(a,"previousSibling")},nextUntil:function(a,b,d){return c.dir(a,"nextSibling",d)},prevUntil:function(a,b,d){return c.dir(a,"previousSibling",d)},siblings:function(a){return c.sibling(a.parentNode.firstChild,a)},children:function(a){return c.sibling(a.firstChild)},contents:function(a){return c.nodeName(a,"iframe")?
a.contentDocument||a.contentWindow.document:c.makeArray(a.childNodes)}},function(a,b){c.fn[a]=function(d,f){var e=c.map(this,b,d);eb.test(a)||(f=d);if(f&&typeof f==="string")e=c.filter(f,e);e=this.length>1?c.unique(e):e;if((this.length>1||gb.test(f))&&fb.test(a))e=e.reverse();return this.pushStack(e,a,R.call(arguments).join(","))}});c.extend({filter:function(a,b,d){if(d)a=":not("+a+")";return c.find.matches(a,b)},dir:function(a,b,d){var f=[];for(a=a[b];a&&a.nodeType!==9&&(d===w||a.nodeType!==1||!c(a).is(d));){a.nodeType===
1&&f.push(a);a=a[b]}return f},nth:function(a,b,d){b=b||1;for(var f=0;a;a=a[d])if(a.nodeType===1&&++f===b)break;return a},sibling:function(a,b){for(var d=[];a;a=a.nextSibling)a.nodeType===1&&a!==b&&d.push(a);return d}});var Ja=/ jQuery\d+="(?:\d+|null)"/g,V=/^\s+/,Ka=/(<([\w:]+)[^>]*?)\/>/g,hb=/^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i,La=/<([\w:]+)/,ib=/<tbody/i,jb=/<|&#?\w+;/,ta=/<script|<object|<embed|<option|<style/i,ua=/checked\s*(?:[^=]|=\s*.checked.)/i,Ma=function(a,b,d){return hb.test(d)?
a:b+"></"+d+">"},F={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};F.optgroup=F.option;F.tbody=F.tfoot=F.colgroup=F.caption=F.thead;F.th=F.td;if(!c.support.htmlSerialize)F._default=[1,"div<div>","</div>"];c.fn.extend({text:function(a){if(c.isFunction(a))return this.each(function(b){var d=
c(this);d.text(a.call(this,b,d.text()))});if(typeof a!=="object"&&a!==w)return this.empty().append((this[0]&&this[0].ownerDocument||s).createTextNode(a));return c.text(this)},wrapAll:function(a){if(c.isFunction(a))return this.each(function(d){c(this).wrapAll(a.call(this,d))});if(this[0]){var b=c(a,this[0].ownerDocument).eq(0).clone(true);this[0].parentNode&&b.insertBefore(this[0]);b.map(function(){for(var d=this;d.firstChild&&d.firstChild.nodeType===1;)d=d.firstChild;return d}).append(this)}return this},
wrapInner:function(a){if(c.isFunction(a))return this.each(function(b){c(this).wrapInner(a.call(this,b))});return this.each(function(){var b=c(this),d=b.contents();d.length?d.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){c(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){c.nodeName(this,"body")||c(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.appendChild(a)})},
prepend:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,false,function(b){this.parentNode.insertBefore(b,this)});else if(arguments.length){var a=c(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,false,function(b){this.parentNode.insertBefore(b,
this.nextSibling)});else if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,c(arguments[0]).toArray());return a}},remove:function(a,b){for(var d=0,f;(f=this[d])!=null;d++)if(!a||c.filter(a,[f]).length){if(!b&&f.nodeType===1){c.cleanData(f.getElementsByTagName("*"));c.cleanData([f])}f.parentNode&&f.parentNode.removeChild(f)}return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++)for(b.nodeType===1&&c.cleanData(b.getElementsByTagName("*"));b.firstChild;)b.removeChild(b.firstChild);
return this},clone:function(a){var b=this.map(function(){if(!c.support.noCloneEvent&&!c.isXMLDoc(this)){var d=this.outerHTML,f=this.ownerDocument;if(!d){d=f.createElement("div");d.appendChild(this.cloneNode(true));d=d.innerHTML}return c.clean([d.replace(Ja,"").replace(/=([^="'>\s]+\/)>/g,'="$1">').replace(V,"")],f)[0]}else return this.cloneNode(true)});if(a===true){ra(this,b);ra(this.find("*"),b.find("*"))}return b},html:function(a){if(a===w)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(Ja,
""):null;else if(typeof a==="string"&&!ta.test(a)&&(c.support.leadingWhitespace||!V.test(a))&&!F[(La.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Ka,Ma);try{for(var b=0,d=this.length;b<d;b++)if(this[b].nodeType===1){c.cleanData(this[b].getElementsByTagName("*"));this[b].innerHTML=a}}catch(f){this.empty().append(a)}}else c.isFunction(a)?this.each(function(e){var j=c(this),i=j.html();j.empty().append(function(){return a.call(this,e,i)})}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&
this[0].parentNode){if(c.isFunction(a))return this.each(function(b){var d=c(this),f=d.html();d.replaceWith(a.call(this,b,f))});if(typeof a!=="string")a=c(a).detach();return this.each(function(){var b=this.nextSibling,d=this.parentNode;c(this).remove();b?c(b).before(a):c(d).append(a)})}else return this.pushStack(c(c.isFunction(a)?a():a),"replaceWith",a)},detach:function(a){return this.remove(a,true)},domManip:function(a,b,d){function f(u){return c.nodeName(u,"table")?u.getElementsByTagName("tbody")[0]||
u.appendChild(u.ownerDocument.createElement("tbody")):u}var e,j,i=a[0],o=[],k;if(!c.support.checkClone&&arguments.length===3&&typeof i==="string"&&ua.test(i))return this.each(function(){c(this).domManip(a,b,d,true)});if(c.isFunction(i))return this.each(function(u){var z=c(this);a[0]=i.call(this,u,b?z.html():w);z.domManip(a,b,d)});if(this[0]){e=i&&i.parentNode;e=c.support.parentNode&&e&&e.nodeType===11&&e.childNodes.length===this.length?{fragment:e}:sa(a,this,o);k=e.fragment;if(j=k.childNodes.length===
1?(k=k.firstChild):k.firstChild){b=b&&c.nodeName(j,"tr");for(var n=0,r=this.length;n<r;n++)d.call(b?f(this[n],j):this[n],n>0||e.cacheable||this.length>1?k.cloneNode(true):k)}o.length&&c.each(o,Qa)}return this}});c.fragments={};c.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){c.fn[a]=function(d){var f=[];d=c(d);var e=this.length===1&&this[0].parentNode;if(e&&e.nodeType===11&&e.childNodes.length===1&&d.length===1){d[b](this[0]);
return this}else{e=0;for(var j=d.length;e<j;e++){var i=(e>0?this.clone(true):this).get();c.fn[b].apply(c(d[e]),i);f=f.concat(i)}return this.pushStack(f,a,d.selector)}}});c.extend({clean:function(a,b,d,f){b=b||s;if(typeof b.createElement==="undefined")b=b.ownerDocument||b[0]&&b[0].ownerDocument||s;for(var e=[],j=0,i;(i=a[j])!=null;j++){if(typeof i==="number")i+="";if(i){if(typeof i==="string"&&!jb.test(i))i=b.createTextNode(i);else if(typeof i==="string"){i=i.replace(Ka,Ma);var o=(La.exec(i)||["",
""])[1].toLowerCase(),k=F[o]||F._default,n=k[0],r=b.createElement("div");for(r.innerHTML=k[1]+i+k[2];n--;)r=r.lastChild;if(!c.support.tbody){n=ib.test(i);o=o==="table"&&!n?r.firstChild&&r.firstChild.childNodes:k[1]==="<table>"&&!n?r.childNodes:[];for(k=o.length-1;k>=0;--k)c.nodeName(o[k],"tbody")&&!o[k].childNodes.length&&o[k].parentNode.removeChild(o[k])}!c.support.leadingWhitespace&&V.test(i)&&r.insertBefore(b.createTextNode(V.exec(i)[0]),r.firstChild);i=r.childNodes}if(i.nodeType)e.push(i);else e=
c.merge(e,i)}}if(d)for(j=0;e[j];j++)if(f&&c.nodeName(e[j],"script")&&(!e[j].type||e[j].type.toLowerCase()==="text/javascript"))f.push(e[j].parentNode?e[j].parentNode.removeChild(e[j]):e[j]);else{e[j].nodeType===1&&e.splice.apply(e,[j+1,0].concat(c.makeArray(e[j].getElementsByTagName("script"))));d.appendChild(e[j])}return e},cleanData:function(a){for(var b,d,f=c.cache,e=c.event.special,j=c.support.deleteExpando,i=0,o;(o=a[i])!=null;i++)if(d=o[c.expando]){b=f[d];if(b.events)for(var k in b.events)e[k]?
c.event.remove(o,k):Ca(o,k,b.handle);if(j)delete o[c.expando];else o.removeAttribute&&o.removeAttribute(c.expando);delete f[d]}}});var kb=/z-?index|font-?weight|opacity|zoom|line-?height/i,Na=/alpha\([^)]*\)/,Oa=/opacity=([^)]*)/,ha=/float/i,ia=/-([a-z])/ig,lb=/([A-Z])/g,mb=/^-?\d+(?:px)?$/i,nb=/^-?\d/,ob={position:"absolute",visibility:"hidden",display:"block"},pb=["Left","Right"],qb=["Top","Bottom"],rb=s.defaultView&&s.defaultView.getComputedStyle,Pa=c.support.cssFloat?"cssFloat":"styleFloat",ja=
function(a,b){return b.toUpperCase()};c.fn.css=function(a,b){return X(this,a,b,true,function(d,f,e){if(e===w)return c.curCSS(d,f);if(typeof e==="number"&&!kb.test(f))e+="px";c.style(d,f,e)})};c.extend({style:function(a,b,d){if(!a||a.nodeType===3||a.nodeType===8)return w;if((b==="width"||b==="height")&&parseFloat(d)<0)d=w;var f=a.style||a,e=d!==w;if(!c.support.opacity&&b==="opacity"){if(e){f.zoom=1;b=parseInt(d,10)+""==="NaN"?"":"alpha(opacity="+d*100+")";a=f.filter||c.curCSS(a,"filter")||"";f.filter=
Na.test(a)?a.replace(Na,b):b}return f.filter&&f.filter.indexOf("opacity=")>=0?parseFloat(Oa.exec(f.filter)[1])/100+"":""}if(ha.test(b))b=Pa;b=b.replace(ia,ja);if(e)f[b]=d;return f[b]},css:function(a,b,d,f){if(b==="width"||b==="height"){var e,j=b==="width"?pb:qb;function i(){e=b==="width"?a.offsetWidth:a.offsetHeight;f!=="border"&&c.each(j,function(){f||(e-=parseFloat(c.curCSS(a,"padding"+this,true))||0);if(f==="margin")e+=parseFloat(c.curCSS(a,"margin"+this,true))||0;else e-=parseFloat(c.curCSS(a,
"border"+this+"Width",true))||0})}a.offsetWidth!==0?i():c.swap(a,ob,i);return Math.max(0,Math.round(e))}return c.curCSS(a,b,d)},curCSS:function(a,b,d){var f,e=a.style;if(!c.support.opacity&&b==="opacity"&&a.currentStyle){f=Oa.test(a.currentStyle.filter||"")?parseFloat(RegExp.$1)/100+"":"";return f===""?"1":f}if(ha.test(b))b=Pa;if(!d&&e&&e[b])f=e[b];else if(rb){if(ha.test(b))b="float";b=b.replace(lb,"-$1").toLowerCase();e=a.ownerDocument.defaultView;if(!e)return null;if(a=e.getComputedStyle(a,null))f=
a.getPropertyValue(b);if(b==="opacity"&&f==="")f="1"}else if(a.currentStyle){d=b.replace(ia,ja);f=a.currentStyle[b]||a.currentStyle[d];if(!mb.test(f)&&nb.test(f)){b=e.left;var j=a.runtimeStyle.left;a.runtimeStyle.left=a.currentStyle.left;e.left=d==="fontSize"?"1em":f||0;f=e.pixelLeft+"px";e.left=b;a.runtimeStyle.left=j}}return f},swap:function(a,b,d){var f={};for(var e in b){f[e]=a.style[e];a.style[e]=b[e]}d.call(a);for(e in b)a.style[e]=f[e]}});if(c.expr&&c.expr.filters){c.expr.filters.hidden=function(a){var b=
a.offsetWidth,d=a.offsetHeight,f=a.nodeName.toLowerCase()==="tr";return b===0&&d===0&&!f?true:b>0&&d>0&&!f?false:c.curCSS(a,"display")==="none"};c.expr.filters.visible=function(a){return!c.expr.filters.hidden(a)}}var sb=J(),tb=/<script(.|\s)*?\/script>/gi,ub=/select|textarea/i,vb=/color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,N=/=\?(&|$)/,ka=/\?/,wb=/(\?|&)_=.*?(&|$)/,xb=/^(\w+:)?\/\/([^\/?#]+)/,yb=/%20/g,zb=c.fn.load;c.fn.extend({load:function(a,b,d){if(typeof a!==
"string")return zb.call(this,a);else if(!this.length)return this;var f=a.indexOf(" ");if(f>=0){var e=a.slice(f,a.length);a=a.slice(0,f)}f="GET";if(b)if(c.isFunction(b)){d=b;b=null}else if(typeof b==="object"){b=c.param(b,c.ajaxSettings.traditional);f="POST"}var j=this;c.ajax({url:a,type:f,dataType:"html",data:b,complete:function(i,o){if(o==="success"||o==="notmodified")j.html(e?c("<div />").append(i.responseText.replace(tb,"")).find(e):i.responseText);d&&j.each(d,[i.responseText,o,i])}});return this},
serialize:function(){return c.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?c.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ub.test(this.nodeName)||vb.test(this.type))}).map(function(a,b){a=c(this).val();return a==null?null:c.isArray(a)?c.map(a,function(d){return{name:b.name,value:d}}):{name:b.name,value:a}}).get()}});c.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),
function(a,b){c.fn[b]=function(d){return this.bind(b,d)}});c.extend({get:function(a,b,d,f){if(c.isFunction(b)){f=f||d;d=b;b=null}return c.ajax({type:"GET",url:a,data:b,success:d,dataType:f})},getScript:function(a,b){return c.get(a,null,b,"script")},getJSON:function(a,b,d){return c.get(a,b,d,"json")},post:function(a,b,d,f){if(c.isFunction(b)){f=f||d;d=b;b={}}return c.ajax({type:"POST",url:a,data:b,success:d,dataType:f})},ajaxSetup:function(a){c.extend(c.ajaxSettings,a)},ajaxSettings:{url:location.href,
global:true,type:"GET",contentType:"application/x-www-form-urlencoded",processData:true,async:true,xhr:A.XMLHttpRequest&&(A.location.protocol!=="file:"||!A.ActiveXObject)?function(){return new A.XMLHttpRequest}:function(){try{return new A.ActiveXObject("Microsoft.XMLHTTP")}catch(a){}},accepts:{xml:"application/xml, text/xml",html:"text/html",script:"text/javascript, application/javascript",json:"application/json, text/javascript",text:"text/plain",_default:"*/*"}},lastModified:{},etag:{},ajax:function(a){function b(){e.success&&
e.success.call(k,o,i,x);e.global&&f("ajaxSuccess",[x,e])}function d(){e.complete&&e.complete.call(k,x,i);e.global&&f("ajaxComplete",[x,e]);e.global&&!--c.active&&c.event.trigger("ajaxStop")}function f(q,p){(e.context?c(e.context):c.event).trigger(q,p)}var e=c.extend(true,{},c.ajaxSettings,a),j,i,o,k=a&&a.context||e,n=e.type.toUpperCase();if(e.data&&e.processData&&typeof e.data!=="string")e.data=c.param(e.data,e.traditional);if(e.dataType==="jsonp"){if(n==="GET")N.test(e.url)||(e.url+=(ka.test(e.url)?
"&":"?")+(e.jsonp||"callback")+"=?");else if(!e.data||!N.test(e.data))e.data=(e.data?e.data+"&":"")+(e.jsonp||"callback")+"=?";e.dataType="json"}if(e.dataType==="json"&&(e.data&&N.test(e.data)||N.test(e.url))){j=e.jsonpCallback||"jsonp"+sb++;if(e.data)e.data=(e.data+"").replace(N,"="+j+"$1");e.url=e.url.replace(N,"="+j+"$1");e.dataType="script";A[j]=A[j]||function(q){o=q;b();d();A[j]=w;try{delete A[j]}catch(p){}z&&z.removeChild(C)}}if(e.dataType==="script"&&e.cache===null)e.cache=false;if(e.cache===
false&&n==="GET"){var r=J(),u=e.url.replace(wb,"$1_="+r+"$2");e.url=u+(u===e.url?(ka.test(e.url)?"&":"?")+"_="+r:"")}if(e.data&&n==="GET")e.url+=(ka.test(e.url)?"&":"?")+e.data;e.global&&!c.active++&&c.event.trigger("ajaxStart");r=(r=xb.exec(e.url))&&(r[1]&&r[1]!==location.protocol||r[2]!==location.host);if(e.dataType==="script"&&n==="GET"&&r){var z=s.getElementsByTagName("head")[0]||s.documentElement,C=s.createElement("script");C.src=e.url;if(e.scriptCharset)C.charset=e.scriptCharset;if(!j){var B=
false;C.onload=C.onreadystatechange=function(){if(!B&&(!this.readyState||this.readyState==="loaded"||this.readyState==="complete")){B=true;b();d();C.onload=C.onreadystatechange=null;z&&C.parentNode&&z.removeChild(C)}}}z.insertBefore(C,z.firstChild);return w}var E=false,x=e.xhr();if(x){e.username?x.open(n,e.url,e.async,e.username,e.password):x.open(n,e.url,e.async);try{if(e.data||a&&a.contentType)x.setRequestHeader("Content-Type",e.contentType);if(e.ifModified){c.lastModified[e.url]&&x.setRequestHeader("If-Modified-Since",
c.lastModified[e.url]);c.etag[e.url]&&x.setRequestHeader("If-None-Match",c.etag[e.url])}r||x.setRequestHeader("X-Requested-With","XMLHttpRequest");x.setRequestHeader("Accept",e.dataType&&e.accepts[e.dataType]?e.accepts[e.dataType]+", */*":e.accepts._default)}catch(ga){}if(e.beforeSend&&e.beforeSend.call(k,x,e)===false){e.global&&!--c.active&&c.event.trigger("ajaxStop");x.abort();return false}e.global&&f("ajaxSend",[x,e]);var g=x.onreadystatechange=function(q){if(!x||x.readyState===0||q==="abort"){E||
d();E=true;if(x)x.onreadystatechange=c.noop}else if(!E&&x&&(x.readyState===4||q==="timeout")){E=true;x.onreadystatechange=c.noop;i=q==="timeout"?"timeout":!c.httpSuccess(x)?"error":e.ifModified&&c.httpNotModified(x,e.url)?"notmodified":"success";var p;if(i==="success")try{o=c.httpData(x,e.dataType,e)}catch(v){i="parsererror";p=v}if(i==="success"||i==="notmodified")j||b();else c.handleError(e,x,i,p);d();q==="timeout"&&x.abort();if(e.async)x=null}};try{var h=x.abort;x.abort=function(){x&&h.call(x);
g("abort")}}catch(l){}e.async&&e.timeout>0&&setTimeout(function(){x&&!E&&g("timeout")},e.timeout);try{x.send(n==="POST"||n==="PUT"||n==="DELETE"?e.data:null)}catch(m){c.handleError(e,x,null,m);d()}e.async||g();return x}},handleError:function(a,b,d,f){if(a.error)a.error.call(a.context||a,b,d,f);if(a.global)(a.context?c(a.context):c.event).trigger("ajaxError",[b,a,f])},active:0,httpSuccess:function(a){try{return!a.status&&location.protocol==="file:"||a.status>=200&&a.status<300||a.status===304||a.status===
1223||a.status===0}catch(b){}return false},httpNotModified:function(a,b){var d=a.getResponseHeader("Last-Modified"),f=a.getResponseHeader("Etag");if(d)c.lastModified[b]=d;if(f)c.etag[b]=f;return a.status===304||a.status===0},httpData:function(a,b,d){var f=a.getResponseHeader("content-type")||"",e=b==="xml"||!b&&f.indexOf("xml")>=0;a=e?a.responseXML:a.responseText;e&&a.documentElement.nodeName==="parsererror"&&c.error("parsererror");if(d&&d.dataFilter)a=d.dataFilter(a,b);if(typeof a==="string")if(b===
"json"||!b&&f.indexOf("json")>=0)a=c.parseJSON(a);else if(b==="script"||!b&&f.indexOf("javascript")>=0)c.globalEval(a);return a},param:function(a,b){function d(i,o){if(c.isArray(o))c.each(o,function(k,n){b||/\[\]$/.test(i)?f(i,n):d(i+"["+(typeof n==="object"||c.isArray(n)?k:"")+"]",n)});else!b&&o!=null&&typeof o==="object"?c.each(o,function(k,n){d(i+"["+k+"]",n)}):f(i,o)}function f(i,o){o=c.isFunction(o)?o():o;e[e.length]=encodeURIComponent(i)+"="+encodeURIComponent(o)}var e=[];if(b===w)b=c.ajaxSettings.traditional;
if(c.isArray(a)||a.jquery)c.each(a,function(){f(this.name,this.value)});else for(var j in a)d(j,a[j]);return e.join("&").replace(yb,"+")}});var la={},Ab=/toggle|show|hide/,Bb=/^([+-]=)?([\d+-.]+)(.*)$/,W,va=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];c.fn.extend({show:function(a,b){if(a||a===0)return this.animate(K("show",3),a,b);else{a=0;for(b=this.length;a<b;a++){var d=c.data(this[a],"olddisplay");
this[a].style.display=d||"";if(c.css(this[a],"display")==="none"){d=this[a].nodeName;var f;if(la[d])f=la[d];else{var e=c("<"+d+" />").appendTo("body");f=e.css("display");if(f==="none")f="block";e.remove();la[d]=f}c.data(this[a],"olddisplay",f)}}a=0;for(b=this.length;a<b;a++)this[a].style.display=c.data(this[a],"olddisplay")||"";return this}},hide:function(a,b){if(a||a===0)return this.animate(K("hide",3),a,b);else{a=0;for(b=this.length;a<b;a++){var d=c.data(this[a],"olddisplay");!d&&d!=="none"&&c.data(this[a],
"olddisplay",c.css(this[a],"display"))}a=0;for(b=this.length;a<b;a++)this[a].style.display="none";return this}},_toggle:c.fn.toggle,toggle:function(a,b){var d=typeof a==="boolean";if(c.isFunction(a)&&c.isFunction(b))this._toggle.apply(this,arguments);else a==null||d?this.each(function(){var f=d?a:c(this).is(":hidden");c(this)[f?"show":"hide"]()}):this.animate(K("toggle",3),a,b);return this},fadeTo:function(a,b,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,d)},
animate:function(a,b,d,f){var e=c.speed(b,d,f);if(c.isEmptyObject(a))return this.each(e.complete);return this[e.queue===false?"each":"queue"](function(){var j=c.extend({},e),i,o=this.nodeType===1&&c(this).is(":hidden"),k=this;for(i in a){var n=i.replace(ia,ja);if(i!==n){a[n]=a[i];delete a[i];i=n}if(a[i]==="hide"&&o||a[i]==="show"&&!o)return j.complete.call(this);if((i==="height"||i==="width")&&this.style){j.display=c.css(this,"display");j.overflow=this.style.overflow}if(c.isArray(a[i])){(j.specialEasing=
j.specialEasing||{})[i]=a[i][1];a[i]=a[i][0]}}if(j.overflow!=null)this.style.overflow="hidden";j.curAnim=c.extend({},a);c.each(a,function(r,u){var z=new c.fx(k,j,r);if(Ab.test(u))z[u==="toggle"?o?"show":"hide":u](a);else{var C=Bb.exec(u),B=z.cur(true)||0;if(C){u=parseFloat(C[2]);var E=C[3]||"px";if(E!=="px"){k.style[r]=(u||1)+E;B=(u||1)/z.cur(true)*B;k.style[r]=B+E}if(C[1])u=(C[1]==="-="?-1:1)*u+B;z.custom(B,u,E)}else z.custom(B,u,"")}});return true})},stop:function(a,b){var d=c.timers;a&&this.queue([]);
this.each(function(){for(var f=d.length-1;f>=0;f--)if(d[f].elem===this){b&&d[f](true);d.splice(f,1)}});b||this.dequeue();return this}});c.each({slideDown:K("show",1),slideUp:K("hide",1),slideToggle:K("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"}},function(a,b){c.fn[a]=function(d,f){return this.animate(b,d,f)}});c.extend({speed:function(a,b,d){var f=a&&typeof a==="object"?a:{complete:d||!d&&b||c.isFunction(a)&&a,duration:a,easing:d&&b||b&&!c.isFunction(b)&&b};f.duration=c.fx.off?0:typeof f.duration===
"number"?f.duration:c.fx.speeds[f.duration]||c.fx.speeds._default;f.old=f.complete;f.complete=function(){f.queue!==false&&c(this).dequeue();c.isFunction(f.old)&&f.old.call(this)};return f},easing:{linear:function(a,b,d,f){return d+f*a},swing:function(a,b,d,f){return(-Math.cos(a*Math.PI)/2+0.5)*f+d}},timers:[],fx:function(a,b,d){this.options=b;this.elem=a;this.prop=d;if(!b.orig)b.orig={}}});c.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this);(c.fx.step[this.prop]||
c.fx.step._default)(this);if((this.prop==="height"||this.prop==="width")&&this.elem.style)this.elem.style.display="block"},cur:function(a){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];return(a=parseFloat(c.css(this.elem,this.prop,a)))&&a>-10000?a:parseFloat(c.curCSS(this.elem,this.prop))||0},custom:function(a,b,d){function f(j){return e.step(j)}this.startTime=J();this.start=a;this.end=b;this.unit=d||this.unit||"px";this.now=this.start;
this.pos=this.state=0;var e=this;f.elem=this.elem;if(f()&&c.timers.push(f)&&!W)W=setInterval(c.fx.tick,13)},show:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.show=true;this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur());c(this.elem).show()},hide:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.hide=true;this.custom(this.cur(),0)},step:function(a){var b=J(),d=true;if(a||b>=this.options.duration+this.startTime){this.now=
this.end;this.pos=this.state=1;this.update();this.options.curAnim[this.prop]=true;for(var f in this.options.curAnim)if(this.options.curAnim[f]!==true)d=false;if(d){if(this.options.display!=null){this.elem.style.overflow=this.options.overflow;a=c.data(this.elem,"olddisplay");this.elem.style.display=a?a:this.options.display;if(c.css(this.elem,"display")==="none")this.elem.style.display="block"}this.options.hide&&c(this.elem).hide();if(this.options.hide||this.options.show)for(var e in this.options.curAnim)c.style(this.elem,
e,this.options.orig[e]);this.options.complete.call(this.elem)}return false}else{e=b-this.startTime;this.state=e/this.options.duration;a=this.options.easing||(c.easing.swing?"swing":"linear");this.pos=c.easing[this.options.specialEasing&&this.options.specialEasing[this.prop]||a](this.state,e,0,1,this.options.duration);this.now=this.start+(this.end-this.start)*this.pos;this.update()}return true}};c.extend(c.fx,{tick:function(){for(var a=c.timers,b=0;b<a.length;b++)a[b]()||a.splice(b--,1);a.length||
c.fx.stop()},stop:function(){clearInterval(W);W=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){c.style(a.elem,"opacity",a.now)},_default:function(a){if(a.elem.style&&a.elem.style[a.prop]!=null)a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit;else a.elem[a.prop]=a.now}}});if(c.expr&&c.expr.filters)c.expr.filters.animated=function(a){return c.grep(c.timers,function(b){return a===b.elem}).length};c.fn.offset="getBoundingClientRect"in s.documentElement?
function(a){var b=this[0];if(a)return this.each(function(e){c.offset.setOffset(this,a,e)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return c.offset.bodyOffset(b);var d=b.getBoundingClientRect(),f=b.ownerDocument;b=f.body;f=f.documentElement;return{top:d.top+(self.pageYOffset||c.support.boxModel&&f.scrollTop||b.scrollTop)-(f.clientTop||b.clientTop||0),left:d.left+(self.pageXOffset||c.support.boxModel&&f.scrollLeft||b.scrollLeft)-(f.clientLeft||b.clientLeft||0)}}:function(a){var b=
this[0];if(a)return this.each(function(r){c.offset.setOffset(this,a,r)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return c.offset.bodyOffset(b);c.offset.initialize();var d=b.offsetParent,f=b,e=b.ownerDocument,j,i=e.documentElement,o=e.body;f=(e=e.defaultView)?e.getComputedStyle(b,null):b.currentStyle;for(var k=b.offsetTop,n=b.offsetLeft;(b=b.parentNode)&&b!==o&&b!==i;){if(c.offset.supportsFixedPosition&&f.position==="fixed")break;j=e?e.getComputedStyle(b,null):b.currentStyle;
k-=b.scrollTop;n-=b.scrollLeft;if(b===d){k+=b.offsetTop;n+=b.offsetLeft;if(c.offset.doesNotAddBorder&&!(c.offset.doesAddBorderForTableAndCells&&/^t(able|d|h)$/i.test(b.nodeName))){k+=parseFloat(j.borderTopWidth)||0;n+=parseFloat(j.borderLeftWidth)||0}f=d;d=b.offsetParent}if(c.offset.subtractsBorderForOverflowNotVisible&&j.overflow!=="visible"){k+=parseFloat(j.borderTopWidth)||0;n+=parseFloat(j.borderLeftWidth)||0}f=j}if(f.position==="relative"||f.position==="static"){k+=o.offsetTop;n+=o.offsetLeft}if(c.offset.supportsFixedPosition&&
f.position==="fixed"){k+=Math.max(i.scrollTop,o.scrollTop);n+=Math.max(i.scrollLeft,o.scrollLeft)}return{top:k,left:n}};c.offset={initialize:function(){var a=s.body,b=s.createElement("div"),d,f,e,j=parseFloat(c.curCSS(a,"marginTop",true))||0;c.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"});b.innerHTML="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
a.insertBefore(b,a.firstChild);d=b.firstChild;f=d.firstChild;e=d.nextSibling.firstChild.firstChild;this.doesNotAddBorder=f.offsetTop!==5;this.doesAddBorderForTableAndCells=e.offsetTop===5;f.style.position="fixed";f.style.top="20px";this.supportsFixedPosition=f.offsetTop===20||f.offsetTop===15;f.style.position=f.style.top="";d.style.overflow="hidden";d.style.position="relative";this.subtractsBorderForOverflowNotVisible=f.offsetTop===-5;this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==j;a.removeChild(b);
c.offset.initialize=c.noop},bodyOffset:function(a){var b=a.offsetTop,d=a.offsetLeft;c.offset.initialize();if(c.offset.doesNotIncludeMarginInBodyOffset){b+=parseFloat(c.curCSS(a,"marginTop",true))||0;d+=parseFloat(c.curCSS(a,"marginLeft",true))||0}return{top:b,left:d}},setOffset:function(a,b,d){if(/static/.test(c.curCSS(a,"position")))a.style.position="relative";var f=c(a),e=f.offset(),j=parseInt(c.curCSS(a,"top",true),10)||0,i=parseInt(c.curCSS(a,"left",true),10)||0;if(c.isFunction(b))b=b.call(a,
d,e);d={top:b.top-e.top+j,left:b.left-e.left+i};"using"in b?b.using.call(a,d):f.css(d)}};c.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),d=this.offset(),f=/^body|html$/i.test(b[0].nodeName)?{top:0,left:0}:b.offset();d.top-=parseFloat(c.curCSS(a,"marginTop",true))||0;d.left-=parseFloat(c.curCSS(a,"marginLeft",true))||0;f.top+=parseFloat(c.curCSS(b[0],"borderTopWidth",true))||0;f.left+=parseFloat(c.curCSS(b[0],"borderLeftWidth",true))||0;return{top:d.top-
f.top,left:d.left-f.left}},offsetParent:function(){return this.map(function(){for(var a=this.offsetParent||s.body;a&&!/^body|html$/i.test(a.nodeName)&&c.css(a,"position")==="static";)a=a.offsetParent;return a})}});c.each(["Left","Top"],function(a,b){var d="scroll"+b;c.fn[d]=function(f){var e=this[0],j;if(!e)return null;if(f!==w)return this.each(function(){if(j=wa(this))j.scrollTo(!a?f:c(j).scrollLeft(),a?f:c(j).scrollTop());else this[d]=f});else return(j=wa(e))?"pageXOffset"in j?j[a?"pageYOffset":
"pageXOffset"]:c.support.boxModel&&j.document.documentElement[d]||j.document.body[d]:e[d]}});c.each(["Height","Width"],function(a,b){var d=b.toLowerCase();c.fn["inner"+b]=function(){return this[0]?c.css(this[0],d,false,"padding"):null};c.fn["outer"+b]=function(f){return this[0]?c.css(this[0],d,false,f?"margin":"border"):null};c.fn[d]=function(f){var e=this[0];if(!e)return f==null?null:this;if(c.isFunction(f))return this.each(function(j){var i=c(this);i[d](f.call(this,j,i[d]()))});return"scrollTo"in
e&&e.document?e.document.compatMode==="CSS1Compat"&&e.document.documentElement["client"+b]||e.document.body["client"+b]:e.nodeType===9?Math.max(e.documentElement["client"+b],e.body["scroll"+b],e.documentElement["scroll"+b],e.body["offset"+b],e.documentElement["offset"+b]):f===w?c.css(e,d):this.css(d,typeof f==="string"?f:f+"px")}});A.jQuery=A.$=c})(window);

/* Copyright (c) 2006 Brandon Aaron (http://brandonaaron.net)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * $LastChangedDate: 2007-07-21 18:45:56 -0500 (Sat, 21 Jul 2007) $
 * $Rev: 2447 $
 *
 * Version 2.1.1
 */
(function($){$.fn.bgIframe=$.fn.bgiframe=function(s){if($.browser.msie&&/6.0/.test(navigator.userAgent)){s=$.extend({top:'auto',left:'auto',width:'auto',height:'auto',opacity:true,src:'javascript:false;'},s||{});var prop=function(n){return n&&n.constructor==Number?n+'px':n;},html='<iframe class="bgiframe"frameborder="0"tabindex="-1"src="'+s.src+'"'+'style="display:block;position:absolute;z-index:-1;'+(s.opacity!==false?'filter:Alpha(Opacity=\'0\');':'')+'top:'+(s.top=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderTopWidth)||0)*-1)+\'px\')':prop(s.top))+';'+'left:'+(s.left=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderLeftWidth)||0)*-1)+\'px\')':prop(s.left))+';'+'width:'+(s.width=='auto'?'expression(this.parentNode.offsetWidth+\'px\')':prop(s.width))+';'+'height:'+(s.height=='auto'?'expression(this.parentNode.offsetHeight+\'px\')':prop(s.height))+';'+'"/>';return this.each(function(){if($('> iframe.bgiframe',this).length==0)this.insertBefore(document.createElement(html),this.firstChild);});}return this;};})(jQuery);

/**
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * (C) 2008 Syronex / J.M. Rosengard
 * http://www.syronex.com/software/jquery-color-picker
 *
 * - Check mark is either black or white, depending on the darkness 
 *   of the color selected.
 * - Fixed a bug in the original plugin that led to problems when there is 
 *   more than one colorPicker in a document.
 *
 * This is based on: 
 *
 * jQuery colorSelect plugin 0.9
 * http://plugins.jquery.com/project/colorPickerAgain
 * Copyright (c) 2008 Otaku RzO (Renzo Galo Castro Jurado).
 * (Original author URL & domain name no longer available.)
 *
 */


(function(a){a.fn.colorPicker=function(j){var h=a.extend({},{color:new Array("#FFFFFF","#EEEEEE","#FFFF88","#FF7400","#CDEB8B","#6BBA70","#006E2E","#C3D9FF","#4096EE","#356AA0","#FF0096","#B02B2C","#000000"),defaultColor:0,columns:0,click:function(){}},j);return this.each(function(){var d=a(this),b=a.meta?a.extend({},h,d.data()):h,c=typeof b.defaultColor=="number"?b.defaultColor:-1,e="";for(i=0;i<b.color.length;i++){e+='<div style="background-color:'+b.color[i]+';"></div>';if(c==-1&&b.defaultColor==
b.color[i])c=i}d.html('<div class="jColorSelect">'+e+"</div>");var g=d.children(".jColorSelect").children("div");e=17*(b.columns>0?b.columns:b.color.length);d.children(".jColorSelect").css("width",e);g.each(function(f){a(this).click(function(){if(c!=f){if(c>-1){cell=g.eq(c);cell.hasClass("check")&&cell.removeClass("check").removeClass("checkwht").removeClass("checkblk")}c=f;a(this).addClass("check").addClass(isdark(b.color[f])?"checkwht":"checkblk");b.click(b.color[f])}})});_tmp=c;c=-1;g.eq(_tmp).trigger("click")})}})(jQuery);
function isdark(a){a=parseInt(a.substr(1),16);return(a>>>16)+(a>>>8&255)+(a&255)<500};




var SWFUpload;SWFUpload==void 0&&(SWFUpload=function(a){this.initSWFUpload(a)});SWFUpload.prototype.initSWFUpload=function(a){try{this.customSettings={},this.settings=a,this.eventQueue=[],this.movieName="SWFUpload_"+SWFUpload.movieCount++,this.movieElement=null,SWFUpload.instances[this.movieName]=this,this.initSettings(),this.loadFlash(),this.displayDebugInfo()}catch(b){throw delete SWFUpload.instances[this.movieName],b;}};SWFUpload.instances={};SWFUpload.movieCount=0;SWFUpload.version="2.2.0 2009-03-25";
SWFUpload.QUEUE_ERROR={QUEUE_LIMIT_EXCEEDED:-100,FILE_EXCEEDS_SIZE_LIMIT:-110,ZERO_BYTE_FILE:-120,INVALID_FILETYPE:-130};SWFUpload.UPLOAD_ERROR={HTTP_ERROR:-200,MISSING_UPLOAD_URL:-210,IO_ERROR:-220,SECURITY_ERROR:-230,UPLOAD_LIMIT_EXCEEDED:-240,UPLOAD_FAILED:-250,SPECIFIED_FILE_ID_NOT_FOUND:-260,FILE_VALIDATION_FAILED:-270,FILE_CANCELLED:-280,UPLOAD_STOPPED:-290};SWFUpload.FILE_STATUS={QUEUED:-1,IN_PROGRESS:-2,ERROR:-3,COMPLETE:-4,CANCELLED:-5};
SWFUpload.BUTTON_ACTION={SELECT_FILE:-100,SELECT_FILES:-110,START_UPLOAD:-120};SWFUpload.CURSOR={ARROW:-1,HAND:-2};SWFUpload.WINDOW_MODE={WINDOW:"window",TRANSPARENT:"transparent",OPAQUE:"opaque"};SWFUpload.completeURL=function(a){if(typeof a!=="string"||a.match(/^https?:\/\//i)||a.match(/^\//))return a;var b=window.location.pathname.lastIndexOf("/");path=b<=0?"/":window.location.pathname.substr(0,b)+"/";return path+a};
SWFUpload.prototype.initSettings=function(){this.ensureDefault=function(a,b){this.settings[a]=this.settings[a]==void 0?b:this.settings[a]};this.ensureDefault("upload_url","");this.ensureDefault("preserve_relative_urls",!1);this.ensureDefault("file_post_name","Filedata");this.ensureDefault("post_params",{});this.ensureDefault("use_query_string",!1);this.ensureDefault("requeue_on_error",!1);this.ensureDefault("http_success",[]);this.ensureDefault("assume_success_timeout",0);this.ensureDefault("file_types",
"*.*");this.ensureDefault("file_types_description","All Files");this.ensureDefault("file_size_limit",0);this.ensureDefault("file_upload_limit",0);this.ensureDefault("file_queue_limit",0);this.ensureDefault("flash_url","swfupload.swf");this.ensureDefault("prevent_swf_caching",!0);this.ensureDefault("button_image_url","");this.ensureDefault("button_width",1);this.ensureDefault("button_height",1);this.ensureDefault("button_text","");this.ensureDefault("button_text_style","color: #000000; font-size: 16pt;");
this.ensureDefault("button_text_top_padding",0);this.ensureDefault("button_text_left_padding",0);this.ensureDefault("button_action",SWFUpload.BUTTON_ACTION.SELECT_FILES);this.ensureDefault("button_disabled",!1);this.ensureDefault("button_placeholder_id","");this.ensureDefault("button_placeholder",null);this.ensureDefault("button_cursor",SWFUpload.CURSOR.ARROW);this.ensureDefault("button_window_mode",SWFUpload.WINDOW_MODE.WINDOW);this.ensureDefault("debug",!1);this.settings.debug_enabled=this.settings.debug;
this.settings.return_upload_start_handler=this.returnUploadStart;this.ensureDefault("swfupload_loaded_handler",null);this.ensureDefault("file_dialog_start_handler",null);this.ensureDefault("file_queued_handler",null);this.ensureDefault("file_queue_error_handler",null);this.ensureDefault("file_dialog_complete_handler",null);this.ensureDefault("upload_start_handler",null);this.ensureDefault("upload_progress_handler",null);this.ensureDefault("upload_error_handler",null);this.ensureDefault("upload_success_handler",
null);this.ensureDefault("upload_complete_handler",null);this.ensureDefault("debug_handler",this.debugMessage);this.ensureDefault("custom_settings",{});this.customSettings=this.settings.custom_settings;if(this.settings.prevent_swf_caching)this.settings.flash_url=this.settings.flash_url+(this.settings.flash_url.indexOf("?")<0?"?":"&")+"preventswfcaching="+(new Date).getTime();if(!this.settings.preserve_relative_urls)this.settings.upload_url=SWFUpload.completeURL(this.settings.upload_url),this.settings.button_image_url=
SWFUpload.completeURL(this.settings.button_image_url);delete this.ensureDefault};
SWFUpload.prototype.loadFlash=function(){var a,b;if(document.getElementById(this.movieName)!==null)throw"ID "+this.movieName+" is already in use. The Flash Object could not be added";a=document.getElementById(this.settings.button_placeholder_id)||this.settings.button_placeholder;if(a==void 0)throw"Could not find the placeholder element: "+this.settings.button_placeholder_id;b=document.createElement("div");b.innerHTML=this.getFlashHTML();a.parentNode.replaceChild(b.firstChild,a);window[this.movieName]==
void 0&&(window[this.movieName]=this.getMovieElement())};
SWFUpload.prototype.getFlashHTML=function(){return['<object id="',this.movieName,'" type="application/x-shockwave-flash" data="',this.settings.flash_url,'" width="',this.settings.button_width,'" height="',this.settings.button_height,'" class="swfupload"><param name="wmode" value="',this.settings.button_window_mode,'" /><param name="movie" value="',this.settings.flash_url,'" /><param name="quality" value="high" /><param name="menu" value="false" /><param name="allowScriptAccess" value="always" />','<param name="flashvars" value="'+
this.getFlashVars()+'" />',"</object>"].join("")};
SWFUpload.prototype.getFlashVars=function(){var a=this.buildParamString(),b=this.settings.http_success.join(",");return["movieName=",encodeURIComponent(this.movieName),"&amp;uploadURL=",encodeURIComponent(this.settings.upload_url),"&amp;useQueryString=",encodeURIComponent(this.settings.use_query_string),"&amp;requeueOnError=",encodeURIComponent(this.settings.requeue_on_error),"&amp;httpSuccess=",encodeURIComponent(b),"&amp;assumeSuccessTimeout=",encodeURIComponent(this.settings.assume_success_timeout),"&amp;params=",
encodeURIComponent(a),"&amp;filePostName=",encodeURIComponent(this.settings.file_post_name),"&amp;fileTypes=",encodeURIComponent(this.settings.file_types),"&amp;fileTypesDescription=",encodeURIComponent(this.settings.file_types_description),"&amp;fileSizeLimit=",encodeURIComponent(this.settings.file_size_limit),"&amp;fileUploadLimit=",encodeURIComponent(this.settings.file_upload_limit),"&amp;fileQueueLimit=",encodeURIComponent(this.settings.file_queue_limit),"&amp;debugEnabled=",encodeURIComponent(this.settings.debug_enabled),
"&amp;buttonImageURL=",encodeURIComponent(this.settings.button_image_url),"&amp;buttonWidth=",encodeURIComponent(this.settings.button_width),"&amp;buttonHeight=",encodeURIComponent(this.settings.button_height),"&amp;buttonText=",encodeURIComponent(this.settings.button_text),"&amp;buttonTextTopPadding=",encodeURIComponent(this.settings.button_text_top_padding),"&amp;buttonTextLeftPadding=",encodeURIComponent(this.settings.button_text_left_padding),"&amp;buttonTextStyle=",encodeURIComponent(this.settings.button_text_style),
"&amp;buttonAction=",encodeURIComponent(this.settings.button_action),"&amp;buttonDisabled=",encodeURIComponent(this.settings.button_disabled),"&amp;buttonCursor=",encodeURIComponent(this.settings.button_cursor)].join("")};SWFUpload.prototype.getMovieElement=function(){if(this.movieElement==void 0)this.movieElement=document.getElementById(this.movieName);if(this.movieElement===null)throw"Could not find Flash element";return this.movieElement};
SWFUpload.prototype.buildParamString=function(){var a=this.settings.post_params,b=[];if(typeof a==="object")for(var c in a)a.hasOwnProperty(c)&&b.push(encodeURIComponent(c.toString())+"="+encodeURIComponent(a[c].toString()));return b.join("&amp;")};
SWFUpload.prototype.destroy=function(){try{this.cancelUpload(null,!1);var a=null;if((a=this.getMovieElement())&&typeof a.CallFunction==="unknown"){for(var b in a)try{typeof a[b]==="function"&&(a[b]=null)}catch(c){}try{a.parentNode.removeChild(a)}catch(d){}}window[this.movieName]=null;SWFUpload.instances[this.movieName]=null;delete SWFUpload.instances[this.movieName];this.movieName=this.eventQueue=this.customSettings=this.settings=this.movieElement=null;return!0}catch(e){return!1}};
SWFUpload.prototype.displayDebugInfo=function(){this.debug(["---SWFUpload Instance Info---\nVersion: ",SWFUpload.version,"\nMovie Name: ",this.movieName,"\nSettings:\n\tupload_url:               ",this.settings.upload_url,"\n\tflash_url:                ",this.settings.flash_url,"\n\tuse_query_string:         ",this.settings.use_query_string.toString(),"\n\trequeue_on_error:         ",this.settings.requeue_on_error.toString(),"\n\thttp_success:             ",this.settings.http_success.join(", "),"\n\tassume_success_timeout:   ",
this.settings.assume_success_timeout,"\n\tfile_post_name:           ",this.settings.file_post_name,"\n\tpost_params:              ",this.settings.post_params.toString(),"\n\tfile_types:               ",this.settings.file_types,"\n\tfile_types_description:   ",this.settings.file_types_description,"\n\tfile_size_limit:          ",this.settings.file_size_limit,"\n\tfile_upload_limit:        ",this.settings.file_upload_limit,"\n\tfile_queue_limit:         ",this.settings.file_queue_limit,"\n\tdebug:                    ",
this.settings.debug.toString(),"\n\tprevent_swf_caching:      ",this.settings.prevent_swf_caching.toString(),"\n\tbutton_placeholder_id:    ",this.settings.button_placeholder_id.toString(),"\n\tbutton_placeholder:       ",this.settings.button_placeholder?"Set":"Not Set","\n\tbutton_image_url:         ",this.settings.button_image_url.toString(),"\n\tbutton_width:             ",this.settings.button_width.toString(),"\n\tbutton_height:            ",this.settings.button_height.toString(),"\n\tbutton_text:              ",
this.settings.button_text.toString(),"\n\tbutton_text_style:        ",this.settings.button_text_style.toString(),"\n\tbutton_text_top_padding:  ",this.settings.button_text_top_padding.toString(),"\n\tbutton_text_left_padding: ",this.settings.button_text_left_padding.toString(),"\n\tbutton_action:            ",this.settings.button_action.toString(),"\n\tbutton_disabled:          ",this.settings.button_disabled.toString(),"\n\tcustom_settings:          ",this.settings.custom_settings.toString(),"\nEvent Handlers:\n\tswfupload_loaded_handler assigned:  ",
(typeof this.settings.swfupload_loaded_handler==="function").toString(),"\n\tfile_dialog_start_handler assigned: ",(typeof this.settings.file_dialog_start_handler==="function").toString(),"\n\tfile_queued_handler assigned:       ",(typeof this.settings.file_queued_handler==="function").toString(),"\n\tfile_queue_error_handler assigned:  ",(typeof this.settings.file_queue_error_handler==="function").toString(),"\n\tupload_start_handler assigned:      ",(typeof this.settings.upload_start_handler===
"function").toString(),"\n\tupload_progress_handler assigned:   ",(typeof this.settings.upload_progress_handler==="function").toString(),"\n\tupload_error_handler assigned:      ",(typeof this.settings.upload_error_handler==="function").toString(),"\n\tupload_success_handler assigned:    ",(typeof this.settings.upload_success_handler==="function").toString(),"\n\tupload_complete_handler assigned:   ",(typeof this.settings.upload_complete_handler==="function").toString(),"\n\tdebug_handler assigned:             ",
(typeof this.settings.debug_handler==="function").toString(),"\n"].join(""))};SWFUpload.prototype.addSetting=function(a,b,c){return b==void 0?this.settings[a]=c:this.settings[a]=b};SWFUpload.prototype.getSetting=function(a){return this.settings[a]!=void 0?this.settings[a]:""};
SWFUpload.prototype.callFlash=function(a,b){var b=b||[],c=this.getMovieElement(),d,e;try{e=c.CallFunction('<invoke name="'+a+'" returntype="javascript">'+__flash__argumentsToXML(b,0)+"</invoke>"),d=eval(e)}catch(f){throw"Call to "+a+" failed";}d!=void 0&&typeof d.post==="object"&&(d=this.unescapeFilePostParams(d));return d};SWFUpload.prototype.selectFile=function(){this.callFlash("SelectFile")};SWFUpload.prototype.selectFiles=function(){this.callFlash("SelectFiles")};
SWFUpload.prototype.startUpload=function(a){this.callFlash("StartUpload",[a])};SWFUpload.prototype.cancelUpload=function(a,b){b!==!1&&(b=!0);this.callFlash("CancelUpload",[a,b])};SWFUpload.prototype.stopUpload=function(){this.callFlash("StopUpload")};SWFUpload.prototype.getStats=function(){return this.callFlash("GetStats")};SWFUpload.prototype.setStats=function(a){this.callFlash("SetStats",[a])};
SWFUpload.prototype.getFile=function(a){return typeof a==="number"?this.callFlash("GetFileByIndex",[a]):this.callFlash("GetFile",[a])};SWFUpload.prototype.addFileParam=function(a,b,c){return this.callFlash("AddFileParam",[a,b,c])};SWFUpload.prototype.removeFileParam=function(a,b){this.callFlash("RemoveFileParam",[a,b])};SWFUpload.prototype.setUploadURL=function(a){this.settings.upload_url=a.toString();this.callFlash("SetUploadURL",[a])};
SWFUpload.prototype.setPostParams=function(a){this.settings.post_params=a;this.callFlash("SetPostParams",[a])};SWFUpload.prototype.addPostParam=function(a,b){this.settings.post_params[a]=b;this.callFlash("SetPostParams",[this.settings.post_params])};SWFUpload.prototype.removePostParam=function(a){delete this.settings.post_params[a];this.callFlash("SetPostParams",[this.settings.post_params])};
SWFUpload.prototype.setFileTypes=function(a,b){this.settings.file_types=a;this.settings.file_types_description=b;this.callFlash("SetFileTypes",[a,b])};SWFUpload.prototype.setFileSizeLimit=function(a){this.settings.file_size_limit=a;this.callFlash("SetFileSizeLimit",[a])};SWFUpload.prototype.setFileUploadLimit=function(a){this.settings.file_upload_limit=a;this.callFlash("SetFileUploadLimit",[a])};
SWFUpload.prototype.setFileQueueLimit=function(a){this.settings.file_queue_limit=a;this.callFlash("SetFileQueueLimit",[a])};SWFUpload.prototype.setFilePostName=function(a){this.settings.file_post_name=a;this.callFlash("SetFilePostName",[a])};SWFUpload.prototype.setUseQueryString=function(a){this.settings.use_query_string=a;this.callFlash("SetUseQueryString",[a])};SWFUpload.prototype.setRequeueOnError=function(a){this.settings.requeue_on_error=a;this.callFlash("SetRequeueOnError",[a])};
SWFUpload.prototype.setHTTPSuccess=function(a){typeof a==="string"&&(a=a.replace(" ","").split(","));this.settings.http_success=a;this.callFlash("SetHTTPSuccess",[a])};SWFUpload.prototype.setAssumeSuccessTimeout=function(a){this.settings.assume_success_timeout=a;this.callFlash("SetAssumeSuccessTimeout",[a])};SWFUpload.prototype.setDebugEnabled=function(a){this.settings.debug_enabled=a;this.callFlash("SetDebugEnabled",[a])};
SWFUpload.prototype.setButtonImageURL=function(a){a==void 0&&(a="");this.settings.button_image_url=a;this.callFlash("SetButtonImageURL",[a])};SWFUpload.prototype.setButtonDimensions=function(a,b){this.settings.button_width=a;this.settings.button_height=b;var c=this.getMovieElement();if(c!=void 0)c.style.width=a+"px",c.style.height=b+"px";this.callFlash("SetButtonDimensions",[a,b])};SWFUpload.prototype.setButtonText=function(a){this.settings.button_text=a;this.callFlash("SetButtonText",[a])};
SWFUpload.prototype.setButtonTextPadding=function(a,b){this.settings.button_text_top_padding=b;this.settings.button_text_left_padding=a;this.callFlash("SetButtonTextPadding",[a,b])};SWFUpload.prototype.setButtonTextStyle=function(a){this.settings.button_text_style=a;this.callFlash("SetButtonTextStyle",[a])};SWFUpload.prototype.setButtonDisabled=function(a){this.settings.button_disabled=a;this.callFlash("SetButtonDisabled",[a])};
SWFUpload.prototype.setButtonAction=function(a){this.settings.button_action=a;this.callFlash("SetButtonAction",[a])};SWFUpload.prototype.setButtonCursor=function(a){this.settings.button_cursor=a;this.callFlash("SetButtonCursor",[a])};
SWFUpload.prototype.queueEvent=function(a,b){b==void 0?b=[]:b instanceof Array||(b=[b]);var c=this;if(typeof this.settings[a]==="function")this.eventQueue.push(function(){this.settings[a].apply(this,b)}),setTimeout(function(){c.executeNextEvent()},0);else if(this.settings[a]!==null)throw"Event handler "+a+" is unknown or is not a function";};SWFUpload.prototype.executeNextEvent=function(){var a=this.eventQueue?this.eventQueue.shift():null;typeof a==="function"&&a.apply(this)};
SWFUpload.prototype.unescapeFilePostParams=function(a){var b=/[$]([0-9a-f]{4})/i,c={},d;if(a!=void 0){for(var e in a.post)if(a.post.hasOwnProperty(e)){d=e;for(var f;(f=b.exec(d))!==null;)d=d.replace(f[0],String.fromCharCode(parseInt("0x"+f[1],16)));c[d]=a.post[e]}a.post=c}return a};SWFUpload.prototype.testExternalInterface=function(){try{return this.callFlash("TestExternalInterface")}catch(a){return!1}};
SWFUpload.prototype.flashReady=function(){var a=this.getMovieElement();a?(this.cleanUp(a),this.queueEvent("swfupload_loaded_handler")):this.debug("Flash called back ready but the flash movie can't be found.")};
SWFUpload.prototype.cleanUp=function(a){try{if(this.movieElement&&typeof a.CallFunction==="unknown"){this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");for(var b in a)try{typeof a[b]==="function"&&(a[b]=null)}catch(c){}}}catch(d){}window.__flash__removeCallback=function(a,b){try{a&&(a[b]=null)}catch(c){}}};SWFUpload.prototype.fileDialogStart=function(){this.queueEvent("file_dialog_start_handler")};
SWFUpload.prototype.fileQueued=function(a){a=this.unescapeFilePostParams(a);this.queueEvent("file_queued_handler",a)};SWFUpload.prototype.fileQueueError=function(a,b,c){a=this.unescapeFilePostParams(a);this.queueEvent("file_queue_error_handler",[a,b,c])};SWFUpload.prototype.fileDialogComplete=function(a,b,c){this.queueEvent("file_dialog_complete_handler",[a,b,c])};SWFUpload.prototype.uploadStart=function(a){a=this.unescapeFilePostParams(a);this.queueEvent("return_upload_start_handler",a)};
SWFUpload.prototype.returnUploadStart=function(a){var b;if(typeof this.settings.upload_start_handler==="function")a=this.unescapeFilePostParams(a),b=this.settings.upload_start_handler.call(this,a);else if(this.settings.upload_start_handler!=void 0)throw"upload_start_handler must be a function";b===void 0&&(b=!0);this.callFlash("ReturnUploadStart",[!!b])};SWFUpload.prototype.uploadProgress=function(a,b,c){a=this.unescapeFilePostParams(a);this.queueEvent("upload_progress_handler",[a,b,c])};
SWFUpload.prototype.uploadError=function(a,b,c){a=this.unescapeFilePostParams(a);this.queueEvent("upload_error_handler",[a,b,c])};SWFUpload.prototype.uploadSuccess=function(a,b,c){a=this.unescapeFilePostParams(a);this.queueEvent("upload_success_handler",[a,b,c])};SWFUpload.prototype.uploadComplete=function(a){a=this.unescapeFilePostParams(a);this.queueEvent("upload_complete_handler",a)};SWFUpload.prototype.debug=function(a){this.queueEvent("debug_handler",a)};
SWFUpload.prototype.debugMessage=function(a){if(this.settings.debug){var b=[];if(typeof a==="object"&&typeof a.name==="string"&&typeof a.message==="string"){for(var c in a)a.hasOwnProperty(c)&&b.push(c+": "+a[c]);a=b.join("\n")||"";b=a.split("\n");a="EXCEPTION: "+b.join("\nEXCEPTION: ")}SWFUpload.Console.writeLine(a)}};SWFUpload.Console={};
SWFUpload.Console.writeLine=function(a){var b,c;try{b=document.getElementById("SWFUpload_Console");if(!b)c=document.createElement("form"),document.getElementsByTagName("body")[0].appendChild(c),b=document.createElement("textarea"),b.id="SWFUpload_Console",b.style.fontFamily="monospace",b.setAttribute("wrap","off"),b.wrap="off",b.style.overflow="auto",b.style.width="700px",b.style.height="350px",b.style.margin="5px",c.appendChild(b);b.value+=a+"\n";b.scrollTop=b.scrollHeight-b.clientHeight}catch(d){alert("Exception: "+
d.name+" Message: "+d.message)}};
(function(a){var b="swfupload_preload_handler,swfupload_load_failed_handler,swfupload_loaded_handler,file_dialog_start_handler,file_queued_handler,file_queue_error_handler,file_dialog_complete_handler,upload_resize_start_handler,upload_start_handler,upload_progress_handler,upload_error_handler,upload_success_handler,upload_complete_handler,mouse_click_handler,mouse_out_handler,mouse_over_handler,queue_complete_handler".split(","),c=[];a.fn.swfupload=function(){var d=a.makeArray(arguments);return this.each(function(){var e;
if(d.length==1&&typeof d[0]=="object"){if(e=a(this).data("__swfu"),!e){var f=d[0],h=a(this);e=[];a.merge(e,b);a.merge(e,c);a.each(e,function(b,c){var d=c.replace(/_handler$/,"").replace(/_([a-z])/g,function(a,b){return b.toUpperCase()});f[c]=function(){var b=a.Event(d);h.trigger(b,a.makeArray(arguments));return!b.isDefaultPrevented()}});a(this).data("__swfu",new SWFUpload(f))}}else if(d.length>0&&typeof d[0]=="string"){var g=d.shift();(e=a(this).data("__swfu"))&&e[g]&&e[g].apply(e,d)}})};a.swfupload=
{additionalHandlers:function(){if(arguments.length===0)return c.slice();else a(arguments).each(function(b,e){a.merge(c,a.makeArray(e))})},defaultHandlers:function(){return b.slice()},getInstance:function(b){return a(b).data("__swfu")}}})(jQuery);


//图片展示 源码在 js/jquery.lightbox-0.5.js 
(function(b){b.fn.imageBox=function(a){function m(){b("body").append('<div id="jquery-overlay"></div><div id="jquery-lightbox"><div id="lightbox-container-image-box"><div id="lightbox-container-image"><img id="lightbox-image"><div style="" id="lightbox-nav"><a href="#" id="lightbox-nav-btnPrev"></a><a href="#" id="lightbox-nav-btnNext"></a></div><div id="lightbox-loading"><a href="#" id="lightbox-loading-link"><img src="'+a.imageLoading+'"></a></div></div></div><div id="lightbox-container-image-data-box"><div id="lightbox-container-image-data"><div id="lightbox-image-details"><span id="lightbox-image-details-caption"></span><span id="lightbox-image-details-currentNumber"></span></div><div id="lightbox-secNav"><a href="#" id="lightbox-secNav-btnClose"><img src="'+
a.imageBtnClose+'"></a></div></div></div></div>');var c=i();b("#jquery-overlay").css({backgroundColor:a.overlayBgColor,opacity:a.overlayOpacity,width:c[0],height:c[1]}).fadeIn();var g=k();b("#jquery-lightbox").css({top:g[1]+c[3]/10,left:g[0]}).show();b("#jquery-overlay,#jquery-lightbox").click(function(){j()});b("#lightbox-loading-link,#lightbox-secNav-btnClose").click(function(){j();return!1});b(window).resize(function(){var a=i();b("#jquery-overlay").css({width:a[0],height:a[1]});var c=k();b("#jquery-lightbox").css({top:c[1]+
a[3]/10,left:c[0]})})}function f(){b("#lightbox-loading").show();a.fixedNavigation?b("#lightbox-image,#lightbox-container-image-data-box,#lightbox-image-details-currentNumber").hide():b("#lightbox-image,#lightbox-nav,#lightbox-nav-btnPrev,#lightbox-nav-btnNext,#lightbox-container-image-data-box,#lightbox-image-details-currentNumber").hide();var c=new Image;c.onload=function(){b("#lightbox-image").attr("src",a.imageArray[a.activeImage][0]);var g=c.width,d=c.height,e=i()[1]-150;d>e&&(g*=e/d,d=e);b("#lightbox-image").height(d);
n(g,d);c.onload=function(){}};c.src=a.imageArray[a.activeImage][0]}function n(c,g){var d=b("#lightbox-container-image-box").width(),e=b("#lightbox-container-image-box").height(),f=c+a.containerBorderSize*2,h=g+a.containerBorderSize*2;d-=f;e-=h;b("#lightbox-container-image-box").animate({width:f,height:h},a.containerResizeSpeed,function(){o()});d==0&&e==0&&(b.browser.msie?l(250):l(100));b("#lightbox-container-image-data-box").css({width:c});b("#lightbox-nav-btnPrev,#lightbox-nav-btnNext").css({height:g+
a.containerBorderSize*2})}function o(){b("#lightbox-loading").hide();b("#lightbox-image").fadeIn(function(){b("#lightbox-container-image-data-box").slideDown("fast");b("#lightbox-image-details-caption").hide();a.imageArray[a.activeImage][1]&&b("#lightbox-image-details-caption").html(a.imageArray[a.activeImage][1]).show();a.imageArray.length>1&&b("#lightbox-image-details-currentNumber").html(a.txtImage+" "+(a.activeImage+1)+" "+a.txtOf+" "+a.imageArray.length).show();p()});if(a.imageArray.length-1>
a.activeImage)objNext=new Image,objNext.src=a.imageArray[a.activeImage+1][0];if(a.activeImage>0)objPrev=new Image,objPrev.src=a.imageArray[a.activeImage-1][0]}function p(){b("#lightbox-nav").show();b("#lightbox-nav-btnPrev,#lightbox-nav-btnNext").css({background:"transparent url("+a.imageBlank+") no-repeat"});a.activeImage!=0&&(a.fixedNavigation?b("#lightbox-nav-btnPrev").css({background:"url("+a.imageBtnPrev+") left 15% no-repeat"}).unbind().bind("click",function(){a.activeImage-=1;f();return!1}):
b("#lightbox-nav-btnPrev").unbind().hover(function(){b(this).css({background:"url("+a.imageBtnPrev+") left 15% no-repeat"})},function(){b(this).css({background:"transparent url("+a.imageBlank+") no-repeat"})}).show().bind("click",function(){a.activeImage-=1;f();return!1}));a.activeImage!=a.imageArray.length-1&&(a.fixedNavigation?b("#lightbox-nav-btnNext").css({background:"url("+a.imageBtnNext+") right 15% no-repeat"}).unbind().bind("click",function(){a.activeImage+=1;f();return!1}):b("#lightbox-nav-btnNext").unbind().hover(function(){b(this).css({background:"url("+
a.imageBtnNext+") right 15% no-repeat"})},function(){b(this).css({background:"transparent url("+a.imageBlank+") no-repeat"})}).show().bind("click",function(){a.activeImage+=1;f();return!1}));q()}function q(){b(document).keydown(function(c){c==null?(keycode=event.keyCode,escapeKey=27):(keycode=c.keyCode,escapeKey=c.DOM_VK_ESCAPE);key=String.fromCharCode(keycode).toLowerCase();(key==a.keyToClose||key=="x"||keycode==escapeKey)&&j();if((key==a.keyToPrev||keycode==37)&&a.activeImage!=0)a.activeImage-=
1,f(),b(document).unbind();if((key==a.keyToNext||keycode==39)&&a.activeImage!=a.imageArray.length-1)a.activeImage+=1,f(),b(document).unbind()})}function j(){b("#jquery-lightbox").remove();b("#jquery-overlay").fadeOut(function(){b("#jquery-overlay").remove()});b("embed, object, select").css({visibility:"visible"})}function i(){var a,b;window.innerHeight&&window.scrollMaxY?(a=window.innerWidth+window.scrollMaxX,b=window.innerHeight+window.scrollMaxY):document.body.scrollHeight>document.body.offsetHeight?
(a=document.body.scrollWidth,b=document.body.scrollHeight):(a=document.body.offsetWidth,b=document.body.offsetHeight);var d,e;if(self.innerHeight)d=document.documentElement.clientWidth?document.documentElement.clientWidth:self.innerWidth,e=self.innerHeight;else if(document.documentElement&&document.documentElement.clientHeight)d=document.documentElement.clientWidth,e=document.documentElement.clientHeight;else if(document.body)d=document.body.clientWidth,e=document.body.clientHeight;pageHeight=b<e?
e:b;pageWidth=a<d?a:d;return arrayPageSize=[pageWidth,pageHeight,d,e]}function k(){var a,b;if(self.pageYOffset)b=self.pageYOffset,a=self.pageXOffset;else if(document.documentElement&&document.documentElement.scrollTop)b=document.documentElement.scrollTop,a=document.documentElement.scrollLeft;else if(document.body)b=document.body.scrollTop,a=document.body.scrollLeft;return arrayPageScroll=[a,b]}function l(a){var b=new Date;do var d=new Date;while(d-b<a)}var a=jQuery.extend({overlayBgColor:"#000",overlayOpacity:0.8,
fixedNavigation:!1,imageLoading:"http://img.mapbar.com/web/3in1/imgs/lightbox/loading.gif",imageBtnPrev:"http://img.mapbar.com/web/3in1/imgs/lightbox/btn-prev.gif",imageBtnNext:"http://img.mapbar.com/web/3in1/imgs/lightbox/btn-next.gif",imageBtnClose:"http://img.mapbar.com/web/3in1/imgs/lightbox/btn-close.gif",imageBlank:"http://img.mapbar.com/web/3in1/imgs/lightbox/blank.gif",containerBorderSize:10,containerResizeSpeed:400,txtImage:"",txtOf:"/",keyToClose:"c",keyToPrev:"p",keyToNext:"n",imageArray:[],
activeImage:0},a),h=this;return this.unbind("click").click(function(){b("embed, object, select").css({visibility:"hidden"});m();a.imageArray.length=0;a.activeImage=0;if(h.length==1)a.imageArray.push([this.getAttribute("href"),this.getAttribute("title")]);else for(var c=0;c<h.length;c++)a.imageArray.push([h[c].getAttribute("href"),h[c].getAttribute("title")]);for(;a.imageArray[a.activeImage][0]!=this.getAttribute("href");)a.activeImage++;f();return!1})}})(jQuery);

//中文字符串截取
function cut_str(str, len)
{
    if(!str || !len) { return ''; }
    //预期计数：中文2字节，英文1字节
    var a = 0;
    //临时字串
    var temp = '';
    for (var i=0;i<str.length;i++)
    {
        if (str.charCodeAt(i)>255)
        {
             a+=2;
        }else{
             a++;
        }
        //如果增加计数后长度大于限定长度，就直接返回临时字符串
        if(a > len) { return temp + '...'; }
        //将当前内容加到临时字符串
         temp += str.charAt(i);
    }
    //如果全部是单字节字符，就直接返回源字符串
    return str;
}
/*
 实现类创建，多继承 (注：只维护第一个父类的原型链)
 说明：子类有区别的继承父类的公开属性、方法及prototype属性和方法
 封装的方法和属性：
 obj.superClasses： Array类型 父类的引用数组
 obj.className： String类型 本类的标识
 obj.isKClassO： Boolean类型 常量 true KClass创建类型的特征标识
 obj.superclassOf： Function类型 检测本身是否是指定类型的对象或指定类型的子类的对象
 obj.toString： Function类型 返回表示当前对象状态、有意义的字符串
 作者：wangzheng
 版本：1.0
 创建时间：2010-01-10
 最后修改时间：2010-03-16
 */
var KClass = new (function () {

    //存放所有使用该方式创建的类 类标识=类引用
    var _classList = {};
    
	///**
    // * 返回表示当前对象状态、有意义的字符串。
    // */
    //var _toString = function()
    //{
        //var thisString = [];
        //for (var i in this)
        //    if (typeof this[i] != 'function' && i != "className")
        //        thisString.push(i + "=" + this[i]);
        //return thisString.join(",");
	//	return "";
    //};
    var _classSuperClass = function(thisClass, superClass)
    {
        var superClasses = thisClass.prototype.superClasses;
        for(var i = 0; i < superClasses.length; i++)
        {
            if(superClass == superClasses[i]) return true;
            if(_classSuperClass(superClasses[i], superClass)) return true;
        }
        return false;
    };

    /**
     * 检测本身是否是指定类别的子类对象
     */
    var _superclassOf = function(_superClass)
    {
        if(_superClass instanceof Function) return _classSuperClass(_classList[this.className], _superClass);
        return false;
    };

    /**
     * 类创建方法
     * @param className 类标识
     * @param superClass 父类
     * @uncrunch
     */
    this.create = function(className, superClass)
    {
        if (!className) return;
        /**
         * 创建类型的直接构造器,其中封装了通过对子父类依赖关系中构造器的调用实现子类继承父类的公开属性
         * 并在最后调用客户自定义的构造器initialize
         */
        var thisClass = function()
        {
            var superClasses = thisClass.prototype.superClasses;
            if(superClasses instanceof Array)
            {
                for(var i = 0; i < superClasses.length; i++)
                    if(superClasses[i] instanceof Function) superClasses[i].apply(this, arguments);
            }
            if (thisClass.initialize) thisClass.initialize.apply(this, arguments);
        };
        if (_classList[className]) delete _classList[className];
        _classList[className] = thisClass;

        var _superClasses = [];

        /**
         * 将其声明第一父类的prototype对象引用做完整复制（有对原型链的维护）；
         * 对其声明的其他父类prototype中的属性进行遍历复制；
         */
        if (superClass instanceof Function)
        {
            var TempF = new Function();
            TempF.prototype = superClass.prototype;
            thisClass.prototype = new TempF();
            thisClass.prototype.constructor = thisClass;
            _superClasses.push(superClass);
            for(var i = 2; i < arguments.length; i++)
            {
                if(arguments[i] instanceof Function)
                {
                    for(var j in arguments[i].prototype)
                        thisClass.prototype[j] = arguments[i].prototype[j];
                    _superClasses.push(arguments[i]);
                }
            }
        }
        /**
         * 为类型增加superClasses、className、isKClassO属性及公共的superclassOf和toString方法；
         */
        //@uncrunch 父类的引用数组
        thisClass.prototype.superClasses = _superClasses;
        //@uncrunch 本类的标识字符串
        thisClass.prototype.className = className;
        //@uncrunch KClass创建类型的特征标识
        thisClass.prototype.isKClassO = true;
        //@uncrunch 检测本身是否是指定类型的对象或指定类型的子类的对象
        thisClass.prototype.superclassOf = _superclassOf;
        ////@uncrunch 返回表示当前对象状态、有意义的字符串。
        //if(!thisClass.prototype.toString) thisClass.prototype.toString = _toString;
        return thisClass;
    };
})();
/*
 头文件
 */
/*
 此类的实例可用于KAccordion类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KAccordionOptions =
{
    //@uncrunch Boolean  	是否以动画的方式展开选项卡内容，默认值为true
    animation : true
    //@uncrunch Boolean  	是否支持收起内容显示区域，默认值为false
    ,collapse : false
    //@uncrunch Boolean  	是否使用内容的实际高度，默认值为true
    ,autoheight : true
    //@uncrunch 	Boolean  	是否允许同时展开多个选项卡内容，默认为 true。
    ,multiple : true
    // @uncrunch 	Integer  	组件初始化时，如果选项卡数量小于此值，将自动展开所有内容区域，默认为0，表示禁用此功能。此属性仅在启用 multiple 属性时有效。
    ,initexpand : 0
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
KAccount 组件登录成功的账号信息。
 */
var KAccountInfo =
{
    //@uncrunch  	String  	用户账号
    user : undefined
    // @uncrunch 	String  	用户帐号数字ID。
    ,uid : undefined
	// @uncrunch 	String  	用户邮件地址
    ,email : undefined
	// @uncrunch 	Boolean  	是否已登录
    ,signin : undefined
};
/*
 此类的实例可用于 KArea 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KAreaOptions =
{
    //@uncrunch KBrushOptions
    brush : undefined
    //@uncrunch KInfoWindow 信息窗口
    ,infowin : undefined
    //@uncrunch Boolean 是否可编辑，默认值为false
    ,editable : false
    //@uncrunch Boolean 编辑状态下，当鼠标悬停到区域时是否将其设置为不透明，默认值为true
    ,editHilite : true
    ////@uncrunch
    ,hiliteBrush : undefined
    //@uncrunch String 	所属的类别组，默认值为temp
    ,group : "temp"
};
/*
 此类的实例可用于 KLineOptions 或 KAreaOptions 类的 brush 属性。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KBrushOptions =
{
    //@uncrunch 折线颜色，默认为红色
    color : "#ff0000"
    //@uncrunch 折线宽度，默认值为5像素
    ,width : 5
    //@uncrunch 是否使用虚线样式，默认值为false
    ,dashed : false
    //@uncrunch 折线透明度，默认值为60
    ,transparency : 60
    //@uncrunch 填充背景色，默认值为红色
    ,bgcolor : "#ff0000"
    //@uncrunch 背景透明度，默认值为60
    ,bgtransparency : 60
    //@uncrunch 是否突出折线边缘，默认值为false
    ,overlap : false
    //@uncrunch  	KDirMarkStyleOptions  	设置方向标的样式。
    ,dmstyle : undefined
};
/*
此类的实例可用于KBubble类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KBubbleOptions =
{
    //@uncrunch
    _$P : ["KWidgetOptions"]
};
/*
此类的实例可用于KBubble.open() 方法的?opts??参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KBubbleShowOptions =
{
    //@uncrunch 	KSize 	气泡尺寸。忽略此值将取实际值
    size : undefined
    //@uncrunch 	Boolean 	是否显示关闭按钮。不显示关闭按钮时，在气泡外点击可自动隐藏气泡，否则需要通过关闭按钮隐藏气泡
    ,closebtn : true
    //@uncrunch 
    ,outside : true
    //@uncrunch KPostion 	设置气泡相对元素的显示位置，忽略此属性将按照下、右、上、左的顺序自动选择方位显示
    ,pos : undefined
    //@uncrunch  	Integer  	设置气泡箭头相对目标元素的横向偏移值。默认为0。此属性只在 pos==KPosition.TOP 或 KPosition.BOTTOM 时有效。
    ,anchorx : 0
    //@uncrunch  	Integer  	设置气泡箭头相对目标元素的纵向偏移值。默认为0。此属性只在 pos==KPosition.LEFT 或 KPosition.RIGHT 时有效。
    ,anchory : 0
    //@uncrunch 	Integer 	设置气泡相对元素的横向偏移值。默认为0。此属性只在气泡显示在上下方位时有效
    ,offsetx : 0
    //@uncrunch 	Integer 	设置气泡相对元素的纵向偏移值。默认为0。此属性只在气泡显示在左右方位时有效
    ,offsety : 0
    // @uncrunch 	Integer  	设置目标元素的横向外边距。默认为0。此属性只在 pos==KPosition.TOP 或 KPosition.BOTTOM 时有效。
    ,marginx : 0
    // @uncrunch 	Integer  	设置目标元素的纵向外边距。默认为0。此属性只在 pos==KPosition.LEFT 或 KPosition.RIGHT 时有效。
    ,marginy : 0
    //@uncrunch 	Integer  	气泡圆角半径。默认为5px。此属性在 IE 下无效，取值为0px。
    ,corneradius : 5
    //@uncrunch  	Boolean  	是否在已确定的方位上进行重新布局，默认为 true 。
    ,autolayout : true
    //@uncrunch   	Boolean  	 设置 pos 是优先的还是强制的。 优先表示会先以指定位置进行判断，如果空间不足够则自动选择其它方位进行显示；强制表示始终以指定位置显示。
    ,force : undefined
    //@uncrunch  	Boolean  	在设置了 node 属性后，控制是否显示箭头。默认为 true 。
    ,arrow : true
};
/*
此类的实例可用于KBusearch 类构造函数的?opts??参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KBusearchOptions =
{
    //@uncrunch  	Node  	搜索结果容器。忽略此设置将不显示搜索结果。
    result : undefined
    // @uncrunch 	Node  	地图容器对象，忽略此属性将忽略对地图的操作，默认为undefined。
    ,mapcontainer : undefined
    // @uncrunch 	Boolean  	当地图未初始化时，是否使用查询结果对其进行初始化，默认为true。
    ,initmap : true
    //@uncrunch  	String  	公交换乘接口地址。
    ,busurl : undefined
    // @uncrunch 	String  	公交线路接口地址。
    ,lineurl : undefined
    //  @uncrunch	String  	公交站点接口地址。
    ,stationurl : undefined
    // @uncrunch 	KSender  	发送组件，主要提供此组件内发送功能支持。默认为 undefined。
    ,sender : undefined
    // @uncrunch 	KPrinter  	打印组件，主要提供此组件内打印功能支持。默认为 undefined。
    ,printer : undefined
    //@uncrunch  	KSearchbox  	搜索框组件，用来同步搜索关键字信息。默认为 undefined。
    ,searchbox : undefined
    //@uncrunch   	KStationListOptions  	起终点和追加目的地站点列表组件选项，KStationListOptions.citylist 强制为 true。
    ,slopts : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
此类型表示回调函数的结构
 */
var KCallback =
{
    // @uncrunch 	Function  	回调函数句柄，默认值为 undefined。
    fun : undefined
    // @uncrunch 	Object  	回调函数运行时的上下文对象，默认为 undefined。
    ,thisobj : undefined
    // @uncrunch 	Any  	回调函数被调用时，将此属性值作为参数传递给回调函数，默认为 undefined。
    ,data : undefined
};
/*
	此类型使用在 KTools.checkSpace() 方法中。
*/
var KCheckSpaceOptions =
{
	//@uncrunch KPosition	需要检测的方位，如果忽略此属性则检测四个方位。可使用位或方式传递多个值，比如：checkSpace(pt, size, KPosition.TOP | KPosition.LEFT) 。
    pos : undefined
	//@uncrunch Integer	element 与 rect 的水平方向的相对偏移。默认为 0 。
    ,offsetx : 0
	//@uncrunch Integer	element 与 rect 的垂直方向的相对偏移。默认为 0 。
    ,offsety : 0
	//@uncrunch Integer	element 与 rect 的水平方向的相对距离。默认为 0 。
    ,marginx : 0
	//@uncrunch Integer	element 与 rect 的垂直方向的相对距离。默认为 0 。
    ,marginy : 0
	
};
/**
 * 表示 KCity 基类的城市信息类型。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KCityInfo =
{
    //@uncrunch 	String 	城市名称
    name : ""
	//@uncrunch 	String	城市英文名称。
	,ename : ""
    //@uncrunch 	String 	城市中心经纬度
    ,latlon:""
    //@uncrunch 	Integer 	合适的显示级别。有效值在 K_MIN_ZOOM_LEVEL 和 K_MAX_ZOOM_LEVEL 之间
    ,level:undefined
    // 	@uncrunch String 	所属省份名称
    ,province:""
	//@uncrunch   	Boolean  	是否支持公交查询，默认为 true  。
	,bus : true
};
/*
此类的实例可用于KCityList类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KCityListOptions =
{
    //@uncrunch 	Boolean 	功能接口地址，忽略此设置或为空字符串，则不开启关键字提示功能
    sugurl : undefined
    //@uncrunch 	Integer 	suggest列表数量限制，默认值为8
    ,suglimit : 8
    //	@uncrunch String 	接口输出结果类型，目前仅需要支持json和html即可
    ,sugajaxmode : undefined
    //@uncrunch 	Boolean 	是否开启城市列表功能，默认值为true
    ,citylist : true
//    //@uncrunch 	KSize 	城市列表尺寸。自定义属性格式：width,height
//    ,clsize : undefined
    //@uncrunch 	String 	“更多城市”按钮打开的目标地址。如果忽略此设置或为空字符串，则将不启用“更多城市”功能按钮
    ,mburl : ""
    // @uncrunch 	KCityInfo  	默认显示城市信息，默认为“北京市”。
    ,defcity : {name:"北京市", latlon:"HETCUFZVVHUEE", level:8, province:"北京市", ename:"beijing"}
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
    // @uncrunch 	Boolean 当输入焦点离开文本框时，是否需要自动提取第一个提示结果补全到文本框，默认值为 false 。
    ,autocomplete : true
  //@uncrunch String  KCityList.setCity()方法的参数中不包含城市经纬度信息时，使用KCityListOptions.laturl向后台查询相关的城市信息
    ,laturl:undefined
    //@uncrunch Boolean 当页面有多个KCityList实例且启用citylist时，是否只显示一个热门城市列表，默认为true 
    ,onehot:true
    //@uncrunch Node 热闹城市结构，默认值undefined 如果不需要domready前初始化组件可以不设置此项目
    ,hcnode : undefined
    //@uncrunch Node 更多城市容器结构，空DIV结构 默认值undefined 如果不需要domready前初始化组件可以不设置此项目
    ,mcnode : undefined
    //@uncrunch Boolean新城市列表展示开关，默认为false
    ,newcitylist : false
};
/*
 此类的实例可用于 KTools.setCookie() 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KCookieOptions =
{
    //@uncrunch Integer 过期天数，当前日期+过期天数
    expires : 5
    //@uncrunch 能够访问Cookies的域 默认为 mapbar.com 。
    ,domain : "mapbar.com"
    //@uncrunch 可以访问到Cookies的服务器端目录 默认为 / 。
    ,path : "/"
};
var KDatePickerOptions = {
    //@uncrunch String 显示日期的格式，默认为"yyyy-mm-dd"
    format: "yyyy-mm-dd"
	//@uncrunch Date 默认为undefined
    ,min: undefined
	//@uncrunch Date 默认为undefined
    ,max: undefined
	//@uncrunch Integer  显示多少个月,默认为1
    ,month: 1
	//@uncrunch Date 当前选中的日期，默认为undefined
    ,date: undefined
	//@uncrunch String 最下端的提示文字，支持html，默认为undefined
    ,tip: undefined
	//@uncrunch Node 图标元素，当点击图标时，可控制组件的显示，默认为undefined
	,icon:undefined
	//@uncrunch Node 图标元素，当点击图标时，可控制组件的显示，默认为undefined
	,box:undefined
	//@uncrunch KDatePicker 与该KDatePicker相关联的KDatePicker组件,默认为undefined
    ,referpicker: undefined
	//@uncrunch
    ,_$P: ["KWidgetOptions"]
}
/*
 此类的实例可用于KDialog.open() 方法的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KDialogOpenOptions =
{
    //@uncrunch   	KPoint  	设置对话框显示位置，相对于对话框左上角坐标。忽略此设置将在 KDialogOptions.dragrange 中间显示
    pos:undefined
    //@uncrunch   	KSize  	对话框尺寸，默认为 KDialogOptions.size
    ,size:undefined
    //@uncrunch   	Boolean  	是否以模态窗口显示，默认为false
    ,modal:false
};
/*
 此类的实例可用于KDialog 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KDialogOptions =
{
    //@uncrunch   	String  	对话框标题
    title:""
    //@uncrunch   	Boolean  	当对话框初始化完成后是否自动打开，默认为false
    ,autopen:false
    //@uncrunch   	Boolean  	解决 ie6 中 select 控件显示层次高于其它控件的问题。默认为 true 。当初始化时，需要自动判断浏览器版本，如果是 ie6 ，则自动进行此处理，其它浏览器忽略，除非用户强制设置此属性为 true
    ,bgiframe:true
    //@uncrunch   	Boolean  	是否允许拖动对话框，默认为true
    ,dragable:true
    //@uncrunch   	Boolean  	是否允许调整对话框尺寸并显示尺寸调整区域，默认为true
    ,resizeable:true
    //@uncrunch   	KSize  	对话框初始尺寸，忽略此设置将默认宽度为300px，高度为auto，然后获取实际尺寸
    ,size:undefined
    //@uncrunch   	Boolean  	是否显示最小化按钮，默认为false
    ,minbtn:false
    //@uncrunch   	Boolean  	是否显示最大化按钮，默认为false
    ,maxbtn:false
    //@uncrunch   	Boolean  	是否显示关闭按钮，默认为true
    ,closebtn:true
    //@uncrunch   	KBounds  	当对话框允许拖拽时，此属性限制了对话框可移动的范围。默认为当前窗口可视区域。非标签自定义属性!
    ,dragrange:undefined
	//@uncrunch 	KSize	当 resizeable=true 时，此属性限制了对话框最小尺寸。默认为 size 属性值。属性格式：width,height。
	,minsize:undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 表示对话框的显示状态枚举
 作者:王政
 版本:1.0
 创建时间:2010-01-15
 最近修改时间:2010-01-16
 */
var KDialogState =
{
    //@uncrunch 标准显示状态，非最小化和最大化。
    NORMAL : 1
    //@uncrunch 最小化状态
    ,MINI : 2
    //@uncrunch 最大化状态
    ,MAX : 4
    //@uncrunch 关闭状态。对话框第一次显示前也属于此状态
    ,CLOSE : 8
    //@uncrunch 隐藏状态
    ,HIDE : 16
};
/*
此类的实例可用于 KLine.setDirMarkers() 方法的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。 
 */
var KDirMarkOptions =
{
    // @uncrunch 	Integer  	 方向标可显示的最小级别，有效值在 K_MIN_ZOOM_LEVEL  和 K_MAX_ZOOM_LEVEL 之间，默认为 K_MAX_ZOOM_LEVEL-2 。
    minlevel : undefined
    // @uncrunch 	Integer  	 方向标可显示的最大级别，有效值在 K_MIN_ZOOM_LEVEL  和 K_MAX_ZOOM_LEVEL 之间，默认为 K_MAX_ZOOM_LEVEL 。
    ,maxlevel : undefined
    // @uncrunch 	Boolean  	是否立刻重绘，默认为 true  。
    ,redraw : true
};
/*
此类的实例可用于 KBrushOptions.dmstyle 属性。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KDirMarkStyleOptions =
{
    // @uncrunch 	String  	颜色，默认 #0000FF  。
    color : "#0000FF"
    // @uncrunch 	Integer  	方向标尺寸，宽高一致，默认为 KBrushOptions.width * 4 。
    ,size : undefined
    // @uncrunch 	Integer  	透明度，默认为 KBrushOptions.transparency  。
    ,transparency:undefined
    // @uncrunch 	Integer  	方向标描边宽度，默认为 1。
    ,strokeWidth : 1
    //@uncrunch  	Integer  	方向标描边颜色，默认 #FFFFFF  。
    ,strokeColor : "#FFFFFF"
    //@uncrunch  	Boolean  	方向标描边透明度，默认 100，即不透明。
    ,strokeTransparency : 100
};
/*
此类的实例可用于KDropList类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KDropListOptions =
{
    //@uncrunch 	Boolean 	当点击列表项目后，是否将其作为当前的选中项。此选项只在 multiple==false 时有效。
    select2text : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions", "KBubbleShowOptions", "KListOptions", "KDropPanelOptions"]
};
/*
此类的实例可用于KDropPanel类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KDropPanelOptions =
{
	//@uncrunch Boolean 当鼠标划过结果Dom时显示下拉列表还是点击时显示下拉列表，默认为false
	hover:false
    //@uncrunch
    ,_$P : ["KWidgetOptions", "KBubbleShowOptions"]
};
/*
纠错反馈组件中纠错信息所属类型枚举。
 */
var KFBErrorType =
{
    // @uncrunch 	信息错误。
    INFO : 1
    // @uncrunch 	位置错误。
    ,LOCATION : 2
    //  @uncrunch	该地标点不存在的
    ,INEXISTENT : 4
    // @uncrunch	其它
    ,OTHER : 8
};
/*
存储纠错反馈信息，主要提供给 KFeedback 组件使用。
 */
var KFeedbackInfo =
{
    // @uncrunch KFeedbackType	反馈的信息类型，默认为 KFeedbackType.POI_ERROR 。
    type : undefined
    // @uncrunch 	KFBErrorType	当 type==KFeedbackType.ERROR 时，此属性进一步说明错误信息的类型，默认为 KFBErrorType.INFO 。
    ,errortype : undefined
    
	/*
	// @uncrunch		String	地标点名称。
    ,name :undefined
    // @uncrunch		String	地标点地址。
    ,address:undefined
    // @uncrunch 	String	地标点电话。
    ,phone:undefined
	*/
	
	//@uncrunch	KPOInfo	包含了名称、地址、电话等信息。
	,poinfo : undefined
	// @uncrunch			String	说明。
    ,notes:undefined
    // @uncrunch 	String	提交信息的联系人信息。
    ,contact : undefined
	//@uncrunch	String	能够重现问题的页面地址。
	,url : undefined
};
/*
表示纠错反馈组件所提交信息的类型枚举。
 */
var KFeedbackType =
{
    // @uncrunch 	POI纠错信息。
    POI_ERROR : 1
    // @uncrunch 	路线纠错信息。
    ,ROUTE_ERROR : 2
    //  @uncrunch	用户自定义标注信息。
    ,USERPOI : 4
    // @uncrunch	建议意见信息。
    ,SUGGEST : 8
};
/*
表示 KGeocoder 基类的当前状态信息。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。 
 */
var KGeocoderInfo =
{
    // @uncrunch 	String  	返回表示当前地理信息的经纬度。
    latlon : undefined
    // @uncrunch 	Integer  	返回表示当前地理信息合适的缩放级别。
    ,zoom : undefined
    // @uncrunch 	String  	返回省份信息。
    ,province : undefined
    // @uncrunch 	String  	返回城市信息。
    ,city : undefined
    // @uncrunch 	String  	返回市级行政区域信息。
    ,district : undefined
    // @uncrunch  	String  	返回街道信息。
    ,street : undefined
};
/*
此类型使用在 KTools.getBounds() 方法中。
 */
var KGetBoundsOptions =
{
    //@uncrunch Boolean  	是否忽略元素的外边距，默认值为 true。
    margin : true
    //@uncrunch  	Boolean  	是否忽略元素的内边距，默认值为 false。
    ,padding : false
    //@uncrunch   	Boolean  	是否忽略元素的外边距，默认值为 false。
    ,border : false
};
/*
此类的实例可用于KHScrollList类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KHScrollListOptions =
{
    //@uncrunch  	Boolean  	多选模式，默认为 true 。如果为 false ，则表示列表项目只有一个可被选中。
    multiple : true
    //@uncrunch  	Integer  	点击左右滚动按钮时，列表的向前向后滚动几个图标，默认值为 listcount 属性。
    ,scrollcount : 5
    //@uncrunch  	Boolean  	是否以动画的方式滚动，默认为 true 。
    ,animation : true
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 此类的实例可用于 KIcon 类构造函数的 opts? 参数中。
 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KIconOptions =
{
    //@uncrunch string 或 src 或 Node 图标 Dom
    img : undefined
    //@uncrunch KPoint 此图标在地图上的锚定点相对于图标图像左上角的像素坐标
    ,anchor : undefined
    //@uncrunch KSize 	图标尺寸。此值只对 imgHtml 有效
    ,size : undefined
    //@uncrunch String src
    ,shadow : undefined
    //@uncrunch KPoint 阴影图标在地图上的锚定点相对于图标图像左上角的像素坐标
    ,shadowAnchor : undefined
    //@uncrunch KSize 	阴影图像尺寸。此值只对 shadowHtml 有效
    ,shadowSize : undefined
    //@uncrunch String 用来替换快照功能中的图标地址
    ,snapIcon : undefined
    // @uncrunch 	String  	img 属性上的样式名称，运行时可与 KMarker.setIconClass() 结合使用，实现标注的二态效果。
    ,cssname : undefined
    //@uncrunch   	Boolean  	是否在ie6中禁用阴影，默认为 true。
    ,disableIE6shadow : true
};
/*
 此类的实例可用于 KInfoWindow 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KInfoWindowOptions =
{
    //@uncrunch String  	信息窗口的标题，支持HTML
    title : ""
    //@uncrunch KHtmlContent  	信息窗口的内容，支持HTML
    ,content : ""
    //@uncrunch KSize 设置信息窗口显示尺寸，如果不设置，将自动检测窗口尺寸，如果检测失败，将使用默认尺寸
    ,size : undefined
    //@uncrunch KPoint 信息窗口的箭头距离所属叠加物经纬度的偏移值
    ,anchor : undefined
    //@uncrunch  	Boolean  	气泡中是否显示通用功能区，默认为 true  。
    ,cmarea : true
    // @uncrunch 	KIwCmData  	气泡通用功能区需要的功能数据，默认为 undefined 。
    ,cmdata : undefined
    //@uncrunch   	Any  	用户扩展数据，默认为 undefined  。
    ,extdata : undefined
};
/*
此类型包含气泡通用功能区中需要的功能参数。
 */
var KIwCmData =
{
    //@uncrunch  	KPOInfo  	气泡所属叠加物所在位置的地标点信息。
    poi : undefined
    //@uncrunch  	KCallback  	如果不等于 undefined 则在“将地图缩放至”部分显示“整条线路”链接按钮，点击后调用此属性指向的回调方法。默认为 false  。
    ,allinecbk: false
    //@uncrunch  	Boolean  	是否显示频道导航和历史搜索区域。默认为 true  。
    ,navigator : true
};
/*
 此类的实例可用于 KLabel 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KLabelOptions =
{
    //@uncrunch html String dom
    label : undefined
    //@uncrunch 是否启用地图标签的默认样式，默认值为false
    ,defaultStyle : false
    //@uncrunch 当标签到达地图边缘时是否自动换行，默认值为false ?
    ,wordwrap : false
    //@uncrunch 显示在快照功能中的文字，不支持HTML
    ,snapText : undefined
    //@uncrunch KPoint 标签在地图上的锚定点相对于图标图像左上角的像素坐标
    ,anchor : undefined
    //@uncrunch 标签透明度，默认值为0，即不透明
    ,transparence : 100.0
    //@uncrunch 设置相对于标注的显示位置，默认值为KPosition.RIGHT。如果设置了anchor属性，则忽略此设置
    ,pos : undefined
};
/*
此类型包含了灯箱功能的选项信息
 */
var KLightboxOptions =
{
    // @uncrunch 	Node  	需要高亮的元素，默认为最后一次指定的元素，第一次调用此方法时此值默认为 undefined
    element : undefined
    // @uncrunch 	Boolean  	显示还是关闭，默认为 false  。
    ,visible : false
    // 	@uncrunch String  	背景色，网页16进制颜色值或颜色名称，默认值为“gray”。
    ,bgcolor : "gray"
    // @uncrunch 	String  	背景图片地址。
    ,bgimg : undefined
    //@uncrunch 透明度 默认半透明
    ,alpha : 0.5
};
/*
 此类的实例可用于 KLine 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KLineOptions =
{
    //@uncrunch KBrushOptions
    brush : undefined
    //@uncrunch KInfoWindow 信息窗口
    ,infowin : undefined
    //@uncrunch  是否可编辑，默认值为false
    ,editable : false
    //@uncrunch 以路径方式编辑折线，默认值为false
    ,path : false
    //@uncrunch 编辑状态下，当鼠标悬停到折线时是否将其设置为不透明，默认值为true
    ,editHilite : true
    //@uncrunch
    ,hiliteBrush : undefined
    //@uncrunch String 	所属的类别组，默认值为temp
    ,group : "temp"
    //@uncrunch  	Boolean  	是否在ie6/7/8中禁用突出折线边缘效果，默认值为 false 。
    ,disableIE678overlap : false
};
/*
 表示列表类型组件的列表项目信息
 */
var KListItem =
{
    //@uncrunch  	Integer  	非标签自定义属性! 列表项目序号，从 0 开始。KList.insert() 方法中，使用此值表示新列表项目放置到此序号表示的项目之前。在其它方法或事件中，表示当前项目所属的序号。
    index : 0
    //@uncrunch String 列表项目显示文字。
    ,text : ""
    //@uncrunch String 列表项目值
    ,kvalue : ""
    // @uncrunch 	Boolean  	是否允许删除，默认为 true。当此值优先级高于 KListOptions.deletable 。此属性在 KList 中有效。
    ,deletable : true
    // @uncrunch 	Boolean  	是否允许编辑，默认为 true。当此值优先级高于 KListOptions.editable 。此属性在 KList 中有效。
    ,editable : true
    // @uncrunch 	Node  	非标签自定义属性! 列表项目对应的 Dom 对象。
    ,node : undefined
    // @uncrunch 	Boolean  	选中状态，默认为 false。在 insert() 方法中，此值表示增加后是否自动被选中。
    ,selected : false
    //@uncrunch 	String  	非标签自定义属性! 设置列表项目的图标元素样式名称。此属性在 KList 中有效。
    ,iconClass : undefined
    //@uncrunch  	String  	非标签自定义属性! 设置列表项目样式名称。此属性在 KHScrollList 中有效。
    ,itemClass : undefined
};
/*
此类的实例可用于KList类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KListOptions =
{
    // @uncrunch 	Boolean  	是否允许进行修改操作（显示输入文本框），默认值为 true。如果为 false ，则不显示列表项目后的编辑按钮。
    editable : true
    //@uncrunch  	Boolean  	是否允许进行删除操作，默认值为 true。如果为 false ，则不显示列表项目后的删除按钮。
    ,deleteable : true
	//@uncrunch	Boolean	 当此选项为 true ，表示组件中的删除按钮被点击后并不删除相应项目， 只是触发 beforemove 事件，待应用层通过用户确认此操作后再调用 remove() 进行删除。程序中直接调用 remove() 方法时忽略此选项。
	,confirmdelete : true
    // @uncrunch 	Boolean  	是否允许进行排序操作，默认值为 true。如果为 false ，则不允许使用鼠标进行拖拽排序。
    ,sortable : true
    // @uncrunch 	Boolean  	多选模式，默认为 true 。如果为 false ，则表示列表项目只有一个可被选中。
    ,multiple : true
    //@uncrunch 	Boolean  	是否允许取消选中已选中的列表条目，默认为 true 。当 multiple=false 此属性有效。
    ,deselect : true
    //@uncrunch   	Boolean  	是否显示每个条目的复选框，默认为 true  。
    ,checkbox : true
    //@uncrunch  	Boolean  	垂直方向上，当鼠标滑过显示不完全的列表条目时，是否自动滚动到视图范围内。默认为 true 。
    ,scroll2view : true
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 此类的实例可用于KLocalsearch 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KLocalsearchOptions =
{
    //@uncrunch   	  	Node  	地图容器对象，忽略此属性将忽略对地图的操作，默认为undefined。
    mapcontainer : undefined
    //@uncrunch   	Boolean  	当地图未初始化时，是否使用查询结果对其进行初始化，默认为true
    ,initmap:true
    //@uncrunch  	String  	搜索提示接口地址。
    ,tipurl : undefined
    //@uncrunch  	String  	搜索接口地址。
    ,url : undefined
    //  @uncrunch	 KSender  	发送组件，主要提供此组件内发送功能使用。默认为 undefined。
    ,sender : undefined
    // @uncrunch 	KSearchbox  	搜索框组件，用来同步搜索关键字信息。默认为 undefined。
    ,searchbox : undefined
	//@uncrunch	KPrinter	打印组件，主要提供此组件内打印功能支持。默认为 undefined。
	,printer : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 表示地图控件的显示状态枚举
 作者:wangzheng
 版本:1.0
 创建时间:2010-01-15
 最近修改时间:2010-01-16
 */
var KMapCtrlState =
{
    //@uncrunch 默认显示状态，各种控件都以最大化状态显示
    NORMAL : 1
    //@uncrunch 中等状态，鱼骨不显示骨刺
    ,MEDIUM : 2
    //@uncrunch 最小状态，鱼骨只显示放大缩小按钮，鹰眼最小化
    ,MINI : 4
    //@uncrunch 不显示任何控件，包括比例尺
    ,HIDE : 8
};
/*
存储了 KMapMarkers 组件中一个地图标记的信息。
 */
var KMapMarkerInfo =
{
    // @uncrunch 	String	数据源记录id。
    nid : undefined
    //@uncrunch  	Integer	序号。
    ,order : undefined
    // @uncrunch 	KHtmlContent	标记名称。
    ,title : undefined
    // @uncrunch 	KHtmlContent	标记内容。
    ,content : undefined
    //@uncrunch 	KOverlayType	标记类型。
    ,type : undefined
	//@uncrunch  	KHtmlContent  	图片。
	,img : undefined
    //@uncrunch     String  标记经纬度字符串
    ,latlons : undefined
    //@uncrunch     String  标记样式（JSON字符串）
    ,style : undefined
};
/*
 地图模式枚举
 作者:wangzheng
 版本:1.0
 创建时间:2010-01-15
 最近修改时间:2010-01-16
 */
var KMapMode =
{
    //@uncrunch平移模式
    PAN : 'PAN'
    //@uncrunch拉框放大模式
    ,ZOOMIN : 'ZOOMIN'
    //@uncrunch 拉框缩小模式
    ,ZOOMOUT : 'ZOOMOUT'
    //@uncrunch 拉框查询模式
    ,LOOKUP : 'LOOKUP'
    //@uncrunch 标注模式
    ,BOOKMARK : 'BOOKMARK'
    //@uncrunch 测距模式
    ,MEASURE : 'MEASURE'
    //@uncrunch 画线模式
    ,DRAWLINE : 'DRAWLINE'
    //@uncrunch 画区域模式
    ,DRAWAREA : 'DRAWAREA'
    //@uncrunch 快照模式
    ,SNAPSHOT : 'SNAPSHOT'
    //@uncrunch 禁止操作模式
    ,DISABLE : 'DISABLE'
	//@uncrunch 沿路画线模式。
	,ROADLINE : "ROADLINE"
};
/*
 地图初始化时的可选参数，封装了地图特性的控制参数。它没有构造函数，但可实例化为对象常量
 */
var KMapOptions =
{
    //@uncrunch 地图初始化中心点，默认值为“北京市” @uncrunch
    center : undefined
    //@uncrunch 地图默认初始化级别，默认值为MIN_ZOOM_LEVEL，有效值在MIN_ZOOM_LEVEL和MAX_ZOOM_LEVEL之间
    ,zoom : 8
    //@uncrunch 是否将在地图上点击后的位置设置为地图中心点，默认值为true
    ,click2center : true
    //@uncrunch 设置鹰眼状态，默认值为MapCtrlState.NORMAL
    ,overview : undefined
    //@uncrunch 控制鱼骨显示状态
    ,fishbone : undefined
    //@uncrunch 是否允许使用鼠标滚轮控制地图缩放，默认值为true
    ,mousewheel : true
};
/*
 此类的实例可用于 KMarker 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KMarkerOptions =
{
    //@uncrunch KIconOptions 标注图标。如果未指定，则使用 KIcon。
    icon : undefined
    //@uncrunch KLabelOptions 标注标签
    ,label : undefined
    //@uncrunch KInfoWindowOptions 标注信息窗口
    ,infowin : undefined
    //@uncrunch Boolean 编辑状态下是否启用动画效果，即拖拽时浮起和松开鼠标时跳跃的效果。默认值为true
    ,bouncy : true
    //@uncrunch Boolean 是否可编辑，默认值为false
    ,editable : false
    //@uncrunch Boolean 在地图可视范围外时是否自动隐藏从而提高地图性能，默认值为true
    ,autohide : true
    //@uncrunch Boolean 鼠标滑过标注时显示标签，默认值为false
    ,hoverLabel : false
    //@uncrunch String 	所属的类别组，默认值为temp
    ,group : "temp"
};
/*
定义了提示框组件中的常用按钮，下表中的值字段类型为 KNamedValue[]  ，描述中包含了代码实现。
 */
var KMsgBoxButtons =
{
    //@uncrunch  	确定按钮。
    OK : [{name:"ok",kvalue:"确定"}]
    //@uncrunch  	确定和取消按钮。
    ,OKCancel : [{name:"ok",kvalue:"确定"}, {name:"cancel", kvalue:"取消"}]
    //@uncrunch  	是和否按钮。
    ,YesNo : [{name:"yes",kvalue:"是"}, {name:"no",kvalue:"否"}]
    //@uncrunch  	是、否和取消按钮。
    ,YesNoCancel : [{name:"yes",kvalue:"是"}, {name:"no",kvalue:"否"}, {name:"cancel",kvalue:"取消"}]
    //@uncrunch  	重试和取消按钮。
    ,RetryCancel : [{name:"retry",kvalue:"重试"}, {name:"cancel",kvalue:"取消"}]
};
/*
KTools.showMsg() 方法 opts 参数，控制消息框的选项。它没有构造函数，但可实例化为对象常量。
 */
var KMsgBoxOpenOptions =
{
    //@uncrunch  	String  	设置提示框显示样式。
    theme : "mwp"
    //@uncrunch  	String  	提示框标题，默认为 undefined  。如果为 undefined 则不显示标题区。
    ,title : undefined
    //@uncrunch  	KNamedValue[]  	 需要显示的按钮集合。KNamedValue.name 表示按钮的含义，在 closedcbk 中通过此值来获取用户点击的是哪个按钮； KNamedValue.kvalue 表示按钮上显示的文字。 KMsgBoxButtons 定义了一些常用的按钮。 默认为 KMsgBoxButtons.OK 。 如果此值长度为0或无效，则不显示按钮区域。
    ,buttons : undefined
    //@uncrunch  	Integer  	是否启用自动关闭机制，在此处设置自动关闭的间隔时间，单位：秒。默认为 0 ，表示不启用。
    ,autoclose : 0
    //@uncrunch  	KCallback  	 提示框关闭后的回调函数，默认为 undefined 。函数参数如下： * action： String 类型，关闭方式，同 closemode 。 * button： KNamedValue 类型，表示点击的按钮。此参数仅在 action=="button" 时有效。 注：此属性仅在 KTools.showMsg() 方法中有效， KMsgBox() 组件请使用 closed 事件。
    ,closedcbk : undefined
    //@uncrunch  	Node  	提示框的箭头指向的元素，默认为 undefined  。如果为 undefined 则自动隐藏箭头，并在屏幕中心位置显示提示框。
    ,node : undefined
    //@uncrunch   	KBounds  	设置提示框的显示范围，此属性仅在 node==undefined  时有效。默认为 KTools.getBounds(window) 。
    ,range : undefined
    //@uncrunch  	KBubbleShowOptions  	设置内部组件 KBubble 选项。默认为 undefined 。
    ,buboptions : undefined
    //@uncrunch  	Integer  	关闭按钮的左边距，可以用来控制与内容区的垂直方向间距，仅在不显示标题栏时有效，默认为20px。
    ,cbmargin : 20
};
/*
    此类的实例可用于KMsgBox类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。 
 */
var KMsgBoxOptions =
{
    //@uncrunch
    _$P : ["KWidgetOptions"]
};
/**
 * 此类型表示名称和值的对应关系。
 */
var KNamedValue =
{
    //@uncrunch  	String  	名称。
    name : undefined
    //@uncrunch  	Any  	值。
    ,kvalue : undefined
};
/*
此类的实例可用于KNavsearch 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KNavsearchOptions =
{
    // @uncrunch 	Node  	地图容器对象，忽略此属性将忽略对地图的操作，默认为undefined。
    mapcontainer : undefined
    // @uncrunch  	Boolean  	当地图未初始化时，是否使用查询结果对其进行初始化，默认为true。
    ,initmap : true
    //   @uncrunch	String  	搜索接口（含道路折线编码）地址。
    ,url : undefined
    //   @uncrunch	String  	道路名称接口地址。
    ,roadurl : undefined
    //  @uncrunch 	KCityListOptions  	城市列表组件选项。
    ,cylopts : undefined
    //   @uncrunch	KStdSuggestOptions  	输入提示组件选项。
    ,sugopts : undefined
    //  @uncrunch 	KStationListOptions  	站点列表组件选项。
    ,slopts : undefined
    // 	 @uncrunch KSender  	发送组件，主要提供此组件内发送功能支持。默认为 undefined。
    ,sender : undefined
    //  @uncrunch 	KPrinter  	打印组件，主要提供此组件内打印功能支持。默认为 undefined。
    ,printer : undefined
    // @uncrunch  	KSearchbox  	搜索框组件，用来同步搜索关键字信息。默认为 undefined。
    ,searchbox : undefined
	//@uncrunch	KPrinter	打印组件，主要提供此组件内打印功能支持。默认为 undefined。
	,printer : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 叠加物类型枚举。
 */
var KOverlayType =
{
    //@uncrunch 地图标注。
    MARKER : 1
    //@uncrunch 地图折线。
    ,POLYLINE : 2
    //@uncrunch 地图折线 - 沿路画线。
    ,ROADLINE : 4
    //@uncrunch 地图区域。
    ,AREA : 8
};
/*
此类的实例可用于KPageHeader 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
*/
var KPageHeaderOptions =
{
    //@uncrunch     Boolean     是否显示更换城市 默认值：true
    citychange : true
    //@uncrunch     Boolean     是否显示天气 默认值：false
    ,weather : false
    //@uncrunch     Boolean     是否显示登录 默认值：true
    ,account : true
    //@uncrunch     String      结构获取地址
    ,url : undefined
    //@uncrunch     String      帮助链接地址
    ,hurl : undefined
    //@uncrunch     String      热门城市选项卡请求地址
    ,hturl : undefined
    //@uncrunch     String      热门城市选项卡请求地址替换标志 默认值#hturl# (注意，如果字符串中含有正则关键字需要使用元字符转义)
    ,htutag : '#hturl#'
    //@uncrunch     KSearchboxOptions   搜索框组件参数
    ,shxopts : undefined
    //@uncrunch     KCityListOptions    城市列表组件配置
    ,cylopts : undefined
    //@uncrunch     KStdAccountOptions  登录组件配置
    ,accopts : undefined
    //@uncrunch     String      默认选择项，默认值 'ls' (一级选项：ls 地图搜索   bs 公交查询   navs驾车导航   ns 周边查询  二级选项：bs	公交换乘   bl 线路查询   bst 站点查询，需要二级选项时使用','分隔选项如公交线路查询为'bs,bl')
    ,defselect : 'ls'
    //@uncrunch     String[]      搜索默认值，格式为['val1','val2'] 默认值 []
    ,defsv : []
    //@uncrunch     KCityInfo   当前城市，默认为北京市。此选项会覆盖KCityList组件和KSearchbox组件中的默认城市
    ,defcity : {name:"北京市", latlon:"HETCUFZVVHUEE", level:8, province:"北京市", ename:"beijing"}
    //@uncrunch     String      组件实例名称，默认为undefined
    ,instancename : undefined
};  
/*
表示地标点信息
 */
var KPOInfo =
{
    // @uncrunch 	String  	地标所在的城市名称。
    city : undefined
    // @uncrunch 	String  	地标点名称
    ,name : undefined
    //  @uncrunch	String  	地标编码ID。
    ,pid : undefined
    // @uncrunch	 String  	地标经纬度。
    ,latlon : undefined
    // @uncrunch	KPOIType  	地标类型，默认为 KPOIType.NORMAL  。
    ,type : undefined
	//@uncrunch	String	地址信息。
	,address :undefined
	//@uncrunch	String	电话。
	,phone : undefined
	//@uncrunch	String	图吧联盟用户标点id。
	,uid:undefined
	//@uncrunch	Integer	地图缩放级别
	,level:undefined
};
/*
表示查询操作类型的枚举。
 作者:潘鑫
 版本:1.0
 创建时间:2010-04-29
 最近修改时间:2010-04-29
 */
var KPOIType =
{
    //@uncrunch 普通地标点。
    NORMAL : 1
    //@uncrunch 导航拖拽点。
    ,DRAGNODE : 2
    //@uncrunch 导航途经点。
    ,MIDNODE : 4
	//@uncrunch 公交站点。
	,BUSTATION : 8
};
/*
 表示方位、位置的枚举
 作者:wangzheng
 版本:1.0
 创建时间:2010-01-15
 最近修改时间:2010-01-16
 */
var KPosition =
{
    ////@uncrunch
    TOP : 1
    //@uncrunch
    ,BOTTOM : 2
    //@uncrunch
    ,LEFT : 4
    //@uncrunch
    ,RIGHT : 8
};
/*
此类型使用在 KPrinter.print() 方法的 opts 参数中。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KPrintOptions =
{
	//@uncrunch	KQueryOptions	包含查询功能类型和参数信息。
	queryopts : undefined
	// @uncrunch 	String[]  	地图标注数组。每一个元素都是 KMarker.toString() 方法返回值，可调用同类型的 KMarker.fromString() 静态方法将其还原为对象。
    ,markers : undefined
    // @uncrunch 	String[]  	地图折线数组。每一个元素都是 KLine.toString() 方法返回值，可调用同类型的 KLine.fromString() 静态方法将其还原为对象。
    ,lines : undefined
	//@uncrunch	String	表示查询结果中被选中的结果项，可以是序号或结果名称，如公交线路查询关键字1时结果列表中的第三项条目。
	,resultnum : undefined
	//@uncrunch	Integer	表示查询结果所属页码，默认为1。
	,pagenum : 1
};
/*
 此类型使用在 KQuery.query() 方法的 opts 参数。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 注意：此处只是定义此结构，不需要编码。不同的实体类中会扩展此结构，请参考相关说明。
 */
var KQueryOptions =
{
    //@uncrunch  	KQueryType  	表示查询类型。
    type : undefined
    //@uncrunch   	KPOInfo  	地图查询关键字信息。
    ,ls : undefined
    //@uncrunch  	KPOInfo  	导航查询起点信息。
    ,navorig : undefined
    // @uncrunch 	KPOInfo  	导航查询终点信息。
    ,navdest : undefined
    // @uncrunch 	KPOInfo  	公交查询起点信息。
    ,busorig : undefined
    // @uncrunch 	KPOInfo  	公交查询终点信息。
    ,busdest : undefined
    // @uncrunch 	KPOInfo  	公交线路查询信息。
    ,busline : undefined
    // @uncrunch 	KPOInfo  	公交站点查询信息。
    ,bustation : undefined
    // @uncrunch    String  	导航查询途经点。
    ,mid : undefined
//    // @uncrunch 	KPOInfo  	周边查询关键字信息。
//    ,nb : undefined
    // @uncrunch 	KPOInfo  	周边查询中心点信息。
    ,center : undefined
	// @uncrunch 	Boolean  	导航查询中是否避开高速，默认为 false 。
	,highway : false
};
/*
表示查询操作类型的枚举
*/
var KQueryType =
{
    // @uncrunch 	地图搜索操作。
    localsearch : "ls"
    // @uncrunch 	公交查询操作。
    ,busearch : "bs"
    // @uncrunch 	公交线路查询操作。
    ,busline : "bl"
    //@uncrunch 	公交站点查询操作。
    ,bustation : "bst"
    // @uncrunch 	导航查询操作。
    ,navsearch : "navs"
};
/*
表示路线信息（公交或导航）。
 */
var KRouteInfo =
{
    // @uncrunch 	String	路线名称。
    name : undefined
    // @uncrunch 	KQueryOptions	路线类型。
    ,type : undefined
    //  @uncrunch	KQueryOptions	此路线的查询参数信息。
    ,queryopts : undefined
    // @uncrunch	Integer	此路线所属查询结果的页码，默认为1。
    ,pagenum : undefined
    // @uncrunch	Integer	此路线所属查询结果页的记录序号，默认为1。
    ,resultnum : undefined
};
/*
表示路线信息类型的枚举。
 */
var KRouteType =
{
    // @uncrunch 	公交换乘路线
    BUS : "bs"
    // @uncrunch 	驾车导航路线
    ,NAVIGATION : "navs"
};
/*
 此类的实例可用于KSearchbox类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KSearchboxOptions =
{
    //@uncrunch Boolean  	是否开启关键字提示功能，默认值为true
    suggest:true
    //@uncrunch Boolean  	是否显示功能示例，默认值为true
    ,demolist:true
    //@uncrunch customdemo  Boolean  是否在HTML中自定义功能示例,默认为false。
    ,customdemo:false
    //@uncrunch KPosition  	功能示例显示位置，默认值为KPosition.BOTTOM
    ,demopos:undefined
    //@uncrunch  	Boolean  	是否启用城市列表功能，默认值为false，不启用城市列表组件。
    ,citylist:false
    //@uncrunch  	KCallback  	当没有启用 citylist  属性时，此属性表示从外部获取城市信息的接口，KCallback.fun 指向 KCity.city() 方法。默认为 undefined 。
    ,cityfun : undefined
    // @uncrunch  	Boolean  	是否自动进行查询，默认值为true。
    ,autoquery : true
    // @uncrunch  	KCallback  	查询前对条件进行预处理，默认值为undefined。组件调用目标函数时，将传递包含了当前查询条件的 KQueryOptions 类型参数，目标函数对此参数进行处理后返回，组件使用处理后的查询条件进行后续处理。
    ,preprocessFun : undefined
    // @uncrunch 	KStdSuggestOptions  	输入文本框的 Suggest 组件选项，仅当启用 suggest 选项后有效。
    ,sugopts : undefined
    //@uncrunch  	KCityListOptions  	城市列表组件选项，仅当启用 citylist  选项后有效。
    ,cylopts : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
	//@uncrunch Integer 组件当前必须输入查询关键字才可触发search事件，现增加该选项控制校验行为，如下：check=0，必须输入查询条件。check=1，当起点、终点均为空时才触发search事件。check=2，不检查查询提交，只要点击查询按钮即触发事件。默认值为0 。
	,check: 0
	//@uncrunch Object 当cookie中没有记录时，功能示例区域显示此配，格式为{ls : "",bod : "",nod : "",nb : ""}，ls、bod、nod和nb的意义和数据格式见平台参考中“全局数据定义”下的"Cookies数据名称与结构定义”小节。默认为undefined。
	,defaultdemo:undefined,
	//@uncrunch Object 输入框提示文字，默认为undefined
	hints: undefined,
	//@uncrunch Object 功能示例区关键字的长度，默认为undefined
	txtlen: undefined,
	//@uncrunch Integer 功能示例区域显示示例的个数，默认为3
	demos:3,
	//@uncrunch String 功能示例区域在不同状态下的提示，默认为"推荐搜索：,历史记录："，格式为：”推荐搜索时的提示,历史记录时的提示”
	demohint:"推荐搜索：,历史记录："
};
/**
 * 此类型包含了 KSender 组件的配置信息。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KSenderOptions =
{
    //@uncrunch String  	发送接口地址。
    url : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 此类型使用在 KSender.send() 方法的 opts 参数中。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KSendOptions =
{
    // @uncrunch 	KSendType  	支持的发送功能，默认值为 KSendType.all  。
    sendtype : undefined
    // @uncrunch 	KQueryType  	发送数据的类型，忽略时自动通过 KManager.lastExecutedQuerier() 获取页面最近一次运行的 KQuery 类型组件，即当前查询组件。默认为 KQueryType.localsearch 。
    ,querytype : undefined
    // @uncrunch 	KNamedValue[]  	短信发送数据，默认为 undefined  。
    ,sms : undefined
    //@uncrunch  	KNamedValue[]  	邮件发送数据，默认为 undefined  。
    ,email : undefined
    // @uncrunch 	KNamedValue[]  	GPS设备发送数据，默认为 undefined  。
    ,gps : undefined
	//@uncrunch 	KSendType	指定默认选中的发送功能。
	,selected : undefined
};
/**
 * 发送组件的发送方式枚举。
 */
var KSendType =
{
    //@uncrunch  	all  	所有类型。
    all : 1
    //@uncrunch  	none  	不支持任何类型。
    ,none : 2
    // @uncrunch 	sms  	短信。
    ,sms : 4
    //@uncrunch  	mms  	彩信。
    ,mms : 8
    //@uncrunch 	email  	邮件。
    ,email : 16
    //@uncrunch  	gps  	gps设备。
    ,gps : 32
    //@uncrunch  	car  	汽车服务平台。
    ,car : 64
};
/*
此类型使用在 KAccount.signin() 方法的 opts 参数中。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KSigninOptions =
{
    //@uncrunch  	String  	用户账号
    user : undefined
    // @uncrunch 	String  	用户密码。
    ,pwd : undefined
};
/*
此类型使用在 KAccount.signout() 方法的 opts 参数中。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KSignoutOptions =
{
};
/*
KMap.snapshot() 方法 opts 参数，控制地图快照的选项。它没有构造函数，但可实例化为对象常量。
 */
var KSnapshotOptions =
{
    // @uncrunch 	MPoint  	快照区域的中心点经纬度，默认为地图中心点。
    latlon : undefined
    // @uncrunch 	KSize  	快照区域的尺寸信息，默认为地图可视范围。
    ,size : undefined
    // @uncrunch 	Integer  	可指定快照结果中使用的地图缩放级别，默认为地图当前级别。
    ,zoom : undefined
    // @uncrunch 	String  	快照结果图片格式，有效值：jpg 或 png，默认为 png 。
    ,format : "png"
    //@uncrunch   	KCallback  	快照服务器返回结果后执行的回调函数，默认为 undefined ，快照结果url以字符串形式传递给回调函数。
    ,oncomplete : undefined
};
/*
此类的实例可用于KStationListOptions 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KStationListOptions =
{
    //@uncrunch 	Node  	地图容器对象，忽略此属性将忽略对地图的操作，默认为undefined。
    mapcontainer :undefined
    //  @uncrunch	Boolean  	当地图未初始化时，是否使用查询结果对其进行初始化，默认为true。
    ,initmap : true
    //  @uncrunch	String  	起终点接口地址。
    ,url : undefined
    //  @uncrunch	 Node  	提交按钮 Dom  元素。
    ,submitbtn : undefined
    //    @uncrunch		Boolean  	是否显示起点与终点的城市列表组件，默认为 false 。
    ,citylist : false
    //   @uncrunch	 	KCityListOptions  	城市列表组件选项，仅在启用 citylist  选项后有效。
    ,cylopts : undefined
    // @uncrunch 	KQueryType  	起点终点数据类型，有效值为 KQueryType.busearch 和 KQueryType.navsearch。
    ,querytype : undefined
    // @uncrunch 	KSearchbox  	搜索框组件，用来同步搜索关键字信息。默认为 undefined。
    ,searchbox : undefined
    // @uncrunch 	KSearchbox  	是否支持起点选择功能。默认为 true。
    ,origarea : true
    // @uncrunch 	KSearchbox  	是否支持终点选择功能。默认为 true。
    ,destarea : true
    //@uncrunch   	Boolean  	当起终点仅有一个结果时，是否直接触发 selectdone 事件。默认为 true。
    ,nonstop : true
    //@uncrunch   	Boolean  	自动选择起点/终点的第一个结果并触发selectdone事件，默认为 true 。
    ,autoselect :true
    //@uncrunch   	Boolean  	是否允许更改地址栏 Hash 值。默认为 true。
    ,changehash : true
    //@uncrunch  	Integer  	每页显示的数据量，默认为10。
    ,pagesize : 10
    //@uncrunch  	Integer  	允许显示的总页数，默认为6。
    ,pagecount : 6
    //@uncrunch   	Boolean  	是否根据布局设置组件高度，此属性可实现完全展开的列表，不会出现滚动条。默认为 false 。
    ,autoheight :false
	 //@uncrunch   	Boolean  	当出现没有结果时，是否使用简单处理。默认为false。当使用简单模式处理时，只显示一个无结果列表
	 ,simplenoresult :false
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
此类的实例可用于KStdAccount 类型构造函数中的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KStdAccountOptions =
{
    //@uncrunch  	String  	登录校验地址。默认为：http://www.mapbar.com/mapjson/checkLogin.jsp输入参数：userName：用户名。password：登录密码。r：随机数，避免读取缓存。示例：http://www.mapbar.com/mapjson/checkLogin.jsp?userName=panxin299&password=coki97410&r=0.9776952032384973
    url : "http://www.mapbar.com/mapjson/checkLogin.jsp"
    // @uncrunch 	String  	忘记密码页面地址，默认为：http://passport.mapbar.com/accounts/forgotpasswd.jsp
    ,pwdurl : "http://passport.mapbar.com/accounts/forgotpasswd.jsp"
	// @uncrunch 	String  	注册页面地址，默认为：http://passport.mapbar.com/reg.jsp
    ,regurl : "http://passport.mapbar.com/reg.jsp"
	// @uncrunch 	Integer	保持登录状态后，自动注销的时间间隔长度，单位：天，默认为：360。
	,timelen : 360
	//@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
此类的实例可用于KStdFeedback 类型构造函数中的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
*/
var KStdFeedbackOptions =
{
    // @uncrunch 		Node	地图容器对象，必须设置此属性，否则组件无法工作，默认为undefined。
    mapcontainer : undefined
    //@uncrunch  	String	反馈的后台接口，存储数据，默认为 undefined 。
    ,url :undefined
	//@uncrunch	Boolean	是否显示关闭按钮，默认为 false 。
	,closebtn : false
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 此类的实例可用于KStdGeocoder 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KStdGeocoderOptions =
{
	//@uncrunch 
    citylist : true
    //@uncrunch   	Boolean  	显示市行政区域信息，默认为true。
    ,district:true
    //@uncrunch   	Boolean  	显示街道信息，默认为true
    ,street:true
    //@uncrunch  	String  	逆地理接口地址。
    ,url : ""
    //@uncrunch 	Node  	地图容器对象，监听地图状态变化和自动操作地图。默认为 undefined 。
    ,mapcontainer : undefined
    //@uncrunch  	KCityListOptions  	城市列表组件选项，仅在启用 citylist  选项后有效。
    ,cylopts : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
此类的实例可用于KStdMapMarkers 类型构造函数中的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KStdMapMarkersOptions =
{
    //@uncrunch  	String	 分享接口地址，此接口地址将分享数据进行临时存储，并返回分享链接，通过此链接可在其他终端上查看地图标记。默认为 undefined。
    shareurl : undefined
	//@uncrunch 	Node	地图容器对象，必须设置此属性，否则组件无法工作，默认为undefined。
	,mapcontainer : undefined
	//@uncrunch	String	 读取分享内容的接口地址，此接口返回指定标识的分享数据。默认为 undefined。
	,loadurl : undefined
	//@uncrunch String  	 沿路画线接口地址，用来修改线路时使用。默认为 undefined。
	,roadurl : undefined
	//@uncrunch  	String  	 资源上传接口地址，比如图片等资源，并返回图片地址链接。默认为 undefined。 
	,uploadurl : undefined
    //@uncrunch     String 通过经纬度字符串查询城市信息的接口地址 默认为undefined
    ,latlonurl : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
    //@uncrunch Node 分享链接按钮
    ,sharebtn : undefined
    //@uncrunch Node 清空结果按钮
    ,clearbtn : undefined
    //@uncrunch Node 标记按钮
    ,markbtn : undefined
    //@uncrunch Object 工具条相对于标记按钮左上角的偏移量
    ,offset : {top : 0, left : 0}
    //@uncrunch Number 工具条的zindex值，默认为11
    ,zindex : 11
};
/*
此类的实例可用于KStdPrinter 类型构造函数中的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KStdPrinterOptions =
{
    // @uncrunch String  	地图搜索打印页面地址。
    lsurl : undefined
	//@uncrunch	String	公交换乘查询打印页面地址。
	,bsurl:undefined
	//@uncrunch	String	公交线路查询打印页面地址。
	,blurl:undefined
	//@uncrunch	String	公交站点查询打印页面地址。
	,bsturl:undefined
	//@uncrunch	String	导航查询打印页面地址。
	,navsurl:undefined
};
/**
 * 此类的实例可用于KStdSender 类型构造函数中的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量。
 */
var KStdSenderOptions =
{
    // @uncrunch 	String  	邮件预览接口地址。
    previewurl : undefined
	//@uncrunch 	Integer	未登录用户可发送短信的次数限制，默认为20。
	,smslimit : 20
	//@uncrunch	Integer	未登录用户可发送短信次数的周期限制，单位：天，默认为7。
	,smsinterval : 7
	//@uncrunch	KCallback	用户登录状态查询接口，KCallback.fun 指向 KAccount.account() 方法。默认为 undefined 。
	,signinfun : undefined
    //@uncrunch
    ,_$P : ["KWidgetOptions", "KSenderOptions"]
};
/*
 此类的实例可用于KSuggest 类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KStdSuggestOptions =
{
    //@uncrunch String 	将 pnode 作为组件的顶级容器，pnode 应为 div 标签，忽略此参数由组件自行决定其父元素，默认为 body 。
    node : ""
    //@uncrunch Integer  	列表提示数量限制，默认是8
    ,listlimit:8
    //@uncrunch Integer  	输入速度阀值，默认为200ms，当小于这个速度时不进行提示
    ,speed:200
    //@uncrunch Integer  	开始查询的字符数量，默认值为1
    ,charcount:1
    //@uncrunch  	String  	suggest接口地址
    ,url:""
    //@uncrunch Boolean  	是否包含完全匹配的结果，默认值为true
    ,fullmatch:true
    // @uncrunch 	KCallback  	对结果进行二次处理。组件加载结果数据后，先交由此回调函数进行处理，然后再将处理后的结果进行显示。函数参数为原始查询结果对象，结构请参考相应的查询接口文档。返回值为修改后查询结果对象。
    ,preprocessDataFun : undefined
    // @uncrunch 	Boolean  	当输入焦点离开文本框时，是否需要自动提取第一个提示结果补全到文本框，默认值为 true 。
    ,autocomplete : true
    // @uncrunch 	Boolean  	是否对用户的输入历史进行结果缓存，默认值为 true 。
    ,cache : true
    // @uncrunch 	Integer  	用户输入历史记录的缓存数量，默认值为 10 。此属性仅在 cache==true  时有效。
    ,cachelimit : 10
    //@uncrunch  	Boolean  	当没有查询结果时是否自动还原到前一个提示值，默认值为 false 。
    ,autorevert : false
    //@uncrunch Integer  	提示框的最小宽度，默认为 0，表示自动根据内容适应宽度，单位：像素。
    ,minwidth:0
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 此类的实例可用于KStdTabs类构造函数的 opts? 参数中。此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KStdTabsOptions =
{
    //@uncrunch Boolean  	是否支持收起内容显示区域，默认值为false。当在已展开的选项卡上再次点击时执行此操作
    collapse : false
    //@uncrunch
    ,_$P : ["KWidgetOptions"]
};
/*
 表示 KSuggest 基类的结果文字。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KSuggestInfo =
{
    //@uncrunch 	String 	文本框文字
    text:undefined
    //@uncrunch 	Any 	文本框文字对应的值。此值类型与结构随逻辑层接口输出而定，请参考相关接口文档。
    ,kvalue:undefined
};
/*
 表示 KTabs 基类的选项卡项目类型。 此类不存在构造函数。但是，此类可以实例化为 javascript 对象常量
 */
var KTabItem =
{
    //@uncrunch 	Integer 	非标签自定义属性! 选项卡序号，从0开始。insert() 方法中，使用此值表示新选项卡放置到此序号表示的选项卡之前。
    index:0
    //@uncrunch 	String 	非标签自定义属性! 选项卡文字，支持 html 标签。此属性不属于 KTabItem 中的一员，只是在 insert() 方法中用来表示新选项卡的文字内容，函数返回 KTabItem 值类型时中不需要携带此属性。
    ,text:""
    //@uncrunch 		String 	选项卡值。
    ,kvalue:""
    //@uncrunch 	String 	非标签自定义属性! 选项卡显示内容，支持 html 标签。此属性不属于 KTabItem 中的一员，只是在 insert() 方法中用来表示新选项卡内容，函数返回 KTabItem 值类型时不需要携带此属性
    ,content:""
    //@uncrunch 	Node 	非标签自定义属性! 选项卡 Dom 对象。 insert() 方法中此属性无效
    ,tabDom : undefined
    //@uncrunch 	Node 	非标签自定义属性! 选项卡内容容器 Dom 对象。 insert() 方法中此属性无效
    ,contentDom : undefined
    //@uncrunch 	String 	选项卡对应的内容容器 id 或远程内容 Url 地址。 insert() 方法中，设置此参数将忽略 content 属性
    ,url:""
    //@uncrunch 	Boolean 	选中状态，默认为 false 。在 insert() 方法中，此值表示增加后是否自动被选中 。
    ,selected:false
    //@uncrunch 	Boolean 	如果是远程内容，是否只在第一次时请求，默认值为true。否则将在每次打开选项卡时都重新请求
    ,once:true
};
/*
预定义组件特征字符串枚举
 */
var KWidgetFlag =
{
    // @uncrunch 	sbx  	Mapbar搜索框。
    searchbox : "sbx"
    //@uncrunch 	sl  	起终点选择组件。
    ,stationlist : "sl"
    // @uncrunch 	ls  	关键字查询组件。
    ,localsearch : "ls"
    // @uncrunch 	bs  	公交查询组件。
    ,busearch : "bs"
    // 	@uncrunch navs  	导航查询组件。
    ,navsearch : "navs"
	// @uncrunch 	fdb	纠错反馈组件。
    ,feedback : "fdb"
	// @uncrunch 	smm 标记组件。
    ,mapmarkers : "smm"
};
/*
组件（KWidget 子类）选项类型基类。
 */
var KWidgetOptions =
{
    //@uncrunch  	String  	设置组件显示样式，默认为 "mwp" 。
    theme : "mwp"
    // @uncrunch 	Boolean  	当设置为 true 时，组件将忽略 theme 属性，并不再为组件相关标签设置样式。默认为 false 。
    ,userstyle : false
};
/*
 封装了一些零散的、无法分类的工具函数
 作者：wangzheng
 版本：1.0
 创建时间：2010-1-15
 最后修改时间：2010-4-26
 修改历史:
 opt#201012071501
 修改this._zindexMax的默认值
 bug#201012151652
  降低this._zindexMax的默认值，因为opera无法支持高值
 */
var KTools = new (function() {

    var _hiddenJDom;
    if ($.browser.msie) {
		$(function() {
			_hiddenJDom = $("<div style='position:absolute;left: -10000px;top:-10000px;'/>").appendTo(document.body);
		});
	}else{
		_hiddenJDom = $("<div style='position:absolute;left: -10000px;top:-10000px;'/>").appendTo(document.body);
	}
    // 网页DTD约束的渲染模式是否是标准的 @uncrunch
    this.isStrict = document.compatMode == "CSS1Compat";

    this._argsToArray = function(args)
    {
        return Array.prototype.slice.apply(args);
    };

    this._isElement = function(o)
    {
        if (typeof o == 'object' && o != null)
            return (o == window || o == document || o.nodeType == 1);
        else return false;
    };

    this._arrayContains = function(_array, value)
    {
        for (var i = 0; i < _array.length; i++)
            if (_array[i] == value) return true;
        return false;
    };

    this._arrayDel = function(_array, index)
    {
        if(!_array || !_array[index]) return _array;
        return _array.slice(0,index).concat(_array.slice(index+1,_array.length));
    };

    /**
     * 删除Dom节点，避免产生孤立节点
     * @param node
     * @uncrunch
     */
    this.removeNode = function(node) {
    	if (!_hiddenJDom) {
			return;
		}
		var n = node;
		if (document.all) {
			if (n && n.tagName != 'BODY') {
				if (n.parentNode) n.parentNode.removeChild(n);
				_hiddenJDom.append(n);
				_hiddenJDom.remove(n);
			}
		} else if (n && n.tagName != 'BODY') {
			if (n.parentNode) {
				n.parentNode.removeChild(n);
			} else {
				_hiddenJDom.html("");
				_hiddenJDom.append(n);
				_hiddenJDom.remove(n);
			}
		}
		n = null;
	};

    /**
	 * @param _this
	 * @param fun
	 * @param time
	 * @uncrunch
	 */
    this.timeout = function(_this, fun, time)
    {
        if (typeof _this != 'object' || typeof fun != 'function' || typeof time != 'number') return;
        return setTimeout(function() {
            fun.apply(_this, this._argsToArray(arguments).slice(3));
        }, parseInt(time));
    };

    /**
     *
     * @param _this
     * @param fun
     * @param time
     * @uncrunch
     */
    this.interval = function(_this, fun, time)
    {
        if (typeof _this != 'object' || typeof fun != 'function' || typeof time != 'number') {
            return;
        }
        return setInterval(function() {
            fun.apply(_this, this._argsToArray(arguments).slice(3));
        }, parseInt(time));
    };

    /**
     * @param html
     * @uncrunch
     */
    this.measSize = function(html) {
		if (!_hiddenJDom) {
			return;
		}
		html = $(html);
		_hiddenJDom.append(html);
		return new KSize(html.outerWidth(true), html.outerHeight(true));
	};

    /**
	 * @param src
	 * @uncrunch
	 */
    this.imgSize = function(src)
    {
        var img = new Image();
        img.src = src;
        return new KSize(img.width, img.height);
    };
    /**
     * 向cookies中增加键值，这些cookie将强制被设置为安全（secure=true）的。当cookies中不存在name时将新增，否则将改写
     * @param name String 类型
     * @param value String 类型
     * @param opts KCookieOptions 类型，忽略设置时将使用K_COOKIE默认配置
     * @uncrunch
     */
    this.setCookie = function(name, value, opts)
    {
        opts = this.copyOptions(opts, KCookieOptions);
        var cookie = name + "=" + escape(value) + ";";
        if (opts.expires)
        {
            var expires = new Date();
            expires.setTime(expires.getTime() + 1000 * 60 * 60 * 24 * opts.expires);
            cookie += "expires=" + expires.toGMTString() + ";";
        }
        if (opts.domain) cookie += "domain=" + opts.domain + ";";
        if (opts.path) cookie += "path=" + opts.path;
        document.cookie = cookie;
    };

    /**
     * 获取cookies中的值，忽略name将返回所有键值
     * @param name String 类型
     * 返回值： String 类型，当name不存在时返回null
     * @uncrunch
     */
    this.getCookie = function(name)
    {
        var value = document.cookie.match(new RegExp("(^| )" + name + "=([^;]*)(;|$)"));
        if (value != null) return unescape(value[2]);
        return null;
    };

    /**
     * 将多个无构造函数对象 obj1-objN 属性合并到  target  对象中。使用 obj1 对象属性补全 target 对象属性，但对 target 已有属性不覆盖
     * 1.可对具有继承关系的options进行处理 用_$P表示父options引用数组
     * 2.对于对一定options类型的属性的深度copy 有客户自己进行
     * @param target Object 类型
     * @uncrunch
     */
    this.copyOptions = function(target)
    {
        if (target == null && typeof target == 'object') return target;
        if (typeof target != 'object')  target = {};
        for (var i = 1; i < arguments.length; i++)
        {
            var orig = arguments[i];
            if (typeof orig == 'object')
            {
                if(orig._$P instanceof Array)
                {
                    for(var m = 0; m < orig._$P.length; m++) $.extend(orig, eval(orig._$P[m]));
                    delete orig._$P;
                }
                for (var i in orig)
                {
                    var origI = orig[i];
                    if (typeof target[i] == 'undefined')
                    {
                        if (typeof origI == 'object' && origI != null)
                        {
                            //当是KObject时
                            if (origI.isKClassO && origI.superclassOf(KObject))
                                target[i] = origI.clone();
                            else
                                target[i] = origI;
                        } else  target[i] = origI;
                    }
                }
            }
        }
        return target;
    };

    /**
     *在 range 范围内检查 element  四周是否可以显示下 rect 表示的尺寸。 opts 用来对测量的细节进行微调。 
     * @param element KBounds 类型 目标元素
     * @param rect KSize 类型 待检测的矩形
     * @param range KBounds 类型 检测时总的可用范围
     * @param opts KCheckSpaceOptions
     * @uncrunch
     */
    this.checkSpace = function(element, rect, range, opts)
    {
        if(!(element instanceof KBounds) || !(rect instanceof KSize) || !(range instanceof KBounds)) return null;
        opts = KTools.copyOptions(opts, KCheckSpaceOptions);
        var tpos = KPosition.TOP|KPosition.BOTTOM|KPosition.LEFT|KPosition.RIGHT;
        if(opts.pos == undefined) opts.pos = tpos;
        var _poss = [KPosition.BOTTOM, KPosition.RIGHT, KPosition.LEFT, KPosition.TOP];
        var _poss_ = ["bottom", "right", "left", "top"];
        var _4pos = {bottom : undefined, right : undefined, left : undefined, top : undefined};
        for(var i = 0; i < _poss.length; i++)
        {
            if((opts.pos&_poss[i]) != _poss[i]) continue;
            var _ops = _poss[i];
            var _ops_ = _poss_[i];
            _4pos[_ops_] = {max:null,min:null,size:null,usable:false};
            var _bounds = new KBounds(new KPoint(0,0), new KPoint(0,0));
            var _size = null;

            if (_ops == KPosition.BOTTOM || _ops == KPosition.TOP)
            {
                _bounds.min.x = element.min.x - (rect.width - opts.offsetx);
                _bounds.max.x = element.max.x + (rect.width - opts.offsetx);
                if (_ops == KPosition.BOTTOM) {
                    _bounds.min.y = element.max.y + opts.marginy;
                    _bounds.max.y = _bounds.min.y + rect.height;
                } else {
                    _bounds.max.y = element.min.y - opts.marginy;
                    _bounds.min.y = _bounds.max.y - rect.height;
                }
            } else if (_ops == KPosition.LEFT || _ops == KPosition.RIGHT) {
                _bounds.min.y = element.min.y - (rect.height - opts.offsety);
                _bounds.max.y = element.max.y + (rect.height - opts.offsety);
                if (_ops == KPosition.RIGHT) {
                    _bounds.min.x = element.max.x + opts.marginx;
                    _bounds.max.x = _bounds.min.x + rect.width;
                } else {
                    _bounds.max.x = element.min.x - opts.marginx;
                    _bounds.min.x = _bounds.max.x - rect.width;
                }
            }
            _4pos[_ops_].max = _bounds;
            _bounds = range.intersect(_bounds);
            _size = _bounds.intersect(new KBounds(_bounds.min.x + "," + _bounds.min.y + "," + rect.width + "," + rect.height)).size();
            if (_size.width >= rect.width && _size.height >= rect.height) _4pos[_ops_].usable = true;
            _4pos[_ops_].min = _bounds;
            _4pos[_ops_].size = _size;
        }
        return _4pos;
    };
    /**
     * 得到dom对象的HTML内容
     * @param dom
     * 注:此方法只适用于孤立Dom 并且该方法会有孤立节点产生
     * @uncrunch
     */
    this.domHTML = function(dom)
    {
        if (this._isElement(dom))
        {
            dom = $(dom);
            if(!dom.parent()[0]) $(dom).wrap("<div></div>");
            return dom.parent().html();
        }
    };

    /**
     * 得到name=value&x=y  中  name 的 value
     * @param str
     * @param name
     */
    this._getParam = function(str, name)
    {
        if (typeof str != 'string' || typeof name != 'string' || str.length < 1 || name.length < 1) return "";
        var i = str.indexOf(name + "=");
        if (i != -1) i += name.length + 1;
        str = str.substring(i);
        var j = str.indexOf("&");
        if (j == -1)
            return str;
        else
            return str.substring(0, j);
    };

    var ua = navigator.userAgent.toLowerCase();
    var s = null;
    //@uncrunch
    this.isIE6 = false;
    if (s = ua.match(new RegExp("msie ([\\d.]+)")))  this.isIE6 = (parseInt(s[1]) == 6);

    /**
     * 获取 dom 的区域信息（默认情况下此区域是以文档document左上角为原点）， dom 可以是 window 对象。
     * @param dom Node 类型
     * @param opts：KGetBoundsOptions 类型。
     * @return KBounds 类型
     * @uncrunch
     */
    this.getBounds = function(dom, opts)
    {
        if(this._isElement(dom))
        {
            opts = this.copyOptions(opts, KGetBoundsOptions);
            var _omargin = !opts.margin;
            var _opadding = !opts.padding;
            var _oborder = !opts.border;
            var jDom = $(dom);
            var left = jDom.scrollLeft();
            var top = jDom.scrollTop();
            var width = jDom.width();
            var height = jDom.height();
            if(dom != window && dom != document)
            {
                left = jDom.offset().left;
                top = jDom.offset().top;

                if(!opts.margin)//不禁用margin
                {
                    width = jDom.outerWidth(true);
                    height = jDom.outerHeight(true);
                    left -= (width - jDom.outerWidth()) / 2;
                    top -= (height - jDom.outerHeight()) / 2;
                } else {
                    if(!opts.border) {//不禁用border
                        width = jDom.outerWidth();
                        height = jDom.outerHeight();
                    } else {
                        var _innerW = jDom.innerWidth();
                        var _innerH = jDom.innerHeight();
                        left += (jDom.outerWidth() - _innerW) / 2;
                        top += (jDom.outerHeight() - _innerH) / 2;
                        if(!opts.padding) {//不禁用padding
                            width = _innerW;
                            height = _innerH;
                        } else {
                            left += (_innerW - width) / 2;
                            top += (_innerH - height) / 2;
                        }
                    }
                }
            }
            return new KBounds(new KPoint(left, top), new KPoint(left + width, top + height));
        } else {
            return new KBounds(new KPoint(0,0), new KPoint(0,0));
        }
    };

    /**
     * 以 optionsType 类型为参照，检查 element 属性集合（attributes）是否包含  opts  对象中缺少的属性，如果是则将其复制到  opts  中
     * @param opts Object 类型
     * @param element Node 类型
     * @param optionsType Type 类型，表示 optionsType 参数的类型
     * @return Object
     * @uncrunch
     */
    this.copyAttr2Options = function(opts, element, optionsType)
    {
        if(!this._isElement(element) || typeof optionsType != "object") return {};
        if(typeof opts != 'object') opts = {};
        var eDom = $(element);
        for(var i in optionsType)
        {
            if(typeof opts[i] == 'undefined' && typeof eDom.attr(i) != "undefined")
            {
                if(typeof optionsType[i] == 'number')
                {
                    opts[i] = eDom.attr(i) * 1;
                } else if(typeof optionsType[i] == 'boolean') {
                    opts[i] = ((eDom.attr(i) + "").toLowerCase() == "true");
                } else {
                    opts[i] = eDom.attr(i);
                }
            } else {
                opts[i] = optionsType[i];
            }
        }
        return opts;
    };

    /**
     * 对比两个 Options 类型对象，返回 opts2 与 opts1 中属性值不同的属性。
     * @param opts1 Options 类型
     * @param opts2 Options 类型
     * @return Options 类型，包含了 opts2 与 opts1 中的差异属性与值。
     * @uncrunch
     */
    this.compareOptions = function(opts1, opts2)
    {
        var opts = {};
        if(typeof opts2 == 'object')
        {
            if(typeof opts1 != 'object') opts1 = {};
            for(var i in opts2)
            {
                if(typeof opts2[i] === "object" && opts2[i].equals)
                {
                    if(!opts2[i].equals(opts1[i])) opts[i] = opts2[i];
                } else if(opts2[i] != opts1[i]) {
                    opts[i] = opts2[i];
                }
            }
        }
        return opts;
    };
    /**
     * 删除字符串中出现的 HTML 标签
     * @param String
     * @return String
     * @uncrunch
     */
    this.removeHTMLTag = function(s) {
        var r = new RegExp("<.*?>|\r|\n","gi");
        return function(s) {
            return s.replace(r,"");
        };
    }();

    //@uncrunch
    this._zindexMax = 99999;//2000000000;2147483520 2147483584 2147483584; 
    //Opera doesn't support bigger value
	
    var _lightBoxElement = undefined;
    var _lightBoxDom = undefined;
	var _lightBoxDoms = {};

	//dsl
    var _lightBoxDocResizeFun = function() {
        KTools.lightbox({visible:true});
    };

//	this._tempzindex = this._zindexMax;
    /**
     *  灯箱（Light Box）效果。 页面除了指定元素的其余部分都以指定的背景色进行遮罩。也可以使用背景图片替换背景色。
     * 没有指定element时表示对上一个
     * @param opts KLightboxOptions 类型
     * @uncrunch
     */
    this.lightbox = function(opts)
    {
        var _bgcolor = opts ? opts.bgcolor : undefined;
        var _bgimg = opts ? opts.bgimg : undefined;
        var _alpha = opts ? opts.alpha : undefined;

        opts = KTools.copyOptions(opts, KLightboxOptions);
        if(opts.visible)
        {
            //创建lightBox div 并放到body中
            if(!_lightBoxDom) _lightBoxDom = $("<div style=\"position:absolute;left:0px;top:0px;margin:0px;padding:0px;border:none;z-index:"+(this._zindexMax - 1)+";display:none;\"></div>").appendTo(document.body).get(0);
            if(KTools.isIE6) $(_lightBoxDom).bgiframe();

            if(opts.element && _lightBoxElement != opts.element)
            {
                if(_lightBoxElement) $(_lightBoxElement).css({"z-index": _lightBoxElement._oldZIndex});
                _lightBoxElement = opts.element;
                _bgcolor = opts.bgcolor;
                _bgimg = opts.bgimg;
                _alpha = opts.alpha;
            }
            if(_alpha) $(_lightBoxDom).css("opacity", ""+opts.alpha).css("*filter", "Alpha(Opacity="+(opts.alpha * 100)+")");
            if(_bgcolor) $(_lightBoxDom).css("background-color", "" + opts.bgcolor);
            if(typeof _bgimg == "string") $(_lightBoxDom).css("background", "url(\""+opts.bgimg+"\") repeat scroll 50% 50% "+opts.bgcolor+"");
            //根据参数显示lightBox div
            if(_lightBoxElement)
            {

				if(!_lightBoxElement._oldZIndex) _lightBoxElement._oldZIndex = $(_lightBoxElement).css("z-index");
                $(_lightBoxElement).css({"z-index": "" + (this._zindexMax), "position":"absolute"});
                $(_lightBoxDom).hide();
                var width = $(document).width();
                var height = $(document).height();
                if(KTools.isIE6)
                {
	                width = $(document.body).outerWidth(true);
	                height = $(document.body).outerHeight(true);
	                if(width < $(window).width()) width = $(window).width();
	                if(height < $(window).height()) height = $(window).height();
                }
                $(_lightBoxDom).css({"width": width + "px", "height": height + "px"}).show();
            }
            KEvent.bind(_lightBoxDom, "click", KTools._stopPropagation);
            if(_lightBoxDocResizeFun._binded != true)
            {
                KEvent.bind(window, "resize", _lightBoxDocResizeFun);
                _lightBoxDocResizeFun._binded = true;
            }
        } else {
            if(opts.element && _lightBoxElement != opts.element) return;
            if(_lightBoxDocResizeFun._binded === true)
            {
                KEvent.unbind(window, "resize", _lightBoxDocResizeFun);
                _lightBoxDocResizeFun._binded = false;
            }
            //关闭
            if(_lightBoxElement && _lightBoxDom)
            {
                $(_lightBoxElement).css("z-index", _lightBoxElement._oldZIndex);
                _lightBoxElement = undefined;
                $(_lightBoxDom).hide();
            }
        }
    };
    var _scrollDoms = {};
    /**
     * 将 element 元素滚动到 view 元素的可视范围内。 view  必须是 element 父级元素，不要求是直接父级。 
     * @param element Node 类型
     * @param view Node 类型
     * @param speed Speed 类型，滚动速度，有效值："slow", "normal", "fast"
     * @uncrunch
     */
    this.scrollIntoView = function(element, view, speed, moreX, moreY)
    {
        if(!element || !view) return;
        element = $(element);
        view = $(view);
        if(typeof view.get(0)._$id === "undefined") view.get(0)._$id = KTools.timeCode();
        if(_scrollDoms[view.get(0)._$id])
        {
            view.stop();
            delete _scrollDoms[view.get(0)._$id];
        }
        _scrollDoms[view.get(0)._$id] = true;
        var _scrollBounds = KTools.getBounds(view[0]);
        var _focusBounds = KTools.getBounds(element[0], {margin:false});
		var _scrollSize = _scrollBounds.size();
		var _focusSize = _focusBounds.size();
        if(!_scrollBounds.contains(_focusBounds))
        {
            var _x = 0, _y = 0;
			_x = _scrollBounds.min.x - _focusBounds.min.x;
            if(_scrollSize.width > _focusSize.width && _scrollBounds.max.x < _focusBounds.max.x) _x = _scrollBounds.max.x - _focusBounds.max.x;
            _y = _scrollBounds.min.y - _focusBounds.min.y;
            if(_scrollSize.height > _focusSize.height && _scrollBounds.max.y < _focusBounds.max.y) _y = _scrollBounds.max.y - _focusBounds.max.y;
            if(_x != 0 || _y != 0) view.animate({scrollTop:view.scrollTop() - _y, scrollLeft:view.scrollLeft() - _x}, speed);
        }
    };

    var _msgDomStr = '<div class="mwp_mbx" style="top:-10000px;left:-100px;"><div class="mwp_bub" style="z-index:'+(this._zindexMax - 5)+';"><div class="mwp_bub_c"><h3 class="mwp_mbx_t"></h3><div class="mwp_mbx_c"></div><div class="mwp_mbx_ba"></div></div><span class="mwp_bub_a mwp_bub_ar"></span><span class="mwp_bub_clb"><a href="javascript:void(0);" title="关闭">关闭</a></span></div><div class="mwp_mbx_s" style="z-index:'+(this._zindexMax - 6)+';;"></div></div>';
    var _msgCase = {};
    var _msgResizeFun = function(){
        if(_msgCase)
        {
            for(var i in _msgCase)
            {
                if(_msgCase[i]) _msgCase[i]._obj.layout();
            }
        }
    };

    /**
     * 将 msg 显示到网页自定义消息框中，并返回消息框 id ， 方便于 KTools.hideMsg() 方法的处理。
     *   程序算法说明：
     * 每次都会创建 KMsgBox 对象，当调用 KTools.hideMsg() 方法后将销毁此对象。
     * 如果 msg 为 Node 对象， KTools.hideMsg() 应将此对象交换给原父节点（如果有）。
     * 如果指定了 KMsgBoxOpenOptions.node 属性，则提示框应该自动计算目标元素四个方位的可用空间，并选其一显示。
     * @param msg KHtmlContent 类型
     * @param opts KMsgBoxOpenOptions 类型
     * @return String 类型，消息框 id
     * @uncrunch
     */
    this.showMsg = function(msg, opts)
    {
        if(typeof msg === 'string' || KTools._isElement(msg))
        {
            var _parent = undefined;
            if(KTools._isElement(msg))
            {
                _parent = $(msg).parent();
            }
            if(!opts) opts = {};
            if(!opts.theme) opts.theme = KMsgBoxOpenOptions.theme;
            var mb = new KMsgBox($(_msgDomStr).appendTo(document.body)[0], {theme:opts.theme});
            if(!opts.lightbox && _lightBoxElement){
				$(mb.dom()).css("z-index", ++this._zindexMax);
			} 
            KEvent.bind(window,"resize", _msgResizeFun);
            _msgCase[mb.id()] = {_obj:mb, _parent:_parent, msg:msg};
            KEvent.bind(mb, "closed", function(evt, _obj, action, button) {
                KTools.hideMsg(evt.data._id);
                if(evt.data.closedcbk) evt.data.closedcbk(action, button);
                KEvent.clear(mb);
            }, {_id:mb.id(), closedcbk:opts.closedcbk});
            _msgCase[mb.id()].timeout = setTimeout(function(){mb.open(msg, opts);});
            return mb.id();
        }
    };

    /**
     * 将 msgid 指定的消息框隐藏。
     * @param msgid
     * @uncrunch
     */
    this.hideMsg = function(msgid)
    {
        var mb = _msgCase[msgid];
        delete _msgCase[msgid];
        if(mb)
        {   
			clearTimeout(mb.timeout);
			mb._obj.close();
            if(mb._parent) mb._parent.append(mb.msg);
            mb._obj.finalize();
        }
    };
    
    /**
     * 将 msgid 指定的消息框重新定位。
     * @param msgid
     * @uncrunch
     */
    this.resizeMsg = function(msgid)
    {
        var mb = _msgCase[msgid];
        mb._obj.layout();
    };

    /**
     * 得到消息框
     * @param msgid
     * @uncrunch
     */
    this.getMsg = function(msgid)
    {
        var mb = _msgCase[msgid];
        if(mb) return mb._obj;
    };

    var _codeIndex = 0;
    /**
     *  @uncrunch
     */
    this.timeCode = function()
    {
        return new Date().getTime() + "_" + (_codeIndex++);
    };

    /**
     * 将 url 添加到浏览器收藏夹。
     * @param name String 类型，收藏名称
     * @param url String 类型，收藏地址
     * @uncrunch
     */
    this.addFavorite = function(name, url, node)
    {
        if (window.sidebar) {
            window.sidebar.addPanel(name, url, "");
        } else if (document.all) {
            window.external.AddFavorite(url, name);
        } else if (window.opera && window.print) {
			var mbm = node;
			if (mbm) {
				mbm.setAttribute('rel', 'sidebar');
				mbm.setAttribute('href', url);
				mbm.setAttribute('title', name);
				mbm.click();
			}
        } else {
			return;
		}
    };

    /**
     * 将指定字符串中的HTML标签删除。
     * @param html String 类型，需要进行处理的html字符串。
     * @uncrunch
     */
    this.text = function(html)
    {
        var r = new RegExp("<.*?>|\r|\n","gi");
        return function(html) {
            return html.replace(r,"");
        };
    }();

    this._stopPropagation = function(event)
    {
        event.stopPropagation();
        return false;
    };

    /**
     * 对象销毁
     * @uncrunch
     */
    this.finalize = function()
    {
        for(var i in _msgCase) this.hideMsg(i);
        _msgCase = null;
        _hiddenJDom = null;
        _scrollDoms = null;
        KEvent.unbind(window,"resize", _msgResizeFun);
    };

    /**
     * 返回依赖的其它组件。
     * @return KObject[]
     * @uncrunch
     */
    this.dependent = function()
    {
        return [KCookieOptions, KSize, KPosition, KPoint, jQuery, KBounds, KObject, KGetBoundsOptions, KCheckSpaceOptions, KLightboxOptions, KMsgBox, KMsgBoxOpenOptions];
    };
})();
/*
 展示层组件平台所有对象基类
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-26
 */
var KObject = KClass.create("KObject");

/**
 * 返回对象类型
 * 返回值：KObject Class 类型，如KObject
 * @uncrunch
 */
KObject.prototype.getType = function()
{
    return this.constructor;
};

/**
 * 返回对象类型描述字符串
 * 返回值：String 类型，比如返回“KObject”字符串
 * @uncrunch
 */
KObject.prototype.getTypeString = function()
{
    return this.className;
};

/**
 * 克隆当前对象
 * @uncrunch
 */
KObject.prototype.clone = function()
{
};

/**
 * 如果与obj相同时则返回true，判断条件由具体实现类决定
 * @uncrunch
 */
KObject.prototype.equals = function(obj)
{
    return this == obj;
};

/**
 * @overwrite
 * @uncrunch
 */
KObject.prototype.toString = function()
{
	return "";
};

/**
 * 释放当前对象的所有资源
 * @uncrunch
 */
KObject.prototype.finalize = function()
{
    for(var i in this)
    {
        this[i] = null;
    }
};



/**
 * @uncrunch
 */
KObject.prototype.dependent = function()
{
    return [KClass];
};
/*
 管理模块、对象和Dom节点的事件，支持事件处理队列（即支持一个对象事件触发多个处理函数）、事件销毁（释放内存）等高级操作
 作者：wangzheng
 版本：1.0
 创建时间：2010-1-15
 最后修改时间：2010-1-26
 */
var KEvent = new (function() {

    var _tMaplet = (typeof Maplet) == 'function';
    //adapters结构：evtname->{}[]
    var _funRm = function(obj, fun)
    {
        for (var i = 0; i < obj.length; i++)
            if (obj[i].fun == fun)
            {
                obj.splice(i, 1);
                return;
            }
    };

    //obj -> string[] evtname
    var _objArray = {};

    /**
     * @return 获取版本信息
     * @uncrunch
     */
    this.version = function()
    {
        return "1.0";
    };

    /**
     * @return 中文名称
     * @uncrunch
     */
    this.cnname = function()
    {
        return "事件模块";
    };

    /**
     * 对指定的对象或Dom对象事件进行监听，当事件触发时，将自动触发事件处理函数
     * @param obj Object 类型，事件源对象，即需要监听的事件对象。如果需要给KMap中不同的地图对象增加事件监听时，需要进行如下调用：KEvent.bind(KMap.maplet(mapcontainer), "click", eventHandler)
     * @param evtname String 类型，事件名称，每种对象类型都会公开一个或多个事件
     * @param fun Function 类型，事件处理函数
     * @param data ?
     * @param thisobj ?
     * @uncrunch
     */
    this.bind = function(obj, evtname, fun, data, thisobj)
    {
        
        var _tKMap = (typeof KMap) == 'object';
        if (typeof obj != 'object' || obj == null || typeof evtname != 'string' || typeof fun != 'function') return;
        //基本dom事件
        if (KTools._isElement(obj) || obj.jquery)
        {
            //Jquery的事件绑定
            $(obj).bind(evtname, data, fun);
        }  else if (_tMaplet && (obj._isSelfEvt == true || obj instanceof Maplet))//当需要自己管理事件处理时去调用对象的bind方法
        {
            if (_tKMap && (obj == KMap || obj instanceof Maplet))
            {
                KMap.bind(obj, evtname, fun, data, thisobj);
            } else
                obj.bind(obj, evtname, fun, data, thisobj);
        } else {
            //一般对象的事件处理绑定
            if (!obj.adapters) obj.adapters = {};
            if (!obj.adapters[evtname]) obj.adapters[evtname] = [];
            if (!KTools._arrayContains(obj.adapters[evtname], fun)) obj.adapters[evtname].push({fun:fun, data:data, thisobj:thisobj});
        }
        if(typeof obj._eId == 'undefined') obj._eId = KTools.timeCode();
        if (!_objArray[obj._eId]) _objArray[obj._eId] = {obj:obj, evts:[]};
        _objArray[obj._eId].evts.push(evtname);
    };

    /**
     * 移除对指定对象事件的监听
     * @param obj Object 类型，事件源对象，即需要监听的事件对象
     * @param evtname String 类型，事件名称，每种对象类型都会公开一个或多个事件
     * @param fun Function 类型，事件处理函数
     * @uncrunch
     */
    this.unbind = function(obj, evtname, fun)
    {
        var _tKMap = (typeof KMap) == 'object';
        if (typeof obj != 'object' || typeof evtname != 'string' || typeof fun != 'function') return;
        //基本dom事件
        if (KTools._isElement(obj) || obj.jquery)
        {
            $(obj).unbind(evtname, fun);
            return;
        }
        //当需要自己管理事件处理时去调用对象的unbind方法
        if (_tMaplet && _tKMap && ((obj == KMap && obj._isSelfEvt == true) || obj instanceof Maplet))
        {
            if (obj == KMap) obj = KMap.getCurrentMap();
            if (evtname == 'mapinit') obj = KMap;
            if (KMap.adapters[obj] && KMap.adapters[obj][evtname])
                _funRm(KMap.adapters[obj][evtname], fun);
        } else
            if (obj.adapters && obj.adapters[evtname]) _funRm(obj.adapters[evtname], fun);
    };

    /**
     * 移除对象指定事件或全部事件的监听。忽略evtname时，将移除obj上的所有事件监听
     * @param obj Object 类型，事件源对象
     * @param evtname String 类型，事件名称
     * @uncrunch
     */
    this.clear = function(obj, evtname)
    {
        var _tKMap = (typeof KMap) == 'object';
        if (typeof obj != 'object') return;
        //基本dom事件
        if (KTools._isElement(obj) || obj.jquery)
        {
            if (typeof evtname == 'string')
                $(obj).unbind(evtname);
            else
                $(obj).unbind();
            return;
        }
        if (_tMaplet && _tKMap && ((obj == KMap && obj._isSelfEvt == true) || obj instanceof Maplet))
        {
            if (obj == KMap) obj = KMap.getCurrentMap();
            if (evtname == 'mapinit') obj = KMap;
            if (KMap.adapters[obj])
                if (typeof evtname == 'string')
                    delete KMap.adapters[obj][evtname];
                else
                    for (var i in KMap.adapters[obj]) delete KMap.adapters[obj][i];
        } else {
            if (obj.adapters)
                if (typeof evtname == 'string')
                    delete obj.adapters[evtname];
                else
                    for (var i in obj.adapters) delete obj.adapters[i];
        }
    };

    /**
     * 触发对象事件，可将传递给事件处理函数的参数追加到evtname之后
     * @param obj Object 类型，事件源对象
     * @param evtname String 类型，事件名称
     * ... thisObj, ...
     * @uncrunch
     */
    this.trigger = function(obj, evtname)
    {
        var _tKMap = (typeof KMap) == 'object';
        if (typeof obj != 'object' || typeof evtname != 'string') return;
        //基本dom事件
        if (KTools._isElement(obj) || obj.jquery)
        {
            $(obj).trigger(evtname, KTools._argsToArray(arguments).slice(2));
            return;
        }
        if (_tMaplet && _tKMap && ((obj == KMap && obj._isSelfEvt == true) || obj instanceof Maplet))
        {
            if (obj == KMap) obj = KMap.getCurrentMap();
            if (evtname == 'mapinit') obj = KMap;
            if (KMap.adapters[obj] && KMap.adapters[obj][evtname])
            {
                var funs = KMap.adapters[obj][evtname];
                for (var i = 0; i < funs.length; i++)
                {
                    var args = [{data:funs[i].data}];
                    args = args.concat(KTools._argsToArray(arguments).slice(2))
                    if (funs[i].thisobj)
                        funs[i].fun.apply(funs[i].thisobj, args);
                    else
                        funs[i].fun.apply(obj, args);
                }
            }
        } else {
            if (obj.adapters && obj.adapters[evtname])
            {
                var funs = obj.adapters[evtname];
                for (var i = 0; i < funs.length; i++)
                {
                    var args = [{data:funs[i].data}];
                    args = args.concat(KTools._argsToArray(arguments).slice(2))
                    if (funs[i].thisobj)
                        funs[i].fun.apply(funs[i].thisobj, args);
                    else
                        funs[i].fun.apply(obj, args);
                }
            }
        }
    };

    /**
     * 对象销毁
     * @uncrunch
     */
    this.finalize = function()
    {
        for (var i in _objArray)
        {
            if (KTools._isElement(_objArray[i].obj) || _objArray[i].obj.jquery) {
                for (var j = 0; j < _objArray[i].evts.length; j ++) {
                    $(_objArray[i].obj).unbind(_objArray[i].evts[j]);
                }
            } else {
                for (var j = 0; j < _objArray[i].evts.length; j ++) this.clear(i, _objArray[i].evts[j]);
            }
        }
        _objArray = null;
    };
    /**
     * 返回依赖的其它组件。
     * @return KObject[]
     * @uncrunch
     */
    this.dependent = function()
    {
        return [KTools, jQuery];
    };
})();
/*
 表示地址栏Hash值的结构，此类型对键值对进行封装，提供更易访问接口
 作者:wangzheng
 版本：1.0
 创建时间:2010-1-25
 修改时间:2010-1-25 14:15
 */
var KUrlHash = KClass.create("KUrlHash", KObject);

/**
 * 创建无参数的 KUrlHash 对象
 */
KUrlHash.initialize = function()
{
    //内部的url结构:key -> value
    this._UrlHash = {};
};

/**
 * 根据指定的键名称字符串创建 KUrlHash 对象
 * @param keys String 类型，键名称字符串，多个键名称间使用逗号分隔
 * 返回值：KUrlHash 对象
 * @uncrunch
 */
KUrlHash.parseKeys = function(keys)
{
    if (typeof keys != 'string' || keys.length < 1) return null;
    var obj = new KUrlHash();
    var keys = keys.split(",");
    for (var i = 0; i < keys.length; i ++)
        obj._UrlHash[keys[i]] = "";
    return obj;
};

/**
 * 根据指定的Hash字符串创建 KUrlHash 对象
 * @param hash hash：String 类型
 * 返回值：KUrlHash 对象
 * @uncrunch
 */
KUrlHash.parseByHash = function(hash, decode)
{
    if (typeof hash != 'string' || hash.length < 1) return null;
	if(typeof decode != "boolean") decode = true;
    var obj = new KUrlHash();
    hash = hash.replace(/^\#/, "");
	//if(decode) hash = decodeURIComponent(decodeURIComponent(hash));
    hash = hash.split("&");
    for (var i = 0; i < hash.length; i ++)
    {
		if(decode){
			hash[i] = decodeURIComponent(decodeURIComponent(hash[i]));
		}
        var _hash = hash[i].split("=");
        if (_hash[0])
        {
            obj._UrlHash[_hash[0]] = "";
            if (_hash[1])
            {
                obj._UrlHash[_hash[0]] = _hash[1];
            }
        }
    }
    return obj;
};

/**
 * 对指定的 url 进行两次的 encodeURIComponent() 编码处理。
 * @param url String 类型
 * @return String 类型，返回编码后的 url 。
 * @uncrunch
 */
KUrlHash.encode = function(url)
{
	return KUrlHash.parseByHash(url, false).toString();
};

/**
 * 对指定的 url 进行解码处理。
 * @param url String 类型
 * @return String 类型，返回解码后的 url 。
 * @uncrunch
 */
KUrlHash.decode = function(url)
{
	return KUrlHash.parseByHash(url, true).toString(false);
};

/**
 * 设置键值，如果 key 不存在则自动增加
 * @param key String 类型，键名称
 * @param value String 类型，值
 * @uncrunch
 */
KUrlHash.prototype.setKey = function(key, value)
{
    if (typeof key != 'string') return;
	if(typeof value == "undefined") value = "";
    this._UrlHash[key] = new String(value);
};

/**
 * 返回键名称字符串，使用逗号分隔
 * @return String
 * @uncrunch
 */
KUrlHash.prototype.keys = function()
{
    var _key = [];
    for(var i in this._UrlHash)
    {
        _key.push(i);
    }
    return _key.join(",");
};

/**
 * 获取键值，如果 key 不存在则返回 null
 * @param key String 类型，键名称
 * @return  String 类型
 * @uncrunch
 */
KUrlHash.prototype.value = function(key)
{
    if (typeof key != 'string') return null;
    if (this._UrlHash[key])  return this._UrlHash[key];
    return null;
};

/**
 * 如果当前对象包含指定的键名称，则返回 true
 * @param key String 类型，键名称
 * @uncrunch
 */
KUrlHash.prototype.containsKey = function(key)
{
    if (typeof key != 'string') return false;
    return (typeof this._UrlHash[key] == 'string');
};

/**
 * 删除键值。忽略 key 将删除所有键值
 * @param key String 类型，键名称
 * @uncrunch
 */
KUrlHash.prototype.remove = function(key)
{
    if (typeof key != 'string')
        this._UrlHash = {};
    else delete this._UrlHash[key];
};

/**
 * 比对 keys 是否与当前对象的键名称相同，此方法将先进行排序再进行对比。
 * @param keys String 类型，多个键名称使用逗号分隔
 * @return Boolean
 * @uncrunch
 */
KUrlHash.prototype.equalsKeys = function(keys)
{
    return (this.keys().split(",").sort().join(",") === keys.split(",").sort().join(","));
};

/**
 * @overwrite
 * @uncrunch
 */
KUrlHash.prototype.equals = function(other)
{
    if(other instanceof KUrlHash)
    {
        return this.equalsKeys(other.keys()) && (this.toString().split("&").sort().join("&") === other.toString().split("&").sort().join("&"));
    }
    return false;
};

/**
 * @return 转换成url hash格式字符串
 * @uncrunch
 */
KUrlHash.prototype.toString = function(encode)
{
	if(typeof encode != "boolean") encode = true;
    var _keyValue = [];
    for(var i in this._UrlHash)
    {
		var valueI = this._UrlHash[i];
		if(encode) valueI = encodeURIComponent(encodeURIComponent(valueI));
        _keyValue.push(i + "=" + valueI);
    }
    return _keyValue.join("&");
};

/**
 * @overwrite
 * @uncrunch
 */
KUrlHash.prototype.clone = function()
{
    var _new = new KUrlHash();
    _new._UrlHash = {};
    for(var i in this._UrlHash) _new._UrlHash[i] = this._UrlHash[i];
    return _new;
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KUrlHash.prototype.dependent = function()
{
    return [KObject];
};
/*
 管理页面操作记录，使得用户可以通过浏览器的后退前进按钮进行操作。文档设计阶段，此模块只记录Ajax或Script通讯相关的操作记录
 作者：wangzheng
 版本：1.0
 创建时间：2010-01-20
 最后修改时间：2010-01-20
 */
var KHistory = new (function() {
    var _iframDom = null;

    if($.browser.msie)
    {
        $(window).ready(function(){
            _iframDom = $('<iframe name="historyFrame" width="0" height="0" frameborder="no" border="0" MARGINWIDTH="0" MARGINHEIGHT="0" SCROLLING="no"></iframe>').appendTo(document.body);
            KEvent.bind(KListener, "hashchanged", function(evt, hashobj, self) {
                if(self != true)
                {
                    historyFrame.document.open('text/html');
                    historyFrame.document.write('<html><head></head><body onload = "window.parent.KListener.setHash(window.parent.KUrlHash.parseByHash(it.value), true, true, true);"><input name="it" value="'+hashobj.toString()+'"/></body></html>');
                    historyFrame.document.close();
                }
            });
        });
    }
    /**
     * @return 获取版本信息
     * @uncrunch
     */
    this.version = function()
    {
        return "1.0";
    };

    /**
     * @return 中文名称
     * @uncrunch
     */
    this.cnname = function()
    {
        return "管理页面操作记录模块";
    };
    /**
     * 增加历史记录
     * @param hashstr String 类型，此值一般为地址栏Hash值
     * @uncrunch
     */
    this.add = function(hashstr)
    {
//        if (typeof hashstr == 'string' && hashstr != _historyList[_historyList.length - 1])
//        {
//            if (_historyList.length > _nowIndex + 1)
//                _historyList.splice(_nowIndex + 1, _historyList.length - _nowIndex - 1);
//            _historyList.push(hashstr);
//            _nowIndex = _historyList.length;
//        }
    };

    /**
     * 返回
     * @uncrunch
     */
    this.back = function()
    {
        history.go(-1);
    };

    /**
     * 前进
     * @uncrunch
     */
    this.forward = function()
    {
        history.go(1);
    };
    /**
     * 返回依赖的其它组件。
     * @return KObject[]
     * @uncrunch
     */
    this.dependent = function()
    {
        return [jQuery, KListener];
    };
})();

/*
 此模块主要完成对地址栏参数（Url Hash）的相关处理，包括：
 1. 当Hash发生变化时，自动通知相关组件进行功能更新。
 2. 当组件功能结果发生改变，则自动刷新Hash值。
 模块运行时，会在固定间隔时间内检查地址栏参数是否有更改，如果有更改则通知Widgets Manager模块的相应组件进行处理。
 作者：wangzheng
 版本：1.0
 创建时间：2010-01-20
 最后修改时间：2010-01-20


opt# 1009281140
地址栏参数匹配规则改进，请参考http://jira.mapbar.com/browse/MWP-120
 */
var KListener = new (function() {

    var _hash = null;
    var _time = null;
    var _this = this;

    /**
     * @return 获取版本信息
     * @uncrunch
     */
    this.version = function()
    {
        return "1.0";
    };

    /**
     * @return 中文名称
     * @uncrunch
     */
    this.cnname = function()
    {
        return "地址栏参数监听模块 ";
    };

    /**
     * 根据 hashobj 通知相关组件进行处理，并控制是否改变地址栏Hash值。当模块内部记录的Hash值与地址栏相同时，不会进行通知，除非启用了 force 。
     * @param hashobj UrlHash 类型
     * @param change Boolean 类型，是否修改地址栏Hash值。默认值为true
     * @param force Boolean 类型，默认为 false
     * @uncrunch
     */
    this.setHash = function(hashobj, change, force)
    {
        if(!(hashobj instanceof KUrlHash)) return;
        if(typeof change != "boolean") change = true;
        if(typeof force != "boolean") force = false;
        var self = arguments[3];
        if(hashobj.equals(_hash))
        {
            if(force && !self) _doManagerAndTrigger(hashobj, self);
        } else {
            _hash = hashobj;
            if(change) window.location.hash = "#" + decodeURIComponent(hashobj.toString());
            if(force) _doManagerAndTrigger(hashobj, self);
            else if(change) KEvent.trigger(KListener, "hashchanged", hashobj, self);
        }
    };
    var _doManagerAndTrigger = function(hashobj, self)
    {
        //opt# 1009281140 fix begin
        //delete by panx
        //var list = KManager.matchByHash(hashobj);
        //add by panx
        var list = [];
        if(hashobj.containsKey(KConfig.get("mwpf"))) {
            var wf = hashobj.value(KConfig.get("mwpf"));
            list = KManager.match(wf, KQuery);
        }
        if(list.length==0) list = KManager.matchByHash(hashobj);
        //opt# 1009281140 fix end
        var _tri = null;
        if(list && list.length > 0)
        {
            _tri = list[0];
            setTimeout(function(){
                _tri.queryByHash(hashobj);
            });
        }
        KEvent.trigger(KListener, "hashchanged", hashobj, self);
        return _tri;
    };
    var _listen = function()
    {
        var _lHash = window.location.href.replace(/[^#]*#/, "").replace(/%25/ig, "%2525");
        var _nowHash = KUrlHash.parseByHash(_lHash);
        if(_nowHash && !_nowHash.equals(_hash))
        {
            _hash = _nowHash;
            return _doManagerAndTrigger(_nowHash, false);
        }
        return null;
    };
     /**
     * @uncrunch
     */
    this._newHash = true;
    /**
     * 启动模块运行
     * @uncrunch
     */
    this.start = function()
    {
		this.firstURL = window.location.href;
        if(_time != null) return;
        _time = setInterval(function() {
            _listen();
        }, parseInt(KConfig.get("LISTENER_INTERVAL")));
        KEvent.trigger(KListener, "initialized", _listen());
    };
    /**
     * 关闭模块运行
     * @uncrunch
     */
    this.stop = function()
    {
        if(_time == null) return;
        clearInterval(_time);
        _time = null;
    };

    /**
     * @uncrunch
     */
    this.finalize = function()
    {
        this.stop();
        _hash = null;
    };
    
    /**
     * 返回依赖的其它组件。
     * @return KObject[]
     * @uncrunch
     */
    this.dependent = function()
    {
        return [KEvent, KUrlHash, KHistory];
    };
})();

/*
 对已实例化的组件对象进行管理，包括获取特定组件对象、批量组件操作等，并完成组件间通讯
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-25
 */
var KManager = new (function() {

    //结构: {KWidget对象id() -> KWidget对象}
    var _id = {};
    //结构： {类型名称 -> {KWidget对象id() -> KWidget对象}}
    var _className = {};
    //结构：{group -> {KWidget对象id() -> KWidget对象}}
    var _group = {};
    //结构 : {KWidget flag -> {KWidget对象id() -> KWidget对象}}
    var _flag = {};
    var _this = this;
    /**
     * @return 获取版本信息
     * @uncrunch
     */
    this.version = function()
    {
        return "1.0";
    };

    /**
     * @return 中文名称
     * @uncrunch
     */
    this.cnname = function()
    {
        return "组件对象管理模块";
    };

    /**
     * 将组件注册到组件管理器
     * @param widget KWidget 类型
     * @uncrunch
     */
    this.register = function(widget)
    {
        if (widget && widget.isKClassO && widget.superclassOf(KWidget) && !_id[widget.id()])
        {
            if (!_className[widget.className]) _className[widget.className] = {};
            _className[widget.className][widget.id()] = widget;
            if (widget.isCentral() == true) _className[widget.className].central = widget;
            if (!_group[widget.group()]) _group[widget.group()] = {};
            _group[widget.group()][widget.id()] = widget;
            if (!_flag[widget.flag()]) _flag[widget.flag()] = {};
            _flag[widget.flag()][widget.id()] = widget;
            _id[widget.id()] = widget;
         }
    };

    /**
     * 取消组件在管理器中的注册
     * @param widget KWidget 类型
     * @uncrunch
     */
    this.unregister = function(widget)
    {
        if (widget && widget.isKClassO && widget.superclassOf(KWidget) && _id[widget.id()])
        {
            delete _className[widget.className][widget.id()];
            if (_className[widget.className].central == widget)
            {
                _className[widget.className].central = null;
                for (var i in _className[widget.className])
                {
                    if(i === 'central') continue;   
                    if (_className[widget.className][i].isCentral() == true)
                        _className[widget.className].central = i;
                }

            }
            if (_group[widget.group()] && _group[widget.group()][widget.id()]) delete _group[widget.group()][widget.id()];
            if (_flag[widget.flag()] && _flag[widget.flag()][widget.id()]) delete _flag[widget.flag()][widget.id()];
            delete _id[widget.id()];
        }
    };

    /**
     * 返回根据组件类型widget_class和特征字符串flag匹配的组件。忽略widget_class将 对所有注册组件进行匹配
     * @param flag String 类型，组件特征字符串
     * widget_class：KWidget Class 类 型，组件类型字面值，如：KQuery
     * @return KWidget[] 类型，匹配成功的组件，匹配失败时返回null。
     * @uncrunch
     */
    this.match = function(flag, widget_class)
    {
        if (!flag) return [];
        var obj = [];
        if (_flag[flag])
        {
            if (typeof widget_class == 'function')
            {
                for (var i in _flag[flag])
                    if (_flag[flag][i] && (_flag[flag][i] instanceof widget_class || _flag[flag][i].superclassOf(widget_class))) obj.push(_flag[flag][i]);
            } else
                for (var i in _flag[flag])
                    obj.push(_flag[flag][i]);
        }
        return obj;
    };

    var _testHashKeysArray = function(hash, hashKeysArray)
    {
        if(hashKeysArray instanceof Array)
        {
            for(var m = 0; m < hashKeysArray.length; m++)
            {
                if(hash.equalsKeys(hashKeysArray[m])) return true
            }
        }
        return false;
    };

    /**
     * 根据组件类型widget_class和Hash值匹配的组件。忽略widget_class将对所有注册组件进行匹配
     * @param hash String 类型
     * @param widget_class KWidget Class 类型，组件类型字面值， 如：KQuery
     * 返回值：KWidget[] 类型，匹配成功的组件，匹配失败时返回空数组
     * @uncrunch
     */
    this.matchByHash = function(hash, widget_class)
    {
        if (!(hash instanceof KUrlHash)) return;
        var list = [];
        if (typeof widget_class == 'function')
        {
            for(var i in _id)
                if(_id[i].superclassOf(KQuery) && (KQuery == widget_class || _id[i] instanceof widget_class || _id[i].superclassOf(widget_class)) && _testHashKeysArray(hash, _id[i].hashKeys())) list.push(_id[i]);
        } else {
            for(var i in _id) if(_id[i].superclassOf(KQuery) && _testHashKeysArray(hash, _id[i].hashKeys())) list.push(_id[i]);
        }
        return list;
    };

    /**
     * 获取指定类型的组件
     * @param type String 类型
     * 返回值：KWidget[] 类型
     * @uncrunch
     */
    this.getByType = function(widget_class)
    {
        if (typeof widget_class != 'function') return [];
        var list = [];
            if(typeof widget_class == "function")
                for (var i in _id)
                    if(_id[i] instanceof widget_class || _id[i].superclassOf(widget_class)) list.push(_id[i]);
        return list;
    };

    /**
     * 给指定类型的组件发送通知
     * @param data Any 类型，任何类型的通知数据
     * @param widget_class KWidegt类型,组件类型字面值，如：KQuery。
     * @param group String String 类型，类别组。
     * @uncrunch
     */
    this.notify = function(data, widget_class, group)
    {
        if (!data) return;
        if (typeof widget_class == 'function')
        {
            if (typeof group == 'string' && _group[group])
            {
                for (var i in _id)
                    if (_group[group][i] && (_id[i] instanceof widget_class || _id[i].superclassOf(widget_class))) _id[i].notify(data);
            } else {
                for (var i in _id)
                    if(_id[i] instanceof widget_class || _id[i].superclassOf(widget_class)) _id[i].notify(data);
            }
        } else if (typeof widget_class == 'string')
        {
            group = widget_class;
            if(_group[group])
                for (var i in _id)
                    if (_group[group][i] && (_id[i] instanceof widget_class || _id[i].superclassOf(widget_class))) _id[i].notify(data);
        } else {
            for (var i in _id)
                _id[i].notify(data);
        }
    };

    /**
     * 返回指定组件类型的首要组件
     * @param widget_class KWidget Class 类型，组件类型字面值，如：KQuery
     * @return KWidget 类型，不存在首要组件时返回null
     * @uncrunch
     */
    this.central = function(widget_class)
    {
        if (typeof widget_class != 'function') return null;
        if (_className[widget_class.prototype.className]) return _className[widget_class.prototype.className].central;
        return null;
    };

    /**
     * 设置widget为widget_class组件类型的首要组件
     * @param widget_class KWidget Class 类型，组件类型字面值，如：KQuery
     * @param widget KWidget 类型，首要组件实例
     * @uncrunch
     */
    this.setCentral = function(widget_class, widget)
    {
        if (typeof widget_class != 'function' || !widget) return;
        if (_className[widget_class.prototype.className]) _className[widget_class.prototype.className].central = widget;
    };

    /**
     * 返回指定类别组和类型的组件。widget_class 参数可忽略
     * @param group String 类型，类别组
     * @param widget_class KWidget Class 类型，组件类型字面值，如：KQuery
     * @return KWidget[] 类型，匹配失败则返回空数组
     * @uncrunch
     */
    this.getByGroup = function(group, widget_class)
    {
        if (typeof group != 'string') return [];
        var list = [];
        if (typeof widget_class == 'function')
        {
            if (_group[group])
                for (var i in _group[group])
                    if (_group[group][i] instanceof widget_class || _group[group][i].superclassOf(widget_class)) list.push(_group[group][i]);
        } else {
            if (_group[group])
                for (var i in _group[group])
                    list.push(_group[group][i]);
        }
        return list;
    };

    /**
     * 设置指定组件的类别组
     * @param widget KWidget 类型
     * @uncrunch
     */
    this.setGroup = function(widget)
    {
        if (_group[widget._oldGroup] && _group[widget._oldGroup][widget.id()])
        {
            delete _group[widget._oldGroup][widget.id()];
            if (!_group[widget.group()]) _group[widget.group()] = {};
            _group[widget.group()][widget.id()] = widget;
        }
    };

    /**
     * @uncrunch
     */
    this.layout = function()
    {
        var widget = _className;
        for(var i in widget)
        {
            for(var o in widget[i])
            {
                widget[i][o].layout();
            }
        }
    };

    var _lastExeQuery = undefined;

    /**
     * 返回最近一次执行过的 KQuery  类型对象。
     * @return KQuery 类型，无执行记录时返回 undefined
     * @uncrunch
     */
    this.lastExecutedQuerier = function()
    {
        return _lastExeQuery;
    };

    /**
     * 设置最近一次执行过的 KQuery  类型对象。
     * @param query KQuery 类型
     * @uncrunch
     */
    this.setLastExecutedQuerier = function(query)
    {
        if(query && query.superclassOf && query.superclassOf(KQuery))
        {
            _lastExeQuery = query;
        }
    };

    /**
     * @uncrunch
     */
    this.finalize = function()
    {
        if(_id) for(var i in _id)  {
            _id[i].finalize();
        }
        _id = {};
        _className = {};
        _group = {};
        _flag = {};
    };
    /**
     * 返回依赖的其它组件。
     * @return KObject[]
     * @uncrunch
     */
    this.dependent = function()
    {
        return [KWidget, jQuery];
    };
})();

/*
 此模块主要存储整个平台的配置信息，并包含了一些配置信息处理函数，比如替换模板参数对应的文字等功能。
 作者：wangzheng
 版本：1.0
 创建时间：2010-4-2
 最后修改时间：2010-4-2
 */
var KConfig = new (function() {

    /**
     * @return 获取版本信息
     * @uncrunch
     */
    this.version = function()
    {
        return "1.0";
    };

    /**
     * @return 中文名称
     * @uncrunch
     */
    this.cnname = function()
    {
        return "配置模块";
    };
    
    //"id > {value:string/obj(直接obj和需要处理的obj), fun:处理方法}"
    var _name = {};
    var _funs = {};
    //String 处理方法
    _funs["s"] = function(value, data)
    {
        for(var i in data)
        {
            value = value.replace(new RegExp("\\["+i+"\\]", "ig"), data[i]);
        }
        return value;
    };
    //KMarkerOptions 处理方法
    _funs["mo"] = function(value, data)
    {
        var _value = $.extend(true, {}, value);
        for(var i in data)
        {
            var _i = "["+i+"]";
            var _reg = new RegExp("\\["+i+"\\]", "ig");
            if(_value.icon && typeof _value.icon.img == "string" && _value.icon.img.indexOf(_i) != -1)
            {
                _value.icon.img = _value.icon.img.replace(_reg, data[i]);
            }
            if(_value.icon && typeof _value.icon.snapIcon == "string" && _value.icon.snapIcon.indexOf(_i) != -1)
            {
                _value.icon.snapIcon = _value.icon.snapIcon.replace(_reg, data[i]);
            }
            if(_value.label && typeof _value.label.label == "string" && _value.label.label.indexOf(_i) != -1)
            {
                _value.label.label = _value.label.label.replace(_reg, data[i]);
                continue;
            }
            if(_value.icon && typeof _value.icon.shadow == "string" && _value.icon.shadow.indexOf(_i) != -1)
            {
                _value.icon.shadow = _value.icon.shadow.replace(_reg, data[i]);
                continue;
            }
        }
        return _value;
    };
    //KInfoWindowOptions 处理方法
    _funs["iwo"] = function(value, data)
    {
        var _value = $.extend(true, {}, value);
        for(var i in data)
        {
            var _i = "["+i+"]";
            var _reg = new RegExp("\\["+i+"\\]", "ig");
            if(typeof _value.content == "string" && _value.content.indexOf(_i) != -1)
            {
                _value.content = _value.content.replace(_reg, data[i]);
            }
        }
        return _value;
    };
    //KLineOptions 处理方法
    _funs["lo"] = function(value, data)
    {
        return value;
    };

    /**
     * 返回指定的配置信息。
     * @param name tring 类型，配置名称
     * @return String 配置值
     * @uncrunch
     */
    this.get = function(name, data)
    {
        var _nameObj = _name[name];
        if(!_nameObj) return null;
        if(!data || typeof data != "object") data = {};
        if(_nameObj.fun) return _nameObj.fun(_nameObj.value, data);
        if(typeof _nameObj.value == "object") return $.extend(true, {}, _nameObj.value);
		return _nameObj.value;
    };

    /**
     * 设置指定的配置信息
     * @param name String 类型，配置名称
     * @param value String 类型，配置值
     * @uncrunch
     */
    this.set = function(name, value)
    {
        if(typeof name != 'string') return;
        if(!_name[name]) _name[name] = {};
        var _nameObj = _name[name];
        _nameObj.value = value;
        var type = name.split("_")[1];
        if(type) _nameObj.fun = _funs[type];
    };

    /**
     * @uncrunch
     */
    this.finalize = function()
    {
        _name = null;
    };

    /**
     * 返回依赖的其它组件。
     * @return KObject[]
     * @uncrunch
     */
    this.dependent = function()
    {
        return [jQuery];
    };
})();
/*
 组件基类，所有组件都需要继承此类型
 作者 : wangzheng
 版本：1.0
 创建时间:2010-1-15
 修改时间:2010-1-25 10:15
 var sss = kkk;
 */
var KWidget = KClass.create("KWidget", KObject);

/**
 * 构造器
 */
KWidget.initialize = function()
{
    //唯一ID 目前方便KManager中的算法设计
    this._id = KTools.timeCode();
    this._theme = "mwp";
    this._central = false;
    this._dom = undefined;
    this._opts = undefined;
    this._group = "temp";
    this._oldGroup = undefined;
    this._enabled = true;
};

KWidget.prototype.id = function()
{
    return this._id;
};

/**
 * 是否是同类型组件中的首要组件。KManager 模块需要通过首要组件实现 widgetData() 方法
 * @return Boolean 类型，默认值为false
 * @uncrunch
 */
KWidget.prototype.isCentral = function()
{
    return this._central;
};

/**
 * 设置当前组件为同类型中的首要组件
 * @param bool  Boolean 类型
 * @uncrunch
 */
KWidget.prototype.setCentral = function(bool)
{
    this._central = bool;
};

/**
 * @return 组件Dom对象
 * @uncrunch
 */
KWidget.prototype.dom = function()
{
    return this._dom;
};

/**
 * @return 获取版本信息
 * @uncrunch
 */
KWidget.prototype.version = function()
{
    return "1.0";
};

/**
 * @return 中文名称
 * @uncrunch
 */
KWidget.prototype.cnname = function()
{
};

/**
 * 返回组件特征字符串
 * @return String 类型
 * @uncrunch
 */
KWidget.prototype.flag = function()
{
    return "widget";
};

/**
 * 接受外部程序的通知，根据msg来启动相应的功能处理
 * @param msg
 * @uncrunch
 */
KWidget.prototype.notify = function(msg)
{
};

/**
 * 获取组件的显示区域信息
 * @return KBounds 类型
 * @uncrunch
 */
KWidget.prototype.getBounds = function()
{
    return KTools.getBounds(this._dom);
};

/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KWidget.prototype.setTheme = function(scheme)
{
    this._theme = scheme;
};

/**
 * 返回组件的样式方案。不支持任何颜色方案时将返回null
 * @uncrunch
 */
KWidget.prototype.theme = function()
{
    return this._theme;
};

/**
 * 返回控件的使用状态
 * @uncrunch
 */
KWidget.prototype.enabled = function()
{
    return this._enabled;
};

/**
 * 启用控件的使用状态
 * @uncrunch
 */
KWidget.prototype.enable = function()
{
    this._enabled = true;
};

/**
 * 禁用控件的使用状态
 * @uncrunch
 */
KWidget.prototype.disable = function()
{
    this._enabled = false;
};

/**
 * 清空显示结果
 * @uncrunch
 */
KWidget.prototype.clearResult = function()
{
};

/**
 * 获取组件配置选项
 * @uncrunch
 */
KWidget.prototype.options = function()
{
    return this._opts;
};

/**
 * 设置组件配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 * @param obj
 * @uncrunch
 */
KWidget.prototype.setOptions = function(obj)
{
    this._opts = obj;
};

/**
 * 设置组件的扩展部分UI为折叠状态。比如，当客户端在页面空白部分点击鼠标，这时需要将所有组件的扩展UI进行隐藏
 * @uncrunch
 */
KWidget.prototype.collapse = function()
{
};

/**
 * 设置组件的扩展部分UI为展开状态
 * @uncrunch
 */
KWidget.prototype.expand = function()
{
};

/**
 *返回组件所属的分类组
 * @uncrunch
 */
KWidget.prototype.group = function()
{
    return this._group;
};

/**
 * 设置组件所属的分类组
 * @param group String 类型
 * @uncrunch
 */
KWidget.prototype.setGroup = function(group)
{
    this._oldGroup = this._group;
    this._group = group;
    if (typeof KManager == "undefined") return;
    KManager.setGroup(this, group);
};

/**
 * 显示组件。默认实现：设置 _dom.style.display = ""
 * @uncrunch
 */
KWidget.prototype.show = function()
{
    if(KTools._isElement(this._dom)) this._dom.style.display = "";
};

/**
 * 隐藏组件。默认实现：设置 _dom.style.display = "none"
 * @uncrunch
 */
KWidget.prototype.hide = function()
{
    if(KTools._isElement(this._dom)) this._dom.style.display = "none";
};

/**
 * 通知组件重新布局。比如，当窗口尺寸发生变化后需要进行此项操作
 * @uncrunch
 */
KWidget.prototype.layout = function()
{
};

/**
 *返回组件是否可见。默认实现：返回 _dom.style.display!="none"
 * @return Boolean 类型
 * @uncrunch
 */
KWidget.prototype.visible = function()
{
    if(this._dom)return $(this._dom).is(":visible");
    return false;
};

/**
 * @uncrunch
 */
KWidget.prototype.finalize = function()
{
    KManager.unregister(this);
    KTools.removeNode(this._dom);
    KObject.prototype.finalize.apply(this);
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KWidget.prototype.dependent = function()
{
    return [KObject, KManager, KTools, KWidgetOptions];
};
/*
 查询类组件基类，该类型组件完成客户端到服务器端查询，并将结果显示在指定的UI中
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-25
 */
var KQuery = KClass.create("KQuery", KWidget);

/**
 * 构造器
 */
KQuery.initialize = function()
{
    //String 	组件地址栏特征字符串。默认为空字符串
    this._hashkeys = [];
    //KQueryOptions 	组件最后一次查询时输入的条件选项。默认为 undefined
    this._queryopts = undefined;
    //Object 	存储查询结果对象。默认为 undefined
    this._result = undefined;
};

/**
 * 返回与当前组件匹配的地址栏Hash字符串，只需包含键名称既可，多个名称间用逗号分隔
 * @uncrunch
 */
KQuery.prototype.hashKeys = function()
{
    return this._hashkeys;
};

/**
 * 设置组件地址栏特征字符串。默认实现：设置 _hashkeys = keys
 * @param keys String 类型
 * @uncrunch
 */
KQuery.prototype.setHashKeys = function(keys)
{
    this._hashkeys = keys;
};

/**
 *  	 根据指定选项进行查询。忽略opts时将对当前结果重新查询。 默认实现：设置 _queryopts = opts ，并调用 KManager.setlLastExecutedQuerier()  方法。 
 * @param opts KQueryOptions 类型
 * @uncrunch
 */
KQuery.prototype.query = function(opts)
{
    this._queryopts = opts;
    KManager.setLastExecutedQuerier(this);
};

/**
 * 返回组件组后一次查询的条件选项。默认实现：返回 _queryopts 属性
 * @return KQueryOptions 类型
 * @uncrunch
 */
KQuery.prototype.queryOptions = function()
{
    return this._queryopts;
};

/**
 * 获取查询结果对象
 * @return Object 类型
 * @uncrunch
 */
KQuery.prototype.result = function()
{
    return this._result;
};

/**
 * 根据指定的Hash值进行查询
 * @param hash KUrlHash 类型
 * @uncrunch
 */
KQuery.prototype.queryByHash = function(hash)
{
};

/**
 *	打印组件当前结果数据。
 * @uncrunch
 */
KQuery.prototype.print = function()
{
};

/**
 *	发送当前查询结果
 * @uncrunch
 */
KQuery.prototype.send = function(sendtype, selected)
{
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KQuery.prototype.dependent = function()
{
    return [KWidget, KQueryOptions];
};
/*
 选项卡组件基类，将不同的内容用选项卡的方式分离，用户点击选项卡时显示相应的内容
 作者：wangzheng
 版本：1.0
 创建时间：2010-01-20
 最后修改时间：2010-01-26 15：51
 */
var KTabs = KClass.create("KTabs", KWidget);

/**
 * 构造器
 */
KTabs.initialize = function()
{
    //	KTabItem 	当前被选中的选项卡
    this._current = undefined;
    // 	KTabItem[] 	存储所有选项卡元素
    this._tabs = undefined;
};

/**
 * 	当前被选中的选项卡。默认实现：返回 _current 属性。
 * @return KTabItem 类型
 * @uncrunch
 */
KTabs.prototype.current = function()
{
    return this._current;
};

/**
 * 选中指定的选项卡
 * @param index Integer 类型
 * @uncrunch
 */
KTabs.prototype.select = function(index)
{
};

/**
 * 	返回选项卡数量。默认实现：返回 _tabs.length 属性
 * @return Integer 类型
 * @uncrunch
 */
KTabs.prototype.length = function()
{
    if(this._tabs instanceof  Array) return this._tabs.length;
    return 0;
};

/**
 * 返回选项卡集合。默认实现：返回 _tabs 属性
 * @return KTabItem[] 类型
 * @uncrunch
 */
KTabs.prototype.tabs = function()
{
    return this._tabs;
};

/**
 * 	返回指定的选项卡。默认实现：返回 _tabs[index] 元素
 * @param index Integer 类型，选项卡序号
 * @return KTabItem 类型
 * @uncrunch
 */
KTabs.prototype.tab = function(index)
{
    if(this._tabs instanceof Array && typeof index == 'number' && index < this._tabs.length) return this._tabs[index];
    return null;
};

/**
 * 增加选项卡。如果设置了item.index属性，则将item增加到index指定的选项卡之前
 * @param item KTabItem 类型
 * @uncrunch
 */
KTabs.prototype.insert = function(item)
{
};

/**
 * 删除选项卡，忽略item参数时，将清空所有项目
 * @param index Integer 类型
 * @uncrunch
 */
KTabs.prototype.remove = function(index)
{
    if(this._tabs instanceof Array && typeof index == 'number' && index < this._tabs.length) this._tabs.splice(index,1);
};

/**
 * 隐藏选项卡
 * @param index Integer 类型
 * @uncrunch
 */
KTabs.prototype.hideTab = function(index)
{
};

/**
 * 显示选项卡
 * @param index Integer 类型
 * @uncrunch
 */
KTabs.prototype.showTab = function(index)
{
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KTabs.prototype.dependent = function()
{
    return [KWidget, KTabItem, KEvent];
};
/*
 城市选择组件基类
 作者：wangzheng
 版本：1.0
 创建时间：2010-01-20
 最后修改时间：2010-02-01
 */
var KCity = KClass.create("KCity", KWidget);

KCity.initialize = function()
{
    this._city = undefined;
};

/**
 * 当前选择的城市信息
 * @return KCityInfo 类型
 * @uncrunch
 */
KCity.prototype.city = function()
{
    return this._city;
};

/**
 * 设置当前城市信息
 * @param data KCityInfo类型
 * @uncrunch
 */
KCity.prototype.setCity = function(data)
{
    this._city = data;
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KCity.prototype.dependent = function()
{
    return [KWidget];
};
/*
 逆地理组件基类
 作者：wangzheng
 版本：1.0
 创建时间：2010-01-20
 最后修改时间：2010-01-20
 */
var KGeocoder = KClass.create("KGeocoder", KWidget);

/**
 * 解析指定的经纬度，更改地址描述文字。解析完成后会触发 parsecomplete 事件。
 * @param latlon String 类型，经纬度字符串
 * @uncrunch
 */
KGeocoder.prototype.parse = function(latlon)
{
};

/**
 * 返回省份信息
 * @return String 类型
 * @uncrunch
 */
KGeocoder.prototype.province = function()
{
};

/**
 * 返回城市信息
 * @return String 类型
 * @uncrunch
 */
KGeocoder.prototype.city = function()
{
};

/**
 * 返回市级行政区域信息
 * @return String 类型
 * @uncrunch
 */
KGeocoder.prototype.district = function()
{
};

/**
 * 返回街道信息
 * @return String 类型
 * @uncrunch
 */
KGeocoder.prototype.street = function()
{
};

/**
 * 返回经纬度
 * @return String 类型
 * @uncrunch
 */
KGeocoder.prototype.latlon = function()
{
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KGeocoder.prototype.dependent = function()
{
    return [KWidget];
};
/*
 输入提示组件基类。此类组件将同时对多个文本框进行监听。
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-15
 */
var KSuggest = KClass.create("KSuggest", KWidget);

KSuggest.initialize = function()
{
    // 	Node 	所监控的输入框。
    this._textbox = undefined;
    // 	KSuggestInfo 	用户最终确定的提示值
    this._data = undefined;
};

/**
 * 获取文本框中输入数据。默认实现：返回 _data 值
 * @return KSuggsetInfo 类型
 * @uncrunch
 */
KSuggest.prototype.data = function()
{
    return this._data;
};

/**
 * 设置输入数据。默认实现：设置 _data = data
 * @param data KSuggsetInfo 类型
 * @uncrunch
 */
KSuggest.prototype.setData = function(data)
{
    this._data = data;
};

/**
 * 返回输入框 Dom 对象。默认实现：返回 _textbox
 * @return Node 类型
 * @uncrunch
 */
KSuggest.prototype.textbox = function()
{
    return this._textbox;
};

/**
 * 隐藏指定文本框的提示框。忽略textbox参数将隐藏所有被监听的文本框提示框
 * @param textbox Node 类型，被监听的文本框
 * @uncrunch
 */
KSuggest.prototype.hideTip = function(textbox)
{
};

/**
 * @overwrite
 * @uncrunch
 */
KSuggest.prototype.dependent = function()
{
    return [KWidget, KSuggestInfo];
};
/*
 表示页面中的一个像素位置
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-25
 */
var KPoint = KClass.create("KPoint", KObject);

/**
 * 构造器 通过xy坐标初始化KPoint
 * @param x
 * @param y
 */
KPoint.initialize = function(x, y)
{
//    if(typeof x == 'string' && x.length > 0)
//    {
//        var str = x;
//        str = str.split(",");
//        if(str.length == 2)
//        {
//            x = parseFloat(str[0]);
//            y = parseFloat(str[1]);
//        }
//    }
    
    if (typeof x != 'number') x = 0;
    if (typeof y != 'number') y = 0;
    //@uncrunch
    this.x = x;
    //@uncrunch
    this.y = y;
};

/**
 * 一个参数时 当前对象的xy属性与other的xy属性相同时，返回 true。 或 两个参数时
 * 当前对象的xy属性与xy参数相同时，返回 true
 * @return Boolean
 * @uncrunch
 */
KPoint.prototype.equals = function()
{
    var other, x, y;
    if (arguments.length == 1)
    {
        other = arguments[0];
        if (!other || !(other instanceof KPoint)) return false;
        x = other.x;
        y = other.y;
    } else {
        x = arguments[0];
        y = arguments[1];
    }
    if (this.x == x && this.y == y) return true;
    return false;
};

/**
 * 根据本对象的xy属性克隆一个新的对象
 * @return KPoint
 * @uncrunch
 */
KPoint.prototype.clone = function()
{
    return new KPoint(this.x, this.y);
};

/**
 * 根据同类型对象的 toString() 方法返回值创建标注。
 * @param str String 类型
 * @return KPoint 对象
 * @uncrunch
 */
KPoint.fromString = function(str)
{
    var _new = new KPoint();
    if(typeof str == "string" && str)
    {
        var _o = eval("new Object("+str+")");
        _new.x = _o.x;
        _new.y = _o.y;
    }
    return _new;
};


/**
 * 覆写基类方法，返回 x,y 形式字符串
 * @return String 
 * @uncrunch
 */
KPoint.prototype.toString = function()
{
    return '{x:'+this.x + ', y:' + this.y+'}';
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KPoint.prototype.dependent = function()
{
    return [KObject];
};
/*
 打印组件基类。
 作者:wangzheng
 版本:1.0
 创建时间：2010-4-15
 最后修改时间：2010-04-15
 */
var KPrinter = KClass.create("KPrinter", KWidget);

/**
 * 对指定类型的数据进行打印
 * @param opts KPrintOptions 类型
 * @uncrunch
 */
KPrinter.prototype.print = function(opts)
{
    //this._opts = KTools.copyOptions(opts, KPrintOptions);
};

/**
 * @overwrite
 * @uncrunch
 */
KPrinter.prototype.dependent = function()
{
    return [KWidget, KPrintOptions];
};
/*
 地图标记管理，管理用户自己的地图标记，包括标注、折线和区域等。
 作者:wangzheng
 版本:1.0
 创建时间：2010-7-16
 最后修改时间：2010-07-16
 */
var KMapMarkers = KClass.create("KMapMarkers", KQuery);

/**
 * 构造器
 */
KMapMarkers.initialize = function()
{
};

/**
 * 保存所有标记到数据源。
 * @return Boolean 类型
 * @uncrunch
 */
KMapMarkers.prototype.save = function()
{
	return true;
};

/**
 * 加载或重新加载数据源标记数据。
 * @return Boolean 类型，表示加载成功状态。
 * @uncrunch
 */
KMapMarkers.prototype.load = function()
{
	return true;
};


/**
 * 获取指定的标记数据，忽略 rid 将返回所有数据。
 * @param rid 
 * @return KMapMarkerInfo[] 类型，如果无匹配数据则长度为 0。
 * @uncrunch
 */
KMapMarkers.prototype.markers = function(rid)
{
	return [];
};

/**
 * 增加标记。
 * @param mapmarker  KMapMarker 类型，地图标记信息。
 * @return Boolean 类型，表示是否增加成功。
 * @uncrunch
 */
KMapMarkers.prototype.add = function(mapmarker)
{
	return true;
};


/**
 * 将标记信息更新到数据源。
 * @param mapmarker  KMapMarker 类型，地图标记信息。
 * @return Boolean 类型
 * @uncrunch
 */
KMapMarkers.prototype.update = function(mapmarker)
{
	return true;
};

/**
 * 修改标记。
 * @param mapmarker  KMapMarker 类型，地图标记信息。
 * @return Boolean 类型
 * @uncrunch
 */
KMapMarkers.prototype.remove = function(mapmarker)
{
	return true;
};

/**
 * @overwrite
 * @uncrunch
 */
KMapMarkers.prototype.dependent = function()
{
    return [KQuery, KMapMarkerInfo];
};
/*
 Mapbar 用户账号登录、注册组件
 作者:wangzheng
 版本:1.0
 创建时间：2010-07-14
 最后修改时间：2010-07-14
 */
var KAccount = KClass.create("KAccount", KWidget);

/**
 * 检验指定的用户登录信息是否合法，当检验完成时触发 signin 事件。
 * @param opts KSigninOptions 类型
 * @uncrunch
 */
KAccount.prototype.signin = function(opts)
{
    //this._opts = KTools.copyOptions(opts, KSigninOptions);
};

/**
 * 注销当前用户
 * @param opts KSignoutOptions 类型
 * @return KAccountInfo 类型
 * @uncrunch
 */
KAccount.prototype.signout = function(opts)
{
    //this._opts = KTools.copyOptions(opts, KSignoutOptions);
};

/**
 * 返回当前登录用户信息，可通过返回值的 signin 属性判断登录状态。
 * @return KAccountInfo 类型
 * @uncrunch
 */
KAccount.prototype.account = function()
{
};

/**
 * @overwrite
 * @uncrunch
 */
KAccount.prototype.dependent = function()
{
    return [KWidget, KSigninOptions];
};
/*
 纠错反馈组件基类，可进行地图纠错，提交用户标注点、建议反馈等信息。
 作者:wangzheng
 版本:1.0
 创建时间：2010-07-27
 最后修改时间：2010-07-27
 */
var KFeedback = KClass.create("KFeedback", KWidget);

/**
 * 提交反馈信息 info 到后台管理系统。
 * @param info KFeedbackInfo 类型，包含了反馈的详细信息。 返回值：无。
 * @uncrunch
 */
KFeedback.prototype.feedback = function(info)
{
};

/**
 * @overwrite
 * @uncrunch
 */
KFeedback.prototype.dependent = function()
{
    return [KWidget, KFeedbackInfo];
};
/*
 表示矩形区域的宽高信息
 注意：尽管 KSize 的两个参数可以作为属性 width 和 height 访问，但是请勿修改它们，而是在创建新对象时使用不同的参数
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-25
 */
var KSize = KClass.create("KSize", KObject);

/**
 * 构造器 通过高宽初始化KSize
 * @param width
 * @param height
 */
KSize.initialize = function(width, height)
{
//    if(typeof width == 'string' && width.length > 0)
//    {
//        var str = width;
//        str = str.split(",");
//        if(str.length == 2)
//        {
//            width = parseFloat(str[0]);
//            height = parseFloat(str[1]);
//        }
//    }
    if (typeof width != 'number') width = 0;
    if (typeof height != 'number') height = 0;
    //@uncrunch
    this.width = width;
    //@uncrunch
    this.height = height;
};

/**
 * 一个参数时 当前对象的width、height属性与other的width、height属性相同时，返回 true。 或 两个参数时
 * 当前对象的width、height属性与width、height参数相同时，返回 true
 * @return Boolean
 * @uncrunch
 */
KSize.prototype.equals = function()
{
    var other, width, height;
    if (arguments.length == 1)
    {
        other = arguments[0];
        if (!(other instanceof KSize)) return false;
        width = other.width;
        height = other.height;
    } else {
        width = arguments[0];
        height = arguments[1];
    }
    if (this.width == width && this.height == height) return true;
    return false;
};

/**
 * 根据本对象的高宽属性克隆一个新的对象
 * @return KSize
 * @uncrunch
 */
KSize.prototype.clone = function()
{
    return new KSize(this.width, this.height);
};

/**
 * 根据同类型对象的 toString() 方法返回值创建标注。
 * @param str String 类型
 * @return KSize 对象
 */
KSize.fromString = function(str)
{
    var _new = new KSize();
    if(typeof str == "string" && str)
    {
        var _o = eval("new Object("+str+")");
        _new.width = _o.width;
        _new.height = _o.height;
    }
    return _new;
};

/**
 * 覆写基类方法，返回 width,height 形式字符串。
 * @return String
 * @uncrunch
 */
KSize.prototype.toString = function()
{
    return "{width:"+this.width + ",height:" + this.height+"}";
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KSize.prototype.dependent = function()
{
    return [KObject];
};
/*
 表示矩形区域
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-27
 */
var KBounds = KClass.create("KBounds", KObject);

/**
 * 构造器
 * @param minpt
 * @param maxpt
 */
KBounds.initialize = function(minpt, maxpt)
{
//    if (typeof minpt == 'string' && minpt.length > 0)
//    {
//        var str = minpt;
//        str = str.split(",");
//        if (str.length == 4)
//        {
//            minpt = new KPoint(str[0] + "," + str[1]);
//            maxpt = new KPoint(minpt.x + parseFloat(str[2]), minpt.y + parseFloat(str[3]));
//        }
//    }
    if (! (minpt instanceof KPoint)) minpt = new KPoint(0, 0);
    if (! (maxpt instanceof KPoint)) maxpt = new KPoint(Number.MAX_VALUE, Number.MAX_VALUE);
    //@uncrunch
    this.min = minpt;
    //@uncrunch
    this.max = maxpt;
};

/**
 * 当前对象的所有属性与other的所有属性相同时，返回 true。
 * @param other
 * @uncrunch
 */
KBounds.prototype.equals = function(other)
{
    if (!other || !(other instanceof KBounds)) return false;
    if (this.min.equals(other.min) && this.max.equals(other.max)) return true;
    return false;
};

/**
 * 返回矩形区域的中心点像素坐标。
 * 该方法会对计算后的中心点位置进行近似 使用parseInt()
 * @uncrunch
 */
KBounds.prototype.mid = function()
{
    return new KPoint(parseFloat((this.max.x + this.min.x) / 2), parseFloat((this.max.y + this.min.y) / 2));
};
/**
 * 返回矩形区域尺寸
 * @return KSize
 * @uncrunch
 */
KBounds.prototype.size = function()
{
    return new KSize(this.max.x - this.min.x, this.max.y - this.min.y);
};
/**
 * 如果矩形区域（含边界）本身包含像素坐标，则返回 true。 或
 * 如果传入的矩形区域完全包含于此矩形区域中，则返回 true。
 * @param arg
 * @uncrunch
 */
KBounds.prototype.contains = function(arg) {
    if (!arg) return false;
    if (arg instanceof KPoint)
    {
        if (arg.x >= this.min.x && arg.x <= this.max.x && arg.y >= this.min.y && arg.y <= this.max.y) return true;
    }
    else if (arg instanceof KBounds)
    {
        if (this.contains(arg.min) && this.contains(arg.max)) return true;
    }
    arg = null;
    return false;
};
/**
 * 判断该矩形区域是否与其他矩形区域相交
 * 相交true其他false
 * @param bounds
 * @uncrunch
 */
KBounds.prototype.intersects = function(bounds) {
    if (!(bounds instanceof KBounds)) return false;
    if(this.min.x - bounds.min.x > bounds.size().width || bounds.min.x - this.min.x > this.size().width
            || this.min.y - bounds.min.y > bounds.size().height || bounds.min.y - this.min.y > this.size().height)
    return false;
    return true;
};

/**
 * 与另一个区域的相交区域
 * @param bounds  KBounds
 * @return KBounds
 * @uncrunch
 */
KBounds.prototype.intersect = function(bounds)
{
    if (!bounds || !(bounds instanceof KBounds)) return null;
    var _min = new KPoint(0, 0);
    var _max = new KPoint(0, 0);
    if (this.contains(bounds) == true || this.intersects(bounds) == true)
    {
        _min.x = (this.min.x > bounds.min.x) ? this.min.x : bounds.min.x;
        _min.y = (this.min.y > bounds.min.y) ? this.min.y : bounds.min.y;
        _max.x = (this.max.x > bounds.max.x) ? bounds.max.x : this.max.x;
        _max.y = (this.max.y > bounds.max.y) ? bounds.max.y : this.max.y;
    }
    return new KBounds(_min, _max);
};

/**
 * @return KBounds
 * @uncrunch
 */
KBounds.prototype.clone = function()
{
    return new KBounds(this.min.clone(), this.max.clone());
};

/**
 * 根据同类型对象的 toString() 方法返回值创建标注。
 * @param str String 类型
 * @return KBounds 对象
 */
KBounds.fromString = function(str)
{
    var _new = new KBounds();
    if(typeof str == 'string' && str)
    {
        var _o = eval("new Object("+str+")");
        _new.min = KPoint.fromString(_o.min);
        _new.max = KPoint.fromString(_o.max);
    }
    return _new;
};

/**
 * @return String
 * @uncrunch
 */
KBounds.prototype.toString = function()
{
    return '{min:"'+this.min.toString()+'", max:"'+this.max.toString()+'"}';
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KBounds.prototype.dependent = function()
{
    return [KObject, KPoint, KSize];
};

/*
 表示地图中的矩形区域，使用经纬度值表示
 作者:wangzheng
 版本:1.0
 创建时间:2010-01-25
 最后修改时间:2010-01-25 17:00
 */
var KMapBounds = KClass.create("KMapBounds", KObject);

/**
 * 构造一个表示minlatlon和maxlatlon经纬度范围的矩形
 * @param minlatlon MPoint 类型，矩形的最小经纬度
 * @param maxlatlon MPoint 类型，矩形的最大经纬度
 */
KMapBounds.initialize = function(minlatlon, maxlatlon, map_container)
{
    if (typeof MPoint == 'undefined' || !(minlatlon instanceof MPoint) || !(maxlatlon instanceof MPoint)) return;
    //@uncrunch
    this.min = minlatlon;
    //@uncrunch
    this.max = maxlatlon;
    if (map_container) this._map = KMap.maplet(map_container);
    if (!this._map) this._map = KMap.getCurrentMap();
};

KMapBounds.prototype._initToMap = function()
{
    if (this._map)
    {
        if (this.min)
            this.min.initialize(this._map);
        if (this.max)
            this.max.initialize(this._map);
    }
};

/**
 * 当前对象的所有属性与other的所有属性相同时，返回 true
 * @param other KMapBoundss 类型
 * @return Boolean 类型
 * @uncrunch
 */
KMapBounds.prototype.equals = function(other)
{
    this._initToMap();
    if (other instanceof KMapBounds)
        if (this.min.mapX == other.min.mapX && this.max.mapX == other.max.mapX && this.min.mapY == other.min.mapY && this.max.mapY == other.max.mapY)
            return true;
    return false;
};

/**
 * 返回矩形区域的中心点经纬度
 * @return MPoint 类型;
 * @uncrunch
 */
KMapBounds.prototype.mid = function()
{
    this._initToMap();
    var centerX = (this.max.mapX + this.min.mapX) / 2;
    var centerY = (this.max.mapY + this.min.mapY) / 2;
    if (this._map) return new MPoint(this._map.toMapCoordinate(centerX, centerY));
    return null;
};

/**
 * 返回矩形区域尺寸
 * @return KSize 类型;
 * @uncrunch
 */
KMapBounds.prototype.size = function()
{
    this._initToMap();
    return new KSize(this.max.mapX - this.min.mapX, this.min.mapY - this.max.mapY);
};

/**
 * 如果矩形区域（含边界）本身包含指定的经纬度，则返回 true
 * @param obj MPoint 或 KMapBoundss 类型
 * @return Boolean 类型
 * @uncrunch
 */
KMapBounds.prototype.contains = function(obj)
{
    if (this._map)
    {
        if (obj instanceof MPoint)
        {
            var latlon = obj;
            this._initToMap();
            latlon.initialize(this._map);
            return new KBounds(new KPoint(this.min.mapX, this.min.mapY), new KPoint(this.max.mapX, this.max.mapY)).contains(new KPoint(latlon.mapX, latlon.mapY));
        } else if (obj instanceof KMapBounds)
        {
            this._initToMap();
            var bounds = obj;
            bounds._initToMap();
            return new KBounds(new KPoint(this.max.mapX, this.min.mapY), new KPoint(this.max.mapX, this.min.mapY)).contains(new KBounds(new KPoint(bounds.max.mapX, bounds.min.mapY), new KPoint(bounds.max.mapX, bounds.min.mapY)));
        }
    }
};


/**
 * 如果传入的矩形区域与当前矩形区域相交，则返回 true
 * @param obj MPoint 或 KMapBounds 类型
 * @return Boolean 类型
 * @uncrunch
 */
KMapBounds.prototype.intersects = function(bounds)
{
    if (this._map && bounds instanceof KMapBounds)
    {
        this._initToMap();
        bounds._initToMap();
        return new KBounds(new KPoint(this.max.mapX, this.min.mapY), new KPoint(this.max.mapX, this.min.mapY)).intersects(new KBounds(new KPoint(bounds.max.mapX, bounds.min.mapY), new KPoint(bounds.max.mapX, bounds.min.mapY)));
    }
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KMapBounds.prototype.dependent = function()
{
    return [KObject, KMap, KSize, KBounds, KPoint];
};

/*
 地图叠加物的基类，所有的叠加物都需要继承此类型
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-25
 */
var KOverlay = KClass.create("KOverlay", KObject);

/**
 * 构造器
 */
KOverlay.initialize = function()
{
    this._olListener = {};
    this._mapletListener = {};
    this._isSelfEvt = true;
    var _id = KTools.timeCode();
    //@uncrunch
    this.id = function()
    {
        return _id;
    };
    //@uncrunch
    this.adapters = {};
    //@uncrunch
    this.extdata = {};
    this._ol = undefined;
    this._mc = undefined;
    this._oldGroup = undefined;
    this._group = undefined;
    this._olListener = {};
    this._visible = false;
};

/**
 * 返回叠加物的ID，此值一般在实例化叠加物对象时指定
 * @uncrunch
 */
KOverlay.prototype.ol = function()
{
    return this._ol;
};

/**
 * 获取叠加物选项
 * @uncrunch
 */
KOverlay.prototype.options = function()
{
    return this._opts;
};

/**
 * 设置叠加物配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 * @param obj Object 类型
 * @uncrunch
 */
KOverlay.prototype.setOptions = function(obj)
{
	//气泡部分的动态更改公共实现部分
	if(this._openedInfo) {
		
		if (obj.infowin.title) {
			this._ol.info.setTitle(obj.infowin.title);
		}
		if (obj.infowin.content) {
			KTools.removeNode(this._opts.infowin._contentDom);
			this._opts.infowin._contentDom = null;
			KMap.openInfoWindow(this, undefined, undefined, true);
		}
		
		
//		if (obj.infowin.title) {
//			this._ol.info.setTitle(obj.infowin.title);
//		}
//		return;
//		if(obj.infowin.content) {
//			var parent = $(this._opts.infowin._contentDom).parent();
//			KTools.removeNode(this._opts.infowin._contentDom);
//        	this._opts.infowin._contentDom = null;
//			parent.empty().append($(obj.infowin.content));
//		}
	}
};

/**
 * 返回所属的地图对象container
 * @uncrunch
 */
KOverlay.prototype.mc = function()
{
    return this._mc;
};

/**
 * 当name或data为空或name不是string时返回
 * @param name
 * @param data
 * @uncrunch
 */
KOverlay.prototype.addExtdata = function(name, data)
{
    if (!name || !data || !isStr(name)) return;
    this.extdata[name] = data;
};

/**
 * 删除叠加物对象的扩展数据，忽略name则删除所有。
 * @param name
 * @uncrunch
 */
KOverlay.prototype.removeExtdata = function(name)
{
    if (typeof name == 'string')
    {
        delete this.extdata[name];
    } else {
        delete this.extdata;
        this.extdata = {};
    }
};

/**
 * 删除叠加物对象
 * @uncrunch
 */
KOverlay.prototype.remove = function()
{
    if (this.ol()) KMap._removeOverlay(this);
    this._mc = undefined;
    KEvent.trigger.apply(this, [this, 'remove']);
    this.finalize();
};

/**
 * 显示叠加物
 * @uncrunch
 */
KOverlay.prototype.show = function()
{
    if (this._visible == false && this.ol())
    {
        KMap.maplet(this.mc()).addOverlay(this.ol());
        this._visible = true;
    }

    KEvent.trigger.apply(this, [this, 'visibilitychanged', this, true]);
};

/**
 * 隐藏叠加物
 * @uncrunch
 */
KOverlay.prototype.hide = function()
{
    if (this._visible == true && this.ol())
    {
        KMap.maplet(this.mc()).removeOverlay(this.ol());
        this._visible = false;
    }
    KEvent.trigger.apply(this, [this, 'visibilitychanged', this, false]);
};

/**
 * 是否可以编辑叠加物
 * @param able Boolean 类型
 * @uncrunch
 */
KOverlay.prototype.setEditable = function(able)
{
};

/**
 * @uncrunch
 */
KOverlay.prototype.editable = function()
{
};

/**
 * @uncrunch
 */
KOverlay.prototype.clone = function()
{
    if (typeof KMarker == 'undefined' || typeof KLine == 'undefined' || typeof KArea == 'undefined') return;
    if (this instanceof KLine || this instanceof KArea)
        return new this.constructor(this.ol.pts, this.opts);
    else if (this instanceof KMarker)
        return new this.constructor(this.ol.pt, this.opts);
};

/**
 * 返回叠加物所属的分类组
 * @uncrunch
 */
KOverlay.prototype.group = function()
{
    return this._group;
};

/**
 * 设置叠加物所属的分类组
 * @param group String 类型
 * @uncrunch
 */
KOverlay.prototype.setGroup = function(group)
{
    this._oldGroup = this._group;
    this._group = group;
    if (this._mc) KMap._updateOverlayGroup(this);
};

/**
 * 返回气泡内容 Dom  对象，此方法返回值仅在气泡打开过有效。
 * @return Node 类型
 * @uncrunch
 */
KOverlay.prototype.iwcDom = function()
{
    if(this._opts && this._opts.infowin && this._opts.infowin._contentDom) return this._opts.infowin._contentDom;
    return null;
};

KOverlay.prototype._parseObjToString = function(obj)
{
    var _str = new Array();
    for(var i in obj)
    {
        var oi = obj[i];
        if(typeof oi == "object" && oi != null)
        {
            if(KTools._isElement(oi))
            {
                oi = KTools.domHTML(oi);
            } else if(oi.isKClassO) {
                oi = oi.toString();
            } else {
                oi = this._parseObjToString(oi);
            }
            oi = '"'+oi.replace(/\\/ig,"\\\\").replace(/([\"\'])/ig, '\\$1')+'"';//.replace(/([\"\'])/ig, '\\$1')
        } else if(typeof oi == "string") {
            oi = '"'+oi.replace(/\\/ig,"\\\\").replace(/([\"\'])/ig, '\\$1')+'"';
        }
        _str.push(i+':'+oi);
    }
    return '{'+_str.join(",")+'}';
};

KOverlay._parseStringToObj = function(str)
{
    var _o = eval("new Object("+str+")");
    for(var i in _o)
    {
        var _oI = _o[i];
        if(typeof _oI == "string" && _oI.indexOf("{") == 0)
        {
            if(i == "anchor" || i == "shadowAnchor")
            {
                _o[i] = KPoint.fromString(_oI);
            } else {
                if(i == "size" || i == "shadowSize")
                    _o[i] = KSize.fromString(_oI);
                else
                    _o[i] = KOverlay._parseStringToObj(_oI);
            }
        }
    }
    return _o;
};

/**
 * @overwrite
 * @uncrunch
 */
KOverlay.prototype.finalize = function()
{
    KEvent.clear(this);
    KWidget.prototype.finalize.call(this);
};

/**
 * 自定义事件管理
 * @param obj
 * @param evtname
 * @param fun
 * @param data
 * @uncrunch
 */
KOverlay.prototype.bind = function(obj, evtname, fun, data, thisobj)
{
    var this_ = this;
    evtname = evtname.toLowerCase();
    switch (evtname) {
        case 'click' :
            if (!this._olListener["click"])
            {
                this._olListener["click"] = MEvent.addListener(this_.ol(), "click", function(ol, event, latlon) {
                    var point = null;
                    if(this_ instanceof KMarker) point =  ol.pt;
                    else point = new MPoint(latlon);
                    KEvent.trigger.apply(this_, [this_, 'click', this_, point]);
                });
            }
            break;
        case 'infowindowopen' :
            if (!this._olListener["iw_beforeopen"])
                this._olListener["iw_beforeopen"] = MEvent.addListener(this_.ol(), "iw_beforeopen", function(ol) {
                    if(ol == this_.ol()) KEvent.trigger.apply(this_, [this_, 'infowindowopen', this_, ol]);
                });
            break;
        case 'infowindowclose' :
            if (!this._mapletListener["iw_hide"])
                this._mapletListener["iw_hide"] = MEvent.addListener(maplet, "iw_hide", function(ol) {
                    if(ol == this_.ol()) KEvent.trigger.apply(this_, [this_, 'infowindowclose', this_]);
                });
            break;
    }
    if (!this.adapters) this.adapters = {};
    if (!this.adapters[evtname]) this.adapters[evtname] = [];
    if (!KTools._arrayContains(this.adapters[evtname], fun)) this.adapters[evtname].push({fun:fun, data:data, thisobj:thisobj});
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KOverlay.prototype.dependent = function()
{
    return [KObject, KMap, KEvent, KTools];
};
/*
 发送组件基类。
 作者:wangzheng
 版本:1.0
 创建时间：2010-4-15
 最后修改时间：2010-04-15
 */
var KSender = KClass.create("KSender", KWidget);

/**
 * 将相关数据发送到指定目的地
 * @param opts KSendOptions 类型
 * @uncrunch
 */
KSender.prototype.send = function(opts)
{
    //this._opts = KTools.copyOptions(opts, KSendOptions);
};

/**
 * @overwrite
 * @uncrunch
 */
KSender.prototype.dependent = function()
{
    return [KWidget, KSendOptions];
};
/*
 地图折线类型，对光栅图API的MPolyline的二次封装
 作者:wangzheng
 版本:1.0
 创建时间：2010-1-15
 最后修改时间：2010-01-25

 bug 1010291555
 1. setBrush()方法设置折线宽度无效。

 bug 1011011202
 KLine.hilite()解决高亮线段与原始线段不吻合的问题；增加currlevel参数。
 bug#1012071010
 KLine.hilite()方法调整
 */
var KLine = KClass.create("KLine", KOverlay);

/**
 * 使用经纬度集合字符串形式创建KLine对象
 * @param pts String 类型，经纬度集合字符串 或 MPoint[] 类型，经纬度集合
 * @param opts KLineOptions 类型
 */
KLine.initialize = function(pts, opts)
{
    this._opts = KTools.copyOptions(opts, KLineOptions);
    this._group = this._opts.group;
    this._ol = this._makerMLine(pts, this._opts);
    this._ol.brush.fill = false;
    this._hiliteKLine = undefined;
    this._olListener = {};
    var _this = this;
    if(_this._opts.infowin)
    {
        this._olListener["iw_click"] = MEvent.addListener(this._ol, 'click', function() {
            _this._ol.setInfoWindow(null);
            setTimeout(function () {KMap.openInfoWindow(_this);});
            /*KMap.openInfoWindow(_this);
             * change by tanzh*/
        });
    }
};

/**
 * 根据聚合坐标和级别的编码字符串创建折线
 * @param pts String 类型，编码后的经纬度集合字符串
 * @param levels String 类型，编码后的缩放级别组集合字符串
 * @param opts KLineOptions 类型
 * @uncrunch
 */
KLine.fromEncoded = function(pts, levels, opts)
{
    if (Maplet && KMap.getCurrentMap() instanceof Maplet && typeof pts == 'string' && typeof levels == 'string')
    {
        var _pts = KMap.getCurrentMap().decodeLine(pts, levels);
        if (_pts) return new KLine(_pts, opts);
    }
    return null;
};

/**
 * 高亮折线中的某一段线段，一条折线只能高亮其中的一个线段
 * @param begin Integer 类型，高亮线段起点对应折线对象节点集合中的下标值
 * @param end Integer 类型，高亮线段终点对应折线对象节点集合中的下标值
 *  @param currlevel Boolean 表示是否只使用当前级别组的经纬度数据进行高亮，默认为 false。
 * @uncrunch
 */
KLine.prototype.hilite = function( begin, end, currlevel)
 {
	// 重新绘制一条线做为高亮效果
	if (this._hiliteKLine != null) {
		KMap.getCurrentMap().removeOverlay(this._hiliteKLine.ol(), true);
		this._hiliteKLine.finalize();
	}
	// bug 1011011202 fix begin
	// delete by panx
	// this._hiliteKLine = new KLine(this.ol().getPointsByLevelGroup(begin, end), {brush : this._opts.hiliteBrush});
	// add by panx
	//if (typeof currlevel == "boolean" && currlevel) {
	if (currlevel===true) {
		this._hiliteKLine = new KLine(this.ol().getPointsByLevelGroup(begin, end), {
			brush : this._opts.hiliteBrush
		});
	} else {
		this._hiliteKLine = new KLine(this.latlons(begin, end), {
			brush : this._opts.hiliteBrush
		});
	}
	// bug 1011011202 fix end
	KMap.maplet(this._mc).addOverlay(this._hiliteKLine.ol());
};

/**
 * 将折线从高亮状态恢复到正常状态
 *
 * @uncrunch
 */
KLine.prototype.resume = function()
{
    if (this._hiliteKLine != null)
    {
        KMap.maplet(this._mc).removeOverlay(this._hiliteKLine.ol(), true);
        this._hiliteKLine = null;
    }
};

/**
 * 打开或关闭编辑状态，path指定了编辑方式
 * @param able Boolean 类型
 * @param path Boolean 类型
 * @uncrunch
 */
KLine.prototype.setEditable = function(able, path)
{
    if (typeof able == 'boolean')
    {
        this._ol.setEditable(able);
        this._opts.editable = able;
        if (typeof path == 'boolean')
        {
            this._opts.path = path;
            if (able) this._ol.setEditMode(path ? "path" : "default", this._opts.editHilite);
        }
    }
};

/**
 * 修改折线样式，brush中未指定的属性将不被修改
 * @param brush KBrush 类型
 * @uncrunch
 */
KLine.prototype.setBrush = function(brush)
{
    brush = KTools.copyOptions(brush, this._opts.brush);
    this._ol.setBrush(this._makeMBrush(brush));
    this._opts.brush = brush;
    KEvent.trigger(this, "brushchanged", this, brush);
};

/**
 * 应用于KLine KArea的MLine的创建
 * @param pts
 * @param opts
 */
KLine.prototype._makerMLine = function(pts, opts)
{
    var points;
    if (typeof pts == 'string')
    {
        var latLons = pts.split(",");
        points = [];
        for (var i = 0; i < latLons.length; i++) points.push(new MPoint(latLons[i]));
    } else if (pts instanceof Array)
        points = pts;
    else return null;
    var brush = this._makeMBrush(opts.brush);
    if(opts.infowin) opts.infowin = KTools.copyOptions(opts.infowin, KInfoWindowOptions);
    var mLine = new MPolyline(points, brush, null);
    mLine.setEditable(opts.editable);
    if (opts.editable) mLine.setEditMode(opts.path ? "path" : "default", opts.editHilite);
    return mLine;
};

/**
 * 使用KBrush对象创建一个MBrush对象
 * @param kbrush
 */
KLine.prototype._makeMBrush = function(kbrush)
{
    var brush = new MBrush();
    kbrush = KTools.copyOptions(kbrush, KBrushOptions);
    kbrush.dmstyle = KTools.copyOptions(kbrush.dmstyle, KDirMarkStyleOptions);
    brush.color = kbrush.color;
    //bug 1010291555.1 fix begin
    //del by panx
    //brush.width = kbrush.width;
    //add by panx
    brush.stroke = kbrush.width;
    //bug 1010291555.1 fix end
    brush.fill = (kbrush.fill == true);
    if (kbrush.dashed) brush.style = 1;
    brush.transparency = kbrush.transparency;
    brush.bgcolor = kbrush.bgcolor;
    brush.bgtransparency = kbrush.bgtransparency;
    brush.overlap.enable = kbrush.overlap;
    if(brush.overlap.enable && this._opts.disableIE678overlap && $.browser.msie) brush.overlap.enable = false;
    brush.overlap.transparency = 50;
    return brush;
};


/**
 * 重新设置属性
 * @param opts 属性对象
 * @uncrunch
 */
KLine.prototype.setOptions = function(opts)
{
    if (typeof opts != 'object' || opts == this._opts) return;
    $.extend(true, this._opts, opts);
    if (typeof opts.brush == "object" && opts.brush != null) {
        this.setBrush(this._opts.brush);
    }
    if (typeof opts.infowin == "object")
    {
        if(!this._olListener["iw_click"])
        {
            this._olListener["iw_click"] = MEvent.addListener(this._ol, 'click', function() {
                _this._ol.setInfoWindow(null);
                KMap.openInfoWindow(_this);
            });
        }
		if(this._opts.infowin) this._opts.infowin = KTools.copyOptions(this._opts.infowin, KInfoWindowOptions);
		KOverlay.prototype.setOptions.apply(this, [opts]);
    }
    if (typeof opts.editable == 'boolean') this.setEditable(opts.editable, this._opts.path);
};

/**
 *  按照类型返回经纬度集合，当 type=="begin" 或 "end" 时，返回第一个和最后一个经纬度，类型为 MPoint  ；当 type=="all" 或被忽略时，返回所有经纬度，类型为数组。
 *  返回指定序号范围的经纬度集合，序号从0开始。
 * @param begin String 类型，有效值为： "begin","end","all"  。  Integer 类型，起始序号，当小于最小值时，返回 0 索引位置的经纬度
 * @param end Integer 类型，结束序号，当大于最大值时，返回 最大值 索引位置的经纬度
 * @return MPoint 或 MPoint[] 类型
 * @uncrunch
 */
KLine.prototype.latlons = function(begin, end)
{
    if(!this._ol || !(this._ol.pts instanceof Array) || this._ol.pts.length < 1) return [];
	if(begin == undefined) begin = "all";
    if(typeof begin === "string")
    {
        switch(begin)
        {
            case "begin" :
                return this._ol.pts[0];
                break;
            case "end" :
                return this._ol.pts[this._ol.pts.length - 1];
                break;
            case "all" :
                return this._ol.pts;
                break;
        }
    } else {
        begin = parseInt(begin);
        end = parseInt(end);
        if(begin < 0) begin = 0;
        end++;
        if(end > this._ol.pts.length) end = this._ol.pts.length;
        if(begin > end) return [];
        return this._ol.pts.slice(begin, end);
    }
};

/**
 * @uncrunch
 */
KLine.prototype.editable = function()
{
    if(this._ol) return this._ol.bEditable;
    return false;
};

/**
 * 设置折线需要显示方向标的节点位置信息和方向标功能选项。
 * @param idx Integer[] 类型，设置需要显示方向标的节点索引，此索引来自 latlons("all") 方法返回值数组。默认为 undefined
 * @param opts KDirMarkOptions 类型，功能选项。
 * @uncrunch
 */
KLine.prototype.addDirMarkers = function(idx, opts)
{
    if(this._ol && idx instanceof Array)
    {
        if(!this._dMOptions) this._dMOptions = KTools.copyOptions({}, KDirMarkOptions);
        opts = KTools.copyOptions(opts, this._dMOptions);
        this._ol.setDirMark({
            minLevel: opts.minLevel
            ,maxLevel: opts.maxLevel
            ,pts: idx
        }, opts.redraw);
    }
};

/**
 * 删除所有方向标。
 * @uncrunch
 */
KLine.prototype.clearDirMarkers = function()
{
    this.addDirMarkers([]);
};

/**
 * 将 begin 和 end 表示的经纬度位置之间的线路显示在地图可视范围内，如果忽略此参数，则将整条线路显示在可视范围内。
 * @param begin Integer类型
 * @param end Integer类型
 * @uncrunch
 */
KLine.prototype.fitzoom = function(begin, end)
{
    var _latlons;
    if(typeof begin == "number" && typeof end == "number")
       _latlons = this.latlons(begin, end);
    else _latlons = this.latlons("all");
    var _mm = KMap.maxmin(_latlons);
    KMap.fitzoom([_mm.min, _mm.max]);
};

/**
 * 根据同类型对象的 toString() 方法返回值创建标注。
 * @param str String 类型
 * @return KMarker 对象
 */
KLine.fromString = function(str)
{
    if(typeof str == "string" && str)
    {
        var _o = eval("new Object("+str+")");
        if(arguments[1]) return new arguments[1](_o.latlons, KOverlay._parseStringToObj(_o.options));
        return new KLine(_o.latlons, KOverlay._parseStringToObj(_o.options));
    }
    return null;
};

/**
 * @overwrite
 * @uncrunch
 */
KLine.prototype.toString = function()
{
    var _points = this.latlons("all");
    if(_points)
    {
        var _latlons = [];
        for(var i = 0; i < _points.length; i++)
        {
            _latlons.push(_points[i].getPid());
        }
        return '{latlons:"'+_latlons.join(",")+'", options:"'+this._parseObjToString(this._opts).replace(/\\/ig,"\\\\").replace(/([\"\'])/ig, '\\$1')+'"}';//.replace(/([\"\'])/ig, '\\$1')
    }
    return "";
};


KLine.prototype._dragstart = false;

/**
 * 自定义事件处理方法
 * @param obj
 * @param evtname
 * @param fun
 * @param data
 * @uncrunch
 */
KLine.prototype.bind = function(obj, evtname, fun, data, thisobj)
{
    var this_ = this;
    evtname = evtname.toLowerCase();
    if (evtname == 'click' || evtname == 'infowindowopen' || evtname == 'infowindowclose' || evtname == 'remove' || evtname == 'visibilitychanged')
    {
        KOverlay.prototype.bind.apply(this, [this_, evtname, fun, data, thisobj]);
        return;
    }
    switch (evtname) {
        case 'modified' :
            if(!this._olListener["drag"])
                this._olListener["drag"] = MEvent.addListener(this._ol, 'drag', function(polyline) {
                    KEvent.trigger(this_, "modified", this_);
                });
            if(!this._olListener["edit"])
                this._olListener["edit"] = MEvent.addListener(this._ol, 'edit', function(polyline) {
                    KEvent.trigger(this_, "modified", this_);
                });
            break;
        case 'pathnode_dragstart' : ;
        case 'pathnode_draging' :
            if(!this._olListener["nodedrag_move"])
                this._olListener["nodedrag_move"] = MEvent.addListener(this._ol, 'nodedrag_move', function(polyline, marker) {
                    if(this_._dragstart == false)
                    {
                        this_._dragstart = true;
                        KEvent.trigger(this_, "pathnode_dragstart", this_, marker.pt);
                    }
                    KEvent.trigger(this_, "pathnode_draging", this_, marker.pt);
                });
            if(!this._olListener["nodedrag"])
                this._olListener["nodedrag"] = MEvent.addListener(this._ol, 'nodedrag', function(polyline, marker) {
                    this_._dragstart = false;
                    KEvent.trigger(this_, "pathnode_dragend", this_, marker.pt);
                });
            if(!this._olListener["drag_hovering"])
                this._olListener["drag_hovering"] = MEvent.addListener(this._ol, 'drag_hovering', function(polyline, marker) {
                    KEvent.trigger(this_, "pathnode_hovering", this_, marker.pt);
                });
            break;
    }
    if (!this.adapters) this.adapters = {};
    if (!this.adapters[evtname]) this.adapters[evtname] = [];
    if (!KTools._arrayContains(this.adapters[evtname], fun)) this.adapters[evtname].push({fun:fun, data:data, thisobj: thisobj});
};

/**
 * @overwrite
 * @uncrunch
 */
KLine.prototype.finalize = function()
{
    if(this._olListener)
    {
        for(var i in this._olListener) MEvent.removeListener(this._olListener[i]);
    }
    KEvent.clear(this);
    if(this._opts && this._opts.infowin) KTools.removeNode(this._opts.infowin._contentDom);
    this.resume();
    KOverlay.prototype.finalize.apply(this);
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KLine.prototype.dependent = function()
{
    return [KOverlay, KTools, KLineOptions, KMap,KInfoWindowOptions, KBrushOptions, jQuery, KDirMarkStyleOptions, KDirMarkOptions];
};
/*
 地图标注类型，对光栅图API的MMarker类型的二次封装
 作者:wangzheng
 版本:1.0
 创建时间:2010-01-15
 最后修改时间:2010-01-29
 */
var KMarker = KClass.create("KMarker", KOverlay);

/**
 * 按KMarkerOptions中指定的选项在 latlon 创建标记
 * @param latlon 经纬度或MPoint对象
 * @param opts
 */
KMarker.initialize = function(latlon, opts)
{
    var _this = this;
    this._olListener = {};
    //@uncrunch
    this.adapters = {};
    if (typeof latlon == "string")
    {
        this._point = new MPoint(latlon);
    } else if (latlon instanceof MPoint)
    {
        this._point = latlon;
    }

    this._opts = KTools.copyOptions(opts, KMarkerOptions);
    this._group = this._opts.group;

    if(this._opts.icon) this._opts.icon = KTools.copyOptions(this._opts.icon, KIconOptions);
    if(this._opts.infowin) this._opts.infowin = KTools.copyOptions(this._opts.infowin, KInfoWindowOptions);
    if(this._opts.label) this._opts.label = KTools.copyOptions(this._opts.label, KLabelOptions);
    if(!this._opts.icon) return;

    var obj = this._conveIconAndShadow();
    
    var icon = obj.icon;
    var shadow = obj.shadow;

    var infowin = null;
//    this._label = this._conveLabel();
    this._ol = new MMarker(this._point, icon, infowin, this._conveLabel(), shadow);

    this._ol.dragAnimation = this._opts.bouncy;
    this._ol.autoHide = this._opts.autoHide;
    this._ol.setEditable(this._opts.editable);
    this._updateLabel();
    this._olListener["iw_click"] = MEvent.addListener(this._ol, 'click', function() {
        if(_this._opts && _this._opts.infowin)
        {
            _this._ol.setInfoWindow(null);
			//KMap.openInfoWindow(_this);
            setTimeout(function(){KMap.openInfoWindow(_this);});
        }
    });
};

/**
 * 将标注显示为高亮（醒目）状态
 * @param pos KPosition.RIGHT
 * @uncrunch
 */
KMarker.prototype.hilite = function(pos)
{
    if (!pos) pos = KPosition.RIGHT;
    this._ol.icon.hilite();
};

/**
 * 将叠加物从高亮状态恢复到正常状态
 * @uncrunch
 */
KMarker.prototype.resume = function()
{
    //this._opts.icon.img.resume();
};

/**
 * 显示标签
 * @uncrunch
 */
KMarker.prototype.showLabel = function()
{
    this._ol.label.setVisible(true);
};

/**
 * 隐藏标签
 * @uncrunch
 */
KMarker.prototype.hideLabel = function()
{
    this._ol.label.setVisible(false);
};

/**
 * 打开或关闭编辑状态
 * 默认为关闭编辑状态
 * @uncrunch
 */
KMarker.prototype.setEditable = function(able)
{
    if (typeof able != 'boolean') able = false;
    this._ol.setEditable(able);
};

/**
 * 自定义事件处理方法
 * @param obj
 * @param evtname
 * @param fun
 * @param data
 * @uncrunch
 */
KMarker.prototype.bind = function(obj, evtname, fun, data, thisobj)
{
    var this_ = this;
    evtname = evtname.toLowerCase();
    if (evtname == 'click' || evtname == 'infowindowopen' || evtname == 'infowindowclose' || evtname == 'remove' || evtname == 'visibilitychanged')
    {
        KOverlay.prototype.bind.apply(this, [this_, evtname, fun, data, thisobj]);
        return;
    }
    switch (evtname) {
        case 'dragstart' :
            if(!this._olListener["dragstart"])
                this._olListener["dragstart"] = MEvent.addListener(this._ol, 'dragstart', function(marker, point) {
                    KEvent.trigger(this_, "dragstart", this_, point);
                });
            break;
        case 'draging' :
            if(!this._olListener["draging"])
                this._olListener["draging"] = MEvent.addListener(this._ol, 'draging', function(marker, point) {
                    KEvent.trigger(this_, "draging", this_, point);
                });
            break;
        case 'dragend' :
            if(!this._olListener["dragend"])
                this._olListener["dragend"] = MEvent.addListener(this._ol, 'drag', function(marker) {
                    KEvent.trigger(this_, "dragend", this_, marker.pt);
                });
            break;
        case 'mouseover' :
            if(!this._olListener["mouseover_"])
                this._olListener["mouseover_"] = MEvent.addListener(this._ol, 'mouseover', function(marker) {
                    KEvent.trigger(this_, "mouseover", this_);
                });
            break;
        case 'mouseout' :
            if(!this._olListener["mouseout_"])
                this._olListener["mouseout_"] = MEvent.addListener(this._ol, 'mouseout', function(marker) {
                    KEvent.trigger(this_, "mouseout", this_);
                });
            break;
    }
    if (!this.adapters) this.adapters = {};
    if (!this.adapters[evtname]) this.adapters[evtname] = [];
    if (!KTools._arrayContains(this.adapters[evtname], fun)) this.adapters[evtname].push({fun:fun, data:data, thisobj: thisobj});
};

/**
 * 重新设置属性
 * @param opts 属性对象
 * @uncrunch
 */
KMarker.prototype.setOptions = function(opts)
{

    if (typeof opts != 'object' || opts == this._opts) return;

    if(opts.group && opts.group != this._group) this.setGroup(opts.group);
    $.extend(true, this._opts, opts);
    if(this._opts.icon) this._opts.icon = KTools.copyOptions(this._opts.icon, KIconOptions);
    if(this._opts.label) this._opts.label = KTools.copyOptions(this._opts.label, KLabelOptions);
    if(opts.infowin)
    {
        if(this._opts.infowin) this._opts.infowin = KTools.copyOptions(this._opts.infowin, KInfoWindowOptions);
		KOverlay.prototype.setOptions.apply(this, [opts]);
    }
    //如果icon有改变
    if (opts.icon)
    {
        if(opts.icon.img || opts.shadow || opts.icon.size || opts.icon.anchor || opts.icon.shadowSize)
        {
            var iconAndShadow = this._conveIconAndShadow();
            this._ol.setIcon(iconAndShadow.icon, true);
            this._ol.setShadow(iconAndShadow.shadow, true);
        } else if(opts.icon.snapIcon) {
            this._ol.icon.div.firstChild.firstChild.setAttribute(Maplet.MICON_IMGSRC_FLAG, opts.icon.snapIcon);
        }
    }
    if (typeof opts.label == "object")
    {
        if(this._ol.label) KTools.removeNode(this._ol.label.div);
        this._ol.setLabel(this._conveLabel(), true);
    }

    this._ol.dragAnimation = this._opts.bouncy;
    this._ol.autoHide = this._opts.autoHide;
    if (typeof opts.editable == 'boolean') this._ol.setEditable(this._opts.editable);
    if (this._ol.label)
    {
        this._updateLabel();
    } else {
        if (this._olListener["mouseover"])
        {
            MEvent.removeListener(this._olListener["mouseover"]);
            delete this._olListener["mouseover"];
        }
        if (this._olListener["mouseout"])
        {
            MEvent.removeListener(this._olListener["mouseout"]);
            delete this._olListener["mouseout"];
        }
    }

};

KMarker.prototype._updateLabel = function()
{
    var _this = this;
    if (this._ol && this._ol.label)
    {
        var label = this._ol.label;
        if(this._opts.hoverLabel)
        {
            label.setVisible(false);
            if(!this._olListener["mouseover"]) this._olListener["mouseover"] = MEvent.addListener(this._ol, 'mouseover', function(marker) {
                label.setVisible(true);
            });
            if(!this._olListener["mouseout"]) this._olListener["mouseout"] = MEvent.addListener(this._ol, 'mouseout', function() {
                label.setVisible(false);
            });
        } else {
            label.setVisible(true);
            if(this._olListener["mouseover"]) MEvent.removeListener(this._olListener["mouseover"]);
            if(this._olListener["mouseover"]) MEvent.removeListener(this._olListener["mouseout"]);
            delete this._olListener["mouseover"];
            delete this._olListener["mouseout"];
        }
        if (this._opts.label.wordwrap)
            label.div.style.wordWrap = 'break-word';
        else
            label.div.style.wordWrap = 'normal';
    }
};

/**
 * @return MPoint
 * @uncrunch
 */
KMarker.prototype.latlon = function()
{
    return this._point;
};

/**
 * 设置标注新的经纬度位置
 * @param latlon String 或 MPoint类型，经纬度字符串或对象。
 * @uncrunch
 */
KMarker.prototype.setLatlon = function(latlon)
{
    if(this._ol && latlon)
    {
        if(!(latlon instanceof MPoint)) latlon = new MPoint(latlon);
        this._point = latlon;
        this._ol.setPoint(latlon, true);
    }
};

KMarker.prototype._conveIconAndShadow = function()
{
    var icon_opt = this._opts.icon;
    if (!icon_opt || !icon_opt.img) return;
    var icon_size = undefined;

    if (icon_opt.size instanceof KSize)
        icon_size = icon_opt.size;
    else {
        if (typeof icon_opt.img == "string" && icon_opt.img.indexOf("<") == -1)
            icon_size = KTools.imgSize(icon_opt.img);
        else {
            icon_opt.img = $(icon_opt.img)[0];
            icon_size = KTools.measSize(icon_opt.img);
        }
        icon_opt.size = icon_size;
    }
    var icon_anchor = undefined;
    if (icon_opt.anchor instanceof KPoint) icon_anchor = icon_opt.anchor;
    else
    {
        icon_anchor = new KPoint(icon_size.width / 2, icon_size.height);
        icon_opt.anchor = icon_anchor;
    }

    var icon = new MIcon(icon_opt.img, icon_size.width, icon_size.height, icon_anchor.x, icon_anchor.y);
    if(typeof icon_opt.snapIcon == "string") icon.div.firstChild.firstChild.setAttribute(Maplet.MICON_IMGSRC_FLAG, icon_opt.snapIcon);
    if(typeof icon_opt.cssname == "string") icon.div.firstChild.className = icon_opt.cssname;
    var shadow = null;
    if (icon_opt.shadow && (!KTools.isIE6 || icon_opt.disableIE6shadow === false))
    {
        var icon_shadow_size = undefined;
        if (icon_opt.shadowSize instanceof KSize)
            icon_shadow_size = icon_opt.shadowSize;
        else {
            if (typeof icon_opt.shadow != "object" && icon_opt.shadow.indexOf("<") == -1)
                icon_shadow_size = KTools.imgSize(icon_opt.shadow);
            else
            {
                icon_opt.shadow = $(icon_opt.shadow)[0];
                icon_shadow_size = KTools.measSize(icon_opt.shadow);
            }
            icon_opt.shadowSize = icon_shadow_size;
        }
        if (icon_shadow_size instanceof KSize && icon_shadow_size.width > 0 && icon_shadow_size.height > 0)
        {
            var icon_shadow_anchor = undefined;
            if (icon_opt.shadowAnchor instanceof KPoint) icon_shadow_anchor = icon_opt.shadowAnchor;
            if (icon_shadow_anchor)
                shadow = new MIconShadow(icon_opt.shadow, icon_shadow_size.width, icon_shadow_size.height, icon_shadow_anchor.x, icon_shadow_anchor.y);
            else
                shadow = new MIconShadow(icon_opt.shadow, icon_shadow_size.width, icon_shadow_size.height);
        }
    }
    return {
        icon:icon
        ,shadow:shadow
    };
};

KMarker.prototype._conveLabel = function()
{
//    return null;
    var label = null;
    var label_opt = this._opts.label;
    var icon_size = this._opts.icon.size;
    if (label_opt)
    {
        var x = 0;
        var y = 0;
        //确定label的位置
        if (label_opt.anchor instanceof KPoint)
        {
            x = label_opt.anchor.x;
            y = label_opt.anchor.y;
        } else if (label_opt.pos) {
            if(typeof label_opt.label == "string" && label_opt.label.indexOf("<") == -1) label_opt.label = "<div>"+label_opt.label+"</div>";
            label_opt.label = $(label_opt.label)[0];
            
            var size = KTools.measSize(label_opt.label);
            if (size instanceof KSize)
                switch (label_opt.pos) {
                    case KPosition.TOP :
                        x = - (size.width / 2 - icon_size.width / 2);
                        y = - size.height;
                        break;
                    case KPosition.BOTTOM :
                        x = - (size.width / 2 - icon_size.width / 2);
                        y = icon_size.height;
                        break;
                    case KPosition.LEFT :
                        x = - size.width;
                        y = - (size.height / 2 - icon_size.height / 2);
                        break;
                    case KPosition.RIGHT :
                        x = icon_size.width;
                        y = - (size.height / 2 - icon_size.height / 2);
                        break;
                }
            label_opt.anchor = new KPoint(x, y);
        }
        
        if (x != 0 || y != 0)
        {
            label = new MLabel(label_opt.label, {
                xoffset: x
                ,yoffset: y
//                ,opacity: label_opt.transparence
                ,enableStyle: label_opt.defaultStyle
                ,visible: !this._opts.hoverLabel
            });
            if (label_opt.snapText) $(label.div).attr(""+Maplet.MLABEL_TEXT_FLAG, label_opt.snapText);
        }
    }
    return label;
};

KMarker.prototype._conveInfowin = function()
{
    var infowin = null;
    var infowin_opt = this._opts.infowin;
    if (infowin_opt) infowin = KTools._makeMinfoWindow(infowin_opt);
    return infowin;
};

/**
 * 打开或关闭编辑状态。
 * @param classname String 类型，运行时设置 KIconOptions.img  元素的样式名称
 * @uncrunch
 */
KMarker.prototype.setIconClass = function(classname)
{
    if(typeof classname == "string") {
		this.ol().icon.div.firstChild.firstChild.className = classname;
		
		//var _text = this._opts.icon.img;
		//if(_text) {
		//	if(/^[^\<]*<[^\>]*class=[^\>]*>/.test(_text)) {
		//		this._opts.icon.img = _text.replace(/class=[^\ \>]*/, "class=\""+classname+"\"");
		//	} else {
		//		this._opts.icon.img = _text.replace(/^([^\<]<[^\>]*)\>/, "$1 class=\""+classname+"\">");
		//	}
		//}
	}
};

/**
 * 打开或关闭编辑状态。
 * @param classname String 类型，运行时设置 KIconOptions.img  元素的样式名称
 * @uncrunch
 */
KMarker.prototype.setLabelClass = function(classname)
{
    if(typeof classname == "string" && this.ol() &&this.ol().label) {
		this.ol().label.div.firstChild.className = classname;
	}
};

/**
 * 返回依赖的其它组件
 * @return KObject[]
 * @uncrunch
 */
KMarker.prototype.dependent = function()
{
    return [KTools, KOverlay, KMarkerOptions, KPosition, KSize, KPoint, KInfoWindowOptions, KLabelOptions, KIconOptions, jQuery];
};

/**
 * 返回标签 Dom  对象。
 * @return Node 类型
 * @uncrunch
 */
KMarker.prototype.iconDom = function()
{
    if(this._ol && this._ol.icon) return this._ol.icon.div;
};

/**
 * 返回标签 Dom  对象。
 * @return Node 类型
 * @uncrunch
 */
KMarker.prototype.labelDom = function()
{
    if(this._ol && this._ol.label) return this._ol.label.div;
};


/**
 * @uncrunch
 */
KMarker.prototype.editable = function()
{
    if(this._ol) return this._ol.bEditable;
    return false;
};

/**
 * 返回标签 Dom  对象。
 * @return Node 类型
 * @uncrunch
 */
KMarker.prototype.shadowDom = function()
{
    if(this._ol && this._ol.shadow) return this._ol.shadow.div;
};

/**
 * 根据同类型对象的 toString() 方法返回值创建标注。
 * @param str String 类型
 * @return KMarker 对象
 */
KMarker.fromString = function(str)
{
    if(typeof str == "string" && str)
    {
        var _o = eval("new Object("+str+")");
        return new KMarker(_o.latlon, KOverlay._parseStringToObj(_o.options));
    }
    return null;
};

/**
 * 将图标和标签 Dom 的 innerHTML 同步到各自的属性中。 此方法用来解决直接通过 Dom 修改UI而属性不同步的问题。 
 * @uncrunch
 */
KMarker.prototype.syncHtml2Attribute = function()
{
	var _labelHtml = $(this.labelDom()).html();
	if(_labelHtml.indexOf("<") != -1 && this._opts && this._opts.label && this._opts.label) {
		this._opts.label.label = _labelHtml;
//		this._opts.label.snapText = $(this.labelDom()).text();
	}
};

/**
 * @overwrite
 * @uncrunch
 */
KMarker.prototype.toString = function()
{
    return '{latlon:"'+this.latlon().pid+'", options:"'+this._parseObjToString(this._opts).replace(/[\n\r]+/ig,"").replace(/\\/ig,"\\\\").replace(/([\"\'])/ig, '\\$1')+'"}';//.replace(/([\"\'])/ig, '\\$1')
};


/**
 * @overwrite
 * @uncrunch
 */
KMarker.prototype.finalize = function()
{
    if(this._olListener)
    {
        for(var i in this._olListener) MEvent.removeListener(this._olListener[i]);
    }
    KEvent.clear(this);
    if(this._opts && this._opts.infowin) KTools.removeNode(this._opts.infowin._contentDom);
    KOverlay.prototype.finalize.apply(this);
};
/*
 地图区域类型，对光栅图API的MPolyline的二次封装
 作者：wangzheng
 版本：1.0
 创建时间：2010-1-15
 最后修改时间：2010-1-26
 */
var KArea = KClass.create("KArea", KLine);

/**
 * 使用经纬度集合字符串形式创建KArea对象
 * @param pts String 类型，经纬度集合字符串
 * @param opts KAreaOptions 类型
 */
KArea.initialize = function(pts, opts)
{
    this._opts = KTools.copyOptions(opts, KAreaOptions);
    this._opts.brush.fill = true;
    this._opts.hiliteBrush.fill = true;
    this._brush = this._opts.brush;
    this._group = this._opts.group;
    this._ol.brush.fill = true;
};

/**
 * 高亮区域
 * @uncrunch
 */
KArea.prototype.hilite = function()
{
    //重新绘制一条线做为高亮效果
    this.setBrush(this._opts.hiliteBrush);
};

/**
 * 将区域从高亮状态恢复到正常状态
 * @uncrunch
 */
KArea.prototype.resume = function()
{
    //重新绘制一条线做为高亮效果
    this.setBrush(this._brush);
};

/**
 * 检查指定的经纬度是否在区域内
 * @param latlon MPoint 类型
 * @return Boolean 类型
 * @uncrunch
 */
KArea.prototype.contains = function(latlon)
{
    return _isInsidePolygon(latlon, this._ol.pts)
};

/**
 * 根据同类型对象的 toString() 方法返回值创建标注。
 * @param str String 类型
 * @return KMarker 对象
 */
KArea.fromString = function(str)
{
    return KLine.fromString(str, KArea);
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KArea.prototype.dependent = function()
{
    return [KLine, KAreaOptions, KTools];
};

/*
 此模块主要是对光栅图API的功能进行再次封装。目的如下：
 1.光栅图API易用性比较差，所以将一些复杂、繁琐的调用进行封装，对外提供简单易用的接口
 2.通过此模块实现一些与地图相关的高级功能，如标注聚合
 3.提高复用性，减少Bug率，减少文件KB数
 作者:wangzheng
 版本:1.0
 创建时间:2010-1-15
 修改时间:2010-1-22 14:26

 */

var KMap = new (function() {
    this._isSelfEvt = true;
    //对象结构 container //Dom - > Maplet对象
    var _hiddenJDom = $("<div style='display:none;'/>").appendTo(document.body);
    var _containers = {};
    var _containerList = [];
    //对象结构 maplet对象->dom
    //默认的Maplet对象
    var _maplets = {};
    var _map = undefined;
    //结构：{group -> }
    var _markers = {};
    var _lines = {};
    var _areas = {};
    //
    var _currentMode;
    //maplet -> listener
    var _mapletListener = {};
    //@uncrunch maplet -> {evtname->Function[]}
    this.adapters = {};
    var _KSnapshotOptions = undefined;
    var _snapshot_select = undefined;
    var _snapshot_done = undefined;
    var _overviewRect = null;
    var _disableDiv = undefined;
    var _mapFishJDom = undefined;
    var _options = undefined;
    var mapContext = undefined;
    var _getOverlays = function(olObj, type, id)
    {
        if(!_map) return null;
        var typeOls;		
		var ms = [];
		if(typeof type == 'string' && (typeOls = olObj[type]))
		{
			if(typeof id == 'string') return typeOls[id];
            for(var i in typeOls) ms.push(typeOls[i]);
		} else {
			for(var i in olObj)
				for(var j in olObj[i]) ms.push(olObj[i][j]);
		}
		return ms;
    };
    var _clearOverlays = function(olObj, type)
    {
        if(!_map) return;
        _map.hideBubble();
        if (typeof type != 'string') type = "temp";
        var typeOls = olObj[type];
        if (!(typeOls instanceof Object)) return;
        for (var i in typeOls) _removeOverlay(olObj, typeOls[i]);
        delete olObj[type];
    };
    var _removeOverlay = function(olObj, ol)
    {
        if(olObj && ol && ol.group && _map)
        {
            if(olObj[ol.group()] && olObj[ol.group()][ol.id()])
            {
                _map.removeOverlay(ol.ol(), true);
                delete olObj[ol.group()][ol.id()];
                ol.finalize();
            }
        }
    };

    var _drawLineCallbakStr = function(str)
    {
        str = str.substring(str.indexOf(":") + 1);
        str = str.substring(0, str.lastIndexOf(","));
        var array = str.split(",");
        var _array = [];
        for (var i = 0; i < array.length; i ++)
            _array.push(new MPoint(array[i]));
        return _array;
    };

    /**
     * @return 获取版本信息
     * @uncrunch
     */
    this.version = function()
    {
        return "1.0";
    };

    /**
     * @return 中文名称
     * @uncrunch
     */
    this.cnname = function()
    {
        return "地图操作模块";
    };

    //本身的事件列表
    /**
     * 初始化地图
     * @param container
     * @param options
     * @uncrunch
     */
    this.init = function(container, options)
    {
        if (!KTools._isElement(container)) {
            return;
        }

        _options = options = KTools.copyOptions(options, KMapOptions);

        MOUSEWHEEL = options.mousewheel;
        container._timeCode = KTools.timeCode();
        
        var _maplet = _containers[container._timeCode] = new Maplet(container);
        //考虑目前API特点的设置
        maplet = _maplet;
        _maplet._$_timeCode = KTools.timeCode();
        _maplets[_maplet._$_timeCode] = container;
        _maplet.clickToCenter = options.click2center;
        mapContext = _maplet;
        switch (options.overview) {
            case KMapCtrlState.NORMAL :
                _maplet.showOverview(true, true);
                break;
            case KMapCtrlState.MEDIUM :
                break;
            case KMapCtrlState.MINI :
                _maplet.showOverview(true, false);
                break;
            case KMapCtrlState.HIDE :
                _maplet.showOverview(false);
                break;
        }

        switch (options.fishbone) {
            case KMapCtrlState.NORMAL :
                _maplet.addControl(new MStandardControl());
                break;
            case KMapCtrlState.MEDIUM :
                _maplet.addControl(new MStandardControl({
                    view : {ruler : false}
                }));
                break;
            case KMapCtrlState.MINI :
                _maplet.addControl(new MStandardControl({
                    view :
                    {
                        ruler : false
                        ,pan : false
                    }
                }));
                break;
            case KMapCtrlState.HIDE :
                _maplet.addControl(new MStandardControl({
                    view :
                    {
                        ruler : false
                        ,pan : false
                        ,zoomout : false
                        ,zoomin : false
                    }
                }));
                break;
        }
        _maplet.centerAndZoom(options.center, options.zoom);
        if (!_map) _map = _maplet;
        _mapFishJDom = $(_maplet.controlCanvas.dom);
        var _oldZoom = options.zoom;
        var _oldCenter = options.center;
        _mapletListener["zoomed"] = MEvent.addListener(_maplet, "zoom", function(info) {
            var zoom = parseInt(KTools._getParam(info, "zm"));
            var vBound = _map.getViewBound();
            var bounds = new KMapBounds(new MPoint(vBound.LeftDown), new MPoint(vBound.RightUp), _maplets[_map._$_timeCode]);
            if(_map.getCenter() != _oldCenter)
            {
                _oldCenter = _map.getCenter();
                KEvent.trigger(_map, 'centerchanged', _maplets[_map._$_timeCode], new MPoint(_oldCenter));
            }
            KEvent.trigger(_map, 'zoomed', _maplets[_map._$_timeCode], _oldZoom, parseInt(KTools._getParam(info, "zm")), _map.getCenter(),  bounds);
            _oldZoom = zoom;
        });
		//openBubblePan 是否由打开气泡造成的移动，true是的
        _mapletListener["pan"] = MEvent.addListener(_maplet, "pan", function(point, openBubblePan) {
            if(_map.getCenter() != _oldCenter)
            {
                _oldCenter = _map.getCenter();
                KEvent.trigger(_map, 'centerchanged', _maplets[_map._$_timeCode], new MPoint(_oldCenter), openBubblePan);
            }
        });
		/*add by liufang 20131203 start
		  监听鼠标落下的事件
		*/
		_mapletListener["mousedown"] = MEvent.addListener(_maplet, "mousedown", function(e) {
            KEvent.trigger(_map, 'mousedown', _maplets[_map._$_timeCode], e);
        });
		/*add by liufang 20131203 end*/
		
		_currentMode = KMapMode.PAN;
        var _uOCenter = _oldCenter;
        var _uOZoom = _oldZoom;
        _mapletListener["update"] = MEvent.addListener(_maplet, "update", function(point) {
            if(_map.getCenter() != _uOCenter || _map.getZoomLevel() != _uOZoom)
            {
                _uOCenter = _map.getCenter();
                _uOZoom = _map.getZoomLevel();
                var vBound = _map.getViewBound();
                var bounds = new KMapBounds(new MPoint(vBound.LeftDown), new MPoint(vBound.RightUp));
                KEvent.trigger(_map, 'geocode', _maplets[_map._$_timeCode], _uOZoom, new MPoint(_uOCenter), bounds);
            }
        });


        _mapletListener["snapshot"] = MEvent.addListener(_map, "snapshot", function(info) {

            if(!_snapshot_select)
            {
                if(_KSnapshotOptions && _KSnapshotOptions.oncomplete)
                {
                    with(_KSnapshotOptions.oncomplete)
                    {
                        fun.apply(thisobj, [data, info]);
                    }
                    _snapshotIng = false;
                }
                _KSnapshotOptions = undefined;
                return;
            }
            var _opt = {latlon:new MPoint(_map.getCenter()), zoom:_map.getZoomLevel(), size: _snapshot_select.size(), format:"png"};
            _snapshot_select = undefined;
            KEvent.trigger(_map, 'snapshot', _maplets[_map._$_timeCode], _snapshot_done, _opt, info);
        });

        _mapletListener["snapshot_done"] = MEvent.addListener(_map, "snapshot_done", function(info) {
            if (info == 'preview')
            {
                _snapshot_done = info;
            } else {
                var _opt = {latlon:new MPoint(_map.getCenter()), zoom:_map.getZoomLevel(), size: _snapshot_select.size(), format:"png"};
                KEvent.trigger(_map, 'snapshot', _maplets[_map._$_timeCode], info, _opt, "");
            }
            setTimeout(function() {
                KMap.setMode(KMapMode.PAN);
            });
        });
        _mapletListener["snapshot_select"] = MEvent.addListener(_map, "snapshot_select", function(_obj) {
            _snapshot_select = new KBounds(new KPoint(_obj.x, _obj.y), new KPoint(_obj.x + _obj.width, _obj.y + _obj.height));
        });

		_mapletListener["setmode"] = MEvent.addListener(maplet, "setmode", function(mode){
			var _newMode;
			if(mode == "pan") {
				//dsl
				_newMode = KMapMode.PAN;
			} else if(mode == "measure") {
				_newMode = KMapMode.MEASURE;
			} else {
				return;
			}

			KEvent.trigger.apply(_map, [_map, 'modechanged', _maplets[_map._$_timeCode], _currentMode, _newMode]);
			_currentMode = _newMode;
		});
		_mapletListener["roadline"] = MEvent.addListener(maplet, "roadline", function(nodes, lines) {
			var _nodes = [];
			for(var i = 0; i < nodes.length; i++) {
				_nodes.push(nodes[i].pt);
				maplet.removeOverlay(nodes[i]);
			}
			var _lines = [];
			for(var i = 0; i < lines.length; i++) {
				_lines = _lines.concat(lines[i].pts);
				maplet.removeOverlay(lines[i]);
			}
			KEvent.trigger(KMap, 'roadline', _maplets[_map._$_timeCode], _nodes, _lines);
		});
		//
		_mapletListener["iw_hide"] = MEvent.addListener(_map, "iw_hide", function(mol) {
			var kol;
			//ols =={group:{ id_23:}}
			var getKol = function(ols) {
				var ol;
				if (!ols) {
					return;
				}
				for ( var g in ols) {
					if (ols[g]) {
						for ( var h in ols[g]) {
							if (ols[g][h] && ols[g][h]._ol && ols[g][h]._ol === mol) {
								ol = ols[g][h];
								break;
							}
						}
					}
					if (ol) {
						break;
					}
				}
				return ol;
			};
			//
			kol = getKol(_markers) || getKol(_lines) || getKol(_areas) || mol; 
			//
			KEvent.trigger(KMap, 'iw_hide', _containerList[0], kol);
		});
		//
        _containerList.push(container);
        KEvent.trigger.apply(_map, [KMap, 'mapinit', container, _map]);
    };

    this._removeOverlay = function(ol)
    {
        if (ol instanceof KMarker)
            delete _markers[ol.group()][ol.id()];
        else if (ol instanceof KLine)
            delete _lines[ol.group()][ol.id()];
        else if (ol instanceof KArea)
                delete _areas[ol.group()][ol.id()];
        _map.removeOverlay(ol.ol(), true);
    };

    	
    /**
     * 获取地图（Maplet）对象。如果忽略container则返回第一个（添加顺序）地图对象
     * @param container
     * @return Maplet
     * @uncrunch
     */
    this.maplet = function(container)
    {
        if(KTools._isElement(container)) return _containers[container._timeCode];
        if(_containerList.length > 0) return _containers[_containerList[0]._timeCode];
        return undefined;
    };

    /**
     * 判断地图是否初始化完成。此状态不包括对地图图片等资源的判断。如果忽略container则返回第一个（添加顺序）地图对象
     * @param container node
     * @uncrunch
     */
    this.isInitialized = function(container)
    {
        if(_containers) {
            if(KTools._isElement(container))  return !!_containers[container._timeCode];
            if(_containerList && _containerList.length > 0) return !!_containers[_containerList[0]._timeCode];
        }
        return false;
    };

    /**
     * 设置当前地图操作实例，KMap类型未指定地图实例的方法都将在此实例上进行。默认为KMap.init()初始化的第一个地图实例
     * @param container
     * @uncrunch
     */
    this.setCurrentMap = function(container)
    {
        _map = this.maplet(container);
    };

    /**
     * 得到当前地图操作实例
     * return Maplet实例
     * @uncrunch
     */
    this.getCurrentMap = function()
    {
        return _map;
    };

	/**
     * 返回地图当前模式。
     * return KMapMode  实例
     * @uncrunch
     */
	this.mode = function()
	{
		return _currentMode;
	};

    /**
     * 设置地图模式。某些模式下，地图会自动隐藏控件
     * @param mode  KMapMode
     * @uncrunch
     */
    this.setMode = function(mode)
    {
        if (!_map || !KMapMode[mode]) return;
        //DISABLE  	禁止操作模式。?
        //SNAPSHOT  	快照模式。?
        switch (mode) {
            case KMapMode.DISABLE :
                if (!_disableDiv)  _disableDiv = $("<div style=' position: absolute;left:0px;top:0px;width:100%;height:100%;display:none; z-index:99999999;*Filter: Alpha(Opacity=50);-moz-opacity:0.5;opacity: 0.5; background:#fff;'/>").appendTo(_map.map);
                _disableDiv.css("display", 'block');
                MOUSEWHEEL = false;
                break;
            case KMapMode.SNAPSHOT :
                if (_disableDiv)_disableDiv.css("display", 'none');
                MOUSEWHEEL = _options.mousewheel;
                if (_mapFishJDom) _mapFishJDom.css("display", 'none');
                _overviewRect = this.getOverviewRect();
                _map.showOverview(false);
                _map.setMode(mode);
                _map.showScale(false);
                break;
            case KMapMode.PAN :
                KMap.resumeMap();
                _map.setMode("pan");
                break;
            default :
                if (_disableDiv)_disableDiv.css("display", 'none');
                MOUSEWHEEL = _options.mousewheel;
                if(mode == KMapMode.ROADLINE)
				{
					_map.setMode('roadline');
				}
				else _map.setMode(mode);
        }
		if(mode == KMapMode.PAN || mode == KMapMode.MEASURE) return;
		//var out:
        KEvent.trigger.apply(_map, [_map, 'modechanged', _maplets[_map._$_timeCode], _currentMode, mode]);
        _currentMode = mode;
    };

    /**
     * @uncrunch
     */
    this.resumeMap = function()
    {
        if(_overviewRect) _map.showOverview(_overviewRect.v, _overviewRect.s);
        _map.showScale(true);
        if (_mapFishJDom) _mapFishJDom.css("display", 'block');
        MOUSEWHEEL = _options.mousewheel;
    };

    /**
     * @uncrunch
     */
    this.getOverviewRect  = function()
    {
        var _rect = _map.overview.getRect();
        return {v:(_rect.max.x - _rect.min.x != 0), s:(_rect.max.x - _rect.min.x > 30)};
    };

    

    /**
     * 增加指定类别的标注，并控制其是否居中和自动打开信息窗口
     * @param type String 类型，类别字符串，默认为"temp"
     * @param marker KMarker 类型
     * @param center Boolean 类型，是否将marker所在的经纬度设置为中心点，默认值为false
     * @param openiw Boolean 类型，是否自动打开marker的信息窗口，默认值为false
     * @uncrunch
     */
    this.addMarker = function(marker, center, openiw)
    {
        if (!_map || !(marker instanceof KMarker)) return;
        var group = marker.group();
        if (!(_markers[group] instanceof Object)) _markers[group] = {};
        marker._mc = _maplets[_map._$_timeCode];
        _markers[group][marker.id()] = marker;
        _map.addOverlay(marker.ol());
        marker._visible = true;
        if (typeof center != 'boolean') center = false;
        if (center) this.setCenter(marker.latlon());
        if (typeof openiw != 'boolean') openiw = false;
        if (openiw) this.openInfoWindow(marker);
        //container: Node 类型，地图对象对应的Dom对象。
        //marker: KMarker 类型。
        KEvent.trigger.apply(_map, [_map, 'addmarker', _maplets[_map._$_timeCode], marker]);
    };

    /**
     * 增加多个标注，并自动缩放到合适级别达到全览效果
     * @param type String 类型，类别字符串，默认为"temp"
     * @param markers KMarker[] 类型，包含了多个标注
     * @param autozoom Boolean 类型，是否自动缩放到合适级别，默认值为true
     * @uncrunch
     */
    this.addMarkers = function(markers, autozoom)
    {
        if (!_map || !(markers instanceof Array)) return;
        if (typeof autozoom != 'boolean') autozoom = true;
        for (var i = 0; i < markers.length; i++) this.addMarker(markers[i], false, false);
        if (autozoom) _map.setAutoZoom();
    };

    /**
     * 返回当前地图中心点。
     * @return MPoint 类型
     * @uncrunch
     */
    this.center = function()
    {
        if(_map) return new MPoint(_map.getCenter());
        return null;
    };

    /**
     * 返回当前地图缩放级别。
     * @return Integer 类型，缩放级别，有效值在K_MIN_ZOOM_LEVEL和K_MAX_ZOOM_LEVEL之间。。
     * @uncrunch
     */
    this.zoom = function()
    {
        if(_map) return _map.getZoomLevel();
        return null;
    };

    /**
     * @uncrunch
     */
    this.centerAndZoom = function(latlon, zoom)
    {
        if(!_map || !latlon || typeof zoom != "number") return;
        var point = latlon;
        if(typeof point === "string") point = new MPoint(latlon);
        _map.hideBubble();
        _map.centerAndZoom(point, zoom);
    };
    /**
     * 根据经纬度字符串设置地图中心点和缩放级别。忽略 level 参数将保持现有级别不变。
     * @uncrunch
     */
    this.setCenter = function(latlon, level)
    {
        if(!_map || !latlon) return;
        var point = latlon;
        if(typeof point === "string") point = new MPoint(latlon);
        if(typeof level === 'number') _map.centerAndZoom(point, level);
        else _map.setCenter(point);
    };

    /**
     * 增加折线，并自动缩放到合适级别达到全览效果
     * @param type String 类型，类别字符串，默认为"temp"
     * @param line KLine 类型
     * @param autozoom Boolean 类型，是否自动缩放到合适级别，默认值为false
     * @uncrunch
     */
    this.addLine = function(line, autozoom)
    {
        if (!_map || !(line instanceof KLine)) return;
        var group = line.group();
        if (!(_lines[group] instanceof Object)) _lines[group] = {};
        line._mc = _maplets[_map._$_timeCode];
        _lines[group][line.id()] = line;
        _map.addOverlay(line.ol());
        line._visible = true;
        if (typeof autozoom != 'boolean') autozoom = false;
        if (autozoom) _map.setAutoZoom();
        KEvent.trigger.apply(_map, [_map, 'addline', _maplets[_map._$_timeCode], line]);
    };

    /**
     * 增加多个折线，并自动缩放到合适级别达到全览效果
     * @param type String 类型，类别字符串，默认为"temp"
     * @param lines KMarker[] 类型，包含了多个折线
     * @param autozoom Boolean 类型，是否自动缩放到合适级别，默认值为true
     * @uncrunch
     */
    this.addLines = function(lines, autozoom)
    {
        if (!_map || !(lines instanceof Array)) return;
        if (typeof autozoom != 'boolean') autozoom = true;
        for (var i = 0; i < lines.length; i++) this.addLine(lines[i], false);
        if (autozoom) _map.setAutoZoom();
    };

    /**
     * 增加区域，并自动缩放到合适级别达到全览效果
     * @param type String 类型，类别字符串，默认为"temp"
     * @param area KArea 类型
     * @param autozoom Boolean 类型，是否自动缩放到合适级别，默认值为false
     * @uncrunch
     */
    this.addArea = function(area, autozoom)
    {
        if (!_map || !(area instanceof KArea)) return;
        var group = area.group();
        if (!(_areas[group] instanceof Object)) _areas[group] = {};
        area._mc = _maplets[_map._$_timeCode];
        _areas[group][area.id()] = area;
        _map.addOverlay(area.ol());
        area._visible = true;
        if (typeof autozoom != 'boolean') autozoom = false;
        if (autozoom) _map.setAutoZoom();
        KEvent.trigger.apply(_map, [_map, 'addarea', _maplets[_map._$_timeCode], area]);
    };

    /**
     * 增加多个区域，并自动缩放到合适级别达到全览效果
     * @param type String 类型，类别字符串，默认为"temp"
     * @param areas KArea[] 类型，包含了多个区域
     * @param autozoom Boolean 类型，是否自动缩放到合适级别，默认值为true
     * @uncrunch
     */
    this.addAreas = function(areas, autozoom)
    {
        if (!_map || !(areas instanceof Array)) return;
        if (typeof autozoom != 'boolean') autozoom = true;
        for (var i = 0; i < areas.length; i++) this.addLine(areas[i], false);
        if (autozoom) _map.setAutoZoom();
    };

    /**
     * 获取指定类别的标注。如果忽略id，则返回该类别下的所有标注
     * @param type String 类型，类别字符串，默认为"temp"
     * @param id String 类型， KMarker对象id
     * @uncrunch
     */
    this.getMarkers = function(group, id)
    {
        return _getOverlays(_markers, group, id);
    };

    /**
     * 获取指定类别的折线对象。如果忽略id，则返回该类别下的所有折线对象
     * @param type String 类型，类别字符串，默认为"temp"
     * @param id String 类型， 标注ID
     * @uncrunch
     */
    this.getLines = function(group, id)
    {
        return _getOverlays(_lines, group, id);
    };

    /**
     * 获取指定类别的区域对象。区域与折线都是KLine类型，区别在于是否填充。如果忽略id，则返回该类别下的所有区域对象
     * @param type String 类型，类别字符串，默认为"temp"
     * @param id String 类型， 标注ID
     * @uncrunch
     */
    this.getAreas = function(group, id)
    {
        return _getOverlays(_areas, group, id);
    };

    /**
     * 删除指定类别的所有标注。忽略type参数将删除所有标注
     * @param type String 类型，类别字符串，默认为"temp"
     * @uncrunch
     */
    this.clearMarker = function(group)
    {
        if(!_map) return;
        _clearOverlays(_markers, group);
    };

    /**
     * 删除指定类别的所有折线。忽略type参数将删除所有折线
     * @param type String 类型，类别字符串，默认为"temp"
     * @uncrunch
     */
    this.clearLine = function(group)
    {
        if(!_map) return;
        _clearOverlays(_lines, group);
    };

    /**
     * 删除指定类别的所有区域。忽略type参数将删除所有区域
     * @param type String 类型，类别字符串，默认为"temp"
     * @uncrunch
     */
    this.clearArea = function(group)
    {
        _clearOverlays(_areas, group);
    };

    /**
     * 删除指定标注。
     * @param marker KMarker 类型。
     * @uncrunch
     */
    this.removeMarker = function(marker)
    {
        _removeOverlay(_markers, marker);
    };
    
    /**
     * 删除指定的折线。
     * @param line KLine 类型。
     * @uncrunch
     */
    this.removeLine = function(line)
    {
        _removeOverlay(_lines, line);
    };

    /**
     * 删除指定的区域。
     * @param area KArea 类型
     * @uncrunch
     */
    this.removeArea = function(area)
    {
        _removeOverlay(_areas, area);
    };

    /**
     * 删除指定类别的所有叠加物。忽略type参数将删除所有叠加物
     * @param type String 类型，类别字符串，默认为"temp"
     * @uncrunch
     */
    this.clear = function(group)
    {
        this.clearMarker(group);
        this.clearLine(group);
        this.clearArea(group);
    };

    /**
     * 判断地图中心是否有效
     * 返回值：Boolean 类型，如果中心点无效，导致当前地图图片加载失败，则返回true；地图未初始化时此方法返回true
     * @uncrunch
     */
    this.checkCenter = function()
    {
        return _map.getCenter() == "NANRNANZNANRNAN";
    };

    /**
     * 通过state控制地图控件的显示状态，忽略state参数将采用KMapCtrlState.NORMAL值
     * @param state KMapCtrlState 类型
     * @uncrunch
     */
    this.setCtrlState = function(state)
    {
        if(!_map) return;
        if (!state) state = KMapCtrlState.NORMAL;
        switch (state) {
            case KMapCtrlState.NORMAL :
                _map.controlCanvas.setView({
                    ruler : true
                    ,pan : true
                    ,zoomout : true
                    ,zoomin : true
                });
                _map.showOverview(true, true);
                break;
            case KMapCtrlState.MEDIUM :
                _map.controlCanvas.setView({
                    ruler : false
                    ,pan : true
                    ,zoomout : true
                    ,zoomin : true
                });
                break;
            case KMapCtrlState.MINI :
                _map.controlCanvas.setView({
                    ruler : false
                    ,pan : false
                    ,zoomout : true
                    ,zoomin : true
                });
                _map.showOverview(true, false);
                break;
            case KMapCtrlState.HIDE :
                _map.controlCanvas.setView({
                    ruler : false
                    ,pan : false
                    ,zoomout : false
                    ,zoomin : false
                });
                _map.showOverview(false);
                break;
        }
    };

    /**
     * 设置 container 所表示的地图尺寸，忽略 container 参数将使用当前地图。
     * @param size KSize
     * @param container NODE
     * @uncrunch
     */
    this.resize = function(size, container)
    {
    	try{
    		if(!(size instanceof KSize)) return;
	        var _maplet = this.maplet(container);
	        if(!_maplet) _maplet = _map;
	        _maplet.resize(size.width, size.height);
    	}catch(e){
    		//try catch 用于 处理ie6下js报错。
    	}
       
    };

    /**
     * 计算指定的经纬度集合latlons  中的最大最小经纬度。
     * @param latlons MPoint[] 类型，经纬度集合
     * @return Object 类型，只有两个属性：min 和 max，均为 MPoint  类型。
     * @uncrunch
     */
    this.maxmin = function(latlons)
    {
        var _mm = {};
        if(_map && latlons instanceof Array && latlons.length > 0)
        {
            var _maxX,_maxY,_minX,_minY;
            for(var i = 0; i < latlons.length; i++)
            {
                var pt = latlons[i];
                if(pt instanceof MPoint)
                {
                    if(!pt.maplet) pt.initialize(_map);
                    if(_maxX == undefined)
                    {
                        _maxX = pt.mapX;
                        _maxY = pt.mapY;
                        _minX = pt.mapX;
                        _minY = pt.mapY;
                    } else {
                        if(_maxX < pt.mapX) _maxX = pt.mapX;
                        if(_maxY < pt.mapY) _maxY = pt.mapY;
                        if(_minX > pt.mapX) _minX = pt.mapX;
                        if(_minY > pt.mapY) _minY = pt.mapY;
                    }
                }
            }
            if(_maxX != undefined)
            {
                _mm.min = new MPoint(_map.toMapCoordinate(_minX, _minY));
                _mm.max = new MPoint(_map.toMapCoordinate(_maxX, _maxY));
            }
        }
        return _mm;
    };

    /**
     * 自动缩放地图，将 pts 中包含的经纬度显示在地图可视范围内，如果此参数，则将所有叠加物显示在可视范围内。
     * @param latlons MPoint[] 类型，经纬度集合
     * @uncrunch
     */
    this.fitzoom = function(latlons)
    {
        if(_map)
        {
            var min, max;
            if(latlons instanceof Array && latlons.length > 1)
            {
                if(latlons.length != 2)
                {
                    var _mm = this.maxmin(latlons);
                    min = _mm.min;
                    max = _mm.max;
                } else {
                    min = latlons[0];
                    max = latlons[1];
                }
            }
            if(!(min instanceof MPoint) || !(max instanceof MPoint))
                _map.setAutoZoom();
            else {
                var rt = _map.getFitZoomLevel(min, max);
                if(rt.center instanceof MPoint)
                {
                    if(typeof rt.level == "number") _map.centerAndZoom(rt.center, rt.level);
                    else _map.setCenter(rt.center);
                }
            }
        }
    };
    var _cursorTip = null;
    var _cursorTipEvent = null;
    var _cursorTipDom = null;
    /**
     * 在地图范围内显示鼠标提示信息 content ，此信息一直跟随在鼠标右侧，直到调用 KMap.hideCursorTip()  后。
     * @param content
     * @uncrunch
     */
    this.showCursorTip = function(content)
    {
        if(!content || !_map) return;

        if(!_cursorTipDom) _cursorTipDom = $(KConfig.get("map_s_ct",{n:'&nbsp;'}));
        if(!_cursorTip)
        {
            _cursorTip = new MPanel({content:_cursorTipDom.get(0), location:{type:"xy"}});
            _map.addPanel(_cursorTip);
            _cursorTip.show();
        }
        if(KTools._isElement(content))
        {
            _cursorTipDom.empty();
            _cursorTipDom.append(content);
        } else _cursorTipDom.html(content);
        _cursorTip.setLocation({x:maplet.moveX+10,y:maplet.moveY});
        var tSize = KTools.getBounds(_cursorTip.dom).size();

        if(!_cursorTipEvent)
        {
            _cursorTipEvent = {};
            _cursorTipEvent["mousemove"] = MEvent.addListener(_map, "mousemove", function(e, point){
                _cursorTip.show();
                _cursorTip.setLocation({x:maplet.moveX+10,y:maplet.moveY-tSize.height/2});
            });
        }
    };

    /**
     * 隐藏鼠标提示信息
     * @uncrunch
     */
    this.hideCursorTip = function(content)
    {
        if(_map)
        {
            if(_cursorTip)
            {
                _map.removePanel(_cursorTip, true);
                _cursorTip = null;
            }
            if(_cursorTipEvent)
            {
                MEvent.removeListener(_cursorTipEvent["mousemove"]);
                _cursorTipEvent = null;
            }
        }
    };

    var _commIW = null;
    var _commIWContentJDom = null;
    var _commIWUserJDom = null;
    var _commIWCommJDom = null;
    var _commRootDivs = null;
    var _commIWCommBts = null;
    var _commIWCommDivs = null;
    var _commIWCommInputTexts = null;
    var _commIWCommForms = null;
    var _commIWCommInputBts = null;
    var _commKMarker = null;
    var _commIWNavLinks = null;
    var _commDefaultIcon = $('<div style="width:0px;height:0px;font-size:0px;"></div>');
    var _lastOpenKOL = null;
    
    //suggest相关dom变量
    var _iwddInputDom = null; 
    var _iwcfInputDom = null; 
    var _iwzbInputDom = null; 
    var _iwddInputSuggest = null;
    var _iwcfInputSuggest = null; 
    var _iwzbInputSuggest = null; 
    
    //取得suggest请求接口    
    var _getSuggestUrl = function() {
    	var url = window.location.href + '';
    	url = url.replace('#','&');
    	url = KUrlHash.parseByHash(url)._UrlHash;
    	var currentCity = '北京市';
    	try{
    		if(url['c']){
    			currentCity = url['c'];
    		};    		
    	}catch(e){};
    	var sugopts = "./s?s=json&t=ks&c=" + encodeURIComponent(encodeURIComponent(currentCity));
    	return sugopts;
    };
    var _inputSuggestArray = [];
    
    //设置suggest属性，构造组件
    var _setAttr = function(dom, num){
    	var minWidth = [117,117,190];
    	var sugurl = _getSuggestUrl();
    	dom.attr('mfg','ls');
    	dom.attr('autocomplete','off');
    	dom.selector = "#infowin_cm input[mfg='ls']";
    	if (_inputSuggestArray && typeof _inputSuggestArray[num] != "undefined") {
    		_inputSuggestArray[num].clearCache();
    		if(dom.attr('class').indexOf('mwpg_iw_cur') < 0 && !dom.val()){
            	dom.attr('class',dom.attr('class')+' mwpg_iw_cur');
        	}
    		_inputSuggestArray[num].setOptions( {
    			url : sugurl
    		});
    	}else {
    		_inputSuggestArray[num] = new KStdSuggest(dom, {
				'url' : sugurl,
				'autocomplete' : false,
				'listlimit' : 5,
				'minwidth' : minWidth[num],
				'cache':false
    		});
    	}
    };
    
    var _makeCommIW = function()
    {
    	MEvent.addListener(_map, "iw_hide",function() {
            _commIWContentJDom.appendTo(_hiddenJDom);
            if(_lastOpenKOL === _commKMarker) _map.removeOverlay(_commKMarker.ol());
			if(_lastOpenKOL) _lastOpenKOL._openedInfo = false;
        });
        _commIWContentJDom = $("" + KConfig.get("iw_cm") + "");
        var _divs = $(">div", _commIWContentJDom);
        _commIWUserJDom = _divs.eq(0);	//_ic 内容区 
        _commIWCommJDom = _divs.eq(1);	//_iw 功能区
        _commRootDivs = $(">div", _commIWCommJDom);		//整个功能区（搜索，历史，缩放）
        _commIWNavLinks = $(">a", _commRootDivs.eq(2));		//缩放级别区（省，城市，地区，街道）
        _commIWCommBts = $(">ul:eq(0) >li",_commRootDivs.eq(0));	//搜索功能三个标签（“到达这里”，“从这里出发”，“搜索周边”）
        _commIWCommDivs = $(">div", _commRootDivs.eq(0));	//功能区（三个搜索区，一个历史区）
        _commIWCommForms = $(">form",_commIWCommDivs);		//功能区（三个搜索区内的form）
        _commIWCommInputTexts = $("input[type='text']",_commIWCommForms);    
        _commIWCommInputBts = $("input[type='button']",_commIWCommForms);
        _initCommEvents();
        _commIW = new MInfoWindow("", _commIWContentJDom[0]);
        _commKMarker = new KMarker("HETCUFZVVHUEE", {icon:{img:_commDefaultIcon[0]}});
        
        //suggest注册属性               
        _iwddInputDom = _commIWCommInputTexts.eq(0);
        _iwcfInputDom = _commIWCommInputTexts.eq(1);
        _iwzbInputDom = _commIWCommInputTexts.eq(2);        
        _setAttr(_iwddInputDom,0);
        _setAttr(_iwcfInputDom,1);
        _setAttr(_iwzbInputDom,2);        
        _iwddInputDom.focus(function(){		_setAttr(_iwddInputDom,0);     	});
        _iwcfInputDom.focus(function(){   	_setAttr(_iwcfInputDom,1);    	});
        _iwzbInputDom.focus(function(){ 	_setAttr(_iwzbInputDom,2);    	});
        
        _iwddInputDom.blur(function(){		
        	if(_iwddInputDom.attr('class').indexOf('mwpg_iw_cur') > 0){
        		_iwddInputDom.attr('class',_iwddInputDom.attr('class').replace(' mwpg_iw_cur',''));
    	} 	});
        _iwcfInputDom.blur(function(){		
        	if(_iwcfInputDom.attr('class').indexOf('mwpg_iw_cur') > 0){
        		_iwcfInputDom.attr('class',_iwcfInputDom.attr('class').replace(' mwpg_iw_cur',''));
    	} 	});
        _iwzbInputDom.blur(function(){		
        	if(_iwzbInputDom.attr('class').indexOf('mwpg_iw_cur') > 0){
        		_iwzbInputDom.attr('class',_iwzbInputDom.attr('class').replace(' mwpg_iw_cur',''));
    	} 	});
    };
    var _alertmsg = function(dom){
      KTools.showMsg('<div style="padding:5px 10px 5px 10px;font-size:13px;">请输入查询内容！</div>', {title:"提示",lightbox:true,closedcbk:function(){_lastOpenKOL&&_lastOpenKOL._openedInfo&&dom.focus();},buboptions:{outside:false,closebtn:true}});
    };
    var _btClickOrFormSubm = function(){
        var _poi = _lastOpenKOL.options().infowin.cmdata.poi;
        var _inputPoi = {city: _poi.city};
        var _flag,queryOpts = {};
        var _cookieKey;
        if(typeof this._btI != "undefined")
        {
            if(this._btI < 2)
            {
                if(_commIWCommInputTexts[0].value == "") {_alertmsg(_commIWCommInputTexts[0]);return false;}
                _inputPoi.name = _commIWCommInputTexts[0].value;
                _cookieKey = "ls";
                if(this._btI == 0)
                {
                    queryOpts.busdest = _poi;
                    queryOpts.busorig = _inputPoi;
                } else {
                    queryOpts.navdest = _poi;
                    queryOpts.navorig = _inputPoi;
                }
            } else {
                if(_commIWCommInputTexts[1].value == "") { _alertmsg(_commIWCommInputTexts[1]);return false;}
                _inputPoi.name = _commIWCommInputTexts[1].value;
                _cookieKey = "ls";
                if(this._btI == 2)
                {
                    queryOpts.busdest = _inputPoi;
                    queryOpts.busorig = _poi;
                } else {
                    queryOpts.navdest = _inputPoi;
                    queryOpts.navorig = _poi;
                }
            }
            _flag = (this._btI % 2 == 0)? KWidgetFlag.busearch : KWidgetFlag.navsearch;
        } else {
            if(_commIWCommInputTexts[2].value == "") {_alertmsg(_commIWCommInputTexts[2]); return false;}
            _cookieKey = "nb";
            _flag = KWidgetFlag.localsearch;
            queryOpts.center = _poi;
            _inputPoi.name = _commIWCommInputTexts[2].value;
            queryOpts.ls = _inputPoi;
        }
        var _newValue = _inputPoi.name;
        if(_cookieKey == "nb")
        {
            _newValue = _poi.name + ":" + _newValue;
        }
        {
            var _oldCookie = KTools.getCookie(_cookieKey);
            if(typeof _oldCookie == "string")
            {
                var _newValue_ = _newValue.replace(/([\?\*\\\[\]\(\)\{\}\^\$])/ig,"\\$1");
                if(_oldCookie != _newValue && !new RegExp("^"+_newValue_ + ",").test(_oldCookie) && !new RegExp(","+_newValue_ + "$").test(_oldCookie) && _oldCookie.indexOf(","+_newValue_ + ",") == -1)
				{
					var _douM = _oldCookie.match(/\,/ig);
					if(_douM && _douM.length >= 4) _oldCookie = _oldCookie.replace(/^[^\,]*\,/, "");
					_oldCookie += "," + _newValue;
					KTools.setCookie(_cookieKey, _oldCookie);
				}
            } else  KTools.setCookie(_cookieKey, _newValue);
        }

        queryOpts.type = _flag;
        KEvent.trigger(KMap, "cmfun", _containerList[0], queryOpts);
        return false;
    };
    var _hisClickFun = function(evt)
    {
        var _index = evt.data._index;
        var _str = evt.data._str;
        _commIWCommInputTexts.eq(_index).get(0).value = _str;
        if(_index === 2) KEvent.trigger(_commIWCommForms[2], "submit");
    };
    var lastSelectBt = null;
    var _btClickFun = function(){
        if(lastSelectBt && lastSelectBt._selected)
        {
            lastSelectBt._selected = false;
            _commIWCommDivs.eq(lastSelectBt._index).removeClass("mwpg_iw_cs");
            $(lastSelectBt).removeClass("mwpg_iw_s");
        }
        if(!this._selected)
        {
            lastSelectBt = this;
            this._selected = true;
            _commIWCommDivs.eq(this._index).addClass("mwpg_iw_cs");
            $(this).addClass("mwpg_iw_s");
            
            var his = _commIWCommDivs.eq(3);
            var hisList;
            switch(this._index)
            {
                case 0:hisList = KTools.getCookie("ls");break;
                case 1:hisList = KTools.getCookie("ls");break;
                case 2:
                    hisList = KTools.getCookie("nb");
                    if(hisList) hisList = hisList.replace(/[^,]*:/ig, "");
                    break;
            }
            if(hisList)
            {
                $("a", his).each(function(){
                    KEvent.clear(this);
                });
                his.html("历史搜索：");
                hisList = hisList.split(",");
                var _temp = ",";
                for(var i = 0; i < hisList.length; i++)
                {
                    var str = hisList[i];
                    if(!str || _temp.indexOf(","+str + ",") != -1) continue;
                    _temp += str + ",";
                    var a = $('<a href="javascript:void(0);">'+str+'</a>')[0];
                    KEvent.bind(a, "click", _hisClickFun, {_index:this._index, _str:str});
                    his.append(a);
                    his.append("&nbsp;");
                }
                his.show();
                _commRootDivs.eq(1).hide();
            } else {
                his.hide();
                //周边搜隐藏div
             //   _commRootDivs.eq(1).show();
            }
        }
    };
    var _leveAsClickFun = function(){
        switch($(this).text()){
            case "省" :
                    _map.setZoomLevel(4);
                    break;
            case "城市" :
                    _map.setZoomLevel(8);
                    break;
            case "地区" :
                    _map.setZoomLevel(10);
                    break;
            case "街道" :
                    _map.setZoomLevel(13);
                    break;
            case "整条线路" :
                    var cmdata = _lastOpenKOL.options().infowin.cmdata;
                    if(cmdata.allinecbk && cmdata.allinecbk.fun)
                        cmdata.allinecbk.fun.apply(cmdata.allinecbk.thisobj, [cmdata.allinecbk.data]);
                    break;
        };
    };

    var _initCommEvents = function()
    {
        var i = 0;
        _commIWCommBts.each(function(){
            this._index = i++;
            _commIWCommDivs.eq(this._index).removeClass("mwpg_iw_cs");
            $(this).removeClass("mwpg_iw_s");
            KEvent.bind(this, "click", _btClickFun);
        });
        //地图缩放事件
        _commIWNavLinks.each(function(){
            KEvent.bind(this, "click", _leveAsClickFun);
        });
        //表单事件

        var _btI = 0;
        _commIWCommInputBts.each(function() {
            this._btI = _btI++;
            KEvent.bind(this, "click", _btClickOrFormSubm);
        });

        
        KEvent.bind(_commIWCommForms[2], "submit", _btClickOrFormSubm);
    };
    //增加参数c ，设置通用区气泡默认选中项
    var _updateComm = function(c)
    {
        var his = _commIWCommDivs.eq(3);
        his.hide();
        //恢复选择
        KEvent.trigger(_commIWCommBts.get(c), "click");
        //文本框清理
        _commIWCommInputTexts.each(function(){
            this.value = "";
        });
    };

    /**
     * 打开指定叠加物的气泡。
     * @param overlay :KOverlay  /latlon MPoint /pt KPoint
     * @param opts KInfoWindowOptions
     * @param size KSize
     * @param 无名参数 仅供内部使用 这true时表示不出抛出afteropeninfowindow
     * @uncrunch
     */
    this.openInfoWindow = function(overlay, opts, size)
    {
        if(!_commIW) _makeCommIW();
        if(typeof overlay != "object" || !_map) return;
        if(_lastOpenKOL && _lastOpenKOL.ol) {
            if(_lastOpenKOL != overlay)
            {
                _lastOpenKOL.ol().setInfoWindow(null);
				_lastOpenKOL._openedInfo = false;
            }
            _lastOpenKOL = null;
        }
        if(typeof overlay === "string" && overlay.length >= 13)
        {
            this.openInfoWindow(new MPoint(overlay), opts, size);
        } else if(overlay instanceof KPoint)
        {
            this.openInfoWindow(new MPoint(_map.toMapCoordinate(overlay.x, overlay.y)), opts, size);
        } else if(overlay instanceof MPoint)
        {
            if(!(size instanceof MPoint)) size = new KSize(0, 0);
            _map.addOverlay(_commKMarker.ol());
            _commKMarker.setOptions({infowin:null});
            _commKMarker.setOptions({infowin:opts});
            _commKMarker.setLatlon(overlay);
            this.openInfoWindow(_commKMarker);
        } else if(overlay.isKClassO && overlay.superclassOf(KOverlay))
        {
            var _ol = overlay.ol();
            var _iw = overlay.options().infowin;
            if(!_iw) return;
            if(!_iw._contentDom)
            {
                if(typeof _iw.content === 'string' && _iw.content.length > 0)
                {
                    _iw._contentDom = $("<div>"+_iw.content+"</div>")[0];
                } else {
                    _iw._contentDom = _iw.content;
                }
            }
			_commIWUserJDom.children().eq(0).appendTo(_hiddenJDom);
            _commIWUserJDom.append(_iw._contentDom);
//            _commIWUserJDom.empty().append(_iw._contentDom);
            _commIWCommJDom.hide();
            _commIWNavLinks.eq(4).hide();
            if(_iw.cmarea)
            {
                _commIWCommJDom.show();
                _commRootDivs.eq(0).hide();
                _commRootDivs.eq(1).hide();
                _commRootDivs.eq(2).show();
                _commRootDivs.eq(2).css("padding", "0px");
                if(_iw.cmdata){
                    _commRootDivs.eq(2).css("padding", "");
                    if(_iw.cmdata.poi)
                    {
                        _commRootDivs.eq(0).show();
                        //增加通用区默认选中项  
                        if(overlay.menunb){
                        	_updateComm(2);
                        }else{
                        	_updateComm(0);
                        }
                        
                    }
                    if(_iw.cmdata.navigator == false) _commRootDivs.eq(2).hide();
                    if(_iw.cmdata.allinecbk) _commIWNavLinks.eq(4).show();
                }
            }
            _commIW.setTitle(_iw.title);

            //增加 overlay._classObj 对象，用户自定义绑定事件的对象 （内部使用，仅在本地搜poi列表和气泡中使用）
            if(overlay._classObj){
                KEvent.trigger(overlay._classObj, "beforeopeninfowindow", _containerList[0], overlay);
            }else{
                KEvent.trigger(KMap, "beforeopeninfowindow", _containerList[0], overlay);
            }

            _ol.setInfoWindow(_commIW);
			_ol.openInfoWindow();
            _lastOpenKOL = overlay;
			_lastOpenKOL._openedInfo = true;
			//使用最后一个 参数 仅供内部使用 这true时表示不出抛出afteropeninfowindow
            if(!arguments[3]) {
            	//增加 overlay._classObj 对象，用户自定义绑定事件的对象 （内部使用，仅在本地搜poi列表和气泡中使用）
            	if(overlay._classObj){
                    KEvent.trigger(overlay._classObj, "afteropeninfowindow", _containerList[0], overlay);
            	}else{
                    KEvent.trigger(KMap, "afteropeninfowindow", _containerList[0], overlay);
                }
            };
        }
    };

    /**
     * 关闭气泡
     * @uncrunch
     */
    this.closeInfoWindow = function()
    {
        if(_map) _map.hideBubble();
    };

	
	/**
     * 设置标注模式下，需要在鼠标顶部显示的图标。
	 * imgsrc String 类型，图标地址。
     * @uncrunch
     */
	this.setCursorIcon = function(imgsrc)
	{
		if(typeof imgsrc == "string" && _map)
		{
			_map.setCursorIcon(imgsrc);
		}
	};

    var _snapshotIng = false;
	
	/**
     * @uncrunch
     */
    this.snapshot = function(opts)
    {
        _KSnapshotOptions = KTools.copyOptions(opts, KSnapshotOptions);
        if(!_KSnapshotOptions.oncomplete) return;
        if(_map) {
            with(_KSnapshotOptions)
            {
                if(!latlon) latlon = new MPoint(_map.getCenter());
                if(typeof zoom != 'number') zoom = _map.getZoomLevel();
                if(!size) size = new KSize(_map.width, _map.height);
                if(!oncomplete.thisobj) oncomplete.thisobj = KMap;
                if(!oncomplete.data) oncomplete.data = {};
                latlon.initialize(_map);
                _map.snapshotBox.snapshot({
                    mode:"custom"
                    ,x :latlon.mapX - size.width/2
                    ,y :latlon.mapY - size.height/2
                    ,width : size.width
                    ,height : size.height
                    ,zoom : zoom
                    ,format:format
                });
            }
            _snapshotIng = true;
        }
    };
	
	/**
	 * 测量给定经纬度集合中各点之间的直线距离总和，返回值单位：米。
	 * @param {Object} latlons MPoint[] 类型，经纬度集合
	 * @return Number 类型 米
	 * @uncrunch
	 */
	this.distance = function(latlons)
	{
		if(_map) return _map.measDistance(latlons);
		return 0;
	};
	
	/**
	 * 测量给定经纬度集合的面积，返回值单位：平方米。 
	 * @param {Object} latlons MPoint[] 类型，经纬度集合
	 * @return Number 类型 平方米
	 * @uncrunch
	 */
	this.area = function(latlons)
	{
		if(_map) return _map.measArea(latlons);
		return 0;
	};


	/**
	 * 以动画效果移动地图的中心点。
	 * @param x: Integer 类型，表示横向移动 x 个像素。
	 * @param y: Integer 类型，表示纵向移动 y 个像素。
	 * @param callbackFunction: Function 类型，可选参数，地图移动完成后调用callbackFunction对象指向的函数。
	 * @return 无。
	 * @uncrunch
	 */
	this.moveMap = function(x, y, callbackFunction)
	{
		if(_map) {
			_map.panTo(x, y, callbackFunction);
		}
	};
	
	/**
	 * 获取地图各个顶点的经纬度
	 * @param 
	 * @return Number 类型 平方米
	 * @uncrunch
	 */
	this.getMapViewBound = function(){
		if(_map) {
			return _map.getViewBound();  
		}
		return null;
	};
	/**
	 * 获取是否打开了气泡
	 * @param 
	 * @return 
	 * @uncrunch
	 */
	this.isOpenedOverlay = function(){
		if(_lastOpenKOL && _lastOpenKOL._openedInfo){
			return true;
		}else {
			return false;	
		}
			
	};
    /**
     * 更新叠加层的分类
     * @param overlay
     */
    this._updateOverlayGroup = function(overlay)
    {
        if (overlay && overlay._oldGroup)
        {
            if (overlay instanceof KMarker)
            {
                if (_markers[overlay._oldGroup] && _markers[overlay._oldGroup][overlay.id()]) delete _markers[overlay._oldGroup][overlay.id()];
                if (!_markers[overlay.group()]) _markers[overlay.group()] = {};
                _markers[overlay.group()][overlay.id()] = overlay;
            } else if (overlay instanceof KLine)
            {
                if (_lines[overlay._oldGroup] && _lines[overlay._oldGroup][overlay.id()]) delete _lines[overlay._oldGroup][overlay.id()];
                if (!_lines[overlay.group()]) _lines[overlay.group()] = {};
                _lines[overlay.group()][overlay.id()] = overlay;
            } else if (overlay instanceof KArea)
            {
                if (_areas[overlay._oldGroup] && _areas[overlay._oldGroup][overlay.id()]) delete _areas[overlay._oldGroup][overlay.id()];
                if (!_areas[overlay.group()]) _areas[overlay.group()] = {};
                _areas[overlay.group()][overlay.id()] = overlay;
            }
        }
    };

    /**
     * 私有的事件绑定方法
     * @param obj
     * @param evtname
     * @param fun
     * @uncrunch
     */
    this.bind = function(obj, evtname, fun, data, thisobj)
    {
        if (obj == KMap) obj = _map;
        evtname = evtname.toLowerCase();
        switch (evtname) {
            case 'mapinit' :
                obj = KMap;
                break;
            case 'centerchanged' :
                break;
			case 'mousedown' : 
				break;
            case 'bookmark' :
                if (!_mapletListener["bookmark"])
                    _mapletListener["bookmark"] = MEvent.addListener(obj, "bookmark", function(point) {
                        KEvent.trigger.apply(obj, [obj, 'bookmark', _maplets[_map._$_timeCode], new MPoint(KTools._getParam(point, "latlon"))]);
                    });
                break;
            case 'drawline' :
                if (!_mapletListener["drawline"])
                    _mapletListener["drawline"] = MEvent.addListener(obj, "drawline", function(latlons) {
                        KEvent.trigger.apply(obj, [obj, 'drawline', _maplets[_map._$_timeCode], _drawLineCallbakStr(latlons)]);
                    });
                break;
            case 'drawarea' :
                if (!_mapletListener["drawarea"])
                    _mapletListener["drawarea"] = MEvent.addListener(obj, "drawarea", function(latlons) {
                        KEvent.trigger.apply(obj, [obj, 'drawarea', _maplets[_map._$_timeCode], _drawLineCallbakStr(latlons)]);
                    });
                break;
            case 'lookup' :
                if (!_mapletListener["lookup"])
                    _mapletListener["lookup"] = MEvent.addListener(obj, "lookup", function(_obj) {
                        var bounds = new KMapBounds(new MPoint(KTools._getParam(_obj, "min")), new MPoint(KTools._getParam(_obj, "max")));
                        KEvent.trigger.apply(obj, [obj, 'lookup', _maplets[_map._$_timeCode], _map.getCenter(), bounds]);
                    });
                break;
            case 'layerclick' :
                if (!_mapletListener["layer_click"])
                    _mapletListener["layer_click"] = MEvent.addListener(obj, "layer_click", function(data) {
                        KEvent.trigger.apply(obj, [obj, 'layerclick', _maplets[_map._$_timeCode], data]);
                    });
                break;
        }
        if (!KMap.adapters[obj]) KMap.adapters[obj] = {};
        if (!KMap.adapters[obj][evtname]) KMap.adapters[obj][evtname] = [];
        if (!KTools._arrayContains(KMap.adapters[obj][evtname], fun)) KMap.adapters[obj][evtname].push({fun:fun, data:data, thisobj:thisobj});
    };
    /**
     * 对象销毁
     * @uncrunch
     */
    this.finalize = function()
    {
        if(_map)
        {
            for (var i in _mapletListener) MEvent.removeListener(_mapletListener[i]);
            for (var i in _markers) _clearOverlays(_markers, i);
            for (var i in _lines) _clearOverlays(_lines, i);
            for (var i in _areas) _clearOverlays(_areas, i);
            this.hideCursorTip();
//            _map.finalize();
            _map = null;
            maplet = null;
        }
        KTools.removeNode(_hiddenJDom[0]);
        _hiddenJDom = null;
        _containers = null;
        _maplets = null;
        _markers = null;
        _areas = null;
        _lines = null;

        _mapletListener = null;
        _snapshot_select = null;
        _snapshot_done = null;
        _overviewRect = null;
        _disableDiv = null;
        _mapFishJDom = null;
        _options = null;
        _map = null;
    };
    /**
     * 返回依赖的其它组件。
     * @return KObject[]
     * @uncrunch
     */
    this.dependent = function()
    {
        return [KConfig,KTools,KMapOptions,KMapCtrlState,KMapBounds,KEvent,KMarker,KLine,KArea,KMapMode,KBounds,KPoint,KSize,jQuery,KWidgetFlag,KSnapshotOptions,KStdSuggeest,KStdSuggest,KUrlHash];
    };
    /**
     * 根据经纬度获取城市以及地名
     * @param lonlat 经纬度
     * @param callBack 回调方法
     * @uncrunch
     */
    this.getGeo = function (lonlat,callBack){
        $.ajax({
            url : base_url + '?z=14&ct=m&t=ig&l=' + lonlat
            ,type:'GET'
            ,dataType : 'json'
            ,success : function(data) {
                if (data) {
                    callBack(data.c,data.c + data.d + data.a || '未知地点');
                }else{
                    callBack();
                }
            }
        });
    };
})();
/*
 手风琴选项卡组件。
 作者：songyr zhangsq
 版本：1.0.2
 创建时间：2010-01-25
 最后修改时间：2011-01-28 14:26
 ============================================
 『修改历史』
 */

var KAccordion = KClass.create("KAccordion", KTabs);

//组件样式设置
KAccordion.conf =
{
    CLASSNAME :
    {
        //设置选项卡顶层容器（div）样式。
        A : "_arr_a"
        //设置非选中的选项卡样式，设置在 h3 标签上。
        ,US : "_arr_us"
        //设置被选中的选项卡样式，设置在 h3标签上。
        ,S : "_arr_s"
        //设置被选中选项卡的内容容器（div）样式。
        ,C : "_arr_c"
        ,SC : "_arr_sc"
        //设置未选中选项卡的内容容器（div）样式。
        ,USC : "_arr_usc"
        //选项卡悬停样式。
        ,H : "_arr_h"
    }
};

/**
 *   根据缩写得到样式全名
 * @param arg  样式缩写
 */
KAccordion.prototype._getClassName = function(arg)
{
    if (!this.options().userstyle && arg && KAccordion.conf.CLASSNAME[arg])
    {
        return this.options().theme + KAccordion.conf.CLASSNAME[arg];
    }
    return undefined;
};
/**
 * 构造方法。
 * @param container Node
 * @param opts KStdTabsOptions
 * @uncrunch
 */
KAccordion.initialize = function(container, opts)
{
    var _this = this;
    //opts参数设置
    this.setOptions(KAccordionOptions);
    this.setOptions(opts);
    //是否多选
    this._mul = this.options().multiple && this.options().collapse;
    this.setTheme(this.options().theme);
    //定义组件Dom对象。
    this._jDom = $(container);
    this._dom = this._jDom[0];
    this.headers = $("h3", this.dom());
    //暂时去掉动画
    this.options().animation = false;
    this._jDom.addClass(this._getClassName("A"));
    this.headers.addClass(this._getClassName("US"));
    this.headers.next().addClass(this._getClassName("C"));
    this._items = [];
    this._current = null;
    this._expanded = [];
    this.headers.each(function(){
        var jq_this = $(this);
        _this.insert({
            index : jq_this.attr("index")
            ,text : jq_this.attr("text")
            ,kvalue : jq_this.attr("value")
            ,url : jq_this.attr("url") == ""?null:jq_this.attr("url")
            ,once : jq_this.attr("once") != "false"
            ,content : jq_this.attr("content")
            ,selected: jq_this.attr("selected") != "false"
            //区分是否是动态插入的，没有这个属性就是动态插入
            ,tabDom :jq_this
        });
    });
    if (this.options().multiple && this.headers.length < this.options().initexpand)
    {
        
        for(var i = 0, j = this._items.length;i < j ;i++){
            this.select(i, true);
        }
    }else{
        this.headers.next().hide();
    }
    this._jDom.show();
};
//实现KWidget 接口
KAccordion.prototype.finalize = function() {
    this._jDom.children().remove();
    KEvent.clear(this, "dataloaded");
    this.clear();
};
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KAccordion.prototype.version = function()
{
    return "1.0.2";
};
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KAccordion.prototype.cnname = function()
{
    return "手风琴选项卡组件";
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KAccordion.prototype.dependent = function()
{
    return [KTabs,jQuery,KEvent,KAccordionOptions,KTabItem,KTools];
};
/**
 * 设置组件配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 * @param obj
 * @uncrunch
 */
KAccordion.prototype.setOptions = function(obj)
{
    this._opts = KTools.copyOptions(obj, this.options());
};
/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KAccordion.prototype.setTheme = function(scheme)
{
    this._theme = scheme;
};
//实现KTabs 接口
/**
 * 选中指定的选项卡
 * @param index Integer 类型
 * @uncrunch
 */
KAccordion.prototype.select = function(index, notAnimate)
{
    var _this = this;
    var item = this.getItemByIndex(index);
    //  点击已经选中的选项卡时直接返回
    if (this.current() == item && !this.options().collapse) return;
    if (item.contentDom.length == 0 && !this.isAjax(item)) return;
    if (item.url == "fun") {
        KEvent.trigger(this, "funtab", item);
        return;
    }
    //ajax得到content的内容
    if (this.isAjax(item))
    {
        item.contentDom = item.contentDom.html() == null ? $("<div/>").addClass(this._getClassName("C")) : item.tabDom.next("div");
        $.ajax({
            type: "GET",
            url:item.url,
            success: function(data)
            {
                if(!data){
                    _this.unselect(item);
                    return;
                }
                //删除item的url属性。不再进行第二次加载
                if(data && data.r){
                    if(item.once) {
                        delete item.url;
                    }
                }else {
                    KTools.showMsg("请求接口数据出错", {node : item.tabDom});
                    return;
                }
                item.contentDom.html(data.r[0].h);
                // 删除多余的dom对象
                item.data = data;
                KEvent.trigger(item, "dataloaded", _this, data, item);
            },
            error : function(XMLHttpRequest, textStatus, errorThrown){
                KTools.showMsg(errorThrown, {node : item.tabDom});
            },
            dataType:"json"
        });
    }
    var exItems = this.expanded();
    //没有打开任何选项卡时
    if (exItems.length === 0) {
        if(!this.isAjax(item)){
            _this.openFirst(item, notAnimate);
        }else{
            KEvent.bind(item, "dataloaded", function(evt, obj, data, dom){
                _this.openFirst(item, notAnimate, true);
            });
        }
        return;
    }
    //选择的item在   exItems中的位置
    var iInEx = this._findItem(item);
    if (iInEx != -1 && this.options().collapse) {
        this.unselect(item);
        this._expanded = $.grep(this._expanded, function(n) {
            return n.index != iInEx;
        });
        var exLen = this._expanded.length;
        this._current = exLen ? this._expanded[exLen - 1] : null;
        return;
    }
    if (this._mul) {
        if(this.options().animation){
            item.contentDom.slideDown(function(){
                _this.execAnimitFun(item);
            });
        }else{
            item.contentDom.show();
            _this.execAnimitFun(item);
        }
        this.expanded().push(item);
        this._current = item;
    } else {
        if (this.options().animation)
        {
            if(this.isAjax(item)){
                //数据请求返回成功后执行动画
                KEvent.bind(item, "dataloaded", function(evt, obj, data, dom){
                    //互斥动画效果
                    _this.dataloadedFun.apply(_this, [dom]);
                    //更改相应属性，样式。
                    _this.execAnimitFun.apply(_this, [dom, true]);
                });
            }else{
                this.dataloadedFun.apply(_this, [item]);
            }
        } else {
            if(this.isAjax(item)){
                //数据请求返回成功后执行动画
                KEvent.bind(item, "dataloaded", function(evt, obj, data, dom){
                    //互斥动画效果
                    _this.unselect(_this._current);
                    _this._expanded = [];
                    window.setTimeout(function(){
                    dom.contentDom.show();
                    //更改相应属性，样式。
                    _this.execAnimitFun.apply(_this, [dom, true]);
                    }, 0);
                });
            }else{
                this.unselect(this._current);
                this._expanded = [];
                window.setTimeout(function(){
                    item.contentDom.show();
                    _this.execAnimitFun(item);
                }, 0);
                return;
            }
        }
    }
    if(!this.isAjax(item) && !this.options().animation && !notAnimate){
        this.execAnimitFun(item);
    }
};
KAccordion.prototype.openFirst = function(item, notAnimate, isTrigger){
    var _this = this;
    if(this.options().animation && !notAnimate){
        item.contentDom.slideDown(function(){
            _this.execAnimitFun(item);
        });
    }else{
        item.contentDom.show();
    }
    this._current = item;
    this._expanded.push(item);
    item.tabDom.addClass(this._getClassName("S")).removeClass(this._getClassName("H")).removeClass(this._getClassName("US"));
    //editClass
    item.contentDom.addClass(this._getClassName("SC")).removeClass(this._getClassName("USC"));
    _this.triggerEvents(item, isTrigger);
};
KAccordion.prototype.execAnimitFun = function(item, isTrigger){
    item.tabDom.addClass(this._getClassName("S")).removeClass(this._getClassName("H")).removeClass(this._getClassName("US"));
    //editClass
    item.contentDom.addClass(this._getClassName("SC")).removeClass(this._getClassName("USC"));
    this._current = item;
    this._expanded.push(item);
    this.triggerEvents(item, isTrigger);
};
KAccordion.prototype.dataloadedFun = function(item, isTrigger){
    var _this = this;
    var s = item.contentDom;
    var overflow = s.css('overflow'),
            percentDone,
            showProps = {},
            hideProps = {},
            toFX = [ "height", "paddingTop", "paddingBottom" ],
            originalWidth;

    originalWidth = s[0].style.width;
    s.width(parseInt(s.parent().width(), 10) - parseInt(s.css("paddingLeft"), 10) - parseInt(s.css("paddingRight"), 10) - (parseInt(s.css("borderLeftWidth"), 10) || 0) - (parseInt(s.css("borderRightWidth"), 10) || 0));

    $.each(toFX, function(i, prop) {
        hideProps[prop] = 'hide';
        var parts = ('' + $.css(s[0], prop)).match(/^([\d+-.]+)(.*)$/);
        showProps[prop] = {
            value: parts[1],
            unit: parts[2] || 'px'
        };
    });
    s.css({ height: 0, overflow: 'hidden' }).show();
    this._current.contentDom.animate(hideProps, {
        step:function(now, settings) {
            _this.animating = true;
            if (settings.prop == 'height')
            {
                percentDone = (settings.now - settings.start) / (settings.end - settings.start);
            }
            s[0].style[settings.prop] = (percentDone * showProps[settings.prop].value) + showProps[settings.prop].unit;

        },
         complete: function() {
             _this.animating = false;
             if (_this.options().autoheight) {
             s.css("height", "");
             }
             s.css("width", originalWidth);
             s.css({overflow: overflow});
         }
    });
    this._current.tabDom.removeClass(this._getClassName("S")).removeClass(this._getClassName("H")).addClass(this._getClassName("US"));
    //editClass
    this._current.contentDom.addClass(this._getClassName("USC")).removeClass(this._getClassName("SC"));
    this._expanded = [];
};
KAccordion.prototype.triggerEvents = function(item , isDataLoaded){
    var _this = this;
    KEvent.trigger(_this, "selected", item, _this._current);
    if(isDataLoaded) KEvent.trigger(_this, "dataloaded", _this ,item.data, item); 
};
/**
 * 增加选项卡。如果设置了item.index属性，则将item增加到index指定的选项卡之前
 * @param item KTabItem 类型
 * @uncrunch
 */
KAccordion.prototype.insert = function(item)
{
    var _this = this;
    //没有index属性，默认为_items的长度，插入数组末尾
    var index = item.index == 0 ? 0 : item.index || this._items.length;
    //index>_items.length 则index设为_items的长度，插入数组末尾
    //index<0  ,插入数组首
    index = Math.min(this._items.length, Math.max(0, index));
    item.index = index;
    if (this.length() == index)
    {
        this._items.push(item);
    }
    //中间插入item
    else
    {
        this._items = $.map(this._items, function(obj, i) {
            if (i == index)
            {
                item.index = i;
                obj.index = i + 1;
                return [item, obj];
            }
            else
            {
                if (i > index)
                {
                    obj.index = i + 1;
                }
                return obj;
            }
        });
    }
    //动态插入的时候执行
    if (!item.tabDom)
    {
        this.getTabDom(item);
        this.getContentDom(item);
        if (index < 1)
        {
            $("h3", this.dom()).eq(0).before($(item.tabDom)).before($(item.contentDom));
        }
        else
        {
            $("h3", this.dom()).eq(index - 1).next().after($(item.contentDom)).after($(item.tabDom));
        }
    }
    //页面上的DOM节点初始化执行                      .
    else
    {
        item.contentDom = item.tabDom.next();
    }
    item.tabDom.click(function() {
        if(!_this.options().collapse && $(item.contentDom).is(':visible')) KEvent.trigger(_this, 'headclick', _this, item);
        _this.select(item);
    });
    item.tabDom.hover(function(){
        if(!$(item.contentDom).is(':visible')) KEvent.trigger(_this, 'headmouseenter', _this, item);
        if(!_this.animating && _this._current != item){
            item.tabDom.addClass(_this._getClassName("H"));
        }
    }, function(){
        if(!$(item.contentDom).is(':visible')) KEvent.trigger(_this, 'headmouseleave', _this, item);
        if(!_this.animating && _this._current != item){
            item.tabDom.removeClass(_this._getClassName("H"));
        }
    });
    //editClass
    item.contentDom.addClass((this._getClassName("C")));
};

/**
 * 删除选项卡，忽略item参数时，将清空所有项目
 * @param index Integer 类型
 * @uncrunch
 */
KAccordion.prototype.remove = function(index)
{
    if (arguments.length === 0)
    {
        //remove all
        this.clear();
        return;
    }
    var item = this.getItemByIndex(index);
    //remove item
    this._items = $.grep(this._items, function(obj, i) {
        return obj.index !== item.index;
    });
    //重新生成index
    $.each(this._items, function(i, item) {
        item.index = i;
    });
    if (this.current() == item)
    {
        this._current = null;
    }
    $(item.tabDom).remove();
    item.tabDom = undefined;
    $(item.contentDom).remove();
    item.contentDom = undefined;
    this._setAutoHeight(true);
};

/**
 * 隐藏选项卡
 * @param index Integer 类型
 * @uncrunch
 */
KAccordion.prototype.hideTab = function(index)
{
    var item = this.getItemByIndex(index);
    $(item.tabDom).hide();
    $(item.contentDom).hide();
};
/**
 * 显示选项卡
 * @param index Integer 类型
 * @uncrunch
 */
KAccordion.prototype.showTab = function(index)
{
    var item = this.getItemByIndex(index);
    $(item.tabDom).show();
};
/**
 * 关闭指定的选项卡。
 * @param item KTabItem 类型
 */
KAccordion.prototype.unselect = function(item, callback, noAnimation)
{
    //noAnimation ? $(item.contentDom).hide() : (this.options().animation ? $(item.contentDom).slideUp(callback) : $(item.contentDom).hide());
    if(this.options().animation && !noAnimation){
        if(typeof callback == "function"){
            item.contentDom.slideUp(callback);
        }else{
            item.contentDom.slideUp();
        }
    }else{
        item.contentDom.hide();
    }
    $(item.tabDom).removeClass(this._getClassName("S")).addClass(this._getClassName("US"));
    $(item.contentDom).addClass(this._getClassName("USC")).removeClass(this._getClassName("SC"));
};
/**
 * 返回选项卡数量
 * @uncrunch
 */
KAccordion.prototype.length = function()
{
    return this._items.length;
};
/**
 * 返回选项卡集合
 * 返回值：KTabItem[] 类型
 * @uncrunch
 */
KAccordion.prototype.tabs = function()
{
    return this._items;
};
/**
 * 重新布局
 * @uncrunch
 */
KAccordion.prototype.layout = function()
{
    var parent = this._jDom.parent();
    if(this.options().autoheight){
        parent.css({height:""});
        return;
    }
    var p_y = parent.outerHeight() - parent.height();
    var b_y = this._jDom.outerHeight() - this._jDom.height();
    var aheight = parent.height() - p_y;
    parent.height(aheight);
    var p_x = parent.outerWidth() - parent.width();
    var b_x = this._jDom.outerWidth() - this._jDom.width();
    if((parent.width()- p_x) == 0) return;
    var awidth = parent.width()- p_x;
    parent.width(awidth);
};
/**
 * 返回第index个选项卡
 * @param index
 * 返回值：KTabItem 类型
 *  @uncrunch
 */
KAccordion.prototype.tab = function(index)
{
    if (index > this._items.length - 1)
    {
        index = this._items.length - 1
    }
    else if (index < 0)
    {
        index = 0;
    }
    return this._items[index];
};
/**
 * 算当前选项卡内容的最大高度
 * @param item KTabItem 类型
 */
KAccordion.prototype._setAutoHeight = function(clear)
{

    if (!this.options().autoheight)
    {
        //删除一个item的时候，把剩下的高度清除后再算高度
        if (clear === true)
        {
            $("h3", this.dom()).next().each(function() {
            }).height("");
        }
        var maxHeight = 0;
        $("h3", this.dom()).next().each(function() {
            maxHeight = Math.max(maxHeight, $(this).outerHeight());
        }).height(maxHeight);
    }
};
/**
 *   获得选项卡的标题，并转换为JQUERY对象
 * @param item
 */
KAccordion.prototype.getTabDom = function(item)
{
    item.tabDom = $("<h3/>").html(item.text).append($("<b/>"));
    item.tabDom.addClass(this._getClassName("US"));
};
/**
 * 从URL中获得选项卡的内容
 * @param item
 * @param url
 */
KAccordion.prototype._getContentDomFromUrl = function(item, url)
{
    if (!this.isAjax(item))
    {
        item.contentDom = $(url);
    }
    else
    {
        item.contentDom = $("<div/>").html(item.content || "").hide();
        item.contentDom.load(item.url);
    }
    item.contentDom.addClass(this._getClassName("C"));
};
/**
 *   获得选项卡的内容，并转换为jquery对象
 * @param item
 */
KAccordion.prototype.getContentDom = function(item)
{
    var url = item.url;
    if (url)
    {
        this._getContentDomFromUrl(item, url);
    }
    else
    {
        item.contentDom = $("<div/>").html(item.content || "").hide();
        item.contentDom.addClass(this._getClassName("C"));
    }
};
/**
 * 判断是否是正确的URL
 * @param item
 */
KAccordion.prototype.isAjax = function(item)
{
    if (item.url)
    {
        return new RegExp("^[^#]", "g").test(item.url);
    }
    else
    {
        return false;
    }
};
/**
 * 通过INDEX获得对应的ITEM
 * @param index
 */
KAccordion.prototype.getItemByIndex = function(index)
{
    if (typeof index == "number") {
        return this.tab(index);
    }
    else return index;
};
/**
 * 启用 KAccordionOptions.multiple 后，返回最后一次被选中的选项卡；否则返回当前选项卡
 */
KAccordion.prototype.current = function(){
    if(this.options().multiple){
        return this.expanded();
    }else{
        return this._current;
    }
};
/**
 * 清空选项卡
 */
KAccordion.prototype.clear = function()
{
    for (var i = 0; i < this._items.length; i++)
    {
        var item = this._items[i];
        $(item.tabDom).remove();
        item.tabDom = undefined;
        $(item.contentDom).remove();
        item.contentDom = undefined;

        this._items[i] = undefined;
    }
    this._current = null;
    this._items.length = 0;
    this._jDom.remove();
};
/**
 * 返回被选中的选项卡
 * @uncrunch
 */
KAccordion.prototype.expanded = function()
{
    return this._expanded;
};
/**
 * 收起全部选项卡
 * @uncrunch
 */
KAccordion.prototype.collapse = function()
{
    var _this = this;
    $(this.expanded()).each(function() {
        _this.unselect(this);
    });
    this._current = null;
    this._expanded = [];
};
/**
 * 找到item在所有被选中的选项卡中的位置
 * @param item
 */
KAccordion.prototype._findItem = function(item) {
    var exItems = this.expanded();
    for (var i = exItems.length - 1; i >= 0; i--) {
        if (item.index === exItems[i].index) {
            return item.index;
        }
    }
    return -1;
};
/*
 信息气泡 KBubble extends KWidget
 信息气泡可被指定显示在某个元素周围，进行说明或显示详细信息的作用。
 * 显示时可根据上下左右四个方位空间大小自动选择位置，也可以指定在固定方位显示。
 * 可设置气泡相对元素的偏移值，箭头始终指向元素。
 * 可控制隐藏方式：
 o 点击气泡之外自动隐藏。
 o 点击关闭按钮隐藏气泡。
 作者：wangzheng
 版本：1.0
 创建时间：2010-02-26
 最后修改时间：2010-02-26 23:07
 ============================================
 『修改历史』
 */
var KBubble = KClass.create("KBubble", KWidget);

/**
 * 创建KBubble组件。当忽略 opts 参数时应自动读取标签内对应的自定义属性
 * @param container
 * @param opts
 */
KBubble.initialize = function(container, opts)
{
    //内容容器
    this._content = undefined;
    //箭头
    this._cursor = undefined;
    //关闭的A
    this._close = undefined;
    this._openOpts = undefined;
    this._element = undefined;
    var _this = this;
    this._windowCloseFun = function(event) {
        if ($(_this._dom).is(":visible") == true && _this._openOpts && (_this._openOpts.outside == true))//_this._openOpts.outside == true  \\|| _this._openOpts.closebtn == false
        {
            if(!_this._element || !_this._dom || _this._element.get(0) === event.target || _this._dom === event.target || $("*", _this._element).index(event.target) != -1 || $("*", _this._dom).index(event.target) != -1) return;
            _this.hide("document");
        }
    };
    this._position = undefined;
    if (KTools._isElement(container))
    {
        this._dom = container;
        this._opts = KTools.copyOptions(opts, KBubbleOptions);
        this._theme = this._opts.theme;
        //add by zhangsq
        $(this._dom).removeClass().addClass(this._theme + '_bub');
        this._content = $(">div", this._dom).eq(0);
        var _spans = $(">span", this._dom);
        this._cursor = _spans.eq(0);
        this._close = _spans.eq(1);
        this._doms = [this._dom, this._content.get(0), this._cursor.get(0), this._close.get(0)];
        if (this._opts.userstyle == false) this._updateThemeClass(false);
        $(this._dom).hide();
        KEvent.bind(this._dom, "focus", function() {
            KEvent.trigger.apply(_this, [_this, 'focus', _this]);
        });
        if (this._close.length > 0)
        {
            KEvent.bind(this._close[0], "click", function() {
                _this.hide("closebtn");
            });
        }
        
        KEvent.bind(document, "click", this._windowCloseFun);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.version = function()
{
    return "1.0";
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.cnname = function()
{
    return "信息气泡";
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.setOptions = function(obj)
{
    this._opts = KTools.copyOptions(obj, this._opts);
    this._theme = this._opts.theme;
    this._updateThemeClass(this._opts.userstyle);
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.setTheme = function(scheme)
{
    if (typeof scheme == 'string')
    {
        this._theme = scheme;
        this._updateThemeClass(this._opts.userstyle);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.layout = function()
{
    if (this._dom && this.visible() == true && this._cursor && this._cursor.length > 0 && this._element && this._element.length > 0)
    {//在自动的情况下
        var _thisJDom = $(this._dom);
        var _windowBounds = KTools.getBounds(window);
//        _windowBounds.max.x -= 50;
        var _elementBounds = KTools.getBounds(this._element.get(0));
        var _elementSize = _elementBounds.size();
        var _elementSize_W2 = _elementSize.width/2;
        var _elementSize_H2 = _elementSize.height/2;
        var _domBounds = KTools.getBounds(_thisJDom.get(0));
        var _domSize = _domBounds.size();
        var _domSize_W2 = _domSize.width/2;
        var _domSize_H2 = _domSize.height/2;
        //定义4个位置 位置,maxBounds(某位置上可选择的空间),minBounds(某位置上计算后的可选择的空间),size(某位置上在计算后的可用空间内_dom可显示的大小),good(是否为能容得下的空间boolean)
        this._position = this._openOpts.pos;
        if(this._position != KPosition.TOP && this._position != KPosition.BOTTOM && this._position != KPosition.LEFT && this._position != KPosition.RIGHT) this._position = undefined;
        var _offsetx_ = 0;
        var _offsety_ = 0;
        var _marginx_ = 0;
        var _marginy_ = 0;
        var _cursorSize = null;
        this._updateCursorClass(KPosition.TOP);
        if(this._openOpts.arrow) _cursorSize = KTools.getBounds($(this._cursor).get(0)).size();
        else _cursorSize = new KSize(0, 0);
        var _cursorSize_W2 = _cursorSize.width/2;
        var _cursorSize_H2 = _cursorSize.height/2;
        _offsetx_ = _cursorSize_W2 + this._openOpts.corneradius;
        _marginy_ = _cursorSize.height + this._openOpts.marginy;
        this._updateCursorClass(KPosition.LEFT);
        if(this._openOpts.arrow) _cursorSize = KTools.getBounds($(this._cursor).get(0)).size();
        else _cursorSize = new KSize(0, 0);
        _offsety_ = _cursorSize_W2 + this._openOpts.corneradius;
        _marginx_ = _cursorSize.height + this._openOpts.marginy;
        var _4pos = {};
        if(this._openOpts.autolayout == true) _4pos = KTools.checkSpace(_elementBounds, _domSize, _windowBounds, {offsetx:_offsetx_, offsety:_offsety_, marginx:_marginx_, marginy:_marginy_, pos:this._position});
        var _poss = [KPosition.BOTTOM, KPosition.RIGHT, KPosition.TOP, KPosition.LEFT];
        var _poss_ = {};
        _poss_[KPosition.BOTTOM] = "bottom";
        _poss_[KPosition.RIGHT] = "right";
        _poss_[KPosition.LEFT] = "left";
        _poss_[KPosition.TOP] = "top";
        _poss_["top"] = KPosition.TOP;
        _poss_["right"] = KPosition.RIGHT;
        _poss_["left"] = KPosition.LEFT;
        _poss_["bottom"] = KPosition.BOTTOM;
        if(this._position == undefined)
        {
            var maxPos = undefined;
            for(var i = 0; i < _poss.length; i++)
            {
                var _posI = _4pos[_poss_[_poss[i]]];
                if(_posI)
                {
                    if(_posI.usable)
                    {
                        this._position = _poss[i];
                        break;
                    } else {
                        if(maxPos) {
                            if ( _posI.size.width * _posI.size.height > _4pos[maxPos].size.width * _4pos[maxPos].size.height) maxPos = _poss_[_poss[i]];
                        } else maxPos = _poss_[_poss[i]];
                    }
                }
            }
            if(this._position == undefined)
            {
                if(maxPos) this._position = _poss_[maxPos];
                else this._position = KPosition.BOTTOM;
            }
        }

        var _anchorx = this._openOpts.anchorx;
        //计算出来的 气泡箭头相对目标元素的纵向偏移值 相对目标中心
        var _anchory = this._openOpts.anchory;
        //计算出来的 气泡箭头相对气泡容器的横向偏移值 相对气泡中心
        var _offsetx = this._openOpts.offsetx;
        ////计算出来的 气泡箭头相对气泡容器的纵向偏移值 相对气泡中心
        var _offsety = this._openOpts.offsety;
        var _minBounds = undefined;
        var _maxBounds = undefined;
        if(_4pos[_poss_[this._position]])
        {
            _minBounds = _4pos[_poss_[this._position]].min;
            _maxBounds = _4pos[_poss_[this._position]].max;
        }
        this._updateCursorClass(this._position);
        if(this._openOpts.arrow) _cursorSize = KTools.getBounds($(this._cursor).get(0)).size();
            else _cursorSize = new KSize(0, 0);
        _cursorSize_W2 = _cursorSize.width/2;
        _cursorSize_H2 = _cursorSize.height/2;
        if(this._position == KPosition.TOP || this._position == KPosition.BOTTOM)
        {
            if(_anchorx > _elementSize_W2)
                _anchorx = _elementSize_W2;
            if(_anchorx < -_elementSize_W2)
                _anchorx = -_elementSize_W2;
            if(_offsetx > _domSize_W2 - this._openOpts.corneradius - _cursorSize_W2)
                _offsetx = _domSize_W2 - this._openOpts.corneradius - _cursorSize_W2;
            if(_offsetx < -(_domSize_W2 - this._openOpts.corneradius - _cursorSize_W2))
                _offsetx = -(_domSize_W2 - this._openOpts.corneradius - _cursorSize_W2);
            var floatLeft = (_elementSize_W2 + _anchorx -  _domSize_W2 -  _offsetx);
            if(this._openOpts.autolayout == true && _minBounds.min.x != _minBounds.max.x)
            {
                var _left = _elementBounds.min.x + floatLeft;
                if(_minBounds.max.x - _left < _domSize.width)
                    _left = _minBounds.max.x - _domSize.width;
                if(_left < _minBounds.min.x) _left = _minBounds.min.x;
                if(_left + _domSize.width > _maxBounds.max.x)
                    _left = _maxBounds.max.x - _domSize.width;
                if(_left < _maxBounds.min.x)
                    _left = _maxBounds.min.x;
                floatLeft = _left - _elementBounds.min.x;
                if(_elementSize_W2 + _anchorx - floatLeft - this._openOpts.corneradius - _cursorSize_W2 < 0)
                    _anchorx =  floatLeft + this._openOpts.corneradius + _cursorSize_W2 - _elementSize_W2;
                if(_domSize.width + floatLeft - this._openOpts.corneradius - _cursorSize_W2 - _elementSize_W2 - _anchorx < 0)
                    _anchorx = _domSize.width + floatLeft - this._openOpts.corneradius - _cursorSize_W2 - _elementSize_W2;
            }
            var _leftCSS = (_thisJDom.position().left - _domBounds.min.x + _elementBounds.min.x + floatLeft) + "px";
            if(this._position == KPosition.TOP)
                _thisJDom.css({"top": (_thisJDom.position().top - _domBounds.min.y + (_elementBounds.min.y - _domSize.height - _cursorSize.height - this._openOpts.marginy)) + "px", "left":_leftCSS});
            else  _thisJDom.css({"top": (_thisJDom.position().top - _domBounds.min.y + (_elementBounds.min.y + _elementSize.height + _cursorSize.height + this._openOpts.marginy)) + "px", "left":_leftCSS});
            this._cursor.css({"top": "", "left": (_elementSize_W2 - floatLeft - _cursorSize_W2 + _anchorx) + "px"});
        } else {
            if(_anchory > _elementSize_H2)
                _anchory = _elementSize_H2;
            if(_anchory < -_elementSize_H2)
                _anchory = -_elementSize_H2;
            if(_offsety > _domSize_H2 - this._openOpts.corneradius - _cursorSize_H2)
                _offsety = _domSize_H2 - this._openOpts.corneradius - _cursorSize_H2;
            if(_offsety < -(_domSize_H2 - this._openOpts.corneradius - _cursorSize_H2))
                _offsety = -(_domSize_H2 - this._openOpts.corneradius - _cursorSize_H2);
            var floatTop = (_elementSize_H2 + _anchory -  _domSize_H2 -  _offsety);
            if(this._openOpts.autolayout == true && _minBounds.min.y != _minBounds.max.y)
            {
                var _top = _elementBounds.min.y +  floatTop;
                if(_minBounds.max.y - _top < _domSize.height)
                    _top = _minBounds.max.y - _domSize.height;
                if(_top < _minBounds.min.y)
                    _top = _minBounds.min.y;
                if(_top + _domSize.height > _maxBounds.max.y)
                    _top = _maxBounds.max.y - _domSize.height;
                if(_top < _maxBounds.min.y)
                    _top = _maxBounds.min.y;
                floatTop = _top - _elementBounds.min.y;
                if(_elementSize_H2 + _anchory - floatTop - this._openOpts.corneradius - _cursorSize_H2 < 0)
                    _anchory =  floatTop + this._openOpts.corneradius + _cursorSize_H2 - _elementSize_H2;
                if(_domSize.height + floatTop - this._openOpts.corneradius - _cursorSize_H2 - _elementSize_H2 - _anchory < 0)
                    _anchory = _domSize.height + floatTop - this._openOpts.corneradius - _cursorSize_H2 - _elementSize_H2;
            }
            var _topCSS = (_thisJDom.position().top - _domBounds.min.y + (_elementBounds.min.y + floatTop)) + "px";
            if(this._position == KPosition.LEFT)
                _thisJDom.css({"left": (_thisJDom.position().left - _domBounds.min.x + (_elementBounds.min.x - _domSize.width - _cursorSize.width - this._openOpts.marginx)) + "px", "top" : _topCSS});
            else _thisJDom.css({"left": (_thisJDom.position().left - _domBounds.min.x + (_elementBounds.min.x + _elementSize.width + _cursorSize.width + this._openOpts.marginx)) + "px", "top" : _topCSS});
            this._cursor.css({"left": "", "top": (_elementSize_H2 - floatTop - _cursorSize_H2 + _anchory) + "px"});
        }
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.clearResult = function()
{
    if (this._content && this._content.length > 0)
    {
        this._content.html("");
    }
};

/**
 * 根据 opts 选项在 element 周围显示气泡
 * @param element Node 类型
 * @param opts KBubbleShowOptions 类型
 * @uncrunch
 */
KBubble.prototype.show = function(element, opts)
{
    var _this = this;
    if (KTools._isElement(element) && this._dom)
    {
        this._element = $(element);

        var oldV = this.visible();
        if(!oldV)
        {
            $(this._dom).show();
        }
        var _thisJDom = $(this._dom);
        if (_thisJDom.parent().length < 1) $(document.body).append(this._dom);
        var _eBounds = KTools.getBounds(this._element[0]);
        this._openOpts = KTools.copyOptions(opts, KBubbleShowOptions);
        if(!this._openOpts.arrow) this._cursor.hide();
        if($.browser.msie) this._openOpts.corneradius = 0;
        //大小
        if (opts.size instanceof KSize) this.resize(this._openOpts.size, true);
        else {
			//_thisJDom.css({"height":"auto","width":"auto"});
            this.resize(new KSize(_thisJDom.width(), _thisJDom.height()), true, true);
        }
        //关闭
        if (this._openOpts.closebtn == true)
        {
            //当有关闭按钮时让它显示 没有时 在气泡外点击可自动隐藏气泡
            if (this._close && this._close.length > 0)
            {
                this._close.show();
            }
            else  this._openOpts.closebtn = false;
        } else {
            this._close.hide();
        }
        _thisJDom.bgiframe();
        //位置
        this.layout();
        if(!oldV) KEvent.trigger.apply(this, [this, 'aftershow', this]);
    }
};

/**
 * @overwirte
 * @uncrunch
 */
KBubble.prototype.hide = function()
{
    var _this = this;
    if(!$(_this._dom).is(":visible")) return;
    var action = arguments[0];
    KEvent.trigger(_this, 'beforehide', _this, action);
    $(_this._dom).hide();
//        $(_this._dom).css("opacity", "");
        if(typeof action != "string") action = "method";
        KEvent.trigger(_this, 'afterhide', _this, action);
//    $(_this._dom).animate({opacity:"0"},"fast", function() {
//
//    });
};

/**
 * 将 element 指定的 dom 元素设置为气泡内容 或 将 html 字符串设置为气泡内容
 * @param obj Node 或 String 类型
 * @uncrunch
 */
KBubble.prototype.setContent = function(obj)
{
    if (!this._content || this._content.length < 1) return;
    if (KTools._isElement(obj))
    {
        this._content.empty();
        this._content.append(obj);
    } else if (typeof obj == 'string')  this._content.html(obj);
};

/**
 * 设置气泡显示层次
 * @param zindex Integer 类型
 * @uncrunch
 */
KBubble.prototype.setZIndex = function(zindex)
{
    if (!this._dom) return;
    if (typeof zindex == 'number') $(this._dom).css("z-index", zindex);
};

/**
 * 设置气泡尺寸
 * @param size KSize 类型
 * @uncrunch
 */
KBubble.prototype.resize = function(size, _selfU)
{
    if (!this._dom) return;
    if (size instanceof KSize)
    {
        switch (this._position)
        {
            case KPosition.TOP :
                $(this._dom).css("top", ($(this._dom).position().top - size.height + $(this._dom).height() ) + "px");
                break;
            case KPosition.LEFT :
                $(this._dom).css("left", ($(this._dom).position().left - size.width + $(this._dom).width() ) + "px");
                break;
        }
        if (!arguments[2]) {
			if(this._openOpts) this._openOpts.size = size;
			$(this._dom).css({
				"width": size.width + "px",
				"height": size.height + "px"
			});
		}
        if(!_selfU) {
			this.layout();
			KEvent.trigger.apply(this, [this, 'afteresize', this, size]);
		}
    }
};

KBubble.prototype._updateThemeClass = function(useDefault)
{
    if (this._dom)
    {
        if (useDefault == false)
        {
            this._setClass(this._dom, this._theme + "_bub");
            this._setClass(this._content.get(0), this._theme + "_bub_c");
            if (this._cursor.get(0)) {
                if (this._cursor.get(0).className != "")
                    this._setClass(this._cursor.get(0), this._cursor.get(0).className.replace(/[^\ ]*?_bub_a [^\ ]*?_bub_a([tblr])/g, this._theme + "_bub_a " + this._theme + "_bub_a$1"));
                else
                    this._setClass(this._cursor.get(0), this._theme + "_bub_a " + this._theme + "_bub_ar");
            }
            $(this._close).addClass(this._theme + "_bub_clb ");
        }
    }
};

KBubble.prototype._setClass = function(dom, className)
{
    if (dom) dom.className = className;
};

KBubble.prototype._updateCursorClass = function(pos)
{
    if (pos)
    {
        switch (pos)
        {
            case KPosition.BOTTOM:
                pos = 't';
                break;
            case KPosition.TOP:
                pos = 'b';
                break;
            case KPosition.LEFT:
                pos = 'r';
                break;
            case KPosition.RIGHT:
                pos = 'l';
                break;
            default : return;
        }
        this._cursor.get(0).className = this._cursor.get(0).className.replace(/_bub_a[rtlb]/g, "_bub_a" + pos);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.finalize = function()
{
    KEvent.unbind(document, "mousedown", this._windowCloseFun);
    KEvent.clear(this._dom);
    KEvent.clear(this._content.get(0));
    KEvent.clear(this._cursor.get(0));
    KEvent.clear(this._close.get(0));
    KWidget.prototype.finalize.apply(this);
};

/**
 * @overwrite
 * @uncrunch
 */
KBubble.prototype.dependent = function()
{
    return [KWidget, KTools, KBubbleOptions,jQuery, KSize,KEvent, KPosition, KBubbleShowOptions];
};
﻿/*
 公交查询组件。
 作者：songyr fuyg
 版本：2.1.2
 创建时间：2010-03-18
 最后修改时间：2011-08-02 23:01
 ============================================
 */
var KBusearch = KClass.create("KBusearch", KQuery);
KBusearch.conf = {
    CLASSNAME: {
        BS: "_bs " // 选项卡顶层容器（div）样式。
        ,
        EPT: "_bs_ept"// 无结果样式
        ,
        TSR: "_bs_tsr " // 换乘查询结果容器（div）样式。
        ,
        LSR: "_bs_lsr " // 线路查询结果容器(div)样式。
        ,
        LSRD: "_bs_lsrd" // 线路结果容器->线路详情区域（div）样式。
        ,
        SSR: "_bs_ssr " // 站点查询结果容器(div)样式。
        ,
        STIP: "_bs_stip"//线路容器
        ,
        T: "_bs_tss_t " // 起/终点列表头部元素(div)样式。
        ,
        LH: "_bs_tsr_lh" // 换乘结果列表条目的路段描述元素(li)鼠标悬停样式。
        ,
        CTRL: "_bs_tsr_ctrl" // 换乘查询结果操作栏(div)样式。
        ,
        RL: "_bs_lsr_rl"// 线路查询结果线路名称区域中的“返程路线”链接样式。
        ,
        LT: "_bs_lsr_lt " // 线路查询结果站点概要区域(div)样式。
        ,
        SL: "_bs_lsr_sl" // 线路查询结果站点列表区域(div)样式。
        ,
        SLL: "_bs_lsr_sll" // 线路查询结果站点列表区域中左侧列表(ul)样式。
        ,
        SLR: "_bs_lsr_slr" // 线路查询结果站点列表区域中右侧列表(ul)样式。
        ,
        LID: "_bs_lsr_lid" // 线路查询结果线路简介区域(div)样式。
        ,
        SD: "_bs_ssr_sd" // 站点查询结果站点概要区域中的“站点详情”链接样式。
        ,
        SS: "_bs_ssr_ss" // 站点查询结果站点类别区域(dt)样式。
        ,
        BUS: "_bs_ssr_bus"// 站点查询结果中的公交图标样式。
        ,
        SW: "_bs_ssr_sw"// 站点查询结果中的地铁图标样式。
        ,
        SND: "_bs_snd" // 线路查询和站点查询结果中“发送”链接的样式。
        // :"_bs_s# //站点查询结果中排序数字图标样式(# = 1~10)。
        ,
        LD: "_bs_ld" // 所有“线路详情”链接样式。
        ,
        DL: "_bs_dl" // 不可点击的线路连接样式
        ,
        LI: "_bs_li"//
        ,
        SI: "_bs_si"//
        ,
        SSRD: "_bs_ssrd"//
        ,
        CO2: "_bs_g_co2",

        TH: "_bs_tsr_th"//起终点高亮
    }
};
/**
 * 构造方法。
 *
 * @param container
 *            {Node}
 * @param opts
 *            KBusearch
 * @uncrunch
 */
KBusearch.initialize = function(container, opts){
    var _this = this;

    // opts参数设置
    // this.setOptions(KBusearchOptions);
    this._opts = KTools.copyOptions({}, KBusearchOptions);
    this.setOptions(opts);
    this.setTheme(this.options().theme);
    this.cssClassName = this._initCssName(this.options().theme);
    this._POI_TITLE_CLASSNAME = "mwpg_tl";
    // "ac,st,mc,qbus," + "on,oid,ol"[之一或多个] +"dn,did,dl"[之一或多个]
    var _tempKeys = ["ac,st,mc,qbus,on,dn", "ac,st,mc,qbus,on,did,dl", "ac,st,mc,qbus,on,did", "ac,st,mc,qbus,on,dn,dl", "ac,st,mc,qbus,on,dl", "ac,st,mc,qbus,on,dn,did", "ac,st,mc,qbus,on,on,oid,ol", "ac,st,mc,qbus,oid,ol,dn", "ac,st,mc,qbus,oid,ol,did,dl", "ac,st,mc,qbus,oid,ol,did", "ac,st,mc,qbus,oid,ol,dn,dl", "ac,st,mc,qbus,oid,ol,dl", "ac,st,mc,qbus,oid,ol,dn,did", "ac,st,mc,qbus,oid,ol,on,oid,ol", "ac,st,mc,qbus,oid,dn", "ac,st,mc,qbus,oid,did,dl", "ac,st,mc,qbus,oid,did", "ac,st,mc,qbus,oid,dn,dl", "ac,st,mc,qbus,oid,dl", "ac,st,mc,qbus,oid,dn,did", "ac,st,mc,qbus,oid,on,oid,ol", "ac,st,mc,qbus,on,ol,dn", "ac,st,mc,qbus,on,ol,did,dl", "ac,st,mc,qbus,on,ol,did", "ac,st,mc,qbus,on,ol,dn,dl", "ac,st,mc,qbus,on,ol,dl", "ac,st,mc,qbus,on,ol,dn,did", "ac,st,mc,qbus,on,ol,on,oid,ol", "ac,st,mc,qbus,ol,dn", "ac,st,mc,qbus,ol,did,dl", "ac,st,mc,qbus,ol,did", "ac,st,mc,qbus,ol,dn,dl", "ac,st,mc,qbus,ol,dl", "ac,st,mc,qbus,ol,dn,did", "ac,st,mc,qbus,ol,on,oid,ol", "ac,st,mc,qbus,on,oid,dn", "ac,st,mc,qbus,on,oid,did,dl", "ac,st,mc,qbus,on,oid,did", "ac,st,mc,qbus,on,oid,dn,dl", "ac,st,mc,qbus,on,oid,dl", "ac,st,mc,qbus,on,oid,dn,did", "ac,st,mc,qbus,on,oid,on,oid,ol", "ac,st,mc,qbus,on,oid,ol,dn", "ac,st,mc,qbus,on,oid,ol,did,dl", "ac,st,mc,qbus,on,oid,ol,did", "ac,st,mc,qbus,on,oid,ol,dn,dl", "ac,st,mc,qbus,on,oid,ol,dl", "ac,st,mc,qbus,on,oid,ol,dn,did", "ac,st,mc,qbus,on,oid,ol,on,oid,ol"];
    this._hashkeys = ["ac,city,keyword", "ac,city,origName,destName", "ac,oc,on,dc,dn", "ac,on,dn,st,mc,qbus,oid,did", "ac,on,dn,st,mc,qbus,oid,did,dl", "ac,on,dn,st,mc,qbus,oid,did,ol", "ac,on,dn,st,mc,qbus,oid,did,ol,dl", "ac,ol,on,ot,dl,dn,dt,tt,c", "ac,city,keyword,n", "ac,city,origName,destName,n", "ac,oc,on,dc,dn,n", "ac,on,dn,st,mc,qbus,oid,did,n", "ac,ol,on,ot,dl,dn,dt,tt,c,n"];
    this._hashkeys = this._hashkeys.concat(_tempKeys);
    // add by fuyg: mwpf 标志符，用于改进_hashkeys方式
    _this._mwpf = KConfig.get("mwpf");
    //
    this._mapIsInited = false;
    KEvent.bind(KMap, "mapinit", function(){
        _this._mapIsInited = true;
    });
    // 顶级容器，暂时这么写
    this._$dom = $(container).addClass(this.cssClassName.BS);
    _this._dom = _this._$dom.get(0);
    var divs = this._$dom.children("div");
    // 起终点结果容器
    this._transferDom = divs.eq(0).hide();
    // 换乘结果容器
    this._busSearchDom = divs.eq(1).addClass(this.cssClassName.TSR);
    this._busSearchMsgBox = divs.eq(2).addClass(this.cssClassName.EPT);
    // 线路结果容器
    this._busLineDom = divs.eq(3).addClass(this.cssClassName.LSR);
    this._busLineMsgBox = divs.eq(4).addClass(this.cssClassName.EPT);
    // 站点结果容器
    this._busStationDom = divs.eq(5).addClass(this.cssClassName.SSR);
    this._busStationMsgBox = divs.eq(6).addClass(this.cssClassName.EPT);
    //碳足迹容器
    this._busCo2ShowDom = divs.eq(7).addClass(this.cssClassName.CO2).hide();
    this._busCo2ShowDistance = $(">p>span", this._busCo2ShowDom).eq(0);
    this._busCo2ShowUI = $(">ul", this._busCo2ShowDom).eq(0);
    //打车费用结果容器
    this._$taxiFareDom = divs.eq(8).addClass("").hide();
    this._taxiContent = undefined;
    //
    this._msgId = undefined;
    //组件最后一次查询时输入的条件选项。默认为 undefined 。
    this._queryopts = undefined;
    //存储查询结果对象。默认为 undefined 。
    this._result = undefined;
    // 记录查询的选项
    _this._lastBusearchOpts = null;
    // 绑定事件,见方法说明
    _this._bindMapEvents();
    // 只显示第N项,如果小于0, 则在查询时不提交
    _this._showOnlyN = _this._lastOnlyN = -1;
    // 当前选中的KAccordion对象选中的Item或其他含有index, data属性的对象
    _this._currentItem = null;
    // 当前公交换乘选中的KTabItem
    _this._curTabItem = null;
    //用于免费发送短信时使用，见send()方法
    this._description = null;
    //是否允许使用KStationList对象进行重新选择起终点
    this._allowReList = false;
    this.busSearchAc = [];
	//added by zy1,存放从后台获取的短信数据
	this._sendSMSArray = new Array(3);
	//added by zy, 判断是否增加"不坐地铁"复选框，以及读取和设置复选框的选中与否
	this._nm = null;
	//added by zy, 当前显示的选项卡序号
	this._tabsCurrent = null;
	//added by zwq 当前请求的url的Hash值
	this._busUrlHash = null;
	//added by zwq 当前选中的tab标识
	this._busTabTitle = null;
	//added by zwq 当前选中的tab中"不乘地铁"的checked值，默认为false
	this._busTab1Checked = false;
	this._busTab2Checked = false;
	this._busTab3Checked = false;
	//added by zwq 判断公交换乘是否内部调用标识,默认true表示是内部调用
	this._innerFlag = true;
	//added by zwq 判断公交线路是否有相似线路
	this._bLineLength = null;
	//this._ajaxFlag = false;
	//起终点叠加物备份,参数备份
	this.markerBak = null;
	this.optsBak = null;
	//added by zwq 判断清除页面marker时是否清楚起终点marker
	this.dragmarkerFlag = true;
    this.sMarker = undefined;
    this.eMarker = undefined;
    
    this.menuMarkerType = undefined;
    
};



/***********************************************************************************************************************
 * 实现KObject 接口
 **********************************************************************************************************************/
/**
 * 释放当前对象的所有资源
 *
 * @uncrunch
 */
KBusearch.prototype.finalize = function(){
    if (this._objKStationList) {
        this._objKStationList.finalize();
    }
};
/***********************************************************************************************************************
 * 实现KWidget 接口
 **********************************************************************************************************************/
/**
 * 返回版本信息。
 *
 * @return String 版本号字符串。
 * @uncrunch
 */
KBusearch.prototype.version = function(){
    return "2.1.2";
};
/**
 * 中文名称描述。
 *
 * @return String
 * @uncrunch
 */
KBusearch.prototype.cnname = function(){
    return "公交查询组件";
};
/**
 * 返回依赖的其它组件。
 *
 * @return KObject[]
 * @uncrunch
 */
KBusearch.prototype.dependent = function(){
    return [KAccordion, KBusearchOptions, KClass, KConfig, KEvent, KFeedbackInfo, KFeedbackType, KLine, KListener, KMap, KMarker, KNamedValue, KObject, KPOIType, KPOInfo, KQuery, KQueryOptions, KQueryType, KRouteInfo, KRouteType, KSendOptions, KSendType, KStationList, KStationListOptions, KStdTabs, KTabItem, KTabs, KTools, KUrlHash, KWidget, KWidgetFlag, jQuery];
};
/**
 * 设置组件配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 *
 * @param obj
 * @uncrunch
 */
KBusearch.prototype.setOptions = function(obj){
    // this._opts = KTools.copyOptions(obj, this.options());
    var opts = $.extend(true, {}, this.options(), obj);
    // 强制禁用/启用选项
    if (opts.slopts) {
        opts.slopts.citylist = false;
        opts.slopts.searchbox = false;
        opts.slopts.samecity = true;
        opts.slopts.autoselect = true;
        opts.slopts.changehash = false;
        // 当与KBusearch一起使用时，由于KBusearch(或者更底层的组件)会控制初始化地图，因此不要让KStationList去初始化地图,否则会出现莫名其妙的问题(尤其是打开在地址栏上直接打开可分享的链接时)
        opts.slopts.initmap = false;
    }
    this._opts = opts;
};
/**
 * 设置组件的样式方案
 *
 * @param scheme
 * @uncrunch
 */
KBusearch.prototype.setTheme = function(scheme){
    this._theme = scheme;
};
/**
 * 返回FLAG字符串
 *
 * @return {String}
 * @uncrunch
 */
KBusearch.prototype.flag = function(){
    return KWidgetFlag.busearch;
};
/**
 * 通知相应的组件重新布局
 *
 * @uncrunch
 */
KBusearch.prototype.layout = function(){
	if (this._msgId) {
		KTools.hideMsg(this._msgId);
		this._msgId=undefined;
	}
    this._layoutDom();
};
/**
 * 清除结果
 *
 * @uncrunch
 */
KBusearch.prototype.clearResult = function(){
    this._clearAllOverlay("all");
    this._hideDom();
};
/*
 * _station1 -- 公交站点查询第1步 _station2 -- 公交站点查询第2步
 *
 * _line -- 公交线路查询 _line_s -- 公交线路查询起点 _line_e -- 公交线路查询终点
 *
 * _search_s -- 公交换乘站点 _search_s_all -- 公交换乘所有站点 _search_l -- 公交换乘线路 _search_l_w -- * 公交换乘步行线路 前面都有前缀
 * KWidgetFlag.busearch ："bs"
 */
/***********************************************************************************************************************
 * KQuery定义的接口
 **********************************************************************************************************************/
/**
 * 根据指定选项进行查询。忽略opts时将对当前结果重新查询
 *
 * @param opts
 *            KQueryOptions 类型
 * @uncrunch
 */
KBusearch.prototype.query = function(opts,optFlag){
	var _this = this;
    var curShowOnlyN = _this._showOnlyN;
    _this._showOnlyN = -1;
    this._queryopts = opts;
    this._description = this._sendkey = this._queryHash = this._currentItem = null;
    _this._clearAllOverlay("all");
    KMap.clearMarker("ls_center");
    //修正主站公交换乘连续查询出现横向滚动条的bug
    if (!opts || !opts.tt) {
        this._clearBusSearchAc();
    }
    KEvent.trigger(this, "searchbefore", this, opts);
    if (this.options().searchbox) {
        this.options().searchbox.query(KTools.copyOptions({}, opts), true);
    }
    if (typeof this._qUrlHash == "undefined") {
        // _url_:向后台查询的url,可以是公交换乘的，公交线路，公交站点; _ac:url上ac参数的值
        var _url_, optsChild, _ac, _key;
        var kpInfo = {
            busorig: {},
            busdest: {}
        };
        // KQueryOptions没有tt属性，如果tt存在， 应该是内部调用query()方法
        if (opts.tt) {// tt表示公交换乘的KStdTabs对象的tabItem的类型，值可以为subway, nonstop, shortWalk

            for (_key in KPOInfo) {
                kpInfo["busorig"][_key] = _key;
                kpInfo["busdest"][_key] = _key;
            }
        } else {
            for (_key in KPOInfo) {
                kpInfo[_key] = _key;
            }
        }
        //如果起终点有经纬度(确定)且在同一个城市，设置直接跳转标识符
        if (opts.type === KQueryType.busearch) {
            if (opts.busorig && opts.busorig.latlon && opts.busdest && opts.busdest.latlon) {
                if (!opts.city) {
                    if (opts.busorig.city && opts.busdest.city) {
                        if (opts.busorig.city === opts.busdest.city) {
                            opts.city = opts.busorig.city;
                        }
                    }
                }
                if (opts.city && !opts.tt) {
                    opts.tt = "subway";
                }
            }
            //
            //没有tt,应该来自驾车的跳转
            if (!opts.__byinner) {
                this._lastBusearchOpts = {
                    busorig: {
                        city: opts.busorig.city || opts.city,
                        name: opts.busorig.name
                    },
                    busdest: {
                        city: opts.busdest.city || opts.city,
                        name: opts.busdest.name
                    },
                    type: KQueryType.busearch
                };
            } else {
                delete opts.bylist;
            }
        }
        // {KQueryOptions}.type 为KQueryType, KQueryType的属性有 localsearch, busearch, busline, bustation, navsearch
        switch (opts.type) {
            /***********************************************************************************************************
             * 公交换乘搜索
             **********************************************************************************************************/
            case KQueryType.busearch:
                if (!opts.tt) {// tt不存在表明不是特殊的内部调用
                	//设置标识为false,表明不是内部调用
                	_this._innerFlag = false;
                    optsChild = "busearch";
                    _ac = "bus";
                    // 设置KStdTabs的每一个KTabItem的__hasQueried属性的值为false
                    if (this._objKStdTabs && this._objKStdTabs.tabs) {
                        var tabItems = this._objKStdTabs.tabs();
                        $.each(tabItems, function(index, item){
                            if (item) {
                                item.__hasQueried = false;
                            }
                        });
                    }
                    _this._busTab1Checked = false;
                    _this._busTab2Checked = false;
                    _this._busTab3Checked = false;
                   
                    //$("#sopt").removeAttr("checked");
                    //
                    this._clearAllOverlay("all");
                    // 使用KStationList对象去后台查询数据, 返回
                    this._queryByStationList(opts);
                    return;
                } else {// 特殊的内部调用
                    // 公交查询执行下一步操作
                    this.showObj = {
                        dom: this._busSearchDom,
                        type: KQueryType.busearch + "_2"
                    };
                    //查看返程查询，置空所有选中状态
                    if(optFlag==false){
                     	this._busTab1Checked=false;
                     	this._busTab2Checked=false;
                     	this._busTab3Checked=false;
                    }
                    if (!this._objKStdTabs) {// 如果公交换乘下的KStdTabs对象不存在，创建该对象
                        this._objKStdTabs = new KStdTabs(this._busSearchDom.children("div")[0]);
                        /** 隐藏最省钱,在2.0版本不实现 */
                        this._objKStdTabs.hideTab(4);
                        /** 隐藏最省钱,在2.0版本不实现 */
                        _this._curTabItem = _this._objKStdTabs.current();
//                        this._clearBusSearchAc();
                    }
                    KEvent.clear(this._objKStdTabs, "selected");
                    KEvent.bind(this._objKStdTabs, "selected", function(evt, obj, old_item, item){
                        /** 隐藏最省钱,在2.0版本不实现 */
                        if (item.index === 4) {
                            return;
                        }
                        /** 隐藏最省钱,在2.0版本不实现 */
                        var old_tt = opts.tt;
                        var tts = ["subway", "nonstop", "shortWalk","unsubway"];
                        opts.tt = tts[item.index];
                        _this._busTabTitle = opts.tt;
                        if (old_tt != opts.tt) {
                            if (!item.__hasQueried) {// 选项卡中无内容，还没有查询后台
                                item.__hasQueried = true;
                                opts.__byinner = true;
                                _this.query(opts);
                            } else {
                                if (item.__hashString) {
                                    KListener.setHash(KUrlHash.parseByHash(item._hashString), true);
                                };
                                var objKAccordion = _this.busSearchAc[item.index];
                                if (objKAccordion) {
                                    var selectedTab = objKAccordion.current();
                                    if (selectedTab) {
                                        _this._currentItem = selectedTab;
                                        _this._bindLi.apply(_this, [selectedTab, false]);
                                        _this._bindCheckBox.apply(_this, [selectedTab, false]);
                                    }
                                }
                            }
                        }
                        _this._curTabItem = item;
                    });
                    //
                    _url_ = this.options().busurl;
                    _ac = "bt";
                    // 默认查询"更快到达"
                    opts.tt = opts.tt || "subway";
                }
                break;
            /***********************************************************************************************************
             * 公交线路搜索
             **********************************************************************************************************/
            case KQueryType.busline:
                _this._allowReList = false;
                _this._curTabItem = null;// 当前没有选项卡显示

                this.showObj = {
                    dom: this._busLineDom,
                    type: opts.type//即KQueryType.busline
                };
                optsChild = "busline";
                _url_ = this.options().lineurl;
                _ac = "line";
                kpInfo.name = "keyword";
                break;
            /***********************************************************************************************************
             * 公交站点搜索
             **********************************************************************************************************/
            case KQueryType.bustation:
                _this._allowReList = false;
                _this._curTabItem = null;
                this.showObj = {
                    dom: this._busStationDom,
                    type: opts.type
                };
                optsChild = "bustation";
                _url_ = this.options().stationurl;
                _ac = "station";
                // KPOInfo中的name对应hash中的 keyword
                kpInfo.name = "keyword";
                break;
        }
        // this._qUrlHash对应url地址栏上的hash
        this._qUrlHash = new KUrlHash();
        if (_ac == "bt") {// 用于查询公交换乘选项卡的内容， 尾部使用return;
            var orig = opts["busorig"];
            var dest = opts["busdest"];
            this._qUrlHash.setKey("ol", orig.latlon);
            this._qUrlHash.setKey("on", orig.name);
            this._qUrlHash.setKey("ot", orig.type);
            orig.pid && this._qUrlHash.setKey("oid", orig.pid);
            this._qUrlHash.setKey("dl", dest.latlon);
            this._qUrlHash.setKey("dn", dest.name);
            this._qUrlHash.setKey("dt", dest.type);
            dest.pid && this._qUrlHash.setKey("did", dest.pid);
            this._qUrlHash.setKey("tt", opts.tt);
            this._qUrlHash.setKey("c", opts.city);
            this._qUrlHash.setKey("ac", _ac);
            // 如果仅显示一项
            curShowOnlyN > -1 && (_this._qUrlHash.setKey("n", curShowOnlyN));
            // add by fuyg
            _this._qUrlHash.setKey(_this._mwpf, _this.flag());
            // 更新url地址栏
            KListener.setHash(this._qUrlHash, true);
            //
            var _newhash = this._qUrlHash.clone();
            // 获取地图的width和height
            var wh = this._getMapWH();
            _newhash.setKey("w", wh.w + "");
            _newhash.setKey("h", wh.h + "");
            // _queryHash对应向后台请求的hash
            this._queryHash = _newhash;
            // _queryUrl对应向后台请求的url
            this._queryUrl = _url_ + "&" + _newhash.toString();
            var current = this._objKStdTabs.current();
            current.__hashString = this._qUrlHash.toString();
            this._qUrlHash = undefined;
            var t_idx = current.index;
            var curr_ac = this.busSearchAc[t_idx];
            var t_tts = ["subway", "nonstop", "shortWalk","unsubway"];
            var t_tt = t_tts[t_idx] || t_tts[0];
            if (!curr_ac) {// 如果当前选项卡内容区域的KAccordion对象不存在,就向后台请求数据
                this._requestData(this._queryUrl, opts.type, opts.tt);
            } else {// 如果当前选项卡内容区域的KAccordion对象存在,
                var _oqueryopts = this._oqueryopts;
                if ((_oqueryopts.busdest.latlon != this._queryopts.busdest.latlon ||
                _oqueryopts.busorig.latlon != this._queryopts.busorig.latlon ||
                curShowOnlyN !== _this._lastOnlyN) &&
                t_tt == this._queryopts.tt) {// 如果起终点不一样，清除KAccordion对象
                    for (var idx = 0; idx < this.busSearchAc.length; idx++) {
                        if (this.busSearchAc[idx] && curr_ac != this.busSearchAc[idx]) {
                            this.busSearchAc[idx].finalize();
                            this.busSearchAc[idx] = null;
                        }
                    }
                    // _oqueryopts保存上次查询的条件？？？
                    this._oqueryopts = KTools.copyOptions({}, opts);
                    this._requestData(this._queryUrl, opts.type, opts.tt);
                } else {// 如果起终点一样，
                    KEvent.trigger(curr_ac, "selected", curr_ac.current());
                }
            }
            return;
        } // else {
        // 如果是查询公交线路，公交站点
        for (var j in KPOInfo) {
            if (kpInfo[j] === "city" || kpInfo[j] === "keyword") {
                this._qUrlHash.setKey(kpInfo[j], opts[optsChild][j]);
            }
        }
        // }
        //line?
        this._qUrlHash.setKey("ac", _ac);
        // 如果只显示一项
        curShowOnlyN > -1 && (_this._qUrlHash.setKey("n", curShowOnlyN));
        // add by fuyg
        _this._qUrlHash.setKey(_this._mwpf, _this.flag());
        //
        KListener.setHash(this._qUrlHash, true);
    }
    this._queryUrl = this._parseURL(opts, curShowOnlyN);
    this._qUrlHash = undefined;
    this._requestData(this._queryUrl, opts.type);
};
/**
 * 根据指定的Hash值进行查询
 *
 * @param hash
 *            KUrlHash 类型
 * @uncrunch
 */
KBusearch.prototype.queryByHash = function(hash){
    // hash to opts
    var _this = this;
    var opts = KTools.copyOptions({}, KQueryOptions);
    var matches = {
        bus: "busearch",
        station: "bustation",
        line: "busline",
        bt: "bt"
    };
    var optsChild = matches[hash.value("ac").toString()];
    opts.type = optsChild === "bt" ? KQueryType.busearch : KQueryType[optsChild];
    opts[optsChild] = KTools.copyOptions({}, KPOInfo);
    for (var j in KPOInfo) {
        opts[optsChild][j] = hash.value(j === "name" ? "keyword" : j);
    }
    if (opts.type === KQueryType.busearch) {
        if (optsChild === "bt") {
            opts.busorig = {
                latlon: hash.value("ol"),
                name: hash.value("on"),
                pid: hash.value("oid"),
                type: hash.value("ot")
            };
            opts.busdest = {
                latlon: hash.value("dl"),
                name: hash.value("dn"),
                pid: hash.value("did"),
                type: hash.value("dt")
            };
            opts.tt = hash.value("tt");
            opts.city = hash.value("c");
        } else {
            opts.busorig = {
                city: hash.value("oc"),
                name: hash.value("on"),
                pid: hash.value("oid"),
                latlon: hash.value("ol")
            };
            if (hash.value("os") && !hash.value("ol") && !hash.value("oid")) {
                opts.busorig.latlon = hash.value("on");
                opts.busorig.name = hash.value("os");
            }
            opts.busdest = {
                city: hash.value("dc"),
                name: hash.value("dn"),
                pid: hash.value("did"),
                latlon: hash.value("dl")
            };
            if (hash.value("ds") && !hash.value("dl") && !hash.value("did")) {
                opts.busdest.latlon = hash.value("dn");
                opts.busdest.name = hash.value("ds");
            }
            opts.city = hash.value("mc");
        }
    }
    //
    var paramN = parseInt(hash.value("n") || "-1", 10);
    _this._showOnlyN = isNaN(paramN) ? -1 : paramN;
    //
    if (this._objKStdTabs && this._objKStdTabs.tabs) {
        var tabs = this._objKStdTabs.tabs();
        if (tabs) {
            for (var t = 0; t < tabs.length; t++) {
                tabs[t].__hasQueried = tabs[t].__hashString = false;
            }
        }
    }
    //
    this.query(opts);
};
/**
 * 将当前查询结果以指定方式发送。
 *
 * @param sendtype
 *            KSendType 类型，默认为 KSendType.all。
 * @param selected
 *            KSendType 类型，默认选中的发送功能
 * @uncrunch
 */
KBusearch.prototype.send = function(sendtype, selected){
    if (this._opts.sender) {
        var ksopt = KTools.copyOptions({}, KSendOptions);
        ksopt.sendtype = sendtype || (KSendType.email | KSendType.sms);
        ksopt.selected = selected;
        ksopt.email = [];
        ksopt.sms = [];
        var qopts = KTools.copyOptions({}, this._queryopts);
        ksopt.querytype = qopts.type;
        var sendHash = this._queryHash.clone();
        if (this._currentItem) {
            sendHash.setKey("n", this._currentItem.index);
        }
        var em_t = "";
        switch (qopts.type) {
            case KQueryType.busearch:
                em_t = "btsm";
                if (this._currentItem && this._currentItem.crValue) {
                    sendHash.setKey("cr", this._currentItem.crValue);
                }
                break;
            case KQueryType.busline:
                em_t = "blsm";
                if (this._currentItem) {
                    sendHash.setKey("rn", this._currentItem.data.r[0].n);
                }
                break;
            case KQueryType.bustation:
                em_t = "bssm";
                break;
            default:
                em_t = "btsm";
                break;
        }
        sendHash.setKey("t", em_t);
        
        //added by zwq,如果当前标签下不乘地铁框被选中
       
        if(this._busTabTitle==="subway"&&this._busTab1Checked===true){
        	sendHash.setKey("isb",true);
		}
		if(this._busTabTitle==="nonstop"&&this._busTab2Checked===true){
			sendHash.setKey("isb",true);
		}
		if(this._busTabTitle==="shortWalk"&&this._busTab3Checked===true){
			sendHash.setKey("isb",true);
		}
        var emailStr = sendHash.toString();
        ksopt.email.push(this._getKNamedValue("url", emailStr));		
		//added by zy,短信改为从后台获取
		var SMSContents,sendkey;
		//added by zwq 修改线路和站点邮件无法发送的bug，此处必须判断_objKStdTabs是否存在
		var currentTabIndex;
		if(this._objKStdTabs){
			currentTabIndex = $(this._objKStdTabs.current().contentDom[0]).index() - 1;
		}
		//如果发送内容是换乘短信
		if (this._result.tt && this._result.sb) {
			var aIndex = ($('.mwp_arr_c:visible').index() - 1) / 2;
			SMSContents = this._sendSMSArray[currentTabIndex][aIndex].mv;
            sendkey = this._sendSMSArray[currentTabIndex][aIndex].mk;
		}
		else {
			SMSContents = this._description;
            sendkey = this._sendkey;
		}
        ksopt.sms.push(this._getKNamedValue("", {
            // @uncrunch
            content: SMSContents,
            sendkey: sendkey,
            // @uncrunch
            adtext: '一段广告',
            // @uncrunch
            selected: false
        }));
        this._opts.sender.send(ksopt);
    }
};
/**
 * 打印组件当前结果数据。
 *
 * @uncrunch
 */
KBusearch.prototype.print = function(){
    var _this = this;
    var printer = this.options().printer;
    if (!printer) {
        return;
    }
    var opts = {};
    var qopts = KTools.copyOptions({}, this._queryopts);
    switch (qopts.type) {
        case KQueryType.busearch:
            break;
        case KQueryType.busline:
            break;
        case KQueryType.bustation:
            break;
    }
    if (this._currentItem) {
        opts.resultnum = this._currentItem.index;
    }
    //
    if (opts.resultnum === 0 && _this._lastOnlyN > -1) {
        opts.resultnum = _this._lastOnlyN;
    }
    //
    opts.queryopts = qopts;
    var newMKS = [], newLines = [];
    var markers = KMap.getMarkers();
    var lines = KMap.getLines();
    var i, j;
    for (i = 0, j = markers ? markers.length : 0; i < markers.length; i++) {
        newMKS.push(markers[i].toString());
    }
    for (i = 0, j = lines ? lines.length : 0; i < lines.length; i++) {
        newLines.push(lines[i].toString());
    }
    opts.markers = newMKS;
    opts.lines = newLines;
    //如果是公交换乘，增加关键字
    //	if(_this._currentItem.data && _this._currentItem.data.r[0] && _this._currentItem.data.r[0].n){
    //		opts.lineName = _this._currentItem.data.r[0].n;
    //	}
    printer.print(opts);
};
/***********************************************************************************************************************
 * 组件公开的接口
 **********************************************************************************************************************/
/**
 * 返回当前选中（或展开）的结果序号。
 *
 * @returns Number 类型，没有选中结果时返回-1。
 * @uncrunch
 */
KBusearch.prototype.selectedResult = function(){
    var _this = this;
    if (_this._currentItem && typeof _this._currentItem.index === "number") {
        return _this._currentItem.index;
    } else {
        return -1;
    }
};
/**
 * 当为换乘查询结果时，返回被选择的换乘方式选项卡，即“更快到达、更少换乘、更少不行”中的一个。
 *
 * @returns KTabItem 类型，如果非换乘查询返回 undefined
 * @uncrunch
 */
KBusearch.prototype.selectedTab = function(){
    var _this = this;
    if (_this._curTabItem) {
        return _this._curTabItem;
    } else {
        return undefined;
    }
};
/**
 * 重新查询
 *
 * @uncrunch
 */
KBusearch.prototype.reListStations = function(){
    var _this = this;
    _this._clearAllOverlay("all");
    if (!_this._objKStationList) {
        this._createStationList();
    }
    if (_this._objKStationList && _this._lastBusearchOpts) {
        this._setAutoSelectOpts(false);
        KEvent.bind(_this._objKStationList, "selectdone", function(){
            KEvent.unbind(_this._objKStationList, "selectdone", arguments.callee);
            _this._setAutoSelectOpts(true);
        });
        this._opts.searchbox && this._opts.searchbox.query(_this._lastBusearchOpts, true);
        _this._queryByStationList(_this._lastBusearchOpts);
    }
    //add by zwq标识非内部查询，用于控制[不乘地铁]复选框展示样式
    _this._innerFlag = false;
    _this._busTab1Checked = false;
    _this._busTab2Checked = false;
    _this._busTab3Checked = false;
};
/**
 * 是否允许使用KStationList对象进行重新选择起终点
 *
 * @uncrunch
 */
KBusearch.prototype.allowReList = function(){
    //KBusearch.prototype.justQueriedByList=function(){
    return !!this._allowReList;
};
/**
 * 显示打车费用
 *
 * @param opts
 *            KMsgBoxOpenOptions。如果没有opts，该方法不执行任何操作。
 * @return
 * @uncrunch
 */
KBusearch.prototype.showTaxiFare = function(opts){
    if (!opts || !this.supportTaxi()) {
        return;
    }
    //
    if (!this._$taxiFareDom || !this._$taxiFareDom.length || !this._taxiContent) {
        return;
    }
    opts = $.extend(true, {}, opts);
    var _this = this;
    var bubOpts = opts.buboptions || {};
    bubOpts = KTools.copyOptions(bubOpts, KBubbleShowOptions);
    //bubOpts.arrow = false;
    //
    var msgOpts = KTools.copyOptions(opts, KMsgBoxOpenOptions);
    msgOpts.closedcbk = function(){
        _this._$taxiFareDom.hide().html("");
    };
    msgOpts.buboptions = bubOpts;
    //msgOpts.theme = "blue";
    //msgOpts.title = "打车费用";
    //
    if (!this._$taxiFareDom.is(":visible")) {
        //this._$taxiFareDom.html(this._taxiContent.replace(/\<p[^<]+/g, "<p></p>")).show();
        this._$taxiFareDom.html(this._taxiContent).show();
        this._msgId = KTools.showMsg(this._$taxiFareDom.get(0), msgOpts);
    } else {
        this._$taxiFareDom.hide().html("");
        KTools.hideMsg(this._msgId);
    }
    //
};
/**
 * 是否显示打车费用
 *
 * @return Boolean
 * @uncrunch
 */
KBusearch.prototype.supportTaxi = function(){
    return (!!this._taxiContent);
};
/***********************************************************************************************************************
 * 组件私有方法
 **********************************************************************************************************************/
/**
 * 显示相应的dom对象
 *
 * @param dom
 *            需要显示的dom对象
 * @param type
 *            {KQueryType}
 */
KBusearch.prototype._showDom = function(dom, type){
    this._hideDom(type);
    if (!dom) {
        return;
    }
    // this.d_null表示返回结果为空，不做处理
    if (this.d_null) {
        if (type == KQueryType.bustation) {
            this._busStationMsgBox.show();
            this._busStationDom.hide();
        } else if (type == KQueryType.busline) {
            this._busLineMsgBox.show();
            this._busLineDom.hide();
        } else if (type == KQueryType.busearch + "_2") {
            this._busSearchMsgBox.show();
        }
        this.d_null = false;
    } else {
        dom.show();
        this.layout();
    }
};
/**
 * 清除公交换乘的KAccordion对象
 */
KBusearch.prototype._clearBusSearchAc = function(){
    if (this.busSearchAc) {
        for (var i = 0; i < this.busSearchAc.length; i++) {
            this.busSearchAc[i] && this.busSearchAc[i].finalize();
        }
    }
    this.busSearchAc = [];
};
KBusearch.prototype._hideDom = function(type){
    type != KQueryType.busearch && this._objKStationList && this._objKStationList.clearResult();
    if (type != KQueryType.busearch + "_2" && this._objKStdTabs) {
        var flag = this.flag();
        if(this.dragmarkerFlag){
        	KMap.clear(flag + "_search_s");
        }
        KMap.clear(flag + "_search_l");
        KMap.clear(flag + "_search_l_w");
        KMap.clear(flag + "_search_s_all");
        this._clearBusSearchAc();
    }
    this._busLineDom.hide();
    this._busSearchDom.hide();
    this._busStationDom.hide();
    type != KQueryType.busearch && this._transferDom.hide();
    if (this._objKStdTabs && this._objKStdTabs.tabs) {
        var tabs = this._objKStdTabs.tabs();
        if (tabs) {
            for (var t = 0; t < tabs.length; t++) {
                tabs[t].__hasQueried = tabs[t].__hashString = false;
            }
        }
    }
    this._busSearchMsgBox.hide();
    this._busStationMsgBox.hide();
    this._busLineMsgBox.hide();
};
/**
 * 公交查询，KStationList组件实现。
 *
 * @param opts
 *            执行query方法的optsions参数
 */
KBusearch.prototype._queryByStationList = function(opts){
    var _this = this;
    var defaultSubmit = false;
    _this._hideDom(opts.type);
    if (this._objKStdTabs && this._objKStdTabs.tabs) {
        var tabs = this._objKStdTabs.tabs();
        if (tabs) {
            for (var t = 0; t < tabs.length; t++) {
                tabs[t].__hasQueried = false;
            }
        }
    }
    this._createStationList();
    this.layout();
    var opts1 = KTools.copyOptions({}, KQueryOptions);
    opts1.busorig = KTools.copyOptions(opts.busorig, KPOInfo);
    opts1.busdest = KTools.copyOptions(opts.busdest, KPOInfo);
    opts1.city = opts.city || opts1.busorig.city;
    opts1.type = KQueryType.busearch;
    //this._lastBusearchOpts = $.extend(true, {}, opts1);
    this._opts.searchbox && this._opts.searchbox.query(opts1, true);
    this._objKStationList.query(opts1);
};
KBusearch.prototype._createStationList = function(){
    var _this = this;
    if (!this._objKStationList) {
        this._objKStationList = new KStationList(this._transferDom, _this.options().slopts);
        KEvent.bind(this._objKStationList, "selectdone", function(eventinfo, widget, origInfo, destInfo){
            this.clearResult();
            //_this._lastBusearchOpts = $.extend(true, {}, this.queryOptions());
            var qOpts = {
                busorig: $.extend(true, {}, origInfo),
                busdest: $.extend(true, {}, destInfo),
                type: KQueryType.busearch,
                city: origInfo.city || destInfo.city || "",
                tt: "subway",
                __byinner: true
            };
            defaultSubmit = true;
            _this.query(qOpts);
        });
        KEvent.bind(this._objKStationList, "changehash", function(event, widget, queryOpts, urlHash){
            var hash = urlHash.clone();
            hash.setKey(_this._mwpf, _this.flag());
            KListener.setHash(hash);
        });
        KEvent.bind(this._objKStationList, "locationchanged", function(event, widget, which, info){
            // 同步searchbox中的文字
            if (_this._opts.searchbox) {
                var opts = $.extend(true, {}, this.queryOptions());
                // 因为此时searchbox只同步一个点
                if (which === "orig") {
                    opts.busorig = info;
                    opts.busdest = undefined;
                } else if (which === "dest") {
                    opts.busorig = undefined;
                    opts.busdest = info;
                }
                _this._opts.searchbox.query(opts, true);
            }
        });
        KEvent.bind(this._objKStationList, "submitbtn", function(evt, w, v){
            KEvent.trigger(_this, "sl_submitbtn", _this, v);
        });
        KEvent.bind(this._objKStationList, "mapready", function(evt, w, c, l){
            KEvent.trigger(_this, "mapready", _this, c, l);
        });
        KEvent.bind(this._objKStationList, "resultshown", function(evt, w, a, r){
            // 显示KStationList对象
            this.show();
            this.layout();
            if (_this._opts.searchbox) {
                this.showNoResultTip(_this._opts.searchbox.getCurrInputs());
            }
            // 当结果列表有且仅有一条起点终点数据时自动进入下一步。此时不需要显示起点、终点列表页。
            defaultSubmit = false;
            KEvent.trigger(_this, "resultshown", _this, "stationlist", r);
            KEvent.trigger(_this, "sl_resultshown", _this);
        });
        KEvent.bind(this._objKStationList, "resultloaded", function(evt, wgt, action, result){
            KEvent.trigger(_this, "sl_resultloaded", _this);
            // 同步searchbox中的文字
            if (_this._opts.searchbox) {
                var _opts = $.extend(true, {}, this.queryOptions());
                var origName = "", destName = "";
                if (!((_opts && _opts.busorig && !_opts.busorig.name) || (_opts.busdest && !_opts.busdest.name))) {
                    return;
                }
                try {
                    origName = result.s.d[0].n;
                } catch (ex) {
                }
                try {
                    destName = result.e.d[0].n;
                } catch (ex) {
                }
                !_opts.busorig.name && (_opts.busorig.name = origName || "");
                !_opts.busdest.name && (_opts.busdest.name = destName || "");
                _this._opts.searchbox.query(_opts, true);
            }
        });
    }
};
KBusearch.prototype._parseURL = function(opts, onlyN){
    var _url, optsChild, parsedURL = [];
    switch (opts.type) {
        case KQueryType.busearch:
            optsChild = "busearch";
            _url = this.options().busurl;
            break;
        // 公交线路查询操作。
        case KQueryType.busline:
            optsChild = "busline";
            _url = this.options().lineurl;
            break;
        // 公交站点查询操作。
        case KQueryType.bustation:
            optsChild = "bustation";
            _url = this.options().stationurl;
            break;
    }
    parsedURL.push(_url);
    var wh = this._getMapWH();
    parsedURL.push("&w=" + wh.w);
    parsedURL.push("&h=" + wh.h);
    var _newHash = new KUrlHash();
    for (var i in KPOInfo) {
        if (opts[optsChild][i]) {
            _newHash.setKey(i === "name" ? "k" : i.substring(0, 1), opts[optsChild][i]);
        }
    }
    _newHash.setKey("w", wh.w + "");
    _newHash.setKey("h", wh.h + "");
    onlyN > -1 && (_newHash.setKey("n", onlyN));
    this._queryHash = _newHash.clone();
    return _url + "&" + _newHash.toString();
};
KBusearch.prototype._requestData = function(url, type, tab_t){
    var _this = this;
//	if(_this._ajaxFlag){
//		return;
//	}
//	_this._ajaxFlag=true;
    // 分析是否只显示一项
    var paramN = url.match(/\&n=(\d{0,3})/);
    if (paramN && paramN[1]) {
        paramN = parseInt(paramN[1], 10);
        paramN = isNaN(paramN) ? -1 : paramN;
    } else {// 不是只显示一项, 设为-1
        paramN = -1;
    }
    
    $.ajax({
        type: "GET",
        url: url,
        success: function(data){
            // 解析起点数据
            _this._lastOnlyN = paramN;
            (data && data.r && data.r.length && data.r.length > 1 && _this._lastOnlyN >= data.r.length) &&
            (_this._lastOnlyN = -1);
            /**
             * resultshown, resultloaded事件的action 补充  transfer：加载了换乘结果。  lines：加载了线路查询结果。  stations：加载了站点查询结果。
             *
             */
            var actionType = null, $noRltDom = null;
        	
            switch (type) {
                case KQueryType.busearch:
                    actionType = "transfer";
                    _this._allowReList = true;
                    $noRltDom = _this._busSearchMsgBox;
                    break;
                case KQueryType.busline:
                    actionType = "lines";
                    $noRltDom = _this._busLineMsgBox;
                    break;
                case KQueryType.bustation:
                    actionType = "stations";
                    $noRltDom = _this._busStationMsgBox;
                    break;
            }
        	
            //
            var isNoResult = !!(!data || !data.r || data.r.length === 0 || (data.t && parseInt(data.t, 10) == 0));
            //
            _this._result = data;
			//added by zy1,修正短信bug
			var currentTabIndex;
			switch (_this._queryopts.tt) {
				case 'subway':
					currentTabIndex = 0;
					break;
				case 'nonstop':
					currentTabIndex = 1;
					break;
				case 'shortWalk':
					currentTabIndex = 2;
					break;
				case 'unsubway':
					currentTabIndex = 3;
					break;	
			}
        	
			//当数组相应项还没有存储短信内容，或存储短信内容（因重新查询缘故）与ajax返回数据不符时
			if(!_this._sendSMSArray[currentTabIndex] || _this._sendSMSArray[currentTabIndex]!=_this._result.r) _this._sendSMSArray[currentTabIndex] = _this._result.r;
			//added over
            _this._taxiContent = undefined;
            actionType && KEvent.trigger(_this, "resultloaded", _this, actionType, data);
//			//added by zy,根据sb的值更改_nm
			if (data && data.sb === 'true') {
//				
//				if (!_this._nm) {
//					_this._nm = 'false';
//				}
				//仅针对非ie6，恢复"不乘地铁"多选框为可用
				var isIE=!!window.ActiveXObject;   
				var isIE6=isIE&&!window.XMLHttpRequest;   
				var isIE8=isIE&&!!document.documentMode;   
				var isIE7=isIE&&!isIE6&&!isIE8;  
				
				if ($(_this._objKStdTabs._dom).find('.mwp_stb_c').eq(_this._tabsCurrent).find('input').get(0)) {
					if (!isIE6&&!isIE7) {
						$(_this._objKStdTabs._dom).find('.mwp_stb_c').eq(_this._tabsCurrent).find('input').attr('disabled', '');
					}
				}
			}
			
			//added over
            !isNoResult && _this._initMapTriggest(type);
            if (isNoResult) {// 如果没有可查的结果
            	//_this.optsBak = KTools.copyOptions({}, _this._queryopts)
            	_this.optsBak = $.extend(true, {}, _this._queryopts);
            	_this.clearResult();
        	    KEvent.trigger(_this, "noresults", _this, type, $noRltDom ? $noRltDom.get(0) : null);
        	    KTools.showMsg("您刚刚选择的地区没有公交线路到达，请重新查询！");
                $noRltDom.show();
            	if(_this.markerBak){
            		_this.sMarker = _this._createSoeMarkerForTrans(_this.markerBak , "s");
            		_this.eMarker= _this._createSoeMarkerForTrans(_this.markerBak , "e");
	                //added by zwq 设置起终点可拖拽
            		_this.sMarker.setEditable(true);
            		_this.eMarker.setEditable(true);
	                KEvent.bind(_this.sMarker, "dragend", _this._draged, {marker: _this.sMarker, type : 's'}, _this);
	                KEvent.bind(_this.eMarker, "dragend", _this._draged, {marker: _this.eMarker, type : 'e'}, _this);
	                KMap.addMarkers([_this.sMarker, _this.eMarker], false);
	                _this.sMarker.hilite();
	                _this.eMarker.hilite();
            	}
            }
         
            actionType && KEvent.trigger(_this, "resultshown", _this, actionType, _this._result);
            
        	
        },
        error: function(){
            KTools.showMsg("网络异常导致查询失败，请稍后再试");
            if (!KMap.isInitialized(_this._opts.mapcontainer)) {
                KEvent.trigger(_this, "mapready", _this/* ,_point,_zoom */);
            }
        },
        dataType: "json"
    });
};
/**
 * 处理地图初始化和处理请求后台返回的数据
 *
 * @param type
 *            {KQueryType}
 */
KBusearch.prototype._initMapTriggest = function(type){
    var _this = this;
    _this._fitzoomflag = true;
    // 地图中心点 + 地图缩放级别
    var point, zoom;
    if (_this._result) {
        var obj = (this._result.m && this._result.m) || (this._result.r && this._result.r[0] && this._result.r[0].m);
        point = obj.a ? new MPoint(obj.a) : undefined;
        zoom = obj.b || undefined;
    }
    
    if (!KMap.isInitialized(_this._opts.mapcontainer)) {// 如果没有初始化地图
        _this._fitzoomflag = false;
        KEvent.bind(KMap, "mapinit", function(){
            // 只绑定一次事件
            KEvent.unbind(KMap, "mapinit", arguments.callee);
            // 公交站点“线路详情”选项点击时
            type == "bustation2" ? _this._dataToOverlay(_this._result) : _this._dataToDom(_this._result, _this._queryopts.type, _this._queryopts.tt);
            _this.showObj && _this._showDom(_this.showObj.dom, _this.showObj.type, _this._result);
            _this.showObj = null;
        });
        KEvent.trigger(_this, "mapready", _this, point, zoom);
    } else {// 地图初始化了
        KMap.setCenter(point, zoom);
        // 是否公交站点“线路详情”选项点击时
        type == "bustation2" ? _this._dataToOverlay(_this._result) : _this._dataToDom(_this._result, _this._queryopts.type, _this._queryopts.tt);
	  
        _this.showObj && _this._showDom(_this.showObj.dom, _this.showObj.type);
        _this.showObj = null;
    	
    }
	
};
/**
 * 将数据解析成地图叠加物, 只适用公交站点“线路详情”选项点击时
 *
 * @param data
 *            返回数据
 */
KBusearch.prototype._dataToOverlay = function(data){
    if (!data || !data.r || data.r.length == 0) {
        return KTools.showMsg("响应结果为空或期望属性不存在");
    }
    var group = this.flag() + "_station2";
    KMap.clear(group);
    //
    var createMarker = function(name, latlon, link, group, soe){
        var opts = KConfig.get("mk_mo_sdt", {
            n: name,
            t: soe
        });
        opts.infowin = KConfig.get("iw_iwo_st", {
            h: link
        });
        opts.infowin.title = name;
        opts.infowin.cmdata = {
            poi: KTools.copyOptions({
                type: KQueryType.busearch,
                name: name,
                city: this._queryopts.bustation.city,
                latlon: latlon
            }, KPOInfo)
        };
        opts.group = group;
        return new KMarker(latlon, opts);
    };
    //
    var r = data.r[0];
    var opts = KConfig.get("ln_lo_bst");
    opts.group = group;
    // 创建地图上的线
    var line = KLine.fromEncoded(r["p"], r["l"], opts);
    // 画线，画点
    KMap.addMarkers([createMarker(r["fs"], r["fl"], r["b"] + r["fn"], group, "s"), createMarker(r["ls"], r["ll"], r["b"] + r["ln"], group, "e")], false);
    KMap.addLine(line);
    // 设置地图中心点 和缩放级别
    r.m && KMap.setCenter(r.m.a, parseInt(r.m.b));

};
/**
 * @param data
 *            {Object}
 * @param type
 *            {KQueryType}
 * @param tab_t
 *            TabType, 表示公交换乘的KStdTabs对象的tabItem的类型，值可以为subway, nonstop, shortWalk， 也可以为undefined
 */
KBusearch.prototype._dataToDom = function(data, type, tab_t){
	//删除本地搜区域面所画的线段 added by zwq
	KMap.clearLine();
    if (type === undefined) {
        return;
    }
    var _this = this;
    //
    if (type === KQueryType.bustation) {
        /***************************************************************************************************************
         * 站点查询
         **************************************************************************************************************/
        _this._busStationDataHandler(data);
    } else if (type === KQueryType.busline) {
        /***************************************************************************************************************
         * 处理公交线路查询
         **************************************************************************************************************/
        //
        if (!data || !data.r || data.r.length == 0) {
            return (_this.d_null = true);
        }
        //
        if (parseInt(data.t, 10) > 0) {
			//added by zwq,优化线路查询相似路线
			var similarA = [];
			for(var i=0; i<data.r.length; i++){
				similarA.push("<a target='_blank' href='javascript:void(0);' mfg='" + data.r[i].b + "'>" + data.r[i].a + "</a>")
			}
			if (data.r.length < 2) {
				var similarDom = "<div style='display:none' class='mwp_bs_stip'><span>其他相似线路：</span>" + similarA.join('') + "</div>";
				_this._bLineLength = true;
				//this._busLineDom.find('.mwp_bs_lsrd').height(this._busLineDom.find('.mwp_bs_lsrd').height() + 10);
			} else {
                var similarDom = "<div class='mwp_bs_stip'><span>其他相似线路：</span>" + similarA.join('') + "</div>";
            }

            var $headLinks = this._busLineDom.empty().html(similarDom).find("a");
            $headLinks.click(function(event){
                event.preventDefault();
                var $thisLink = $(this);
                if ($thisLink.hasClass(_this.cssClassName.DL)) {
                    return;
                }
                //
                _this._currentItem = {
                    "index": $headLinks.index($thisLink)
                };
                //
                $thisLink.addClass(_this.cssClassName.DL).siblings().removeClass(_this.cssClassName.DL);
                if ($thisLink.data("buslinedata")) {
                    _this._currentItem.data = $thisLink.data("buslinedata");
                    return _this._busLineDataHandler($thisLink.data("buslinedata"), data.c);
                }
                var keyword = $.trim($thisLink.attr("mfg") || "");
                if (!keyword) {
                    return;
                }
                var lineHash = new KUrlHash();
                var wh = _this._getMapWH();
                lineHash.setKey("w", wh.w + "");
                lineHash.setKey("h", wh.h + "");
                lineHash.setKey("ss", "true");
                lineHash.setKey("c", data.c);
                lineHash.setKey("t", "bsr");
                lineHash.setKey("rn", keyword);
                //lineUrlHash.setKey("rn", "1");
                var prefix = _this.options().lineurl;
                var qMark = prefix.indexOf("?");
                prefix = qMark > -1 ? prefix.substring(0, qMark + 1) : prefix + "?";
                $.ajax({
                    type: "GET",
                    url: (prefix + lineHash.toString()),
                    success: function(reData){
                        if (!reData || !reData.r) {
                            return KTools.showMsg("响应结果为空或期望属性不存在");
                        }
                        _this._currentItem.data = reData;
                        _this._busLineDataHandler(reData, data.c);
                        $thisLink.data("buslinedata", reData);
                    },
                    error: function(){
                        KTools.showMsg("网络异常导致查询失败，请稍后再试");
                    },
                    dataType: "json"
                });
            });
            var n = _this._lastOnlyN > $headLinks.length - 1 || _this._lastOnlyN === -1 ? 0 : _this._lastOnlyN;
            $headLinks.eq(n).trigger("click");
        } else {
            _this.showObj.dom = _this._busLineMsgBox;
        }
    } else if (type == KQueryType.busearch) {
    	
        /***************************************************************************************************************
         * 处理公交换乘查询
         **************************************************************************************************************/
    	 
        var types = {
            "subway": 0,
            "nonstop": 1,
            "shortWalk": 2,
            "unsubway": 3
        };
        var eq_i = types[data.tt] || 0;
        //非内部调用，清空所有"不乘地铁"复选框的选中状态
        if(!_this._innerFlag){
//	        	$('[name=sopt]:checkbox').attr('checked',false);
	    		$('input[type=checkbox]').each(function(){
	    			if($(this).attr('name') == 'sopt'){ 
	    				$(this).attr('checked', false);
	    			}
	    		});
				_this._innerFlag = true;
        }
    	this._objKStdTabs.select(eq_i);
        if (!data || !data.r || data.r.length == 0) {
            return (_this.d_null = true);
        }
        this._taxiContent = data.taxi || "";
        this.busSearchAc[eq_i] && this.busSearchAc[eq_i].finalize && this.busSearchAc[eq_i].finalize();
        this._$ssr = $("<div/>").appendTo(this._busSearchDom.children("div").eq(0).children("div").eq(eq_i));// .addClass(this.cssClassName.LSR));
        var _html = [], i, j;
        for (i = 0, j = data.r.length; i < j; i++) {
            _html.push(data.r[i].h);
        }
        this._$ssr.empty().html(_html.join(""));
        //added by zwq 根据返回的sb值控制"不乘地铁"复选框的dom是否展示
		this._$ssr.parent().find('.mwp_bs_sopt').hide();
		if(data.sb=='true') {
			this._$ssr.parent().find('.mwp_bs_sopt').show();
		}
		//_busTabTitle为空，则从本地URL中取选中的标签值
		if(!_this._busTabTitle){
			_this._busTabTitle = KUrlHash.parseByHash(location.href, false)._UrlHash.tt;
		}
		if (data && data.sb && data.sb === 'true' && this._$ssr.parent().find('.mwp_bs_sopt').length == 0) {
//			
		}
    
    	 
        /**
         * 公交换乘下一步点击后手风琴组件 切换KStdTabs组件实例化对象的每一个选项卡时实例化一个手风琴组件， 或者也可以将3个选项卡对应的内容区域放置3个手风琴组件，
         * 将这3个手风琴组件放在数组中，不需要每次实例化，目前暂定为第一种方法。
         */
		
        var acco = this.busSearchAc[eq_i] = new KAccordion(this._$ssr.eq(0), {
            collapse: false,
            multiple: false
        });
        
        this._oqueryopts = KTools.copyOptions({}, _this._queryopts);
        var tabs = acco.tabs();
        // _this.substringTitle(this_busSearchAcTabs);
        function parseBusSearchAcItemUrl(tabs){
            var opts = _this._queryopts;
            var orig = opts.busorig;
            var dest = opts.busdest;
            var _qUrlHash = new KUrlHash();
            _qUrlHash.setKey("ol", orig.latlon);
            _qUrlHash.setKey("on", orig.name);
            _qUrlHash.setKey("ot", orig.type);
            orig.pid && _qUrlHash.setKey("oid", orig.pid);
            _qUrlHash.setKey("dl", dest.latlon);
            _qUrlHash.setKey("dn", dest.name);
            _qUrlHash.setKey("dt", dest.type);
            dest.pid && _qUrlHash.setKey("did", dest.pid);
            _qUrlHash.setKey("tt", opts.tt);
            _qUrlHash.setKey("c", opts.city);
			//added by zy,如城市有地铁，则增加nm字段
			if(data && data.sb && data.sb === "true"){
				_qUrlHash.setKey("nm", 'some');
			}
			//added by zy,设置查询请求中nm的值
			if(data.nm && data.nm === 'false'){
				_qUrlHash.setKey("nm", 'false');
			}
			else if(data.nm && data.nm === 'true'){
				_qUrlHash.setKey("nm", 'true');
			}

            var wh = _this._getMapWH();
            _qUrlHash.setKey("w", wh.w + "");
            _qUrlHash.setKey("h", wh.h + "");

            //
            var arrR = _this._result.r;
            for (var i = 0; i < tabs.length; i++) {
                _qUrlHash.setKey("bn", i + "");
                $(tabs[i].tabDom).data("urlhash", _qUrlHash.toString());
                if (i > 0) {
                    // 设置KAccordion的 tabs, 自动去后台请求数据
                    tabs[i].url = _this.options().busurl.replace("bt", "btd") + "&" + _qUrlHash.toString();
                }
                // for hoverlines
                if (arrR && arrR[i] && arrR[i].j) {
                    $(tabs[i].tabDom).data("hoverlines", _this._getHoverLines(arrR[i].j));
                }
            }
        }
    
        parseBusSearchAcItemUrl(tabs);
        tabs[0].data = data;
    
        _this._busCo2Click(tabs[0]);
        //
//        _this._ajaxFlag = false;
        KEvent.bind(acco, "selected", function(evt, item){
            _this._currentItem = item;
            _this._bindLi.apply(_this, [item, false]);
            _this._bindCheckBox.apply(_this, [item, false]);
        });
        KEvent.bind(acco, "dataloaded", function(evt, ac, data, item){
            _this._busCo2Click(item);
        });
    	
        KEvent.bind(acco, "headclick", function(evt, ac, item){
            var dataM = "";
            try {
                dataM = item.data.r[0].m;
            } catch (ex) {
                return;
            }
            if (dataM && dataM.a && dataM.b) {
                KMap.setCenter(dataM.a, parseInt(dataM.b, 10));
            }
        });
        var hoverLinesGroup = _this.flag() + "_hoverlines";
        KEvent.bind(acco, "headmouseenter", function(evt, ac, item){
            if (item && item.tabDom) {
                var hoverLines = $(item.tabDom).data("hoverlines");
                if (hoverLines) {
                    var lines = _this._parseToLines(hoverLines.pt, hoverLines.lv, "ln_lo_gray", hoverLinesGroup);
                    KMap.addLines(lines, false);
                }
            }
        });
        KEvent.bind(acco, "headmouseleave", function(evt, ac, item){
            KMap.clearLine(hoverLinesGroup);
        });
        acco.select(0, true);
    	
        
    }
    	
};
KBusearch.prototype._createMarkerForBusLine = function($a, index, length, urlHead, stationType){
    var _this = this;
    var markerOpts;
    var isSoe = (index == 0 || index == length - 1);
    var name = $a.text();
    name = $.trim(name.replace(/(\d+.)/i, ""));
    if (isSoe) {
        markerOpts = KConfig.get("mk_mo_sdt", {
            n: name,
            t: index == 0 ? "s" : "e"
        });
        markerOpts.hoverLabel = false;
        markerOpts.group = _this.flag() + "_line_s";
    } else {
        markerOpts = KConfig.get("mk_mo_s", {
            n: name,
            t: stationType
        });
        markerOpts.hoverLabel = true;
        markerOpts.group = _this.flag() + "_line";
    }
    // h:查看途经公交点链接的目标地址, 见途径点打开的infoWindow中的“查看途径的公交车"链接
    markerOpts.infowin = KConfig.get("iw_iwo_st", {
        h: urlHead + $a.attr("n"),
        cd: "none",
        fs: "none",
        nb: "none"
    });
    markerOpts.infowin.title = name;
    return (new KMarker($a.attr("ll"), markerOpts));
};
/**
 *
 */
KBusearch.prototype._createBustationMarker = function(latlon, index, urlHead, url, title){
    var _this = this;
    var markerOpts = KConfig.get("mk_mo_sn", {
        a: index + 1
    });
    markerOpts.infowin = KConfig.get("iw_iwo_st", {
        h: urlHead + url,
        cd: "none",
        fs: "none",
        nb: "none"
    });
    markerOpts.infowin.title = title;
    var poiInfo = KTools.copyOptions({
        type: KQueryType.busearch,
        name: title,
        city: _this._queryopts.bustation.city,
        latlon: latlon
    }, KPOInfo);
    markerOpts.infowin.cmdata = {
        poi: poiInfo
    };
    markerOpts.group = _this.flag() + "_station1";
    return (new KMarker(latlon, markerOpts));
};
/**
 * @param data
 *            {Object}
 *
 */
KBusearch.prototype._busStationDataHandler = function(data){
    var _this = this;
    if (!data || !data.r || data.r.length == 0) {
        _this.d_null = true;
        return;
    }
    _this._busStationMsgBox.hide();
    //获取站点名称
    var stationNames = [];
    for (var index = 0; index < data.r.length; index++) {
        stationNames.push(data.r[index].n);
    }
    //更新html
	//added by zy,如果只有一条相近信息，则隐藏其他相近路线div
	if (data && data.r) {
		if(data.r.length > 1) var headHtml = '<div class="' + this.options().theme + '_bs_stip"><span>其他相似站点：</span><a href="javascript:void(0);">' + stationNames.join('</a><a href="javascript:void(0);">') + '</a></div>';
		else var headHtml = '<div style="display:none" class="' + this.options().theme + '_bs_stip"><span>其他相似站点：</span><a href="javascript:void(0);">' + stationNames.join('</a><a href="javascript:void(0);">') + '</a></div>';
	}
    this._busStationDom.empty().html(headHtml);
    var $contentDiv = $("<div/>").addClass(this.cssClassName.SSRD).appendTo(this._busStationDom);
    var $stationContentDiv = $("<div/>").addClass(this.cssClassName.SI).appendTo($contentDiv);
    var $headDiv = this._busStationDom.children("div").eq(0);
    //为头部的线路连接绑定事件
    var $headLinks = $headDiv.find("a");
    $headLinks.bind("click", function(event){
        event.preventDefault();
        if ($(this).hasClass(_this.cssClassName.DL)) {
            return;
        }
        //KMap.clear(_this.flag() + "_station1");
        _this._clearAllOverlay("all");
        $(this).addClass(_this.cssClassName.DL).siblings().removeClass(_this.cssClassName.DL);
        //
        var index = $headLinks.index($(this));
        _this._currentItem = {
            "index": index,
            "data": data.r[index]
        };
        //更新html
        $stationContentDiv.empty().html(data.r[index].h + data.f);
        var tagAs = $stationContentDiv.find("li>a");
        tagAs.each(function(index){//更新stationContentDiv, 绑定事件
            var html = $(this).html();
            //html = html.toLowerCase();
            var fullName = html.substring(0, html.toLowerCase().indexOf("<span"));
            html = _this._deleteForSMS(html).replace("-", "→");
            $(this).empty().html(html).data("fullname", fullName);
        });
        tagAs.bind("click", function(){//打开线路详情
            var $aLine = $(this);
            if ($aLine.data("linedata")) {
                _this._bustationDataToLine($aLine.data("linedata"), data.c);
                return;
            }
            var keyword = $(this).data("fullname");
            var lineUrlHash = new KUrlHash();
            var wh = _this._getMapWH();
            lineUrlHash.setKey("w", wh.w + "");
            lineUrlHash.setKey("h", wh.h + "");
            //lineUrlHash.setKey("ss", "true");
            lineUrlHash.setKey("c", data.c);
            lineUrlHash.setKey("t", "bsr");
            lineUrlHash.setKey("rn", keyword);
            //lineUrlHash.setKey("o", reData.r[0].o);
            var lineUrlHead = _this.options().stationurl;
            var questionMark = lineUrlHead.indexOf("?");
            if (questionMark > -1) {
                lineUrlHead = lineUrlHead.substring(0, questionMark + 1);
            } else {
                lineUrlHead = lineUrlHead + "?";
            }
          
            $.ajax({
            	
                type: "GET",
                url: (lineUrlHead + lineUrlHash.toString()),
                success: function(reData){
                    if (!reData || !reData.r) {
                        KTools.showMsg("响应结果为空或期望属性不存在");
                        return;
                    }
                    _this._bustationDataToLine(reData, data.c);
                    $aLine.data("linedata", reData);
                },
                error: function(){
                    KTools.showMsg("网络异常导致查询失败，请稍后再试");
                },
                dataType: "json"
            });
        }).find("span").bind("click", function(event){
            event.stopPropagation();
            window.open($(this).attr("url"));
        });
        //
        var urlHead = data.b;
        var name = $stationContentDiv.find("h3").text();
        var $dts = $stationContentDiv.find("dl>dt");
        //
        var mouseOverHandler = function($dtOrMarker, is$dt){
            var $dt, marker, index, toScroll = false;
            if (is$dt === true) {
                $dt = $dtOrMarker;
                index = $dts.index($dt);
                marker = $dt.data("marker");
            } else {
                marker = this;
                index = marker._relateDtIndex;
                $dt = $dts.eq(index);
                toScroll = true;
            }
            if (!$dt || !marker) {
                return;
            }
            $dts.each(function(curIndex){
                var ss = _this.cssClassName.SS;
                if (curIndex === index) {
                    $dt.addClass(ss);
                    marker.setIconClass(KConfig.get("mk_s_snh", {
                        a: index + 1
                    }));
                    marker.hilite();
                } else {
                    if ($(this).hasClass(ss)) {
                        $(this).removeClass(ss);
                        var curMarker = $(this).data("marker");
                        if (curMarker) {
                            curMarker.setIconClass(KConfig.get("mk_s_snn", {
                                a: curIndex + 1
                            }));
                        }
                    }
                }
            });
            //
            toScroll && KTools.scrollIntoView($dt.get(0), $dt.parent().parent().parent().parent().get(0), "normal");
        };
        //增加marker
        var latlons = [];
        $dts.each(function(dtIndex){
            var marker = _this._createBustationMarker($(this).attr("lat"), dtIndex, urlHead, data.r[index].z, name);
            marker._relateDtIndex = dtIndex;
            KMap.addMarker(marker);
            latlons.push(marker.latlon());
            KEvent.bind(marker, "mouseover", mouseOverHandler);
            $(this).data("marker", marker);
        });
        // 为dt绑定事件
        $dts.bind("mouseover", function(){
            mouseOverHandler($(this), true);
        }).bind("click", function(){
            var marker = $(this).data("marker");
            if (marker) {
                KMap.closeInfoWindow();
                KMap.setCenter(marker.latlon());
                KMap.openInfoWindow(marker);
            }
        });
        KMap.fitzoom(latlons);
        //
        var liNames = [];
        $stationContentDiv.find("ul>li").each(function(){
            var txt = $(this).text();
            var index = txt.indexOf("(");
            if (index > -1) {
                txt = txt.substring(0, index);
            }
            liNames.push(txt);
        });
        //添加网易车险入口（已删除）
//        var wyBstDom = ''
//        $stationContentDiv.find("ul>li").last().after(wyBstDom);
        
        _this._description = _this._currentItem.data.mv || (name + "途经线路" + liNames.length + "条:" + liNames.join(",")); // ;
        _this._sendkey = _this._currentItem.data.mk || '';

        //为"免费短信"绑定事件
        $stationContentDiv.find("a[mfg='ssms']").eq(0).click(function(){
            _this.send(KSendType.sms, KSendType.sms);
        });
        //为"发送邮件"绑定事件
        $stationContentDiv.find("a[mfg='smail']").eq(0).click(function(){
            _this.send(KSendType.email, KSendType.email);
        });
        //为"复制"绑定事件
        $stationContentDiv.find("a[mfg='scp']").eq(0).click(function(){
        });
        //为"打印"绑定事件
        $stationContentDiv.find("a[mfg='sprt']").eq(0).click(function(){
            _this.print();
        });
        //为"纠错"绑定事件
        $stationContentDiv.find("a[mfg='serr']").eq(0).click(function(){//站点纠错

            var fbinfo = KTools.copyOptions({}, KFeedbackInfo);
            fbinfo.type = KFeedbackType.ROUTE_ERROR;
            fbinfo.notes = name;
            fbinfo.url = location.href + "&n=" + _this.selectedResult();
            var krinfo = KTools.copyOptions({}, KRouteInfo);
            krinfo.name = name;
            krinfo.type = KRouteType.BUS;
            krinfo.queryopts = KTools.copyOptions({}, _this._queryopts);
            krinfo.resultnum = _this._currentItem.index;
            KEvent.trigger(_this, "feedback", _this, fbinfo, krinfo);
        });
        //
        //为内容区域设置高度
        _this.layout();
        var headHeight = $headDiv.outerHeight(true);
        var extraHeight = $contentDiv.outerHeight(true) - $contentDiv.innerHeight();
        var contentHeight = _this._busStationDom.innerHeight() - headHeight - extraHeight;
        if(data.r.length<2){
        	contentHeight = contentHeight+26 ;
        }
        $contentDiv.css("height", contentHeight + "px");
    });
    //延时是为了让$headDiv渲染出来，使得布局时可以争取计算高度
    window.setTimeout(function(){
        $headLinks.eq(0).trigger("click");
    }, 0);
};
/**
 *
 */
KBusearch.prototype._bustationDataToLine = function(lineData, city){
    var _this = this;
    var group = _this.flag() + "_station2";
    KMap.clear(group);
    var latlon = lineData.r[0].m.a, level = parseInt(lineData.r[0].m.b, 10);
    KMap.setCenter(latlon, level);
    //
    var lineOpts = KConfig.get("ln_lo_bst");
    lineOpts.group = group;
    lineOpts.overlap = !KTools.isIE6;
    line = KLine.fromEncoded(lineData.r[0].p, lineData.r[0].l, lineOpts);
    KMap.addLine(line);
    //
    var sMarker = _this._createSoeMarkerForStation(lineData.r[0], city, "s");
    var eMarker = _this._createSoeMarkerForStation(lineData.r[0], city, "e");
    KMap.addMarkers([sMarker, eMarker], false);
    //
    KMap.setCenter(lineData.r[0].m.a, parseInt(lineData.r[0].m.b, 10));
};
/**
 * 创建起始点标准
 *
 * @param itemData
 *            {Object} 后台返回的数据
 * @param soe
 *            {String} "s" or "e"
 * @returns {KMarker}
 */
KBusearch.prototype._createSoeMarkerForStation = function(itemData, city, soe){
    var _this = this;
    var name = (soe === "s") ? itemData.fs : itemData.ls;
    // 获取marker图标
    var markerOpts = KConfig.get("mk_mo_sdt", {
        n: name,
        t: soe
    });
    // group
    markerOpts.group = _this.flag() + "_station2";
    // InfoWindow中的"查看途经的公交车"链接
    var hUrl = (soe === "s") ? itemData.fn : itemData.ln;
    var urlHead = itemData.b;
    if (hUrl && urlHead) {
        markerOpts.infowin = KConfig.get("iw_iwo_st", {
            h: urlHead + hUrl,
            cd: "none",
            fs: "none",
            nb: "none"
        });
    }
    // tittle
    markerOpts.infowin.title = name;
    // commonData
    var latlon = (soe === "s") ? itemData.fl : itemData.ll;
    markerOpts.infowin.cmdata = {
        poi: KTools.copyOptions({
            type: KQueryType.busearch,
            name: name,
            city: city,
            latlon: latlon
        }, KPOInfo)
    };
    // snapText
    if (markerOpts.label) {
        markerOpts.label.snapText = name;
    }
    //
    return new KMarker(latlon, markerOpts);
};
/**
 * 根据起点、终点名称设置收藏标题。
 *
 * @param origName
 *            起点名称
 * @param destName
 *            终点名称
 */
KBusearch.prototype._setFavoriteTitle = function(origName, destName){
    var _pref = "从" + origName + "到" + destName;
    this._favoriteTitle = _pref + " – 图吧公交 – 图吧:地图导航生活";
};
/**
 * 绑定公交换乘结果列表中的碳足迹、收藏、打印、发送按钮。
 *
 * @param item
 *            {KAccordion}需处理的数据对应的手风琴组件的选项。
 */
KBusearch.prototype._busCo2Click = function(item){
    var c = item.contentDom.children("div");
    var _this = this;
    var _busCo2Href = $(c).find("a[mfg='bsc']").eq(0);
    //（网易车险删除）
//    var _wycxdom = ''
    var _wycxFlag = c.eq(0).find("div").eq(1).find("a[mfg='wycx']").eq(0).length;
//    if(_wycxFlag == 0 ){
//    	c.eq(0).find("div").eq(1).append(_wycxdom);
//    }
	//为"免费短信"绑定事件
    $("a[mfg='bsms']", c).eq(0).click(function(){
        _this.send(KSendType.sms, KSendType.sms);
    });
    //为"发送邮件"绑定事件
    $("a[mfg='bmail']", c).eq(0).click(function(){
        _this.send(KSendType.email, KSendType.email);
    });
    //为“复制”绑定事件
    $("a[mfg='bcp']", c).eq(0).click(function(){
        //_this.send();
    });
    //为“打印”绑定事件
    $("a[mfg='bprt']", c).eq(0).click(function(){
        _this.print();
    });
    //修改公交客户端广告文字
    $("a[mfg='bads']", c).eq(0).text("公交客户端");
    //为“纠错”绑定事件
    $("a[mfg='berr']", c).eq(0).click(function(){//线路纠错

        var fbinfo = KTools.copyOptions({}, KFeedbackInfo);
        fbinfo.type = KFeedbackType.ROUTE_ERROR;
        fbinfo.url = location.href + "&n=" + _this.selectedResult();
        var krinfo = KTools.copyOptions({}, KRouteInfo);
        var notText = $(item.tabDom).find("strong>span").text();
        krinfo.name = $.trim($(item.tabDom).text().replace(notText, ""));
        krinfo.type = KRouteType.BUS;
        krinfo.queryopts = KTools.copyOptions({}, _this._queryopts);
        krinfo.resultnum = item.index;
        KEvent.trigger(_this, "feedback", _this, fbinfo, krinfo);
    });
    var _busCo2Content = $(">span", _busCo2Href);
    
    //隐藏碳足迹<--20121210 添加免费领取网易保险广告时，隐藏碳足迹-->
    _busCo2Href.hide();
    
    
    _busCo2Href.click(function(){
        if (!_this._busCo2ShowDom.is(":visible")) {
            _this._updateCo2ShowDom(item);
            _this._busCo2ShowDom.show();
            _this._msgId = KTools.showMsg(_this._busCo2ShowDom.get(0), {
                closedcbk: function(){
                    _this._busCo2ShowDom.hide();
                },
                node: _busCo2Content.get(0),
                cbmargin: 0,
                buboptions: {
                    offsetx: 113
                }
            });
        } else {
            _this._busCo2ShowDom.hide();
            KTools.hideMsg(_this._msgId);
            _this._msgId = undefined;
        }
    });
};
/**
 *
 * @param item
 *            {KTabItem}
 * @returns
 */
KBusearch.prototype._busLineDataHandler = function(reData, city){
    var _this = this;
    this._clearAllOverlay("busline");
    // update html
    var $divKids = _this._busLineDom.children("div");
    var $contentDiv = $divKids.eq(1);
    if (!$contentDiv.length) {
        $contentDiv = $("<div/>").addClass(_this.cssClassName.LSRD).appendTo(_this._busLineDom);
    }
    // $contentDiv.addClass(_this.cssClassName.LI);
    var extra = $contentDiv.outerHeight(true) - $contentDiv.innerHeight();
    var height = _this._busLineDom.innerHeight() - $divKids.eq(0).outerHeight(true) - extra;
    //added by zwq 如果没有相似线路，调整高度
    if(_this._bLineLength&&!KTools.isIE6){
    	height = height + 25;
    	_this._bLineLength = null;
    }
    if (KTools.isIE6) {//看页面效果，根据页面调整的
        height = height - 5;
    }
    $contentDiv.height(height + "px").empty().html("<div class='" + _this.cssClassName.LI + "'>" + reData.r[0].h + "</div>");
    // update map -> line
    var lineOpts = KConfig.get("ln_lo_bsl");
    lineOpts.group = _this.flag() + "_line";
    lineOpts.overlap = !KTools.isIE6;
    var line = KLine.fromEncoded(reData.r[0].p, reData.r[0].l, lineOpts);
    if (line) {
        KMap.addLine(line);
    }
    // update map -> markers
    var pointerMarkers = [];
    var soeMarkers = [];
    var $tagAs = $contentDiv.find("li>a");
    var len = $tagAs.length;
    $tagAs.each(function(index){
        var marker = _this._createMarkerForBusLine($(this), index, len, reData.r[0].b, reData.r[0].t);
        KMap.addMarker(marker);
        var isSoe = (index === 0 || index === len - 1);
        isSoe && marker.hilite();
        (isSoe ? soeMarkers : pointerMarkers).push(marker);
        $(this).data("marker", marker).data("isSoe", isSoe);
    });
    //设置地图中心点
    if (reData.r[0].m && reData.r[0].m.a && reData.r[0].m.b) {
        var level = parseInt(reData.r[0].m.b, 10);
        KMap.setCenter(reData.r[0].m.a, isNaN(level) ? 8 : level);
    }
    //为dom上的途径点绑定事件
    var $checkBox = $contentDiv.find("input:checkbox");
    $tagAs.bind("click", function(){
        var marker = $(this).data("marker");
        var latlon = $(this).attr("ll");
        if (marker && latlon) {
            KMap.closeInfoWindow();
            KMap.setCenter(latlon);
            KMap.openInfoWindow(marker);
        }
    }).hover(function(){
        var marker = $(this).data("marker");
        var isSoe = $(this).data("isSoe");
        if (!marker) {
            return;
        }
        // 不是起始点
        if (!isSoe && $checkBox.is(":checked") !== true && typeof marker.setOptions === "function") {
            marker.setOptions({
                hoverLabel: false
            });
        }
        marker.hilite();
    }, function(){
        var marker = $(this).data("marker");
        var isSoe = $(this).data("isSoe");
        if (!marker) {
            return;
        }
        // 不是起始点
        if (!isSoe && $checkBox.is(":checked") !== true && typeof marker.setOptions === "function") {
            marker.setOptions({
                hoverLabel: true
            });
        }
        //KMap.closeInfoWindow();
    });
    //为$checkBox绑定事件
    $checkBox.bind("click", function(){
        if ($(this).is(":checked")) {
            $.each(pointerMarkers, function(index, marker){
                marker && marker.setOptions && marker.setOptions({
                    hoverLabel: false
                });
            });
        } else {
            $.each(pointerMarkers, function(index, marker){
                marker && marker.setOptions && marker.setOptions({
                    hoverLabel: true
                });
            });
            $.each(soeMarkers, function(index, marker){
                marker && marker.hilite && marker.hilite();
            });
        }
    });
    //为"返程"按钮绑定事件
    var $reLink = $contentDiv.children("div:eq(0)").children("div:eq(1)").find("a").eq("0");
    $reLink.bind("click", function(event){
        event.preventDefault();
        var lineUrlHash = new KUrlHash();
        var wh = _this._getMapWH();
        lineUrlHash.setKey("w", wh.w + "");
        lineUrlHash.setKey("h", wh.h + "");
        lineUrlHash.setKey("ss", "true");
        lineUrlHash.setKey("c", city);
        lineUrlHash.setKey("t", "bsr");
        lineUrlHash.setKey("rn", reData.r[0].rn);
        lineUrlHash.setKey("o", reData.r[0].o);
        var lineUrlHead = _this.options().lineurl;
        var qMark = lineUrlHead.indexOf("?");
        lineUrlHead = qMark > -1 ? lineUrlHead.substring(0, qMark + 1) : lineUrlHead + "?";
        
        $.ajax({
            type: "GET",
            url: (lineUrlHead + lineUrlHash.toString()),
            success: function(reData){
                if (!reData || !reData.r) {
                    return KTools.showMsg("响应结果为空或期望属性不存在");
                }
                _this._currentItem.data = reData;
                _this._busLineDataHandler(reData, city);
            },
            error: function(){
                KTools.showMsg("网络异常导致查询失败，请稍后再试");
            },
            dataType: "json"
        });
    });
    //
    var description = [$contentDiv.find("h3").text(), "(" + $contentDiv.find("h4").text() + ")"];
    var feedBackName = description.join("");
    $contentDiv.children("div:eq(0)").children("div:eq(3)").find("p").each(function(){
        description.push($(this).text());
    });
    _this._description = reData.r[0].mv || description.join("");
    _this._sendkey = reData.r[0].mk || '';

    //添加网易车险入口（已删除）
//    var wyBlDom = ''
//    $contentDiv.children("div:eq(0)").children("div:eq(3)").find("p").last().after(wyBlDom)
    
    //为"免费短信"绑定事件
    $contentDiv.find("a[mfg='lsms']").bind("click", function(){
        _this.send(KSendType.sms, KSendType.sms);
    });
    //为"发送邮件"绑定事件
    $contentDiv.find("a[mfg='lmail']").bind("click", function(){
        _this.send(KSendType.email, KSendType.email);
    });
    //为"复制"绑定事件
    $contentDiv.find("a[mfg='lcp']").bind("click", function(){
    });
    //为"打印"绑定事件
    $contentDiv.find("a[mfg='lprt']").bind("click", function(){
        _this.print();
    });
    //为"纠错"绑定事件
    $contentDiv.find("a[mfg='lerr']").bind("click", function(){//线路纠错

        var fbinfo = KTools.copyOptions({}, KFeedbackInfo);
        fbinfo.type = KFeedbackType.ROUTE_ERROR;
        fbinfo.url = location.href + "&n=" + _this.selectedResult();
        var krinfo = KTools.copyOptions({}, KRouteInfo);
        krinfo.name = feedBackName;
        krinfo.type = KRouteType.BUS;
        krinfo.queryopts = KTools.copyOptions({}, _this._queryopts);
        krinfo.resultnum = _this._currentItem.index;
        KEvent.trigger(_this, "feedback", _this, fbinfo, krinfo);
    });
};
/**
 *
 * @param item
 *            {KTabItem}
 * @returns
 */
KBusearch.prototype._bindCheckBox = function(item){
    var _this = this;
    if (!item || !item.data) {
        return;
    }
    // 返回值r[0].s包含所有的途经点
    var data = item.data.r[0].s;
    var group = _this.flag() + "_search_s_all";
    var clickFunc = function(){
        !$(this).attr("checked") ? KMap.clear(group) : $.each(data, function(index){
            var newMarker = _this._createPointMarker(data[index], group, item.data.r[0].b, true);
            // _bs_resultNum， 返回的JSON对应的结果的array index
            newMarker._bs_resultNum = index;
            KMap.addMarker(newMarker);
        });
    };
    $("input:checkbox", item.contentDom).attr("checked", false).unbind("click").bind("click", clickFunc);
    
};
/**
 *
 * @param markerData
 *            {Object}属性有 n, t, h, l
 * @param urlHead
 *            {String}
 * @returns
 */
KBusearch.prototype._createPointMarker = function(markerData, group, urlHead, isWalk){
    var _this = this;
    // 图标
    var name = (isWalk === true) ? markerData.n : markerData.sn;
    var latlon = (isWalk === true) ? markerData.l : markerData.sl;
    var markerOpts = KConfig.get("mk_mo_s", {
        n: name,
        t: markerData.t
    });
    var fValue = markerData.f;
    // group
    markerOpts.group = group;
    // "查看途经的公交车"链接
    markerOpts.infowin = KConfig.get("iw_iwo_st", {
        "v": "none",
        "nb": "none",
        "fs": "none",
        "err": "none",
        "c": (fValue === "上车" && markerData.r) ? ("乘坐：" + markerData.r) : "",
        "d": (fValue === "上车" && markerData.combo) ? ("可选线路：" + markerData.combo.split(",").join(" ")) : ""
    });
    markerOpts.infowin.cmarea = false;
    markerOpts.hoverLabel = true;
    // snapText
    if (name) {
        markerOpts.label && (markerOpts.label.snapText = name);
    } else {
        markerOpts.label = null;
    }
    //
    var title = name;
    if (fValue === "上车" || fValue === "下车") {
        title = "在<a href='" + (urlHead + (markerData.h || markerData.szn)) + "' target='_blank' class='" +
        this._POI_TITLE_CLASSNAME +
        "'>" +
        name +
        "</a>" +
        fValue;
    }
    // title
    markerOpts.infowin.title = title;
    // commonData
    markerOpts.infowin.cmdata = {
        poi: KTools.copyOptions({
            type: KQueryType.busearch,
            name: name,
            city: _this._queryopts.city,
            latlon: latlon
        }, KPOInfo)
    };
    return new KMarker(latlon, markerOpts);
};
KBusearch.prototype._parseToLines = function(arrPts, arrLevels, optFlag, group){
    var lines = [];
    if (!(arrPts instanceof Array) || !(arrLevels instanceof Array) || !arrPts.length || !arrLevels.length) {
        return lines;
    }
    var len = arrPts.length, lineOpts;
    for (var index = 0; index < len; index++) {
        lineOpts = KConfig.get(optFlag);
        lineOpts.group = group;
        lineOpts.overlap = !KTools.isIE6;
        lines.push(KLine.fromEncoded(arrPts[index], arrLevels[index], lineOpts));
    }
    return lines;
};
/**
 * @param item
 *            {KTabs} KAccordion对象的KTabs对象
 */
KBusearch.prototype._bindLi = function(item){
    var _this = this;
    if (!item || !item.data || !item.data.r[0] || !item.data.r[0].j) {
        return;
    }
    //
    var itemUrlHash = KUrlHash.parseByHash($(item.tabDom).data("urlhash"));
    //var parentTabsIndex = $(item.tabDom).data("parent_tabs_index");
    var firtItemData = item.data.r[0];
    var lis = $("li", item.contentDom.children("ol"));
    var lisLen = lis.length;
    var lisData = firtItemData.j;
    var memId = firtItemData.mid;
    var flag = this.flag();
    //展开详情事件绑定
    var btns = $(".mwp_ns_sdc",lis);
    btns.unbind().bind("click", function(e){
    	e.preventDefault();
        e.stopPropagation();
        var walkspan = $(this).next("div");
        walkspan.is(':visible') ? walkspan.hide() : walkspan.show();
        $(this).removeClass().addClass(walkspan.is(':visible') ? 'mwp_ns_sdo' : 'mwp_ns_sdc').html('<span></span>' + (walkspan.is(':visible') ? '简要描述' : '展开详情'));;
    });
    //
    var ps = $(">p", item.contentDom);
    var hiLi = _this.options().theme + KBusearch.conf.CLASSNAME.LH;
    var hiP = _this.options().theme + KBusearch.conf.CLASSNAME.TH;
    var mouseEnterHandler = function(){
        ps.removeClass(hiP);
        lis.removeClass(hiLi);
        $(this).addClass($(this).is("li") ? hiLi : hiP);
    }
    ps.unbind("mouseenter").bind("mouseenter", mouseEnterHandler);
    lis.unbind("mouseenter").bind("mouseenter", mouseEnterHandler);
    //
    var openMarkerWin = function(event){
        event.stopPropagation();
        // 如果对应的是marker
        var marker = $(this).parent().data("marker");
        if (marker) {
            marker.hilite();
            KMap.closeInfoWindow();
            KMap.setCenter(marker.latlon(), 15);
            KMap.openInfoWindow(marker);
        }
    }
    //
    this._clearAllOverlay("trans");
    lis.each(function(index, li){
        var liData = lisData[index], lines;
        
        var subwayToOthers,subwayGateLine
        // liData.t:"s"=>地铁站点 , "b"=>公交站点
        if (!liData.szn) {
            // 步行线段
            if (liData.pt && liData.lv) {
				//added by zy,修改地铁口到地铁站的线路样式
//				var subwayToOthersArray = liData.pt.slice(0,1);;
//				var subwayGateLineArray = liData.pt.slice(1);
                lines = _this._parseToLines(liData.pt, liData.lv, "ln_lo_wk", flag + "_search_l_w");
//                subwayToOthers = _this._parseToLines(subwayToOthersArray, liData.lv, "ln_lo_wk", flag + "_search_l_w");
//                subwayGateLine = _this._parseToLines(subwayGateLineArray, liData.lv, "ln_lo_subWalk", flag + "_search_l_w");
                if (lines.length) {
                   KMap.addLines(lines, false);
//                   KMap.addLines(subwayToOthers, false);
//                   KMap.addLines(subwayGateLine, false);
                   $(this).data("walkline", lines);
                }
            }
            // 一直显示的 点 marker
            if (liData.l && liData.n && index < lisLen - 1) {
                var marker = _this._createPointMarker(liData, flag + "_search_s", firtItemData.b, true);
                KMap.addMarker(marker);
                $(this).data("marker", marker);
            }
        } else {
            // 乘车线段
            if (liData.lv && liData.pt) {
                lines = _this._parseToLines(liData.pt, liData.lv, "ln_lo_bss", flag + "_search_l");
                if (lines.length) {
                    KMap.addLines(lines, false);
                    $(this).data("line", lines);
                }
            }
            // 一直显示的 点 marker
            if (liData.sl && liData.sn && index < lisLen - 1) {
                var marker = _this._createPointMarker(liData, flag + "_search_s", firtItemData.b, false);
                KMap.addMarker(marker);
                $(this).data("marker", marker);
            }
        }
    }).unbind("click").bind("click", function(){
        // 如果对应的是线段
        var lines = $(this).data("line") || $(this).data("walkline");
        if (lines && lines.length) {
            var begin = lines[0].latlons("begin");
            var end = lines[lines.length - 1].latlons("end");
            KMap.fitzoom([begin, end]);
            // 高亮该li对应的KLine对象
//            lines[0].hilite();
//            _this._hLine = lines[0];
            
            
            $.each(lines, function(lineIndex, line){
            	line.hilite();
            });
            /*$.each(lines, function(lineIndex, line){
			//added by zy,仅高亮除地铁口到地铁之外的线段
            	//lineIndex == 0 && line.hilite();
            });*/
            // 兄弟节点对应的KLine对象恢复正常
            $(this).siblings().each(function(){
                var sibLines = $(this).data("line") || $(this).data("walkline");
                if (sibLines && sibLines.length) {
                    $.each(sibLines, function(sibIndex, sibLine){
                    	sibLine.resume();
                    });
                }
            });
        }
        //}).unbind("mouseover").bind("mouseover", function() {// 鼠标滑过，高亮li
        //	var className = _this.options().theme + KBusearch.conf.CLASSNAME.LH;
        //	$(this).addClass(className).siblings("." + className).removeClass(className);
    }).find("a[class!=mwp_ns_sdc]").unbind("click").bind("click", function(event){// 为公交线路绑定事件
        // 取消冒泡
        event.stopPropagation();
        event.preventDefault();
        //
        var index = lis.index($(this).parent());
        var liData = lisData[index];
        var cs = liData.cs || "";
        var comRoute = $(this).text();
        var defaultRoute = liData.n;
        var urlHash = itemUrlHash.clone();
//        var comboRoute = [];
//        lis.each(function(liIndex){
//            if ($(this).data("line") && $(this).find("a").length) {
//                if (index === liIndex) {
//                    comboRoute.push((lisData[index].cs || "") + "," + comRoute);
//                } else {
//                    comboRoute.push((lisData[liIndex].cs || "") + "," + $(this).find("strong").text());
//                }
//            }
//        });
        var crValue = _this._getMergeLines(lisData,index,comRoute).join(':');
//        comboRoute.join("|");
        _this._queryopts.preferredBusline = crValue;
        urlHash.setKey("cr", crValue);
        urlHash.setKey("mid", memId);
        urlHash.setKey("t", "btc");
		//added by zy,为btc类型的ajax请求增加nm字段
        var _lisearch = false;
        if(_this._busTabTitle==="subway"&&_this._busTab1Checked===true){
        	_lisearch = true;
		}
		if(_this._busTabTitle==="nonstop"&&_this._busTab2Checked===true){
			_lisearch = true;
		}
		if(_this._busTabTitle==="shortWalk"&&_this._busTab3Checked===true){
			_lisearch = true;
		}
		 
        _this._nm && urlHash.setKey("nm", _lisearch);
        var urlHead = _this.options().busurl;
        var qMark = urlHead.indexOf("?");
        urlHead = qMark > -1 ? urlHead.substring(0, qMark + 1) : urlHead + "?";
       
        $.ajax({
            type: "GET",
            url: urlHead + urlHash.toString(),
            success: function(data){
                if (!data || !data.r) {
                    return KTools.showMsg("响应结果为空或期望属性不存在");
                }
                item.data = data;
                var html = /^<h3[^\>]+>(.+)<\/h3><div[^\>]+>(.+)<\/div>$/i.exec(data.r[0].h);
                $(item.tabDom).empty().html(html[1]);
                $(item.contentDom).empty().html(html[2]);
                //
                if (data.r[0] && data.r[0].j) {
                    $(item.tabDom).data("hoverlines", _this._getHoverLines(data.r[0].j));
                }
                // _this.busSearchAc[parentTabsIndex].select(item.index, true);
                _this._bindLi.apply(_this, [item, false]);
                _this._bindCheckBox.apply(_this, [item, false]);
                _this._busCo2Click(item);
                _this._currentItem && (_this._currentItem.crValue = crValue);
            },
            error: function(){
                KTools.showMsg("网络异常导致查询失败，请稍后再试");
            },
            dataType: "json"
        });
    }).end().find("em").unbind("click").bind("click", openMarkerWin);
    // 更新描述
    _this._description = firtItemData.mv || _this._simplizeText($(item.contentDom).find("ol").text());
    _this._sendkey = firtItemData.mk || '';
    // 设置地图缩放级别
    firtItemData.m && KMap.setCenter(firtItemData.m.a, parseInt(firtItemData.m.b));
    // 创建起始点标准 ### added by zwq 如果拖拽，则不重新创建起终点
    _this.sMarker = _this._createSoeMarkerForTrans(item.data, "s");
	_this.eMarker = _this._createSoeMarkerForTrans(item.data, "e");
//	_updateLabelContent(_this.sMarker,);
//	_updateLabelContent(_this.eMarker,);
    //备份换乘起终点数据，用于拖拽无结果时，保留起终点 added by zwq 
    _this.markerBak = item.data;
    //added by zwq 设置起终点可拖拽
    _this.sMarker.setEditable(true);
    _this.eMarker.setEditable(true);
    _this.dragmarkerFlag = true;
    KEvent.bind(_this.sMarker, "dragend", _this._draged, {marker: _this.sMarker, type : 's'}, this);
    KEvent.bind(_this.eMarker, "dragend", _this._draged, {marker: _this.eMarker, type : 'e'}, this);
    KMap.addMarkers([_this.sMarker, _this.eMarker], false);
    lis.eq(lisLen - 1).data("marker", _this.eMarker);
    ps.eq(0).data("marker", _this.sMarker).end().eq(1).data("marker", _this.eMarker).end().find("strong").unbind("click").bind("click", openMarkerWin)
    _this.sMarker.hilite();
    _this.eMarker.hilite();
};

/*
*获取合并线路名称
 */
KBusearch.prototype._getMergeLines = function(liData,index,mergeName){
    var lines = [];
    if(liData instanceof Array && liData.length > 0){
        for(var i = 0; i < liData.length; i++){
            if(liData[i].f == '下车' && index != i){
                lines.push(liData[i].n);
            }else if(liData[i].f == '下车'){
                lines.push(mergeName);
            }
        }
    }
    return lines;
};


/**
 * 叠加物开始拖拽
 */
KBusearch.prototype._dragStart = function(e, o, p)
{
};
/**
 * 拖拽叠加物
 * @param e KEventInfo
 * @param o KOverlay KMarker或KLine
 * @param p MPoint
 */
KBusearch.prototype._draging = function(e, o, p)
{
};
/**
 * 叠加物拖拽完成
 * @param e KEventInfo
 * @param o KOverlay KMarker或KLine
 * @param p MPoint
 */
KBusearch.prototype._draged = function(e, o, p)
{
	var _this = this;
	var startBySelf = "自定义起点";
	var endBySelf = "自定义终点";

    _this.dragmarkerFlag = false;
    if(!_this._queryopts){
        _this._queryopts = _this.optsBak;
    }
    var type = e.data.type;

    KMap.getGeo(p.getPid(),function(city,name){
        if(type == "s"){
            if(_this._queryopts && _this._queryopts.busorig){
                _this._queryopts.busorig.city = city || '';
                _this._queryopts.busorig.name = name || startBySelf;
                _this._queryopts.busorig.latlon = p.getPid();
            }
            _this._updateLabelContent(e.data.marker,name || startBySelf);
        }
        if(type == "e"){
            if(_this._queryopts && _this._queryopts.busdest){
                _this._queryopts.busdest.city = city || '';
                _this._queryopts.busdest.name = name || endBySelf;
                _this._queryopts.busdest.latlon = p.getPid();
            }
            _this._updateLabelContent(e.data.marker,name || endBySelf);
        }
        //校正标注点
        e.data.marker.setLatlon(p.getPid());
        if(_this._queryopts && _this._queryopts.busorig && _this._queryopts.busdest){

            if (_this._queryopts.busorig.latlon && _this._queryopts.busdest.latlon) {
                _this._clearBusSearchAc();
                _this.query(_this._queryopts);
            } else {
                _this._queryByStationList(_this._queryopts);
            }

        }

    });
};

KBusearch.prototype._updateLabelContent = function(marker, content) {
    if(!marker || !marker.labelDom) return ;
    var labelDom = marker.labelDom();
	if (!content) {
		content = "自定义";
	}
	$("[mfg='lbl']", labelDom).eq(0).html(content);
};

/**
 * 右键添加起终点
 * @param type
 * @param latlon
 * @param name
 * @param city
 * @uncrunch
 */
KBusearch.prototype.menuaddMarker = function(type,latlon,name,city){
	var _this = this ;
	var labelvalue = name || "自定义地点";
	var markerOpts = KConfig.get("mk_mo_sdt", {
	    n: name,
	    t: type
	});
	markerOpts.group = this.flag()+"_search_s";
	markerOpts.label.label = '<div class="mwpg_std_sl" mfg="lbl">'+labelvalue+'</div>';
	if(type === "s"){
        //bussResultKBusearch._objKStationList._queryopts
        if(!$(_this._transferDom).is(":hidden")){
            _this._objKStationList._dragEndMarker({data:'s'},null,new MPoint(latlon),name);
        }else{
            _this.sMarker && KMap.removeMarker(_this.sMarker);
            _this.sMarker = new KMarker(latlon, markerOpts);
            _this.sMarker.city = city;
            _this.sMarker.name = name;
            KMap.addMarker(_this.sMarker,false,false);
            _this.sMarker.setEditable(true);
            KEvent.bind(_this.sMarker, "dragend", _this._draged, {marker: _this.sMarker, type : 's'}, _this);
        }
	}else{
        if(!$(_this._transferDom).is(":hidden")){
            _this._objKStationList._dragEndMarker({data:'e'},null,new MPoint(latlon),name);
        }else{
            _this.eMarker && KMap.removeMarker(_this.eMarker);
            _this.eMarker = new KMarker(latlon, markerOpts);
            _this.eMarker.city = city;
            _this.eMarker.name = name;
            KMap.addMarker(_this.eMarker,false,false);
            _this.eMarker.setEditable(true);
            KEvent.bind(_this.eMarker, "dragend", _this._draged, {marker: _this.eMarker, type : 'e'}, _this);
        }
	}
	if(_this.sMarker && _this.sMarker._opts && _this.eMarker && _this.eMarker._opts){
		if(type === "s"){
			_this.menuMarkerType = "start"
		}else{
			_this.menuMarkerType = "end"
		}
		_this.menuQuery(_this.sMarker,_this.eMarker,city);

	}
};

/**
 * 右键菜单起终点查询函数
 *
 * @param spoint
 *            KMarker对象 起点marker
 * @param epoint
 *            KMarker对象 终点marker
 * @returns
 */
KBusearch.prototype.menuQuery = function(spoint,epoint,menuCity)
{
	var _this = this;
	var poiname = "自定义地点";
	var opts = KTools.copyOptions({}, KQueryOptions);
	opts.type = "bs" ;
	opts.busorig = {
        latlon: spoint._point.pid,
        pid: spoint._point.pid,
        name:spoint.name || (_this._queryopts && _this._queryopts.busorig && _this._queryopts.busorig.name) || poiname,
        city:spoint.city || (_this._queryopts && _this._queryopts.busorig && _this._queryopts.busorig.city) || menuCity
    };
	opts.busdest = {
        latlon: epoint._point.pid,
        pid: epoint._point.pid,
        name:epoint.name || (_this._queryopts && _this._queryopts.busdest && _this._queryopts.busdest.name) || poiname,
        city:epoint.city || (_this._queryopts && _this._queryopts.busdest && _this._queryopts.busdest.city) || menuCity
    };
    _this.menuMarkerType = undefined;
	opts.tt = (_this._queryopts && _this._queryopts.tt) || "subway";
	opts.city = menuCity;
    _this._clearBusSearchAc();
	_this.query(opts);
};

/**
/**
 * 创建起始点标准
 *
 * @param data
 *            {Object} 后台返回的数据
 * @param startOrEnd
 *            {String} "s" or "e"
 * @returns {KMarker}
 */


KBusearch.prototype._createSoeMarkerForTrans = function(data, startOrEnd){
    var name = (startOrEnd === "s") ? data.on : data.dn;

    // 获取marker图标
    var markerOpts = KConfig.get("mk_mo_sdt", {
        n: name,
        t: startOrEnd
    });
    // group
    markerOpts.group = this.flag() + "_search_s";
    // InfoWindow中的"查看途经的公交车"链接
    var hcode = (startOrEnd === "s") ? data.oh : data.dh, isStation = false, sArr = data.r[0].s;
    if (sArr && sArr.length) {
        for (var iSArr = 0; iSArr < sArr.length; iSArr++) {
            if (sArr[iSArr].h && sArr[iSArr].h === hcode) {
                isStation = true;
                break;
            }
        }
    }
    var poInfo = this._queryopts[startOrEnd === "s" ? "busorig" : "busdest"];
    if (!isStation && poInfo.type) {
        var t = parseInt(poInfo.type, 10);
        if (t === KPOIType.BUSTATION) {
            isStation = true;
        }
    }
    var poi = (startOrEnd === "s") ? data.oPoi : data.dPoi;
    if (!poi.c) {
        markerOpts.infowin = KConfig.get("iw_iwo_st", {
            v: "none",
            cd: "none",
            fs: "none"
        });
        markerOpts.infowin.title = name;
    } else {
        markerOpts.infowin = KConfig.get("iw_iwo_st", isStation ? {
            h: poi.c,
            cd: "none",
            fs: "none"
        } : {
            v: "none",
            fs: "none",
            c: poi.b,
            d: poi.a
        });
        markerOpts.infowin.title = isStation ? name : ("<a href='" + poi.c + "' target='_blank' class='" +
        this._POI_TITLE_CLASSNAME +
        "'>" +
        name +
        "</a>");
    }
    var latlon = (startOrEnd === "s") ? data.ol : data.dl;
    markerOpts.infowin.cmarea = false;
    markerOpts.infowin.cmdata = {
        poi: KTools.copyOptions({
            type: KQueryType.busearch,
            name: name,
            city: this._queryopts.city,
            latlon: latlon
        }, KPOInfo)
    };
    // snapText
    markerOpts.label && (markerOpts.label.snapText = name);
    //
    return new KMarker(latlon, markerOpts);
};
KBusearch.prototype._layoutDom = function(){
    var parseToNumber = function(str){
        var num = parseInt(str, 10);
        return isNaN(num) ? 0 : (num < 0 ? 0 : num);
    };
    var aheight = parseToNumber(this._$dom.css("height")) || this._$dom.height();
    var awidth = parseToNumber(this._$dom.css("width")) || this._$dom.width();
    this._transferDom.css({
        height: aheight - parseToNumber(this._transferDom.css("padding-top"))
    });
    this._busSearchDom.height(aheight - parseToNumber(this._busSearchDom.css("padding-top")));
    this._busLineDom.height(aheight - parseToNumber(this._busLineDom.css("padding-top")));
    this._busLineDom.width(awidth);
    this._busStationDom.height(aheight - parseToNumber(this._busStationDom.css("padding-top")));
    this._busStationDom.width(awidth);
    this._objKStationList && this._objKStationList.layout();
    this._objKStdTabs && this._objKStdTabs.layout();
    this._layoutLineOrStation(this._busLineDom);
    this._layoutLineOrStation(this._busStationDom);
};
/**
 * 获取地图宽高
 *
 * @return {Object}
 */
KBusearch.prototype._getMapWH = function(){
    var mapc = $(this.options().mapcontainer);
    return {
        w: mapc.width(),
        h: mapc.height()
    };
};
KBusearch.prototype._updateCo2ShowDom = function(item){
    var date_e = item.data.r[0]["e"];
    this._busCo2ShowDistance.empty().html(item.data.r[0]["d"]);
    $(">strong", $(">li[mfg='bscebk']", this._busCo2ShowUI)).empty().html(date_e.a);
    $(">strong", $(">li[mfg='bscmoto']", this._busCo2ShowUI)).empty().html(date_e.b);
    $(">strong", $(">li[mfg='bsctram']", this._busCo2ShowUI)).empty().html(date_e.c);
    $(">strong", $(">li[mfg='bscbus']", this._busCo2ShowUI)).empty().html(date_e.d);
    $(">strong", $(">li[mfg='bscsbw']", this._busCo2ShowUI)).empty().html(date_e.e);
    $(">strong", $(">li[mfg='bsccar']", this._busCo2ShowUI)).empty().html(date_e.f);
    $(">strong", $(">li[mfg='bsccoach']", this._busCo2ShowUI)).empty().html(date_e.g);
    $(">strong", $(">li[mfg='bsctrain']", this._busCo2ShowUI)).empty().html(date_e.h);
    $(">strong", $(">li[mfg='bscplain']", this._busCo2ShowUI)).empty().html(date_e.i);
};
KBusearch.prototype._getKNamedValue = function(name, kvalue){
    var knamedvalue = KTools.copyOptions({}, KNamedValue);
    knamedvalue.name = name;
    knamedvalue.kvalue = kvalue;
    return knamedvalue;
};
/**
 * 为地图绑定事件，使得地图的标注上的信息窗口的“发送”和“纠错”按钮可以使用
 */
KBusearch.prototype._bindMapEvents = function(){
    var _this = this;
    if (!_this._opts || !(KMap.isInitialized(_this._opts.mapcontainer) || KMap.isInitialized())) {
        window.setTimeout(function(){
            KBusearch.prototype._bindMapEvents.apply(_this);
        }, 200);
        return;
    }
    KEvent.bind(KMap, "afteropeninfowindow", function(event, map, theMarker){
        if (theMarker instanceof KMarker && typeof theMarker.group === "function") {
            if (theMarker._bs_bind_iwin_open === true) {
                return;
            }
            var infoDom = theMarker.iwcDom();
            if (!infoDom) {
                return;
            }
            var curGroup = theMarker.group();
            var curFlag = _this.flag();
            var groups = ["_station2", "_station1", "_search_s", "_search_l", "_search_l_w", "_search_s_all", "_line", "_line_s", "_line_e"];
            var isOwern = false;
            $.each(groups, function(i, val){
                if (curGroup === curFlag + val) {
                    // return false 让$.each结束
                    return !(isOwern = true);
                }
            });
            if (!isOwern) {
                return;
            }
            var latlon = "", name = "";
            try {
                latlon = theMarker.latlon().getPid();
            } catch (ex) {
            }
            try {
                name = $(theMarker.labelDom()).text();
            } catch (ex) {
            }
            if (latlon === "" && name === "") {
                return;
            }
            var fbinfo = {
                "type": KFeedbackType.POI_ERROR,
                "poinfo": {
                    "name": name,
                    "latlon": latlon
                },
                "url": location.href + "&n=" + _this.selectedResult()
            };
            // 纠错
            if (fbinfo) {
                $("a[mfg='err']", infoDom).eq(0).bind("click", function(){
                    KEvent.trigger(_this, "feedback", _this, fbinfo);
                });
            }
            // 发送
            var $fs = $("a[mfg='fs']", infoDom).eq(0);
            if ($fs && $fs.length) {
                $fs.hide();
            }
            //
            //附近搜和热搜
            var $nbTopDiv = $("div[mfg='nb']", infoDom).eq(0);
            if ($nbTopDiv && $nbTopDiv.length) {
                var opts = KTools.copyOptions({
                    type: KQueryType.localsearch
                }, KQueryOptions);
                var poi;
                try {
                    poi = theMarker.options().infowin.cmdata.poi;
                } catch (ex) {
                    //$nbTopDiv.hide();
                    return;
                }
                opts.center = $.extend(true, {}, poi);
                opts.ls = KTools.copyOptions({
                    city: opts.center.city
                }, KPOInfo);
                var handler = function(evt){
                    evt.preventDefault();
                    var keyword = "";
                    if (evt.type === "submit") {// the form

                        var $input = $(this).find(":text");
                        keyword = $.trim($input.val());
                        if (!keyword) {//if no keyword, show message

                            KTools.showMsg('<div style="padding:5px 10px 5px 10px;font-size:13px;">请输入查询内容！</div>', {
                                title: "提示",
                                lightbox: true,
                                closedcbk: function(){
                                    $input.focus();
                                },
                                buboptions: {
                                    outside: false,
                                    closebtn: true
                                }
                            });
                            return;
                        }
                    } else {// the <a/> element

                        keyword = $(this).text();
                    }
                    var queryOpts = $.extend(true, {}, opts);
                    queryOpts.ls.name = keyword;
                    KEvent.trigger(_this, "nbsearch", _this, queryOpts);
                };
                //
                $("form", $nbTopDiv).unbind("submit").bind("submit", handler);
                $("a", $nbTopDiv).unbind("click").bind("click", handler);
            }
            //
            theMarker._bs_bind_iwin_open = true;
        }
    });
};
/**
 *
 * @param str
 *            String类型
 * @return String类型
 */
KBusearch.prototype._simplizeText = function(str){
    return (typeof str !== "string") ? "" : (str.replace("乘坐", "坐").replace(/乘坐/g, "换").replace(/在([^(下车)]+)下车/g, "到$1"));
};
/**
 * 去除短信中的上行、下行、内环、外环
 *
 * @param str
 *            String类型
 * @return String类型
 */
KBusearch.prototype._deleteForSMS = function(str){
//    return typeof str !== "string" ? "" : str.replace(/上行|下行|内环|外环/g, "");
	return str;
};
/**
 * 设置KStationListOptions对象的autoselect 选项
 *
 * @param {Boolean}
 *            isAuto
 */
KBusearch.prototype._setAutoSelectOpts = function(isAuto){
    isAuto = !!isAuto;
    if (this._opts.slopts) {
        this._opts.slopts.autoselect = isAuto;
        this._objKStationList.setOptions(this._opts.slopts);
    }
};
/**
 * 清除所有的叠加物
 * @param type {String} “trans”, "busline","bustation", "all"
 * @returns
 */
KBusearch.prototype._clearAllOverlay = function(type){
	if(this._hLine){
		this._hLine.resume();
		this._hLine = undefined;
	}
    var flag = this.flag();
    var types = {
        trans: "_search_s,_search_l,_search_l_w,_search_s_all,_hoverlines",
        busline: "_line,_line_s,_line_e",
        bustation: "_station1,_station2"
    };
    types.all = types.trans + "," + types.busline + "," + types.bustation;
    var groups = (types[type || "all"] || types.all).split(",");
    $.each(groups, function(index, value){
        KMap.clear(flag + value);
    });
};
/**
 *
 * @param theme
 * @returns
 */
KBusearch.prototype._initCssName = function(theme){
    var initCss = {};
    for (var i in KBusearch.conf.CLASSNAME) {
        initCss[i] = theme + KBusearch.conf.CLASSNAME[i];
    }
    return initCss;
};
KBusearch.prototype._layoutLineOrStation = function($dom){
    if (!$dom || !$dom.children) {
        return;
    }
    var $kids = $dom.children("div");
    var $head = $kids.eq(0), $cont = $kids.eq(1);
    if (!$head || !$head.length) {
        return;
    }
    var domH = parseInt($dom.css("height"), 10);
    //var domW = $dom.width();
    var headH = $head.outerHeight(true);
    if ($cont && $cont.length) {
        var cExtraH = $cont.outerHeight(true) - $cont.height();
        //var cExtraW = $cont.outerWidth(true) - $cont.width();
        var contH = domH - headH;
        //var contW = domW - cExtraW;
        $cont.css({
            height: contH//,
            //width : contW
        });
    }
};
/***
 *
 * @param arrJ {Array}
 * @returns {Object}
 */
KBusearch.prototype._getHoverLines = function(arrJ){
    var lines = {
        pt: [],
        lv: []
    };
    for (var i = 0; i < arrJ.length; i++) {
        if (arrJ[i] && arrJ[i].pt && arrJ[i].lv) {
            lines.pt = lines.pt.concat(arrJ[i].pt);
            lines.lv = lines.lv.concat(arrJ[i].lv);
        }
    }
    return lines;
};

/**
 * added by zwq
 * 判断切换标签时，不乘地铁复选框状态
 * */
KBusearch.prototype._checkBusCboxChecked = function(){
	_this = this;
	if(_this._busTabTitle==="subway"&&_this._busTab1Checked===false){
		if(_this._innerFlag){
			$("#sopt").attr('checked',false);
		}else{
			$('[name=sopt]:checkbox').attr('checked',false);
			_this._innerFlag = true;
		}
	}else if(_this._busTabTitle==="subway"&&_this._busTab1Checked===true){
		//如果应该选中状态的"不乘地铁"复选框因为切换后removeAtrr掉了，当查询结果是内部特殊调用查询时，重新设置为选中状态
		if(!$("#sopt").attr('checked')&&_this._innerFlag){
			$("#sopt").attr('checked',true);
		}
		_this._innerFlag = true;
	}
	if(_this._busTabTitle==="nonstop"&&_this._busTab2Checked===false){
		if(_this._innerFlag){
			$("#sopt").attr('checked',false);
		}else{
			$('[name=sopt]:checkbox').attr('checked',false);
			_this._innerFlag = true;
		}
	}else if(_this._busTabTitle==="nonstop"&&_this._busTab2Checked===true){
		if(!$("#sopt").attr('checked')&&_this._innerFlag){
			$("#sopt").attr('checked',true);
		}
		_this._innerFlag = true;
	}
	if(_this._busTabTitle==="shortWalk"&&_this._busTab3Checked===false){
		if(_this._innerFlag){
			$("#sopt").attr('checked',false);
		}else{
			$('[name=sopt]:checkbox').attr('checked',false);
			_this._innerFlag = true;
		}
	}else if(_this._busTabTitle==="shortWalk"&&_this._busTab3Checked===true){
		if(!$("#sopt").attr('checked')&&_this._innerFlag){
			$("#sopt").attr('checked',true);
		}
		_this._innerFlag = true;
	}
};

/**
 * 获取当前线路起终点
 * @param type
 * @returns {{s: *, e: *}}
 * @uncrunch
 */
KBusearch.prototype.getStartAndEnd = function(type){

    var t = {};
    if(this.sMarker){
        t.s = this.sMarker;
    }else if(this._queryopts && this._queryopts.busorig){
        t.s = this._queryopts.busorig;
    }else{
        t.s = null;
    }
    if(this.eMarker){
        t.e = this.eMarker;
    }else if(this._queryopts && this._queryopts.busdest){
        t.e = this._queryopts.busdest;
    }else{
        t.e = null;
    }
    return jQuery.extend(true, {}, t);
};

/**
 * 删除起终点
 * @uncrunch
 */
KBusearch.prototype.removeStartAndEnd = function (){
    if(this.sMarker){
        this.sMarker = null;
    }
    if(this._queryopts && this._queryopts.busorig){
        this._queryopts.busorig = null;
    }
    if(this.eMarker){
        this.eMarker = null;
    }
    if(this._queryopts && this._queryopts.busdest){
        this._queryopts.busdest = null;
    }
};

/*
 城市选择组件。
 作者：xionggq  fuyg zhangwq
 版本：2.0.0
 创建时间：2010-02-22
 最后修改时间：2010-02-30 15:14
 ============================================
 『修改历史』
 bug# 100707051826
 修正finalize方法没有销毁DOM的bug
 opt#1011171805
 完善对theme的支持
 opt#1011261147
完善对“更多城市”弹出窗口位置的支持
opt#1011301027
增加对onehot选项的支持(如果有多个KCityList实例时，城市列表不同时显示)
opt#1012011324
修改后台数据请求出错的文字提示
bug#1012021557
修正在IE7下更多城市窗口位置计算错误的问题
opt# 1012301047
根据组件的新结构(将热门城市结构移至组件容器之后，解决IE下domready之前移动热门城市到body下引出的页面错误)更新组件初始化方法
//bug#1012301514
修正快速切换更多城市选择卡时出现的界面错误问题
 */
var KCityList = KClass.create("KCityList", KCity);

KCityList.conf =
{
    CLASSNAME :
    {
        //组件顶级容器（div）样式。
        CYL : "_cyl"
        //	文本输入框容器（span）样式。
        ,I : "_cyl_i"
        //热门城市中的“更多城市”元素样式。
        ,M : "_cyl_m"
        //热门城市中的“关闭”按钮样式.
        ,CLE : "_cyl_cle"
        //热门城市列表（div）组件全局样式
        ,H : "_cyl_g_h"
    }
};

/**
 * 构造方法
 * @param container
 * @param opts
 */
KCityList.initialize = function(container, opts)
{
	
    var _this = this;
    //added by fuyg, 用于保存城市相关信息
    _this._cityTempInfo={};
    //
    this._morecityFlag = false // 判断重新选择城市标识
    this._showClick = false;//判断点击由城市列表发起
    this._opts = KTools.copyOptions(opts, KCityListOptions);
    this._oldTheme = this._opts.theme;
    this.setTheme(this.options().theme);
    this._city = this._opts.defcity;
    this._suggestList = null;
    this._hotCityTabs = null;
    this._suggestArray = [];
    this._initTab = false;
    this._domAll = $(container);
    this._dom = this._domAll.get(0);
    this._inputDom = $(">span input", this._domAll);
//    this._inputDom.focus(function()
//    {
//        $(this).select();
//    });
    this._inputDom.val(this._city.name);
    this._inputDom.keydown(function(e)
    {
        if (e.keyCode == 13)
        {
            _this._inputDom.blur();
            _this._inputDom.focus();
        }
    });
    this._aDom = $(">span a", this._domAll);
    this._aDom.attr("cl_mc", "xgq");
    $(">div", this._domAll).eq(0).hide();
    //opt# 1012301047 fix begin
    //delete by zhangsq
    /*var appendToBody = function($dom){
    	if($.browser.msie){
        	$(function(){
        		$dom.appendTo($("body"));
        	});
        }else{
        	$dom.appendTo($("body"));
        }
    };*/
    //delete by zhangsq
    /*this._hotCityDom = $(">div", this._domAll).eq(0).addClass(
			this.theme() + KCityList.conf.CLASSNAME.H).hide();*/
    //add by zhangsq
    this._hotCityDom = $(this.options().hcnode ? this.options().hcnode : $('>div', this._domAll).eq(0)).addClass(this.theme() + KCityList.conf.CLASSNAME.H).hide();
    
    (!this.options().hcnode) && this._hotCityDom.appendTo($('body'));
    //delete by zhangsq
    //appendToBody(this._hotCityDom);
    //opt# 1012301047 fix end
    //
    this._tabCloseDom = $(">span", _this._hotCityDom);
    this._moreCityDom = $(">a", this._tabCloseDom.prev());
    this._suggestDom = this._hotCityDom.next();

    this._cityliDom = null;
    this._moreCityliDom = null;

    this._updateThemeOptions();
    this._updateSugOptions();
    this._updateTabsOptions();
    this._updateCloseOptions();

    // 为了防止事件冒泡
    this._hotCityDom.click(function(e) {
        e.stopPropagation();
    });
    this._inputDom.focus(function(e) {
        e.stopPropagation();
        $(this).select();
        //_this._hotCityDom.hide();
        _this._closeTabs();
    });
    
    //added by zwq 如果是新城市列表构建新的组件dom
    this._cityListType = this._opts.newcitylist;
    if(_this._cityListType){
    	var newListOutLine = "<div class='mwp_cyl_mc_n' style='min-width: 400px;min-height: 300px; width:424px;height:341px; z-index: 10000;'><h6>热门城市</h6><a class='mwp_cyl_mcc_n' href='javascript:void(0);' title='关闭'>关闭</a>";
    	var hotcity = '<div class="mwp_cyl_new" > <strong>'+
		   '<a href="javascript:void(0);" l="GTAURRVUJBGBJ" z="1" ib="0" en="beijing">全国</a>'+
		   '<a href="javascript:void(0);" l="HETCUFWVVHUEE" z="8" ib="1" en="beijing">北京市</a>'+
		   '<a href="javascript:void(0);" l="IJSRVJXVIWCHC" z="8" ib="1" en="shanghai">上海市</a>'+
		   '<a href="javascript:void(0);" l="IJJDGAXUABUIW" z="8" ib="1" en="guangzhou">广州市</a>'+
		   '<a href="javascript:void(0);" l="ISSGSEVUAHSIH" z="9" ib="1" en="shenzhen">深圳市</a>'+
		   '<a href="javascript:void(0);" l="HAAUTSVTUJCFE" z="8" ib="1" en="chengdu">成都市</a>'+
		   '<a href="javascript:void(0);" l="HFISFCXTWJRFB" z="8" ib="1" en="chongqing">重庆市</a>'+
		   '<a href="javascript:void(0);" l="HBWVHUXURIDUI" z="8" ib="1" en="xian">西安市</a>'+
		   '<a href="javascript:void(0);" l="IEGEITWVGCVHF" z="8" ib="1" en="nanjing">南京市</a>'+
		   '</strong></div>';
    	var newListInLine = "<input type='text' value='请输入正确的城市名称'><button type='button'>确定</button><span>未找到，请输入正确的城市名</span><dl><dt><ul><li class='mwp_cyl_mcs_n'><a href='javascript:void(0);'>按拼音排序</a></li><li><a href='javascript:void(0);'>按省份排序</a></li></ul></dt><dd></dd><dd class='mwp_cyl_district_n'></dd></dl></div>";
    	this._moreCityListDom = $(newListOutLine + hotcity + newListInLine).hide();
    }else{
    	this._moreCityListDom = $("<div class='mwp_cyl_mc' style='min-width: 400px;min-height: 300px; width:50\%;height:50\%; z-index: 10000;'><dl><dt><ul><li class='mwp_cyl_mcs'><a href='javascript:void(0);'>按拼音排序</a></li><li><a href='javascript:void(0);'>按省份排序</a></li></ul><a class='mwp_cyl_mcc' href='javascript:void(0);' title='关闭'>关闭</a></dt><dd></dd><dd class='mwp_cyl_district'></dd></dl></div>").hide();
    }
    this.options().mcnode ? this._moreCityListDom.appendTo(this.options().mcnode) : this._moreCityListDom.appendTo($('body'));
    //delete by zhangsq
    //appendToBody(this._moreCityListDom);
    this._moreCityDlDom = $(">dl>dd", this._moreCityListDom);
    var liDoms = $(">dl>dt>ul>li>a", this._moreCityListDom);
    liDoms.eq(0).click(function() {
        _this._changeMoreCity(0);
    });
    liDoms.eq(1).click(function() {
        _this._changeMoreCity(1);
    });
    
    if(_this._cityListType){
    	$(">a", this._moreCityListDom).eq(0).click(function() {
    		_this._hideMoreCity();
    	});
    
    }else{
    	$(">dl>dt>a", this._moreCityListDom).click(function() {
            _this._hideMoreCity();
        });
    }
    this._moreCityListDom.click(function(e) {
        e.stopPropagation();
    });
    this._moreCityDom.click(function(e) {
        e.stopPropagation();
         _this.showMoreCity();
    });
    this._inputDom.change(function() {
        if ($(this).val().replace(/(^\s*)|(\s*$)/g, '') == "")
        {
            $(this).val(_this._city.name);
        }
    });
    //
    $(window).bind("resize",function(){
    	if(_this._cityListType){
    		var $list = _this._moreCityListDom;
    		var divheight = $list.outerHeight();
			var divwidth = $list.outerWidth();
			var position = _this._inputDom.offset();
			var inh = _this._inputDom.outerHeight();
			var inw = _this._inputDom.outerWidth();
			var t = position.top + inh +4;
			var l = position.left - 5 ;
			$list.css( {
				top : t > 0 ? t : 0,
				left : l > 0 ? l : 0
			});
			if($.browser.msie){
				$list.css( {
					height:divheight,
					width:455,
					top : t > 0 ? t : 0,
					left : l > 0 ? l : 0
				});
			}
    	}
    	if(!_this._cityListType){
    		_this.layout();
    	}
    });
};
KCityList.prototype._changeMoreCity = function(num)
{
	
    var _this = this;
    //edit by zwq 切换新旧城市列表样式
    var mcityCss = "mwp_cyl_mcs";
    if(_this._opts.newcitylist){
    	mcityCss = "mwp_cyl_mcs_n";
    }
    var morecity = _this._opts.mburl;
    if (morecity && (morecity.indexOf("?") != -1))
    {
        var indexnum = morecity.indexOf("?");
        morecity = morecity.substring(0, indexnum);
    }
    var liDoms = $(">dl>dt>ul>li", this._moreCityListDom);
    if (num == 0)
    {
        this._moreCityDlDom.eq(0).show();
        liDoms.eq(0).addClass(mcityCss);
        liDoms.eq(1).removeClass(mcityCss);
        _this._moreCityDlDom.eq(1).hide();
         _this._layoutMoreCity();
    }
    else
    {

        liDoms.eq(1).addClass(mcityCss);
        this._moreCityDlDom.eq(0).hide();
        liDoms.eq(0).removeClass(mcityCss);
        if (this._moreCityDlDom.eq(1).html() == "")
        {
           var mcurl = "?t=cl&s=html";
           if(_this._cityListType){
        	   mcurl += "&hh=true"
           }
           this._moreCityDlDom.eq(1).empty().load(morecity + mcurl, function() {
                _this._addClickMoreEvent($(this));
               //bug#1012301514 fix begin
               //edit by zhangsq
                if(liDoms.eq(1).attr('class') == mcityCss)
                {
                    _this._moreCityDlDom.eq(1).show();
                   _this._layoutMoreCity();
                }
               //bug#1012301514 fix end
            });
        }
        else
        {
           _this._moreCityDlDom.eq(1).show();
           this._layoutMoreCity();
        }
    }
};
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KCityList.prototype.version = function()
{
    return "2.0.0";
};
/**
 * 释放当前对象的所有资源
 * @uncrunch
 */
KCityList.prototype.finalize = function()
{
    var _this = this;
    var sugIndex=0;
    for (sugIndex = 0; sugIndex < _this._suggestArray.length; sugIndex++)
    {
    	if(_this._suggestArray[sugIndex]&&_this._suggestArray[sugIndex].finalize)
    	{
    		_this._suggestArray[sugIndex].finalize();
    	}
    }
    _this._suggestArray = null;
    this._city = null;
    if (this._cityliDom != null)
    {
        this._cityliDom.each(function() {
            KEvent.clear($(this));
        });
    }
    if (this._moreCityliDom != null)
    {
        this._moreCityliDom.each(function() {
            KEvent.clear($(this));
        });
    }
    KEvent.clear(_this._tabCloseDom);
    KEvent.clear(_this._moreCityDom);
    KEvent.clear(_this._aDom);
    this._moreCityListDom.remove();
    this._moreCityliDom = null;
    this._cityliDom = null;
    if(this._hotCityTabs){this._hotCityTabs.finalize();}
    if(this._hotCityDom){this._hotCityDom.remove();}
    KCity.prototype.finalize.call(this);

};
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KCityList.prototype.cnname = function()
{
    return "城市选择组件";
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KCityList.prototype.dependent = function()
{
    return [ KCity, KCityListOptions, KClass, KEvent, KMsgBox, KObject, KSize, KStdSuggest, KStdTabs, KTools, KUrlHash, jQuery ];
};

/**
 * 设置城市组件的配置选项
 * @param opt
 */
KCityList.prototype._setOptions = function(opt)
{
    var _this = this;
    //this._oldTheme = this._opts;
    var diffOpts = KTools.compareOptions(this._opts, opt);
    $.each(diffOpts, function(name, value) {
        switch (name)
        {
            case 'theme':
                _this._setOption({'theme':value});
                _this._updateThemeOptions();
                break;
            case 'sugurl':
                _this._setOption({'sugurl':value});
                _this._updateSugOptions();
                break;
            case 'citylist':
                _this._setOption({'citylist':value});
                _this._updateTabsOptions();
                break;
            case  'mburl':
                _this._setOption({'mburl':value});
                _this._updateTabsOptions();
                break;
            case  'suglimit':
                _this._setOption({'suglimit':value});
                _this._updateSugOptions();
                break;
            case 'closebtn':
                _this._setOption({'closebtn':value});
                _this._updateCloseOptions();
                break;
            case "autocomplete":
            	_this._setOption({'autocomplete':value});
            	_this._updateKStdSuggestOpts({'autocomplete':value});
            	break;
            default:
        }
    });
};
/**
 * 设置城市组件的样式方案
 * @uncrunch
 */
KCityList.prototype.setTheme = function(scheme)
{
    var newTheme = {'theme': scheme};
    this._setOption(newTheme);
};
/**
 * 设置城市组件的配置选项
 * @param opt
 * @uncrunch
 */
KCityList.prototype.setOptions = function(opt)
{
    this._setOptions(opt);
};
/**
 * 通知城市组件重新布局
 * @uncrunch
 */
KCityList.prototype.layout = function()
{
	var _this=this;
    var h = jQuery(window).height();
    var w = jQuery(window).width();
    var $dom = this._moreCityListDom;
    var t = (h - divheight) / 2 > 0 ? (h - divheight) / 2 : 0;
	var l = (w - divwidth) / 2 > 0 ? (w - divwidth) / 2 : 0;
	var divheight = $dom.outerHeight();
	var divwidth = $dom.outerWidth();
	var extraH = $dom.outerHeight() - divheight;
	var extraW = $dom.outerWidth() - divwidth;
	extraH = extraH > 0 ? extraH : 0;
	extraW = extraW > 0 ? extraW : 0;
	if($.browser.msie){
		divheight = h * 0.5;
		divwidth = w * 0.5;
		if(parseInt($.browser.version)<7){
			divheight = divheight < 300 ? 300 : divheight;
			divwidth = divwidth < 400 ? 400 : divwidth;
		}
	}
	var t = (h - divheight - extraH)/2;
	var l = (w - divwidth -extraW)/2;
	//
	//
    $dom.css({top:t>0 ? t: 0,left:l>0 ? l:0});
    if($.browser.msie){
    	$dom.css({height:divheight,width:divwidth});
    }
     if (!this._setTabPosition())
    {
        var inputBound = KTools.getBounds(this._inputDom.get(0));
        var inputHeight = inputBound.max.y - inputBound.min.y;
        var spandom = $(">span", this._domAll);
        var inputBound = KTools.getBounds(spandom.get(0));
        this._hotCityDom.css({top : inputHeight+inputBound.min.y,left : inputBound.min.x});
    }
    this._layoutMoreCity();
};
KCityList.prototype._layoutMoreCity = function() {
	if (this._moreCityListDom && this._moreCityListDom.is(":visible")) {
		if (this._moreCityDlDom.eq(0).is(":visible")) {
			var ulDom = $("ul[mfg='lc']", this._moreCityListDom).eq(0);
			ulDom.css( {
				height : "0px"
			});
			var ulpadding = ulDom.outerHeight(true) - ulDom.height();
			var height = KTools.getBounds(this._moreCityListDom[0], {
				border : true,
				padding : true
			}).max.y - KTools.getBounds(ulDom.get(0), {
				margin : false
			}).min.y - ulpadding;
			ulDom.css( {
				height : height
			});
		} else if (this._moreCityDlDom.eq(1).is(":visible")) {
			var ulDom = $("ul[mfg='lc']", this._moreCityListDom).eq(1);
			ulDom.css( {
				height : "0px"
			});
			var ulpadding = ulDom.outerHeight(true) - ulDom.height();
			var height = KTools.getBounds(this._moreCityListDom[0], {
				border : true,
				padding : true
			}).max.y - KTools.getBounds(ulDom.get(0), {
				margin : false
			}).min.y - ulpadding;
			ulDom.css( {
				height : height
			});
		}
	}
};
/**
 * 返回城市组件 Dom 对象
 * 
 * @uncrunch
 */
KCityList.prototype.dom = function()
{
    return this._domAll;
};
/**
 * 更新城市组件的 options项
 * @param opt
 */
/**
 * 设置当前城市信息
 * @param cityInfo
 * @uncrunch
 */
KCityList.prototype.setCity = function(cityinfo)
{
	if(!cityinfo || !cityinfo.name){
		return;
	}
	var _this=this;
    var oldCityInfo = this._city;
    var isRequest = false;
    //var props = ["name","ename","latlon","level","province","bus"];
    var props = ["name","latlon"];
    var prop;
    for(var i=0; i<props.length; i++){
    	if(cityinfo[props[i]]==undefined){
    		isRequest =true;
    		break;
    	}
    }
    var laturl = this.options().laturl;
    var hash = new KUrlHash();
    hash.setKey("t", "cn");
    hash.setKey("c", cityinfo.name);
    if (isRequest && laturl) {
    	var questionMark = laturl.indexOf("?");
		if (questionMark > -1) {
			laturl = laturl.substring(0, questionMark);
		}
		$.ajax( {
			url : laturl+"?"+ hash.toString(),
			dataType : "json",
			success : function(data) {
				if(!data || !data.f){
					KTools.showMsg("响应结果为空或期望属性不存在");
					return;
				}
				var info = {
					name : data.a,
					ename : data.c,
					latlon : data.f,
					level : parseInt(data.g),
					bus : data.h === "1" ? true : false
				};
				if (isNaN(info.level) || cityinfo.level) {// 如果参数中有合法的level,使用参数中的level
					var level = parseInt(cityinfo.level);
					if (!isNaN(level)) {
						info.level = level;
					}
				}
				_this._inputDom.val(info.name);
				KEvent.trigger(_this, "citychanged", _this, info, oldCityInfo);
				_this._city = info;
				if (_this._suggestArray && _this._suggestArray.length > 0) {
					_this._suggestArray[0].setData( {
						text : info.name,
						zoom : info.level,
						kvalue : info.latlon,
						bus : info.bus,
						_ename : info.ename
					});
				}
			},
			error : function() {
				KTools.showMsg("网络异常导致查询失败，请稍后再试");
			}
		});
	} else {
		this._inputDom.val(cityinfo.name);
		KEvent.trigger(this, "citychanged", this, cityinfo, oldCityInfo);
		this._city = cityinfo;
		if (this._suggestArray && this._suggestArray.length > 0) {
			this._suggestArray[0].setData( {
				text : cityinfo.name,
				zoom : cityinfo.level,
				kvalue : cityinfo.latlon,
				bus : cityinfo.bus,
				_ename : cityinfo.ename
			});
		}
	}
   

};
/**
 * 城市组件显示/关闭tabs
 */
KCityList.prototype._closeOrShowTabs = function() {
	if(this._cityListType){
		if(this._moreCityListDom.is(":visible")){
			this._hideMoreCity();
		}else{
			this._showClick = true;
			this.showNewCity();
		}
	}else{
		if (this._hotCityDom.is(":visible")) {
			this._closeTabs();
		} else {
			this._showTabs();
			// KEvent.trigger(this,"beforeopenhotcity",this);
		}
	}
};
KCityList.prototype._showTabs = function()
{
    var _this = this;
    if (!this._setTabPosition())
    {
        var inputBound = KTools.getBounds(this._inputDom.get(0));
        var inputHeight = inputBound.max.y - inputBound.min.y;
        var spandom = $(">span", this._domAll);
        var inputBound = KTools.getBounds(spandom.get(0));
        this._hotCityDom.css({top : inputHeight+inputBound.min.y,left : inputBound.min.x});
    }
     if (this._hotCityTabs != null)
    {
       _this._hotCityTabs.select(0);
    }
     if(!this._hotCityDom.is(":visible"))
    {
      this._hotCityDom.show();
      KEvent.trigger(this,"beforeopenhotcity",this);
    } 
};
KCityList.prototype._closeTabs = function()
{
  var _this = this;  
     if (this._hotCityTabs != null)
    {
       _this._hotCityTabs.select(0);
    }
     if(this._hotCityDom.is(":visible"))
    {
        this._hotCityDom.hide();
    }
};
KCityList.prototype._addTabsDom = function()
{
    var _this = this;
    if (!this._initTab)
    {
		this._hotCityTabs = new KStdTabs(this._hotCityDom);
        this._initTab = true;
        KEvent.bind(_this._hotCityTabs, "selected",
                function(eventinfo, widget, oldItem, currentItem)
                {
                    //setTimeout(function(){_this._addClickEvent(currentItem.contentDom);},0);
                }
                );
        KEvent.bind(_this._hotCityTabs, "datashown",
                function(eventinfo, widget, data, container)
                {
                    setTimeout(function(){_this._addClickEvent(container);},0);
                });
       
        //为解决多线程的问题，才用window.setTimeout。
        //window.setTimeout(function(){_this._addClickEvent(_this._hotCityTabs.current().contentDom)},0);
    }
};
/**
 * 更新参数时tabs动态地添加上事件或者移除事件。
 */
KCityList.prototype._updateTabsOptions = function()
{
    var _this = this;
    if (this._opts.citylist || typeof this._opts.citylist == "undefined")
    {	
        this._aDom.unbind("click");
        this._tabCloseDom.unbind("click");
        this._aDom.click(function() {
        	if(!_this._cityListType){
        		_this._addTabsDom();
                _this._closeOrShowTabs();
        	}else{
        		_this._closeOrShowTabs();
        		//_this.showNewCity();
        	}
        });
        this._tabCloseDom.click(function(e) {
            e.stopPropagation();
            _this._closeTabs();
        });
        //}
    }
    else
    {
        this._aDom.unbind("click");
        //this._hotCityTabs = null;

    }
    if (this._opts.mburl && this._opts.mburl != "")
    {
        this._moreCityDom.show();
    }
    else
    {
        this._moreCityDom.hide();
        this._updateThemeOptions();
    }
};
/**
 * 更新参数时suggest动态地添加上事件或者移除事件。
 */
KCityList.prototype._updateSugOptions = function()
{
    var _this = this;
    if (this._opts.sugurl && this._opts.sugurl != "")
    {
        var sugurl = _this._opts.sugurl;
        if (sugurl.indexOf("?") != -1)
        {
            var num = sugurl.indexOf("?");
            sugurl = sugurl.substring(0, num);
        }
        var hash = new KUrlHash();
         hash.setKey("t","cs");
         hash.setKey("s","json");
        sugurl = sugurl + "?"+ hash.toString();
        if (_this._suggestArray.length == 0)
        {
            _this._suggestArray = KStdSuggest.bind(_this._inputDom.get(0), {
				'url' : sugurl,
				minwidth : 200,
				'listlimit' : this._opts.suglimit,
				autorevert : false,
				"autocomplete" : (_this._opts.autocomplete === false ? false : true)
			/*,'node':_this._suggestDom*/});
            _this._suggestArray[0].setData( {
				text : _this._city.name,
				kvalue : {
					"a" : _this._city.latlon,
					"b" : _this._city.level,
					"c" : (_this._city.bus === true) ? "1" : "0",
					"d" : _this._city.ename
				}
			});
            _this._inputDom.val(_this._city.name);//为解决KStdSuggest 把input的值制空的bug，
            if (typeof _this._suggestArray != "undefined" && _this._suggestArray.length > 0)
            {
                KEvent.bind(_this._suggestArray[0], "datachanged", function(eventInfo, widget, suggsetInfo)
                {
                    var oldCityInfo = _this._city;
                    _this._city = {
						"name" : suggsetInfo.text,
						"latlon" : suggsetInfo.kvalue.a,
						"level" : suggsetInfo.kvalue.b,
						"bus" : (suggsetInfo.kvalue.c === "1" ? true : false),
						"ename": suggsetInfo.kvalue.d
					};
                    if (_this._city.name != oldCityInfo.name) {
						KEvent.trigger(_this, "citychanged", _this, _this._city, oldCityInfo);
					}
                });
            }
        }
        else
        {
            _this._suggestArray[0].setOptions({"listlimit": _this._opts.suglimit});
        }
        var inputHeight = this._inputDom.height() + 8;
        _this._suggestDom.css({top : inputHeight});
        //$(">div:last-child",_this._domAll).css({top : inputHeight});
    }
    else
    {
        //this._suggestDom.hide();
        if (_this._suggestArray && _this._suggestArray.length >= 1)
        {
            _this._suggestArray[0].finalize();
        }
        _this._suggestArray = [];
    }
};

/**
 * 更新参数theme时动态修改组件的样式
 */
KCityList.prototype._updateThemeOptions = function()
{
	var old = this._oldTheme, th= this.theme(),  oNames = KCityList.conf.CLASSNAME;
    this._domAll.removeClass(old + oNames.CYL).addClass(th + oNames.CYL).find("span:first").removeClass(old + oNames.I)
			.addClass(th + oNames.I);
	this._moreCityDom.parent().removeClass(old + oNames.M).addClass(th + oNames.M);
	this._tabCloseDom.removeClass(old + oNames.CLE).addClass(th + oNames.CLE);
	this._hotCityDom.removeClass(old + oNames.H).addClass(th + oNames.H);
};

/**
 * 隐藏城市组件的热门城市列表tabs
 */
KCityList.prototype._hideTabs = function()
{
    this._hotCityDom.hide();
};
/**
 * 添加城市点击事件
 * @param clDom
 */
KCityList.prototype._addClickEvent = function(clDom)
{
    var _this = this;
    var liClickFun = function(e)
    {
        e.stopPropagation();
        var cityInfo = {
			"name" : $(this).html(),
			"latlon" : $(this).attr("l"),
			"level" : $(this).attr("z"),
			"ename":$(this).attr("en"),
			"province" : $(this).attr("p"),
			"bus" : ($(this).attr("ib") == "1" ? true : false)
		};
        _this._closeTabs();
        _this.setCity(cityInfo);
        return false;
    };
    this._cityliDom = $(">ul>li a,>li a,>dl>dd a", clDom);
    this._cityliDom.each(function(index) {
		$(this).unbind("click").click(liClickFun);
		// $(this).attr("onclick", "return false;");
		});


};
/**
 * ”更多“弹出层点击事件添加。
 * 
 * @param clDom
 */
KCityList.prototype._addClickMoreEvent = function(clDom,type)
{
	
    var _this = this;
    var liClickFun = function(e)
    {
        e.stopPropagation();
        var cityInfo = {
			"name" : $(this).html(),
			"latlon" : $(this).attr("l"),
			"level" : $(this).attr("z"),
			"ename":$(this).attr("en"),
			"province" : $(this).attr("p"),
			"bus" : ($(this).attr("ib") == "1" ? true : false)
		};
        _this._closeTabs();
        _this._moreCityListDom.hide();
        _this.setCity(cityInfo);
        //opt# 1012301047 fix begin
        //edit by zhangsq
        $(function(){KTools.lightbox({});});
        //opt# 1012301047 fix end
    };
    //新城市列表逻辑 added by zwq 绑定热门城市
    var eventType = type;
    if(eventType){
    	var hotDom = $(">strong>a",clDom);
    	hotDom.each(
            function()
            {
                $(this).unbind("click");
                $(this).click(liClickFun);
            });
    }else{
        this._moreCityliDom = $(">div a,li a", clDom);
        this._moreCityliDom.each(
                function()
                {
                    $(this).unbind("click");
                    $(this).click(liClickFun);
                });
    }
};
/**
 * 更新option选项的参数
 * @param opt
 */
KCityList.prototype._setOption = function(opt)
{
    this._oldTheme = this._opts.theme;
    this._opts = KTools.copyOptions(opt, this._opts);
};
KCityList.prototype._updateCloseOptions = function() {
	var _this = this;
	var clickFun = function(e) {
		var ev = window.event || e;
		var obj = ev.target || ev.srcElement;
		//
		if (_this._aDom) {
			if ($(obj).attr("cl_mc") !== _this._aDom.attr("cl_mc")) {
				// _this._hotCityDom.hide();
				_this._closeTabs();
			} else {
				if (_this.options().onehot) {
					if ($(obj).get(0) !== _this._aDom.get(0)) {
						// _this._hotCityDom.hide();
						_this._closeTabs();
					}
				}
			}
		} else {
		}
	};
	if (_this._opts.closebtn || typeof _this._opts.closebtn == "undefined") {
		KEvent.unbind(jQuery(document), "click", clickFun);
		_this._tabCloseDom.show();
	} else {
		KEvent.bind(jQuery(document), "click", clickFun);
		_this._tabCloseDom.hide();
	}
};
/**
 * 
 * @uncrunch
 */
KCityList.prototype.hideHotCity = function()
{
    //var _this =this;
    //this._hotCityDom.hide();
     this._closeTabs();
};
/**
 * 隐藏更多城市列表。
 * @returns
 */
KCityList.prototype._hideMoreCity = function()
{
    //this._hotCityDom.hide();
     this._hotCityDom.hide();
    $(this.options().mcnode).hide();
    this._moreCityListDom.hide();
    //opt# 1012301047 fix begin
    //edit by zhangsq
    $(function(){KTools.lightbox({});});
    //opt# 1012301047 fix end
};

//
KCityList.prototype._setTabPosition = function()
{
    var spandom = $(">span", this._domAll);
    var inputBound = KTools.getBounds(spandom.get(0));
    var windwoBound = KTools.getBounds(window);
    var tabHeight = this._hotCityDom.outerHeight();
    var tabWidth = this._hotCityDom.outerWidth();
    var range = new KSize(parseInt(tabWidth), parseInt(tabHeight));
    var bounds = KTools.checkSpace(inputBound, range, windwoBound);
    var proArray = ['bottom','top','left','right'];
    var length = proArray.length;
    var positionIndex = 0;
    var tempBound = null;
    for (var i = 0; i < length; i++)
    {
        if (bounds[proArray[i]].usable)
        {
            positionIndex = i;
            tempBound = bounds[proArray[i]].min;
            break;
        }
        /* else
         {
         var  tsrang = bounds[proArray[i]].width * bounds[proArray[i]].height;
         if( srang< tsrang)
         {
         srang = tsrang;
         }
         }*/
    }
    var positionx = 0;
    var positiony = 0;
    if (tempBound != null)
    {
        if (positionIndex == 0 || positionIndex == 1)
        {
            if (inputBound.min.x + tabWidth + 4 > tempBound.max.x)
            {
                positionx = (tempBound.max.x - tabWidth)  - 4;
            }
            else
            {
                positionx =inputBound.min.x;
            }
            if (positionIndex == 0)
            {
                positiony = inputBound.size().height + 4 + inputBound.min.y;
            }
            else
            {
                positiony = 0 - tabHeight - 4 + inputBound.min.y;
            }
        }
        else
        {
            if (inputBound.min.y + tabHeight + 4 > tempBound.max.y)
            {
                positiony = (tempBound.max.y - tabHeight) - 4;
            }
            else
            {
               positiony  =tempBound.max.y;
            }
            if (positionIndex == 3)
            {
                positionx = inputBound.size().width + 4 + inputBound.min.x;
            }
            else
            {
                positionx = 0 - tabWidth - 4 +  inputBound.min.x;
            }
        }
        this._hotCityDom.css({top:positiony,left:positionx});
        return true;
    }
    else
    {
        return false;
    }
};

/**
 * 隐藏更多城市(设置公有方法)
 * @uncrunch
 */
KCityList.prototype.hideMoreCity = KCityList.prototype._hideMoreCity;
/**
 * 显示热门城市
 * @uncrunch
 */
KCityList.prototype.showHotCity = function() {
	var _this = this;
	_this._addTabsDom();
	_this._showTabs();
};
/**
 * 显示更多城市列表
 * @uncrunch
 */
KCityList.prototype.showMoreCity = function() {
	var _this = this;
	_this._closeTabs();
	var $dl = _this._moreCityDlDom;
	var $list = _this._moreCityListDom;
	if(_this._morecityFlag){
		$dl.eq(0).empty();
		//_this._morecityFlag = false;
	}
	if ($dl.eq(0).html() == "") {
		$dl.eq(0).empty().load(_this._opts.mburl, function() {
            //opt# 1012301047 fix begin
            //add by zhangsq
            $dl.eq(0).show();
			$("ul[mfg='lc']", $list).eq(0).css( {
				height : "100px"
			});
            $(_this.options().mcnode).show();
			$list.show();

			var h = $(window).height();
			var w = $(window).width();
			var divheight = $list.outerHeight();
			var divwidth = $list.outerWidth();
			var extraH = $list.outerHeight() - divheight;
			var extraW = $list.outerWidth() - divwidth;
			extraH = extraH > 0 ? extraH : 0;
			extraW = extraW > 0 ? extraW : 0;
			if($.browser.msie){
				divheight = h * 0.5;
				divwidth = w * 0.5;
				if(parseInt($.browser.version)<7){
					divheight = divheight < 300 ? 300 : divheight;
					divwidth = divwidth < 400 ? 400 : divwidth;
				}
			}
			var t = (h - divheight - extraH)/2;
			var l = (w - divwidth -extraW)/2;
			$list.css( {
				top : t > 0 ? t : 0,
				left : l > 0 ? l : 0
			});
			if($.browser.msie){
				$list.css( {
					height:divheight,
					width:divwidth
				});
			}
			_this._addClickMoreEvent($dl.eq(0));
			if(_this._cityListType){
				var newHotDom = $(">div", _this._moreCityListDom);
				_this._addClickMoreEvent(newHotDom,true);
				_this._updateNewCitySugOptions();
			}
            //delete by zhangsq
			/*$dl.eq(0).show();
			$("ul[mfg='lc']", $list).eq(0).css( {
				height : "100px"
			});
            $(_this.options().mcnode).show();
			$list.show();*/
            //edit by zhangsq
            $(function(){KTools.lightbox( {element : $list,visible : true});});
            //opt# 1012301047 fix end
			_this._layoutMoreCity();
			$dl.eq(1).hide();
		});
	} else {
        $(_this.options().mcnode).show();
		$list.show();
		_this._moreCityListDom.show();
		var h = $(window).height();
		var w = $(window).width();
		var divheight = $list.outerHeight();
		var divwidth = $list.outerWidth();
		var extraH = $list.outerHeight() - divheight;
		var extraW = $list.outerWidth() - divwidth;
		extraH = extraH > 0 ? extraH : 0;
		extraW = extraW > 0 ? extraW : 0;
		if($.browser.msie){
			divheight = h * 0.5;
			divwidth = w * 0.5;
			if(parseInt($.browser.version)<7){
				divheight = divheight < 300 ? 300 : divheight;
				divwidth = divwidth < 400 ? 400 : divwidth;
			}
		}
		var t = (h - divheight - extraH)/2;
		var l = (w - divwidth -extraW)/2;
		$list.css( {
			top : t > 0 ? t : 0,
			left : l > 0 ? l : 0
		});
		if($.browser.msie){
			$list.css( {
				height:divheight,
				width:divwidth
			});
		}
		_this._addClickMoreEvent($dl.eq(0));
		if(_this._cityListType){
			var newHotDom = $(">div", _this._moreCityListDom);
			_this._addClickMoreEvent(newHotDom,true);
			_this._updateNewCitySugOptions();
		}
        //opt# 1012301047 fix begin
        //edit by zhangsq
        $(function(){KTools.lightbox( {element : $list,visible : true});});
        //opt# 1012301047 fix end
		_this._changeMoreCity(0);
	}
};


KCityList.prototype._updateKStdSuggestOpts = function(opts) {
	var _this = this;
	if (!_this._suggestArray || !_this._suggestArray[0]) {
		return;
	}
	if (_this._suggestArray[0].setOptions) {
		_this._suggestArray[0].setOptions(opts);
	}
};

/**
 * 显示新城市列表
 * @uncrunch
 */
KCityList.prototype.showNewCity = function() {
	var _this = this;
	_this._closeTabs();
	var $dl = _this._moreCityDlDom;
	var $list = _this._moreCityListDom;
	_this._morecityFlag = true ; //标识用于showMoreCity时，清空$dl.eq(0)
	if ($dl.eq(0).html() == "") {
		$dl.eq(0).empty().load(_this._opts.mburl, function() {
            //opt# 1012301047 fix begin
            //add by zhangsq
            $dl.eq(0).show();
			$("ul[mfg='lc']", $list).eq(0).css( {
				height : "100px"
			});
            $(_this.options().mcnode).show();
			$list.show();
			var divheight = $list.outerHeight();
			var divwidth = $list.outerWidth();
			var position = _this._inputDom.offset();
			var inh = _this._inputDom.outerHeight();
			var inw = _this._inputDom.outerWidth();
			var t = position.top + inh +4;
			var l = position.left - 5 ;
			$list.css( {
				top : t > 0 ? t : 0,
				left : l > 0 ? l : 0
			});
			if($.browser.msie){
				$list.css( {
					height:divheight,
					width:divwidth,
					top : t > 0 ? t : 0,
					left : l > 0 ? l : 0
				});
			}
			//added by zwq 新城市列表逻辑
			var newHotDom = $(">div", _this._moreCityListDom);
			_this._updateNewCitySugOptions();
			_this._addClickMoreEvent(newHotDom,true);
			_this._addClickMoreEvent($dl.eq(0));
			/*change by liufang 20131128 start*/
			if($.browser.msie) {
				_this._blurColsedCityForIE();
			} else {
				_this._blurColsedCity();
			}
			/*change by liufang 20131128 end*/
			
			/*delete by liufang 20131128 start*/
			/*
			if(!$.browser.msie){
				_this._blurColsedCity();
			}
			*/
            //opt# 1012301047 fix end
			_this._layoutMoreCity();
			$dl.eq(1).hide();
		});
	} else {
        $(_this.options().mcnode).show();
		$list.show();
		var divheight = $list.outerHeight();
		var divwidth = $list.outerWidth();
		var position = _this._inputDom.offset();
		var inh = _this._inputDom.outerHeight();
		var inw = _this._inputDom.outerWidth();
		var t = position.top + inh +4;
		var l = position.left - 5 ;
		$list.css( {
			top : t > 0 ? t : 0,
			left : l > 0 ? l : 0
		});
		if($.browser.msie){
			$list.css( {
				height:divheight,
				width:divwidth,
				top : t > 0 ? t : 0,
				left : l > 0 ? l : 0
			});
		}
		_this._updateNewCitySugOptions();
        //edit by zhangsq
		//edit by zwq 非新城市列表时，弹出锁屏层
		if(!_this._cityListType){
			$(function(){KTools.lightbox( {element : $list,visible : true});});
		}
        //opt# 1012301047 fix end
		_this._changeMoreCity(0);
	}
	$(">input", _this._moreCityListDom).val("请输入正确的城市名称");
};
/**
 * 新城市列表input框suggest提示事件绑定。
 */
KCityList.prototype._updateNewCitySugOptions = function()
{
    var _this = this;
    var newInputDom = $(">input", _this._moreCityListDom);
    var newbutton = $(">button", _this._moreCityListDom);
    var newspan = $(">span", _this._moreCityListDom);
    var svalue = newspan.html();
    newspan.html("");
    var ivalue = newInputDom.val();
    newInputDom.focus(function(e) {
        e.stopPropagation();
        newspan.html("");
        newInputDom.val() == ivalue ? newInputDom.val("") : newInputDom.select();
    }).blur(function(e) {
        e.stopPropagation();
        newInputDom.val() == "" && newInputDom.val(ivalue);
    })
    _this._suggestArray = [];
    if (this._opts.sugurl && this._opts.sugurl != "")
    {
        var sugurl = _this._opts.sugurl;
        if (sugurl.indexOf("?") != -1)
        {
            var num = sugurl.indexOf("?");
            sugurl = sugurl.substring(0, num);
        }
        var hash = new KUrlHash();
        hash.setKey("t","cs");
        hash.setKey("s","json");
        sugurl = sugurl + "?"+ hash.toString();
        if (_this._suggestArray.length == 0)
        {
            _this._suggestArray = KStdSuggest.bind(newInputDom.get(0), {
				'url' : sugurl,
				minwidth : 200,
				'listlimit' : this._opts.suglimit,
				autorevert : false,
				cache:false,
				autocomplete : true//(_this._opts.autocomplete === false ? false : true)
			});
            _this._suggestArray[0].setData( {
				text : _this._city.name,
				kvalue : {
					"a" : _this._city.latlon,
					"b" : _this._city.level,
					"c" : (_this._city.bus === true) ? "1" : "0",
					"d" : _this._city.ename
				}
			});
            //newInputDom.val(_this._city.name);//为解决KStdSuggest 把input的值制空的bug，
            var nodata = true;
            var oldCityInfo = _this._city;
            if (typeof _this._suggestArray != "undefined" && _this._suggestArray.length > 0)
            {
                KEvent.bind(_this._suggestArray[0], "datachanged", function(eventInfo, widget, suggsetInfo)
                {
                	oldCityInfo = _this._city;
                    _this._city = {
						"name" : suggsetInfo.text,
						"latlon" : suggsetInfo.kvalue.a,
						"level" : suggsetInfo.kvalue.b,
						"bus" : (suggsetInfo.kvalue.c === "1" ? true : false),
						"ename": suggsetInfo.kvalue.d
					};
                });
            }
            KEvent.bind(_this._suggestArray[0], "nodata", function(){
            	nodata = false;
            }); 
            KEvent.bind(_this._suggestArray[0], "hasdata", function(){
            	nodata = true;
            }); 
            newInputDom.keydown(function(e){
            	if(e.keyCode == 13){
            		var surl = _this._getURL(newInputDom.val());
            		$.getJSON(surl , function(data){
            			if(data.a && data.a.length >0){
        			        e.stopPropagation();
        			        var cityInfo = {
        						"name" : data.a[0].c.split("<span>")[0],
        						"latlon" : data.a[0].b.a,
        						"level" : data.a[0].b.b,
        						"ename":data.a[0].b.d,
        						"province" : "",
        						"bus" : (data.a[0].b.c == "1" ? true : false)
        					};
        			        _this._closeTabs();
        			        _this._moreCityListDom.hide();
        			        _this.setCity(cityInfo);
        			        $(function(){KTools.lightbox({});});
            			}else{
            				newspan.html(svalue);
            			}
                    });
            	}
            });
            newbutton.click(function(e){
            	e.stopPropagation();
            	if(nodata){
            		_this._moreCityListDom.hide();
                    _this.setCity(_this._city);
                    if (_this._city.name != oldCityInfo.name) {
						KEvent.trigger(_this, "citychanged", _this, _this._city, oldCityInfo);
					}
            	}else{
            		newspan.html(svalue);
            		if(newspan.html() === ""){
            			nodata = true;
            		}
            	}
                $(function(){KTools.lightbox({});}); 
            });
        }
        else
        {
            _this._suggestArray[0].setOptions({"listlimit": _this._opts.suglimit});
        }
        var inputHeight = newInputDom.height() + 8;
        _this._suggestDom.css({top : inputHeight});
    }
    else
    {
        if (_this._suggestArray && _this._suggestArray.length >= 1)
        {
            _this._suggestArray[0].finalize();
        }
        _this._suggestArray = [];
    }
};

/**
 * 焦点范围外点击关闭城市列表
 */

KCityList.prototype._blurColsedCity = function() {
	var _this = this;
	var clickFun = function(e) {
		var ev = window.event || e;
		var obj = ev.target || ev.srcElement;
		if($(obj).attr("cl_mc") !== _this._aDom.attr("cl_mc")){
			_this._moreCityListDom.hide();
		}else{
			if ($(obj).get(0) !== _this._aDom.get(0)) {
				_this._moreCityListDom.hide();
			}
		}
	};
	KEvent.bind(jQuery(document), "click", clickFun);
};
/**
 * 焦点范围外点击关闭城市列表（针对IE）
 * add by liufang 20131128
 */
KCityList.prototype._blurColsedCityForIE = function() {
	var _this = this;	
	var clickFun = function(e) {
	var ev = window.event || e;
	var obj = ev.target || ev.srcElement;
		//“当前城市”位置的dom结构中，包含ci_mc属性，这个dom结构也是城市列表的显隐开关
		//判断被单击对象如果没有该属性，则关闭城市列表
		if(!($(obj).attr("cl_mc"))) {
			_this._moreCityListDom.hide();
		}
	};
	KEvent.bind(jQuery(document), "click", clickFun);
};

/**
 * 根据参数拼URL
 * @param q
 */
KCityList.prototype._getURL = function(k) {
    var hash = new KUrlHash();
    hash.setKey("t", "cs");
    hash.setKey("s", "json");
    hash.setKey("a", 8);
    hash.setKey("k", k);
    return this.options().sugurl + "?" + hash.toString();
};
/*
 日期选择组件
 作者：fuyg
 版本：1.0.1
 创建时间：2011-03-22
 最后修改时间：2011-03-28
 ============================================
 『修改历史』
 */
var KDatePicker = KClass.create("KDatePicker", KWidget);
KDatePicker.conf = {
    CLASSNAME: {
        //顶级容器
        DTP: "_dtp",
        //月份翻页按钮，前一页
        PRE: "_dtp_pre",
        //月份翻页按钮，后一页
        NEXT: "_dtp_next",
        //最左边的日期框
        WL: "_dtp_wl",
        //最左边之外的日期框
        WR: "_dtp_wr",
        //月份标题
        H: "_dtp_h",
        //日期DIV容器
        C: "_dtp_c",
        //周末
        WKE: "_dtp_wke",
        //今天的日期
        CUR: "_dtp_cur",
        //选中的日期
        S: "_dtp_s",
        //相关联的日期
        E: "_dtp_e",
        //提示
        TIP: "_dtp_tip"
    }
};
/**
 * 构造函数
 * @param {InputElement} input 文本输入框对象
 * @param {KDatePickerOptions} opts
 */
KDatePicker.initialize = function(input, opts){
    var _this = this;
    this._input = $(input).get(0);
	//阻止改动日期文本输入框  added by zy
    if($(input).length > 0) this._input.readOnly = true;
    var $input = $(this._input);
    if ($input.attr("type") !== "text") {
        throw new Error("KDatePicker初始化失败!");
    }
    //为input绑定事件
    this._eventNS = ".kdatepicker";
    $input.unbind(this._eventNS).bind("focus" + this._eventNS + " click" + this._eventNS, function(){
        _this._focusHandler.apply(_this, arguments);
    });
    $(document).bind("click" + this._eventNS + " focus" + this._eventNS, function(event){
        if (event.target == _this._input) {
            return;
        }
        if (_this._opts.icon && (event.target == _this._opts.icon || $.contains(_this._opts.icon, event.target))) {
            return;
        }
        if ($.contains(_this._dom, event.target)) {
            return;
        }
        _this.hide();
    });
    //
    this._theme = null;
    this._cssClass = null;
    this._dom = null;
    this._selectedDate = null;
    //是否进行初始化DOM结构
    this._isInited = false;
    this._initOpts(opts);
	$(window).bind("resize"+this._eventNS, function(){
		_this.hide.apply(_this);
	});
};
/******************************************************
 * 继承自KWidget的方法
 *****************************************************/
/**
 * @return 中文名称
 * @uncrunch
 */
KDatePicker.prototype.cnname = function(){
    return "日期选择组件";
};
/**
 * @return 获取版本信息
 * @uncrunch
 */
KDatePicker.prototype.version = function(){
    return "1.0.1";
};
/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KDatePicker.prototype.setTheme = function(scheme){
    this._theme = scheme;
    //do something
};
/**
 * 设置组件配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 * @param obj {KDatePickerOptions}
 * @uncrunch
 */
KDatePicker.prototype.setOptions = function(obj){
	var _this=this;
    obj = KTools.copyOptions(obj, KDatePickerOptions);
    var diffOpts = KTools.compareOptions(this._opts, obj);
	//未完全实现
    $.each(diffOpts, function(name, value){
        switch (name) {
            case "min":
				_this._setMin(value);
                break;
            case "max":
                break;
            case "date":
                break;
            case "month":
                break;
            case "min":
                break;
            case "min":
                break;
        }
    });
};
/**
 * 显示组件。
 * @uncrunch
 */
KDatePicker.prototype.show = function(){
    var date = this._dateParser($(this._input).val());
    if (this._isInited === true) {
        if (this._isDateObject(date)) {
            this._opts.date = date;
        }
        var firstMonth = this._firstMonth();
        this._updateCalender(firstMonth, this._opts.month);
        $(this._dom).show();
        this.layout();
    }
};
/**
 * 隐藏组件
 * @uncrunch
 */
KDatePicker.prototype.hide = function(){
    $(this._dom).hide();
};
/**
 * 通知组件重新布局。比如，当窗口尺寸发生变化后需要进行此项操作
 * @uncrunch
 */
KDatePicker.prototype.layout = function(){
    var offset = $(this._input).offset();
    var height = $(this._input).height();
    var $box = $(this._opts.box);
    var boxOffset = $box.offset();
    var boxWidth = $box.innerWidth();
    var boxHeight = $box.innerHeight();
    //
    var domWidth = $(this._dom).outerWidth(true);
    var domHeight = $(this._dom).outerHeight(true);
    var domAbsPosTop = offset.top + height + 7;
    var domAbsPosLeft = offset.left;
    var domRefPosTop = domAbsPosTop - boxOffset.top;
    var domRefPosLeft = domAbsPosLeft - boxOffset.left;
    //
    while (domRefPosTop + domHeight > boxHeight) {
        domRefPosTop--;
    }
    domAbsPosTop = boxOffset.top + (domRefPosTop < 0 ? 0 : domRefPosTop);
    while (domRefPosLeft + domWidth > boxWidth) {
        domRefPosLeft--;
    }
	domRefPosLeft = domRefPosLeft -16;
    domAbsPosLeft = boxOffset.left + (domRefPosLeft < 0 ? 0 : domRefPosLeft) ;
    //
    $(this._dom).css({
        top: domAbsPosTop + "px",
        left: domAbsPosLeft + "px"
    });
};
/**
 * @uncrunch
 */
KDatePicker.prototype.finalize = function(){
    $(this._input).unbind(this._eventNS);
    $(document).unbind(this._eventNS);
	$(window).unbind(this._eventNS);
    $(this._dom).unbind();
    $(this._dom).find(">a").unbind();
    if (this._opts.icon && this._opts.icon.nodeType === 1) {
        $(this._opts.icon).unbind(this._eventNS);
    }
    //
    KWidget.prototype.finalize.apply(this);
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KDatePicker.prototype.dependent = function(){
    return [jQuery, KClass, KObject, KManager, KEvent, KTools, KWidgetOptions, KWidget, KDatePickerOptions];
};
/******************************************************
 * 组件的公开方法
 *****************************************************/
/***
 *得到当前选中的日期
 * @param {Boolean} isFormated  是否根据组件配置选项中的format参数的值进行格式化，默认为true
 * @return {Date} 返回Date对象或者格式化后的表示日期的字符串
 * @uncrunch
 */
KDatePicker.prototype.getDate = function(isFormated){
    return (isFormated !== false ? this.formatDate(this._opts.date) : this._opts.date);
};
/***
 *设置当前选中的日期
 * @param {Object} date
 * @return
 * @uncrunch
 */
KDatePicker.prototype.setDate = function(date){
    this._setDate(date);
};
/***
 *格式化日期
 * @param {Date} date
 * @param {String} format 表示日期格式的字符串,默认为组件配置选项中的format参数的值
 * @return {String} 表示日期的字符串
 * @uncrunch
 */
KDatePicker.prototype.formatDate = function(date, format){
    var cDate = this._customDate(date);
    if (cDate && cDate.orig) {
        format = (typeof format === "string") ? format : "yyyy-mm-dd";
        return format.replace(/y+/ig, cDate.y).replace(/m+/ig, this._prefixZero(cDate.m, 2)).replace(/d+/ig, this._prefixZero(cDate.d, 2));
    }
};
/**
 * 设置关联的KDatePicker对象
 * @param {KDatePicker} picker
 */
KDatePicker.prototype.setReferPicker = function(picker){
    if (this._isPicker(picker) && this !== picker) {
        this._opts.referpicker = picker;
    }
};
/******************************************************
 * 组件的私有方法
 *****************************************************/
/***
 *得到相关的日期
 * @return {Date}
 */
KDatePicker.prototype._getReferDate = function(){
};
/***
 *设置相关的日期
 * @param {Date} date  Date对象或者更够让dateParser()分析成Date对象的字符串
 * @return
 */
KDatePicker.prototype._setReferDate = function(date){
};
/**
 * 判断一个对象是否是有效的Date对象
 * @param {Object} obj
 * @return {Boolean}
 */
KDatePicker.prototype._isDateObject = function(obj){
    return (obj && (obj instanceof Date) && !isNaN(obj.getTime()));
};
/**
 * 文本输入框focus事件监听器
 */
KDatePicker.prototype._focusHandler = function(){
    this.show();
};
/**
 * 设置组件样式
 * @return {Object}
 */
KDatePicker.prototype._setClassName = function(theme){
    var th = theme || "mwp";
    var CN = KDatePicker.conf.CLASSNAME;
    var klass = {};
    for (var k in CN) {
        klass[k] = th + CN[k];
    }
    return (this._cssClass = klass);
};
/**
 * 初始化组件配置选项
 * @param {KDatePickerOptions} obj
 */
KDatePicker.prototype._initOpts = function(obj){
    var _this = this;
    var temp = "";
    var opts = $.extend(true, {}, obj);
    opts = KTools.copyOptions(opts, KDatePickerOptions);
    opts.icon = (obj.icon && obj.icon.nodeType === 1) ? obj.icon : undefined;
    opts.box = (obj.box && obj.box.nodeType === 1) ? obj.box : document.body;
    //
    //check options
    opts.month = parseInt(opts.month, 10);
    opts.month = (isNaN(opts.month) || opts.month < 1) ? 1 : opts.month;
    this._theme = opts.theme || "mwp";
    this._setClassName(this._theme);
    opts.min = this._isDateObject(opts.min) ? opts.min : undefined;
    opts.max = this._isDateObject(opts.max) ? opts.max : undefined;
    if (opts.min && opts.max) {
        if (opts.min.getTime() > opts.max.getTime()) {
            temp = opts.max;
            opts.max = opts.min;
            opts.min = temp;
        }
    }
    //
    if (opts.icon) {
        $(opts.icon).bind("click" + this._eventNS, function(event){
            event.preventDefault();
            _this.show();
        });
    }
    opts.referpicker = this._isPicker(opts.referpicker) ? opts.referpicker : undefined;
    //
    this._opts = opts;
    //
    this._createTopContainer();
    var cDate = this._customDate(opts.date);
    if (this._isDateObject(opts.date)) {
        if (opts.min && this._compareCustomDate(cDate, this._customDate(opts.min)) < 0) {
            opts.date = undefined;
        } else if (opts.max && this._compareCustomDate(cDate, this._customDate(opts.max)) > 0) {
            opts.date = undefined;
        } else {
            opts.date = new Date(opts.date.getTime());
        }
    } else {
        opts.date = undefined;
    }
    //
    var firstMonth = this._firstMonth();
    var rows = this._calenderRows(firstMonth, opts.month);
    //
    opts.month > 1 ? this._createMulti(this._dom, opts.month, firstMonth, rows) : this._createOne(this._dom, firstMonth, rows);
    //
    this._createTip(this._dom, opts.tip);
    this._setDate(opts.date);
    //计算大小
	$(this._dom).css({
        top: 0,
        left: 0
    });
	var domWidth = $(this._dom).width();
	//设置width不可变更
	$(this._dom).css({
       width: domWidth +"px"
    });
	//
    this._isInited = true;
};
/***
 * 创建公共结构
 */
KDatePicker.prototype._createTopContainer = function(){
    var _this = this;
    var html = '<div class="' + this._cssClass.DTP + '"><a class="' + this._cssClass.PRE + '" href="javascript:void(0);">&lt;</a><a class="' + this._cssClass.NEXT + '" href="javascript:void(0);">&gt;</a></div>';
    var $dom = $(html).appendTo(document.body).hide();
    this._dom = $dom.get(0);
    this.layout();
    //
    //$dom.bind("click", this._selectHandler);
    $dom.bind("click", function(){
        _this._selectHandler.apply(_this, arguments);
    });
    $dom.find(">a").eq(0).bind("click", function(){
        _this._showPrevPage.apply(_this, arguments);
    }).end().eq(1).bind("click", function(){
        _this._showNextPage.apply(_this, arguments);
    });
    //
};
/**
 * 选中处理函数
 * @param {Event} event jQuery Event对象
 */
KDatePicker.prototype._selectHandler = function(event){
    if (!event || !event.target) {
        return;
    }
//	//反黑相关KDatePicker实例的日期输入框 added by zy
//	if(this._opts.referpicker){
//		this._opts.referpicker._input.select();
//	}
    event.preventDefault();
    //event.stopPropagation();
    var $target = $(event.target);
    if ($target.is("a") && $target.parent().is("td")) {
        $(this._input).val($target.text());
        //
        $(this._dom).find("table tbody td a").removeClass(this._cssClass.S);
        $target.addClass(this._cssClass.S);
        var $strong = $target.parents("table").eq(0).parent().prev("div").eq(0).find("strong:first");
        var cDate = this._customDate($strong.data("date"));
        var date = new Date(cDate.y, cDate.m - 1, parseInt($target.text(), 10));
        this._opts.date = date;
        this.hide();
        $(this._input).val(this.formatDate(date, this._opts.format));
        KEvent.trigger(this, "selected", this, new Date(date.getTime()));
    } else {
        return;
    }
};
/**
 * 显示上一页
 * @param {Event} event jQuery Event对象
 */
KDatePicker.prototype._showPrevPage = function(event){
    //event.stopPropagation();
    event.preventDefault();
    var month = this._opts.month;
    var currentFirst = this._firstMonthOfPage();
    var prevFirst = this._prevMonth(currentFirst, this._opts.month);
    this._updateCalender(prevFirst, month);
};
/**
 * 显示下一页
 * @param {Event} event jQuery Event对象
 */
KDatePicker.prototype._showNextPage = function(event){
    //event.stopPropagation();
    event.preventDefault();
    var month = this._opts.month;
    var currentFirst = this._firstMonthOfPage();
    var nextFirst = this._nextMonth(currentFirst, this._opts.month);
    this._updateCalender(nextFirst, month);
};
/**
 * 更新日历
 * @param {Date} firstMonth
 * @param {Integer} month 日历显示多少个月
 */
KDatePicker.prototype._updateCalender = function(firstMonth, month){
    var $tables = $(this._dom).find(">div>div>table");
    var rows = this._calenderRows(firstMonth, month);
    for (var index = 0; index < month; index++) {
        this._updateMonth($tables.get(index), (index === 0 ? firstMonth : this._nextMonth(firstMonth, index)), rows);
    }
    this._setDate(this._opts.date);
    if (this._isPicker(this._opts.referpicker)) {
        var referDate = this._opts.referpicker.getDate(false);
        this._setDate(referDate, true);
    }
};
/**
 * 创建只显示一个月的结构
 * @param {HTMLElement} parent
 * @param {Date} date
 */
KDatePicker.prototype._createOne = function(parent, date, rows){
    this._createTableContainer(parent, true, date);
    $(this._dom).find(">div:first>div").eq(1).append(this._createTableHtml(date, rows));
};
/**
 * 创建只显示多个月的结构
 * @param {HTMLElement} parent
 * @parsm {Integer}  multi
 * @param {Date} date
 */
KDatePicker.prototype._createMulti = function(parent, multi, date, rows){
    this._createOne(parent, date, rows);
    var temp = "";
    for (var index = 1; index < multi; index++) {
        temp = this._nextMonth(date, index);
        this._createTableContainer(parent, false, temp);
        $(this._dom).find(">div:eq(" + index + ")>div").eq(1).append(this._createTableHtml(temp, rows));
    }
};
/**
 * 创建表的父标签及表名称
 * @param {HTMLElement} parent
 * @param {Boolean} isLeft
 * @param {Date} date 可选
 */
KDatePicker.prototype._createTableContainer = function(parent, isLeft, date){
    date = this._customDate(date);
    var html = [('<div class="' + this._cssClass[isLeft ? "WL" : "WR"] + '">')];
    html.push('<div class="' + this._cssClass.H + '"><strong>' + ((date && date.orig) ? (date.y + "年" + date.m + "月") : "&nbsp;") + '</strong></div>');
    html.push('<div class="' + this._cssClass.C + '"></div>');
    html.push('</div>');
    $(parent).append(html.join(""));
    var $divs = $(parent).find(">div");
    $divs.eq($divs.length - 1).find(">div>strong").eq(0).data("date", date.orig);
};
/**
 *创建table的Html
 * @param {Date}date
 * @return {String}
 */
KDatePicker.prototype._createTableHtml = function(date, rows){
    var html = ["<table>"];
    html.push(this._createTheadHtml());
    html.push(this._createTbodyHtml(date, rows));
    html.push("</table>");
    return html.join("");
};
/**
 *创建thead的Html
 * @param {Date}date
 * @return {String}
 */
KDatePicker.prototype._createTheadHtml = function(){
    var k = this._cssClass.WKE;
    return '<thead><tr><th class="' + k + '">日</th><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th class="' + k + '">六</th></tr></thead>';
};
/**
 *创建tbody的Html
 * @param {Date}date
 * @return {String}
 */
KDatePicker.prototype._createTbodyHtml = function(date, rows){
    var html = ["<tbody>"];
    html.push(this._createTbodyInnerHtml(date, rows));
    html.push("</tbody>");
    return html.join("");
};
/**
 *创建tbody的innerHtml
 * @param {Date}date
 * @return {String}
 */
KDatePicker.prototype._createTbodyInnerHtml = function(date, rows){
    var now = new Date();
    var today = this._customDate(now);
    var current = this._customDate(date);
    var min = this._customDate(this._opts.min), max = this._customDate(this._opts.max);
    var first = this._firstDayOfMonth(current), last = this._lastDayOfMonth(current);
    //
    var todayInMonth = (today.y === first.y && today.m === first.m);
    var minInMonth = (min && min.orig) ? (min.y === first.y && min.m === first.m) : false;
    var maxInMonth = (max && max.orig) ? (max.y === first.y && max.m === first.m) : false;
    var todayInMinOrMax = (!min || (min && min.orig && this._compareCustomDate(today, min) >= 0)) && (!max || (max && max.orig && this._compareCustomDate(today, max) <= 0));
    var lessThanMinMonth = !!(min && min.orig && this._compareCustomDate(current, min) < 0);
    var moreThanMaxMonth = !!(max && max.orig && this._compareCustomDate(current, max) > 0);
    var html = ["<tr>"];
    var temp = "";
    var rowCounter = 1;
    var addtionRows = 0;
    //
    for (var wIndex = 0; wIndex < first.w; wIndex++) {
        html.push("<td>&nbsp;</td>");
    }
    for (var dIndex = first.d; dIndex <= last.d; dIndex++) {
        //如果是今天
        if (todayInMonth && today.d === dIndex) {
            temp = todayInMinOrMax ? ('<td><a href="javascript:void(0);"  class="' + this._cssClass.CUR + '">' + dIndex + '</a></td>') : ('<td><div class="' + this._cssClass.CUR + '">' + dIndex + '</div></td>');
        } else {
            if (minInMonth && maxInMonth) {
                temp = (dIndex >= min.d && dIndex <= max.d) ? ('<td><a href="javascript:void(0);">' + dIndex + '</a></td>') : ('<td>' + dIndex + '</td>');
            } else if (minInMonth) {
                temp = (dIndex >= min.d) ? ('<td><a href="javascript:void(0);">' + dIndex + '</a></td>') : ('<td>' + dIndex + '</td>');
            } else if (maxInMonth) {
                temp = (dIndex <= max.d) ? ('<td><a href="javascript:void(0);">' + dIndex + '</a></td>') : ('<td>' + dIndex + '</td>');
            } else {
                if (lessThanMinMonth || moreThanMaxMonth) {
                    temp = '<td>' + dIndex + '</td>';
                } else {
                    temp = '<td><a href="javascript:void(0);">' + dIndex + '</a></td>';
                };
                
            }
        }
        //
        html.push(temp);
        //如果是周六
        if ((first.w + (dIndex - 1)) % 7 === 6) {
            if (dIndex === last.d) {
                html.push("</tr>")
            } else {
                html.push("</tr><tr>")
                rowCounter++;
            }
        }
    }
    for (wIndex = last.w; wIndex < 6; wIndex++) {
        html.push("<td>&nbsp;</td>");
    }
    html.push((last.w === 6) ? "" : "</tr>")
    addtionRows = rows - rowCounter;
    for (wIndex = 0; wIndex < addtionRows; wIndex++) {
        html.push("<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>");
    }
    //
    return html.join("");
};
/**
 *
 * @param {Date} date
 * @return {CustomDate} 返回 CustomDate或者undefined
 */
KDatePicker.prototype._customDate = function(date){
    if (this._isDateObject(date)) {
        var obj = {
            y: date.getFullYear(),
            m: date.getMonth() + 1,
            d: date.getDate(),
            w: date.getDay(),
            orig: date
        }
        return obj;
    }
};
/***
 * 比较两个CustomDate对象的年月日是否相等
 * @param {CustomDate} cdateA
 * @param {CustomDate} cdateB
 * @return 相等时返回0, cdateA<cdateB时返回负值，cdateA>cdateB时返回正值，
 */
KDatePicker.prototype._compareCustomDate = function(cdateA, cdateB){
    return (cdateA.y - cdateB.y) || (cdateA.m - cdateB.m) || (cdateA.d - cdateB.d) || 0;
};
/***
 * 比较两个CustomDate对象的年月否相等
 * @param {CustomDate} cdateA
 * @param {CustomDate} cdateB
 * @return 相等时返回0, cdateA<cdateB时返回负值，cdateA>cdateB时返回正值，
 */
KDatePicker.prototype._compareMonth = function(cdateA, cdateB){
    return (cdateA.y - cdateB.y) || (cdateA.m - cdateB.m) || 0;
};
/**
 * 得到当月的第一天
 * @param {CustomDate} date
 * @return {CustomDate}
 */
KDatePicker.prototype._firstDayOfMonth = function(date){
    var first = new Date(date.y, date.m - 1, 1);
    return this._customDate(first);
};
/**
 * 得到当月的最后一天
 * @param {CustomDate} date  CustomDate见 this._customDate()方法
 * @return {CustomDate}
 */
KDatePicker.prototype._lastDayOfMonth = function(date){
    var next = new Date(date.y, date.m, 1);
    var last = new Date(next.getTime() - 86400000);// 86400000=24*60*60*1000
    return this._customDate(last);
};
/**
 * 下一（N）个
 * @param {Date} date
 * @param {Integer} step， 下几个月，默认为1
 * @param {Date}
 */
KDatePicker.prototype._nextMonth = function(date, step){
    step = (typeof step !== "number" || isNaN(step)) ? 1 : step;
    date = this._customDate(date);
    return new Date(date.y, (date.m - 1) + step, 1);
};
/**
 * 上一（N）个
 * @param {Date} date
 * @param {Integer} step， 下几个月，默认为1
 * @param {Date}
 */
KDatePicker.prototype._prevMonth = function(date, step){
    step = (typeof step !== "number" || isNaN(step)) ? 1 : step;
    date = this._customDate(date);
    return new Date(date.y, (date.m - 1) - step, 1);
};
/**
 *判断一个对象是否是KDatePicker对象
 * @param {Object} obj
 */
KDatePicker.prototype._isPicker = function(obj){
    return (obj && obj.isKClassO && obj.isKClassO === true && obj.className && obj.className === "KDatePicker");
};
/**
 *
 * @param {HTMLElement} parent
 * @param {String} html
 */
KDatePicker.prototype._createTip = function(parent, html){
    var k = this._cssClass.TIP;
    html = (html == null && html !== "") ? ("<div class='" + k + "' style='display:none'></div>") : ("<div class='" + k + "'>" + html + "</div>");
    $(parent).append(html);
};
/**
 * 计算这个月的日历有多少行
 * @param {Date} date
 * @return {Integer}
 */
KDatePicker.prototype._monthRows = function(date){
    date = this._customDate(date);
    var first = this._firstDayOfMonth(date);
    var last = this._lastDayOfMonth(date);
    return Math.ceil((last.d + first.w + (6 - last.w)) / 7);
};
/**
 * 得到当前日历的的行数
 * @param {Object} firstMonth  日历左边的第一个月
 * @param {Object} n 日历总共显示多少个月
 * @return {Integer} 不小于4且大于6的整数
 */
KDatePicker.prototype._calenderRows = function(firstMonth, n){
    var rows = this._monthRows(firstMonth), temp, date;
    for (var index = 1; index < n; index++) {
        date = this._nextMonth(firstMonth, index);
        temp = this._monthRows(date);
        rows = (temp > rows) ? temp : rows;
    };
    
    return ((rows < 4 || rows > 6) ? 6 : rows);
};
/**
 * 设置选中日期或相关日期
 * @param {Date} date
 * @param {Boolean} isRefer 是设置相关日期，还是设置选中日期，默认为false
 */
KDatePicker.prototype._setDate = function(date, isRefer){
    var _this = this;
    var cDate = this._customDate(date);
    if (!cDate || !cDate.orig) {
        return;
    }
    isRefer = (isRefer === true) ? true : false;
    var strongElem = "";
    var klass = this._cssClass[isRefer ? "E" : "S"];
    //寻找月份
    $(this._dom).find("div>div>strong").each(function(){
        if (_this._compareMonth(cDate, _this._customDate($(this).data("date"))) === 0) {
            strongElem = $(this).get(0);
            return false;
        }
    });
    //寻找日期
    if (strongElem) {
        var $elems = $(strongElem).parent().next("div").eq(0).find("table td");
        if ($elems.length) {
            $elems.each(function(){
                if (cDate.d === parseInt($(this).text(), 10)) {
                    $(_this._dom).find("table td a").removeClass(klass);
                    $(_this._dom).find("table td div").removeClass(klass);
                    if (isRefer) {
                        var $kid  = $(this).find("a");
						if($kid.length){
							$kid.addClass(klass);
						}else{
							$kid  = $(this).find("div");
							if($kid.length){
								$kid.addClass(klass);
							}else{
                                $(this).html("<div class='" + klass + "'>" + $(this).text() + "</div>");
							}
						} 
                    } else {
						$(this).find("a").addClass(klass);
                        _this._opts.date = date;
                        $(_this._input).val(_this.formatDate(date, _this._opts.format));
                    }
                    return false;
                }
            });
        }
    }
};
/**
 * 更新某个月的日历
 * @param {HTMLElement} table  Table节点
 * @param {Date} date 要显示的月份，Date对象
 * @param {Integer} rows 当前月份日历行数
 */
KDatePicker.prototype._updateMonth = function(table, date, rows){
    var tbodyInner = this._createTbodyInnerHtml(date, rows);
    $(table).find("tbody").html(tbodyInner);
    var strongElem = $(table).parent().prev("div").find("strong").get(0);
    this._updateMonthTitle(strongElem, date)
};
/**
 * 更新某个月日历的标题
 * @param {HTMLElement} element
 * @param {Date} date
 */
KDatePicker.prototype._updateMonthTitle = function(element, date){
    var cDate = this._customDate(date);
    $(element).html(cDate.y + "年" + cDate.m + "月").data("date", date);
};
/**
 * 得到当前日历的第一个月
 * @return {Date}
 */
KDatePicker.prototype._firstMonthOfPage = function(){
    var firstStrong = $(this._dom).find(">div>div>strong").get(0);
    return $(firstStrong).data("date");
};
/**
 * 根据字符串，分析出Date
 * @param {String} txt
 * @return {Date}
 */
KDatePicker.prototype._dateParser = function(txt){
    txt = txt.replace(/[^\d]+/g, ",");
    var date = new Date(txt);
    //window.alert(this._isDateObject(date) );
    if (!this._isDateObject(date)) {
        //"yyyy-mm-dd"
        var arr = txt.split(",");
        date = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
    };
    
    return (this._isDateObject(date) ? date : undefined);
};
/**
 * 根据 this._opts.date 和 this._opts.referpicker计算要显示的日历的第一个月
 * @return {Date}
 */
KDatePicker.prototype._firstMonth = function(){
    var selected = this._isDateObject(this._opts.date) ? this._opts.date : undefined;
    var refered = (this._isPicker(this._opts.referpicker) && this._opts.referpicker.getDate) ? this._opts.referpicker.getDate(false) : undefined;
    refered = this._isDateObject(refered) ? refered : undefined;
    var firstMonth;
    //
    if (selected && refered) {
        var cSelected = this._customDate(selected);
        var cRefered = this._customDate(refered);
        if (cSelected.y === cRefered.y && Math.abs(cSelected.m - cRefered.m) < this._opts.month) {
            firstMonth = new Date((cSelected.m > cRefered.m) ? refered.getTime() : selected.getTime());
        } else {
            firstMonth = new Date(selected.getTime());
        }
    } else if (selected) {
        firstMonth = new Date(selected.getTime());
    } else if (refered) {
        firstMonth = new Date(refered.getTime());
    } else {
        firstMonth = new Date();
    }
    return firstMonth;
};
/**
 * 
 * @param {Integer} num
 * @param {Integer} n
 */
KDatePicker.prototype._prefixZero = function(num, n){
    while ((num + "").length < n) {
        num = "0" + num;
    }
	return num;
};
/***
 * 
 * @param {Date} date
 */
KDatePicker.prototype._setMin = function(date){
    if (this._isDateObject(date)) {
        var cDate = this._customDate(date);
		//
		var cOldMin = this._customDate(this._opts.min);
		if(cOldMin && this._compareCustomDate(cDate, cOldMin)===0){
			return;
		}
        //
        var month = this._opts.month;
        var cFirstMonth = this._customDate(this._firstMonthOfPage());
        //
        var cDateTotalMonths = cDate.y * 12 + cDate.m;
        var cFirstMonthTotalMonths = cFirstMonth.y * 12 + cFirstMonth.m;
        //
        var isUpdateUI = (cDateTotalMonths >= cFirstMonthTotalMonths && cDateTotalMonths <= cFirstMonthTotalMonths + month - 1) ? true : false;
		//
        this._opts.min = date;
        if (isUpdateUI) {
			this._updateCalender(cFirstMonth.orig, month);
        }
    }
};


/*
 对话框组件 。
 作者：pengkun  gongyong  zhangshiqi
 版本：1.0
 创建时间：2010-02-05
 最后修改时间：2010-11-24 15:40
 ============================================
 『修改历史』
 opt# 1007201600 by zhangshiqi
 修改afteresize事件为resize事件，并增加contentsize参数
 bug# 1011231847 by zhangsq
 修正隐藏时设置拖拽范围后再打开后定位错误的问题
 bug# 1011241540
 修正组件隐藏时设置dragrange属性无效的Bug
 */
var KDialog = KClass.create("KDialog", KWidget);
KDialog.conf = {
    //@uncrunch
    classNamePrefix : "_dlg"
    //@uncrunch
    ,classNameArr : ",t,tc,tb,tbi,tba,tbr,tbc,c,rh,rn,rh,re,rh,rs,rh,rw,rh,rse,min".split(",")
    //@uncrunch
    ,CLASSNAME  : {}
};
$.each(KDialog.conf.classNameArr,
    function(i, val)
    {
        KDialog.conf.CLASSNAME[(val == '' ? 'A' : val.toUpperCase())] = KDialog.conf.classNamePrefix + (val == '' ? '' : '_' + val);
    }
);

/**
 * 构造方法。
 * @param container Node
 * @param opts KDialogOptions
 * @uncrunch
 */
KDialog.initialize = function(container, opts)
{
    var _this = this;

    this._jDom = $(container).css('display', 'block');
    this._dom = this._jDom[0];

    this._opts = KTools.copyOptions(opts, KDialogOptions);

    //设置最小尺寸
    this._minSize = this.options().minsize ? this.options().minsize : new KSize(0,0);

    this.setTheme(this.options().theme);
    this._getDom();

    if (!this.options().userstyle) {
        this._buildCss();
    }
    if (this.options().title) {
        this._titleTxt.html(this.options().title);
    }

    //设置拖动
    this._setHeaderDrag(this.options().dragable);

    if (this.options().resizeable) {
        this._buildResize();
        this._setResizeDomState(true);
    }
    else {
        this._setResizeDomState(false);
    }

    if (this.options().size) {
        this.resize(this.options().size);
    }
    //使用bgiframe
    if ($.browser.msie && $.browser.version == "6.0" && this.options().bgiframe) {
        this._jDom.bgiframe();
    }

    //设置按钮dom的状态
    this._setBtnDomState(this.options().minbtn, this.options().maxbtn, false, this.options().closebtn);

    //注册事件
    KEvent.bind(this._btnMin.get(0), "click", function(evt) {
        _this.setState(KDialogState.MINI);
    });
    KEvent.bind(this._btnMax.get(0), "click", function(evt) {
        _this.setState(KDialogState.MAX);
    });
    KEvent.bind(this._btnRet.get(0), "click", function(evt) {
        _this.setState(KDialogState.NORMAL);
    });
    KEvent.bind(this._btnClose.get(0), "click", function(evt) {
        _this.setState(KDialogState.CLOSE);
    });

    this._titleContainer.dblclick(function() {
        if (_this._state == KDialogState.NORMAL && _this.options().maxbtn) {
            _this.setState(KDialogState.MAX);
        }
        else if (_this._state == KDialogState.MINI || _this._state == KDialogState.MAX) {
            _this.setState(KDialogState.NORMAL);
        }
    });

    if (this.options().autopen) {
        this.open();
    }
    else {
        this.hide();
    }

    this._jDom.bind("focus", function() {
        KEvent.trigger(_this, "focus", _this);
    });
};

/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KDialog.prototype.version = function()
{
    return "1.0";
};

/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KDialog.prototype.cnname = function()
{
    return "对话框组件";
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KDialog.prototype.dependent = function()
{
    return [KWidget, jQuery, KDialogOptions,KDialogOpenOptions, KDialogState,KEvent,KTools];
};

/**
 * 返回对话框内容 Dom 对象。
 * @return Node
 * @uncrunch
 */
KDialog.prototype.content = function()
{
    return this._contentContainer.get(0);
};

/**
 * 设置选项
 * @param opts KDialogOptions
 * @uncrunch
 */
KDialog.prototype.setOptions = function(opts)
{
    var _this = this;
    var diffOpts = KTools.compareOptions(this._opts, opts);
    $.each(diffOpts, function(name, value) {
        if (name == 'theme') {
            _this.setTheme(value);
        }
        else if (name == 'title') {
            _this._titleDom.html(value);
        }
        else if (name == 'bgiframe') {

        }
        else if (name == "dragable") {
            _this._setHeaderDrag(value);
        }
        else if (name == "resizeable") {
            _this._buildResize();
            _this._setResizeDomState(value);
        }
        else if (name == "size") {
            _this._jDom.css({width : value.width,height : value.height});
        }
        else if (name == "minbtn") {
            _this._showOrHide(_this._btnMin, value);
        }
        else if (name == "maxbtn") {
            _this._showOrHide(_this._btnMax, value);
        }
        else if (name == "closebtn") {
            _this._showOrHide(_this._btnClose, value);
        }
        else if (name == "dragrange") {
            //bug# 1011231847 fix begin
            _this._opts.dragrange = value;
            //bug# 1011241540 fix being
            //delete by zhangsq
            //_this._resetBounds();
            //bug# 1011241540 fix end
            //bug# 1011231847 fix end
            //性能低且不能触发resize事件
            /*_this.setState(KDialogState.CLOSE);
            _this.open();*/
        }
        else if (name == "minsize") {
            _this._minSize = value;
        }
    });
    //bug# 1011231847 fix begin
    if(opts.dragrange)
    {
        //bug# 1011241540 fix begin
        // add by zhangsq
        this._resetBounds();
        //bug# 1011241540 fix end
    }
    //bug# 1011231847 fix end
    this._opts = KTools.copyOptions(this._opts, opts);
};

/**
 * 根据对数重新设置对话框的大小和位置
 */
KDialog.prototype._resetBounds = function()
{
    //移动范围
    var _pBounds = this._getParentBounds();
    //当前范围
    var _cBounds = KTools.getBounds(this._dom, {border : true});
    //当前位置最小尺寸时的范围
    var _nBounds = new KBounds(_cBounds.min, new KPoint(_cBounds.min.x + this.options().minsize.width, _cBounds.min.y + this.options().minsize.height));
    //移动范围尺寸
    var _pSize = {width : _pBounds.max.x - _pBounds.min.x, height : _pBounds.max.y - _pBounds.min.y};
    //当前尺寸
    var _cSize = {width : _cBounds.max.x - _cBounds.min.x, height : _cBounds.max.y - _cBounds.min.y};
    //新范围
    var _eBounds = new KBounds(_cBounds.min, new KPoint(0, 0));
    var _rxSign = false;
    var _rySign = false;
    var _css = {};
    if(_pSize.width < _cSize.width)
    {
        _rxSign = true;
        if(_pSize.width < (this.options().minsize.width + parseInt(this._jDom.css('border-left-width')) + parseInt(this._jDom.css('border-right-width'))))
        {
            _css.width = (_pSize.width - parseInt(this._jDom.css('border-left-width')) - parseInt(this._jDom.css('border-right-width'))) + 'px';
            _eBounds.max.x = _cBounds.min.x + (_pSize.width - parseInt(this._jDom.css('border-left-width')) - parseInt(this._jDom.css('border-right-width')));
        }
        else
        {
            /*_css.width = this.options().minsize.width + 'px';
            _eBounds.max.x = _cBounds.min.x + this.options().minsize.width;*/
            _css.width = (_pSize.width - parseInt(this._jDom.css('border-left-width')) - parseInt(this._jDom.css('border-right-width'))) + 'px';
            _eBounds.max.x = _cBounds.min.x + (_pSize.width - parseInt(this._jDom.css('border-left-width')) - parseInt(this._jDom.css('border-right-width')));
        }
    }
    if(_pSize.height < _cSize.height)
    {
        _rySign = true;
        if(_pSize.height < (this.options().minsize.height + parseInt(this._jDom.css('border-top-width')) + parseInt(this._jDom.css('border-bottom-width'))))
        {
            _css.height = (_pSize.height - parseInt(this._jDom.css('border-top-width')) - parseInt(this._jDom.css('border-bottom-width'))) + 'px';
            _eBounds.max.y = _cBounds.min.y + (_pSize.height - parseInt(this._jDom.css('border-top-width')) - parseInt(this._jDom.css('border-bottom-width')));
        }
        else
        {
            /*_css.height = this.options().minsize.height + 'px';
            _eBounds.max.y = _cBounds.min.y + this.options().minsize.height;*/
            _css.height = (_pSize.height - parseInt(this._jDom.css('border-top-width')) - parseInt(this._jDom.css('border-bottom-width'))) + 'px';
            _eBounds.max.y = _cBounds.min.y + (_pSize.height - parseInt(this._jDom.css('border-top-width')) - parseInt(this._jDom.css('border-bottom-width')));
        }
    }
    if((_rxSign ? _eBounds.max.x : _cBounds.max.x) > _pBounds.max.x)
    {
        if(((_rxSign ? _eBounds.max.x : _cBounds.max.x) - (_rxSign ? _eBounds.min.x : _cBounds.min.x)) < _pSize.width)
        {
            _css.left = (_pBounds.max.x - (_rxSign ? (_eBounds.max.x - _eBounds.min.x + parseInt(this._jDom.css('border-left-width')) + parseInt(this._jDom.css('border-right-width'))) : (_cBounds.max.x - _cBounds.min.x + parseInt(this._jDom.css('border-left-width')) + parseInt(this._jDom.css('border-right-width'))))) + 'px';
        }
        else
        {
            _css.left = _pBounds.min.x + 'px';
        }
    }
    if((_rySign ? _eBounds.max.y : _cBounds.max.y) > _pBounds.max.y)
    {
        if(((_rySign ? _eBounds.max.y : _cBounds.max.y) - (_rySign ? _eBounds.min.y : _cBounds.min.y)) < _pSize.height)
        {
            _css.top = (_pBounds.max.y - (_rySign ? (_eBounds.max.y - _eBounds.min.y + parseInt(this._jDom.css('border-top-width')) + parseInt(this._jDom.css('border-bottom-width'))) : (_cBounds.max.y - _cBounds.min.y + parseInt(this._jDom.css('border-top-width')) + parseInt(this._jDom.css('border-bottom-width'))))) + 'px';
        }
        else
        {
            _css.top = _pBounds.min.y + 'px';
        }
    }
    this._jDom.css(_css);
    KEvent.trigger(this, "resize", this, undefined, this._getContentSize());

    _rxSign = false;
    _rySign = false;
};

/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KDialog.prototype.setTheme = function(scheme)
{
    var oldTheme = this._theme;
    this._theme = scheme;
    this._updateClass(this._jDom, oldTheme, KDialog.conf.CLASSNAME.A);
    this._updateClass(this._titleContainer, oldTheme, KDialog.conf.CLASSNAME.T);
    this._updateClass(this._titleDom, oldTheme, KDialog.conf.CLASSNAME.TC);
    this._updateClass(this._btnContainer, oldTheme, KDialog.conf.CLASSNAME.TB);
    this._updateClass(this._btnMin, oldTheme, KDialog.conf.CLASSNAME.TBI);
    this._updateClass(this._btnMax, oldTheme, KDialog.conf.CLASSNAME.TBA);
    this._updateClass(this._btnRet, oldTheme, KDialog.conf.CLASSNAME.TBR);
    this._updateClass(this._btnClose, oldTheme, KDialog.conf.CLASSNAME.TBC);
    this._updateClass(this._contentContainer, oldTheme, KDialog.conf.CLASSNAME.C);
    this._updateClass(this._handleN, oldTheme, KDialog.conf.CLASSNAME.RH);
    this._updateClass(this._handleN, oldTheme, KDialog.conf.CLASSNAME.RN);
    this._updateClass(this._handleE, oldTheme, KDialog.conf.CLASSNAME.RH);
    this._updateClass(this._handleE, oldTheme, KDialog.conf.CLASSNAME.RE);
    this._updateClass(this._handleS, oldTheme, KDialog.conf.CLASSNAME.RH);
    this._updateClass(this._handleS, oldTheme, KDialog.conf.CLASSNAME.RS);
    this._updateClass(this._handleW, oldTheme, KDialog.conf.CLASSNAME.RH);
    this._updateClass(this._handleW, oldTheme, KDialog.conf.CLASSNAME.RW);
    this._updateClass(this._handleSE, oldTheme, KDialog.conf.CLASSNAME.RH);
    this._updateClass(this._handleSE, oldTheme, KDialog.conf.CLASSNAME.RSE);
};

/**
 * @param dom jQuery
 * @param oldTheme  String
 * @param className     String
 */
KDialog.prototype._updateClass = function(dom, oldTheme, className)
{
    if (dom) {
        dom.removeClass(this._getClassName(className, oldTheme)).addClass(this._getClassName(className));
    }
}

/**
 * 释放资源
 * @uncrunch
 */
KDialog.prototype.finalize = function()
{
    //this._super.finalize.apply(this);
    KWidget.prototype.finalize.apply(this);
};

/**
 * 打开对话框。
 * @param opts KDialogOpenOptions
 * @uncrunch
 */
KDialog.prototype.open = function(opts)
{
    this._openOptions = KTools.copyOptions(opts, KDialogOpenOptions);

    if (!this._state || this._state == KDialogState.HIDE || this._state == KDialogState.CLOSE) {
        this._jDom.show();
        this._state = KDialogState.NORMAL;

        var pBounds = this._getParentBounds();
        var maxWidth = pBounds.size().width;
        var maxHeight = pBounds.size().height;
        var size = this._openOptions.size ? this._openOptions.size : this.options().size;
        if (!size) {
            this._jDom.css({width : maxWidth > 300 ? 300 : maxWidth});
            //bug# 1011231847 fix begin
            size = new KSize(300, 300);
            //bug# 1011231847 fix end
        }
        else {
            size.width = maxWidth > size.width ? size.width : maxWidth;
            size.height = maxHeight > size.height ? size.height : maxHeight;
            this._jDom.css({width : size.width,height : size.height})
        }
        if (this._openOptions.pos && pBounds.contains(this._openOptions.pos)) {
            var position = this._openOptions.pos;
        }
        else {
            var position = new KPoint(Math.round(pBounds.mid().x - size.width / 2), Math.round(pBounds.mid().y - size.height / 2));
        }
        this.moveTo(position);

        this._setBtnDomState(this.options().minbtn, this.options().maxbtn, false, this.options().closebtn);

        if (this.options().resizeable) {
            this._buildResize();
            this._setResizeDomState(true);
        }
        else {
            this._setResizeDomState(false);
        }

        //调整按钮css
        $("." + this._getClassName(KDialog.conf.CLASSNAME.TB)).css("zoom", "1");
        KEvent.trigger(this, "open", this);
    }
};

/**
 * 关闭对话框。
 * @uncrunch
 */
KDialog.prototype.close = function()
{
    this.setState(KDialogState.CLOSE);
};

/**
 * 隐藏对话框。
 * @uncrunch
 */
KDialog.prototype.hide = function()
{
    this.setState(KDialogState.HIDE);
};

/**
 * 最小化对话框。
 */
KDialog.prototype._min = function()
{
    //记录正常状态
    this._recordNormalState();

    //设置css
    this._jDom.addClass(this._getClassName(KDialog.conf.CLASSNAME.MIN));

    //设置拖动
    this._setHeaderDrag(this.options().dragable);

    this._jDom.css({"left" : this._normalPoint.x,"top" : this._normalPoint.y});
    this._jDom.css({'width':(this._minSize.width > 0 ? this._minSize.width : (this._titleDom.outerWidth() + this._btnContainer.outerWidth())) + 'px','height':'auto'});

    //设置几个按钮的可见性
    this._setBtnDomState(false, this.options().maxbtn, true, this.options().closebtn);

    //几个resize相关的dom设置为不可见
    this._setResizeDomState(false);
};

/**
 * 最大化对话框。
 */
KDialog.prototype._max = function()
{
    //删除最小化时添加的class
    if (this._state == KDialogState.MINI) {
        this._jDom.removeClass(this._getClassName(KDialog.conf.CLASSNAME.MIN));
    }


    //记录正常状态
    this._recordNormalState();


    var pBounds = this._getParentBounds();
    this._jDom.css({"left" : pBounds.min.x,"top" : pBounds.min.y});

    //    alert(pBounds.max.x - pBounds.min.x);

    var rb = this._getRB();
    this._jDom.css({"width":pBounds.max.x - pBounds.min.x - rb.right,"height": pBounds.max.y - pBounds.min.y - rb.bottom});

    //设置为不可拖动
    this._setHeaderDrag(false);

    //设置几个按钮的可见性
    this._setBtnDomState(this.options().minbtn, false, true, this.options().closebtn);

    //resize设置为不可见
    this._setResizeDomState(false);
};

/**
 * 还原对话框。
 */
KDialog.prototype._restore = function()
{
    if (this._state == KDialogState.MINI) {
        this._jDom.removeClass(this._getClassName(KDialog.conf.CLASSNAME.MIN));
    }

    this._setHeaderDrag(this.options().dragable);
    this._moveAndResize(this._normalPoint, this._normalSize);

    //设置几个按钮的可见性
    this._setBtnDomState(this.options().minbtn, this.options().maxbtn, false, this.options().closebtn);

    //resize设置为不可见
    this._setResizeDomState(this.options().resizeable);
};

/**
 * 取得窗口内容区可用尺寸
 * @return contentsize KSize 窗口内容区可用尺寸
 */
KDialog.prototype._getContentSize = function()
{
    var _width = this._contentContainer.innerWidth();
    var _height = this._jDom.innerHeight() - parseInt(this._jDom.css('padding-bottom')) - parseInt(this._jDom.css('padding-top')) - this._titleContainer.outerHeight() - parseInt(this._contentContainer.css('padding-top')) - parseInt(this._contentContainer.css('padding-bottom'));
    return new KSize(_width, _height);      
};

/**
 * 隐藏
 */
KDialog.prototype._hide = function()
{
    this._jDom.hide();
}

/**
 * 关闭对话框
 */
KDialog.prototype._close = function()
{
    KEvent.trigger(this, "close", this);
    this._hide();
}

/**
 * 返回对话框当前状态。
 * @uncrunch
 */
KDialog.prototype.state = function()
{
    return this._state;
};

/**
 * 设置对话框状态。
 * @param state KDialogState
 * @uncrunch
 */
KDialog.prototype.setState = function(state)
{
    //判断是否为当前状态
    if (state == this._state) {
        return;
    }
    //根据不同状态调用不同的函数
    switch (state) {
        case KDialogState.NORMAL :
            this._restore();
            break;
        case KDialogState.MINI :
            this._min();
            break;
        case KDialogState.MAX :
            this._max();
            break;
        case KDialogState.CLOSE :
            this._close();
            break;
        case KDialogState.HIDE :
            this._hide();
            break;
        default :
            break;
    }

    //设置当前状态
    this._state = state;
};

/**
 * 设置对话框显示层次。
 * @param zindex Integer
 * @uncrunch
 */
KDialog.prototype.setZIndex = function(zindex)
{
    this._jDom.css("zIndex", zindex);
};

/**
 * 设置对话框尺寸。
 * @param size KSize
 * @uncrunch
 */
KDialog.prototype.resize = function(size)
{
    if (size.width >= (this._minSize.width > 0 ? this._minSize.width : (this._titleDom.outerWidth() + this._btnContainer.outerWidth())))
    {
        this._jDom.width(size.width);
    }
    if (size.height >= (this._minSize.height > 0 ? this._minSize.height : this._titleContainer.outerHeight()))
    {
        this._jDom.height(size.height);
        //this._contentContainer.height(size.height - this._titleContainer.outerHeight() - parseInt(this._jDom.css('padding-top')) - parseInt(this._jDom.css('padding-bottom')) - parseInt(this._contentContainer.css('padding-top')));
    }
    KEvent.trigger(this, "resize", this, size, this._getContentSize());
};
/**
 * 设置对话框位置。
 * @param point KPoint
 * @uncrunch
 */
KDialog.prototype.moveTo = function(point)
{
    var dom = this._jDom;
    var pBounds = this._getParentBounds();

    var rb = this._getRB();

    if (point.x < pBounds.min.x) {
        point.x = pBounds.min.x;
    }
    if (point.y < pBounds.min.y) {
        point.y = pBounds.min.y;
    }
    if (point.x + dom.width() > pBounds.max.x - rb.right) {
        point.x = pBounds.max.x - dom.width() - rb.right;
    }
    if (point.y + dom.height() > pBounds.max.y - rb.bottom) {
        point.y = pBounds.max.y - dom.height() - rb.bottom;
    }

    this._jDom.css({left : point.x,top : point.y});

    //最小化移动时改变normal point的值
    if (this._state == KDialogState.MINI) {
        this._normalPoint = new KPoint(point.x, point.y);// KTools.getBounds(this._jDom.get(0)).min;
    }
};

/**
 * 当窗口变大时，对对话框重新布局
 * @uncrunch
 */
KDialog.prototype.layout = function()
{
    if (this._state == KDialogState.MAX) {
        this._max();
    }
}

/**
 * 获取某个样式的名称
 * @param className String
 * @param theme String
 */
KDialog.prototype._getClassName = function(className, theme)
{
    if (!theme) {
        theme = this.theme();
    }
    return theme + className;
};

/**
 * 取得DOM
 */
KDialog.prototype._getDom = function()
{
    //标题容器
    this._titleContainer = $('div:first', this._jDom);
    //标题内容区
    this._titleDom = $('h3', this._titleContainer);
    //标题图标
    this._titleIcon = $('b', this._titleDom);
    //标题文字
    this._titleTxt = $('span', this._titleDom);
    //按钮容器
    this._btnContainer = $('div', this._titleContainer);
    //最小化按钮
    this._btnMin = $('a[mfg="min"]', this._btnContainer);
    //还原按钮
    this._btnRet = $('a[mfg="rst"]', this._btnContainer);
    //最大化按钮
    this._btnMax = $('a[mfg="max"]', this._btnContainer);
    //关闭按钮
    this._btnClose = $('a[mfg="cb"]', this._btnContainer);
    //对话框内容区容器
    this._contentContainer = this._titleContainer.next();
    //上侧控制手柄
    this._handleN = this._contentContainer.next();
    //右侧控制手柄
    this._handleE = this._handleN.next();
    //下侧控制手柄
    this._handleS = this._handleE.next();
    //左侧控制手柄
    this._handleW = this._handleS.next();
    //右下角控制手柄
    this._handleSE = this._handleW.next();
};
/**
 * 加入CSS。
 */
KDialog.prototype._buildCss = function()
{
    //设置样式begin
    this._jDom.addClass(this._getClassName(KDialog.conf.CLASSNAME.A));
    this._titleContainer.addClass(this._getClassName(KDialog.conf.CLASSNAME.T));
    this._titleDom.addClass(this._getClassName(KDialog.conf.CLASSNAME.TC));
    this._btnContainer.addClass(this._getClassName(KDialog.conf.CLASSNAME.TB));
    this._btnMin.addClass(this._getClassName(KDialog.conf.CLASSNAME.TBI));
    this._btnMax.addClass(this._getClassName(KDialog.conf.CLASSNAME.TBA));
    this._btnRet.addClass(this._getClassName(KDialog.conf.CLASSNAME.TBR));
    this._btnClose.addClass(this._getClassName(KDialog.conf.CLASSNAME.TBC));
    this._contentContainer.addClass(this._getClassName(KDialog.conf.CLASSNAME.C));
    this._handleN.addClass(this._getClassName(KDialog.conf.CLASSNAME.RH)).addClass(this._getClassName(KDialog.conf.CLASSNAME.RN));
    this._handleE.addClass(this._getClassName(KDialog.conf.CLASSNAME.RH)).addClass(this._getClassName(KDialog.conf.CLASSNAME.RE));
    this._handleS.addClass(this._getClassName(KDialog.conf.CLASSNAME.RH)).addClass(this._getClassName(KDialog.conf.CLASSNAME.RS));
    this._handleW.addClass(this._getClassName(KDialog.conf.CLASSNAME.RH)).addClass(this._getClassName(KDialog.conf.CLASSNAME.RW));
    this._handleSE.addClass(this._getClassName(KDialog.conf.CLASSNAME.RH)).addClass(this._getClassName(KDialog.conf.CLASSNAME.RSE));
    //设置样式end
};
/**
 * 拖拽改变位置功能。
 */
KDialog.prototype._buildHeadDrag = function()
{
    var _this = this;

    //head拖拽
    var _left = 0;
    var _top = 0;
    this._buildDrag({
        dom : this._titleContainer
        ,drag : function(obj) {
            //var beginOffset = obj.beginOffset;
            var beginPoint = obj.beginPoint;
            var movePoint = obj.movePoint;
            _this.moveTo(new KPoint(movePoint.x - beginPoint.x + _left, movePoint.y - beginPoint.y + _top));
        }
        ,dragStart : function() {
            var offset = _this._jDom.offset();
            _left = offset.left;
            _top = offset.top;
        }
    });
};
/**
 * 拖拽改变大小功能。
 */
KDialog.prototype._buildResize = function()
{
    this._handleSE.css("-moz-user-select", "none");
    this._handleN.css("-moz-user-select", "none");
    this._handleS.css("-moz-user-select", "none");
    this._handleW.css("-moz-user-select", "none");
    this._handleE.css("-moz-user-select", "none");


    this._buildDragForResize(this._handleSE, "corner");
    this._buildDragForResize(this._handleN, "top");
    this._buildDragForResize(this._handleS, "bottom");
    this._buildDragForResize(this._handleW, "left");
    this._buildDragForResize(this._handleE, "right");
};

/**
 * 构建拖动行为
 * @param obj Object
 */
KDialog.prototype._buildDrag = function(obj)
{
    var dom = obj.dom;
    var drag = obj.drag;
    var dragStart = obj.dragStart || function() {
    };
    var dragEnd = obj.dragEnd || function() {
    };

    var beginOffset = null;
    var beginPoint = new KPoint(0, 0);

    var getCallbackParam = function(otherParma)
    {
        return $.extend({
            //@uncrunch
            beginOffset : beginOffset
            //@uncrunch
            ,beginPoint : beginPoint
        }, otherParma);
    };
    var docMouseMoveFunc = function(evt)
    {
        //_this.moveTo(new KPoint(evt.clientX - beginPoint.x, evt.clientY - beginPoint.y));
        drag(getCallbackParam({
            movePoint : new KPoint(evt.clientX, evt.clientY)
        }));
    };
    var docMouseUpFunc = function()
    {
        $(document)
                .unbind("mousemove", docMouseMoveFunc)
                .unbind("mouseup", docMouseUpFunc)
                ;
        dom.unbind("selectstart", headSelectStartFunc);

        dragEnd(getCallbackParam());
    };
    var headSelectStartFunc = function() {
        return false;
    };

    dom.mousedown(
            function(evt)
            {
                beginOffset = $(this).bind("selectstart", headSelectStartFunc).offset();
                beginPoint.x = evt.clientX;// - beginOffset.left;
                beginPoint.y = evt.clientY;// - beginOffset.top;

                dragStart(getCallbackParam());

                $(document)
                        .mousemove(docMouseMoveFunc)
                        .mouseup(docMouseUpFunc)
                        ;
            }
            );
};
/**
 * 设置对话框位置。
 * @param dom Node
 * @param flag Boolean
 */
KDialog.prototype._showOrHide = function(dom, flag)
{
    flag ? dom.show() : dom.hide();
};

/**
 * 记录正常状态下的尺寸和坐标点
 */
KDialog.prototype._recordNormalState = function()
{
    if (KDialogState.NORMAL == this._state) {
        this._normalSize = new KSize(this._jDom.width(), this._jDom.height());
        this._normalPoint = KTools.getBounds(this._jDom.get(0)).min;
    }
};

/**
 * 设置拖动
 * @param bool Boolean
 */
KDialog.prototype._setHeaderDrag = function(bool) {
    if (bool) {
        this._buildHeadDrag();
        this._titleContainer.css("cursor", "move");
    }
    else {
        this._titleContainer.unbind("mousedown");
        this._titleContainer.css("cursor", "default");
    }
};

/**
 * 设置几个与resize相关的dom的显示情况
 * @param flag Boolean
 */
KDialog.prototype._setResizeDomState = function(flag)
{
    this._showOrHide(this._handleSE, flag);
    this._showOrHide(this._handleN, flag);
    this._showOrHide(this._handleS, flag);
    this._showOrHide(this._handleW, flag);
    this._showOrHide(this._handleE, flag);
};

/**
 * 设置min，max，restore，close几个dom的显示情况
 * @param min Boolean
 * @param max Boolean
 * @param restore Boolean
 * @param close Boolean
 */
KDialog.prototype._setBtnDomState = function(min, max, restore, close)
{
    this._showOrHide(this._btnMin, min);
    this._showOrHide(this._btnMax, max);
    this._showOrHide(this._btnRet, restore);
    this._showOrHide(this._btnClose, close);
};

/**
 * 创建resize相关dom的拖动
 * @param rdom  Node
 * @param type String
 */
KDialog.prototype._buildDragForResize = function(rdom, type) {
    var _this = this;

    var dom = this._jDom;
    var _width = 0;
    var _height = 0;
    var _body_cursor = null;

    this._buildDrag({
        //@uncrunch
        dom : rdom
        //@uncrunch
        ,drag : function(obj) {
            var beginOffset = obj.beginOffset;
            var beginPoint = obj.beginPoint;
            var movePoint = obj.movePoint;
            var pBounds = _this._getParentBounds();

            if ("corner" == type) {
                if (movePoint.x > pBounds.max.x) {
                    movePoint.x = pBounds.max.x;
                }

                if (movePoint.y > pBounds.max.y) {
                    movePoint.y = pBounds.max.y;
                }
                _this.resize(new KSize(_width + movePoint.x - beginPoint.x - (beginPoint.x - beginOffset.left) - $(window).scrollLeft(), _height + movePoint.y - beginPoint.y - (beginPoint.y - beginOffset.top) - $(document).scrollTop()));
            }
            else if ("top" == type) {
                if (movePoint.y >= pBounds.min.y) {
                    _this._moveAndResize(new KPoint(dom.offset().left, movePoint.y), new KSize(-1, _height - movePoint.y + beginPoint.y - (beginPoint.y - beginOffset.top) - $(document).scrollTop()), 'top');
                }
            }
            else if ("bottom" == type) {
                if (movePoint.y > pBounds.max.y) {
                    movePoint.y = pBounds.max.y;
                }
                _this.resize(new KSize(-1, _height + movePoint.y - beginPoint.y - (beginPoint.y - beginOffset.top) - $(document).scrollTop()));
            }
            else if ("left" == type) {
                if (movePoint.x >= pBounds.min.x) {
                    _this._moveAndResize(new KPoint(movePoint.x, dom.offset().top), new KSize(_width - movePoint.x + beginPoint.x - (beginPoint.x - beginOffset.left) - $(document).scrollLeft(), -1), 'left')
                }
            }
            else if ("right" == type) {
                if (movePoint.x > pBounds.max.x) {
                    movePoint.x = pBounds.max.x;
                }
                _this.resize(new KSize(_width + movePoint.x - beginPoint.x - (beginPoint.x - beginOffset.left) - $(document).scrollLeft(), -1));
            }
        }
        //@uncrunch
        ,dragStart : function() {
            _width = dom.width();
            _height = dom.height();

            var body = $(document.body);
            _body_cursor = body.css("cursor");
            if ("corner" == type) {
                body.css("cursor", "se-resize");
            }
            else if ("right" == type) {
                body.css("cursor", "e-resize");
            }
            else {
                body.css("cursor", "s-resize");
            }
        }
        //@uncrunch
        ,dragEnd : function() {
            $(document.body).css("cursor", "");
        }
    });
};

/**
 * 移动，并改变尺寸
 * @param point KPoint
 * @param size KSize
 */
KDialog.prototype._moveAndResize = function(point, size)
{
    this.resize(size);
    if(!arguments[2])
    {
        this.moveTo(point);
    }
    else
    {
        var _minWidth = this._minSize.width > 0 ? this._minSize.width : (this._titleDom.outerWidth() + this._btnContainer.outerWidth());
        var _minHeight = this._minSize.height > 0 ? this._minSize.height : this._titleContainer.outerHeight();
        if(((arguments[2] == 'left') && (size.width > _minWidth)) || ((arguments[2] == 'top') && (size.height > _minHeight)))
        {
            this.moveTo(point);
        }
    }
};

/**
 * 获取对话框可以拖动的范围
 * @return KBounds
 */
KDialog.prototype._getParentBounds = function()
{
    return this.options().dragrange ? this.options().dragrange : KTools.getBounds(window);
};

KDialog.prototype._getRB = function()
{
    var right = parseInt(this._jDom.css('padding-left')) + parseInt(this._jDom.css('padding-right'));
    var bottom = parseInt(this._jDom.css('padding-top')) + parseInt(this._jDom.css('padding-bottom'));
    var rBorder = parseInt(this._jDom.css('border-left-width')) + parseInt(this._jDom.css('border-right-width'));
    var bBorder = parseInt(this._jDom.css('border-top-width')) + parseInt(this._jDom.css('border-bottom-width'));

    return {right : right + rBorder,bottom : bottom + bBorder};
}
/*
下拉列表可显示富文本列表内容，提高交互性，从而弥补普通 html 下拉列表外观与操作单一性的缺点。

    * 显示时可根据上下左右四个方位空间显示下拉列表，也可以指定在固定方位显示。
    * 可设置下拉列表相对元素的偏移值，箭头始终指向元素。
    * 可控制隐藏方式：
          o 点击下拉列表之外自动隐藏。
          o 点击关闭按钮隐藏下拉列表。
    * 获取当前被选择的列表项目集合。
    * 可设置下拉按钮的可见性（上图中未包含下拉按钮）。
    * 列表可设置为多选或单选模式。

 作者：wangzheng
 版本：1.0
 创建时间：2010-02-26
 最后修改时间：2010-03-12 23:07
 ============================================
 『修改历史』
 */
var KDropList = KClass.create("KDropList", KWidget);

/**
 * 创建KDropList组件。当忽略 opts 参数时应自动读取标签内对应的自定义属性。
 * @param container Node 类型，组件 DOM 对象
 * @param opts KDropListOptions 类型
 */
KDropList.initialize = function(container, opts)
{
    this._dropPanel = undefined;
    this._list = undefined;
    this._dropPanelDom = undefined;
    this._listDom = undefined;

    if (KTools._isElement(container))
    {
        this._dom = container;
        this._opts = KTools.copyOptions(opts, KDropListOptions);
        this._theme = this._opts.theme;
        // add by zhangsq
        $(this._dom).removeClass().addClass(this.options().theme + '_dpl');
        this._dropPanelDom = $(">div", this._dom).get(0);
        this._listDom = $(">div:eq(1) >div >div", this._dropPanelDom).get(0);
        this._list = new KList(this._listDom, this._opts);
        this._dropPanel = new KDropPanel(this._dropPanelDom, this._opts);
        var this_ = this;

        KEvent.bind(this._list, "selectchanged", function(event, list, item) {
            if(this_._opts.select2text && !this_._opts.multiple && item.selected) this_._dropPanel.setText(item.text);
			KEvent.trigger(this_, "selectchanged", this_, item);
		});

		KEvent.bind(this._list, "itemclick", function(event, list, item, changed) {
            if(!this_._opts.multiple && item.selected) this_._dropPanel.close();
            KEvent.trigger(this_, "itemclick", this_, item, changed);
        });

        KEvent.bind(this._dropPanel, "opened", function(event, dropPanel, action) {
            KEvent.trigger(this_, "opened", this_, action);
        });
        KEvent.bind(this._dropPanel, "closed", function(event, dropPanel, action) {
            KEvent.trigger(this_, "closed", this_, action);
        });
        KEvent.bind(this._list, "beforedit", function(event, list, item){
            KEvent.trigger(this_, "beforedit", this_, item);
        });
        KEvent.bind(this._list, "afteredit", function(event, list, item){
            KEvent.trigger(this_, "afteredit", this_, item);
        });
        KEvent.bind(this._list, "beforemove", function(event, list, item){
            KEvent.trigger(this_, "beforemove", this_, item);
        });
        KEvent.bind(this._list, "afteremove", function(event, list, item){
            KEvent.trigger(this_, "afteremove", this_, item);
        });
        KEvent.bind(this._list, "aftersort", function(event, list, item){
            KEvent.trigger(this_, "aftersort", this_, item);
        });

    }
};


/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.version = function()
{
    return "1.0";
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.cnname = function()
{
    return "下拉列表";
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.setOptions = function(opts)
{
    this._opts = KTools.copyOptions(opts, KListOptions);
    this._theme = this._opts.theme;
    this._updateThemeClass(this._opts.userstyle);
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.setTheme = function(theme)
{
    if(typeof theme == "string")
    {
        this._theme = theme;
        this._opts.theme = this._theme;
        this._updateThemeClass(this._opts.userstyle);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.layout = function()
{
    if(this._dom) this._dropPanel.layout();
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.clearResult = function()
{
    if(this._dom) this._list.clearResult();
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.enable = function()
{
    if(this._dropPanel)this._dropPanel.enable();
    KWidget.prototype.enable.call(this);
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.disable = function()
{
    if(this._dropPanel)this._dropPanel.disable();
    KWidget.prototype.disable.call(this);
};


/**
 * 打开下拉列表
 * @uncrunch
 */
KDropList.prototype.open = function()
{
    if(this._dropPanel) this._dropPanel.open();
};

/**
 * 关闭下拉列表
 * @uncrunch
 */
KDropList.prototype.close = function()
{
    if(this._dropPanel) this._dropPanel.close();
};

/**
 * @uncrunch
 */
KDropList.prototype.bubbleVisible = function()
{
    if(this._dropPanel) return this._dropPanel.bubbleVisible();
    return false;
};

/**
 * 返回当前被选择的列表项目集合
 * @return KListItem[] 类型
 * @uncrunch
 */
KDropList.prototype.selected = function()
{
    if(this._list) return this._list.selected();
    return [];
};

/**
 * 选中指定序号的列表项目
 * @param index Integer 类型
 * @uncrunch
 */
KDropList.prototype.select = function(index)
{
    if(this._list) this._list.select(index);
};

/**
 * 将 item 增加到 index 表示的项目之前。忽略 index 将新项目增加到最后。
 * @param item KListItem 类型
 * @param index Integer 类型
 * @uncrunch
 */
KDropList.prototype.insert = function(item, index)
{
    if(this._list) {
        this._list.insert(item, index);
        if(this._opts.multiple === false && item.selected) this._dropPanel.setText(item.text);
    }
};

/**
 * 修改指定序号的列表项目为 item。
 * @param index Integer 类型。
 * @param item KListItem 类型。
 * @uncrunch
 */
KDropList.prototype.setItem = function(index, item)
{
    if(this._list) this._list.setItem(index, item);
};

/**
 * 删除指定 index 列表项目
 * @param index Integer
 * @uncrunch
 */
KDropList.prototype.remove = function(index)
{
    if(this._list) this._list.remove(index);
};

/**
 * 返回列表项目集合
 * @return KListItem[] 类型
 * @uncrunch
 */
KDropList.prototype.items = function()
{
    if(this._list) return this._list.items();
    return [];
};

/**
 * 返回指定序号的列表项目
 * @param index Integer 类型，当序号小于列表项目最小值或最大值，则返回第一个或最后一个列表项目。
 * @return KListItem 类型
 * @uncrunch
 */
KDropList.prototype.item = function(index)
{
    if(this._list) return this._list.item(index);
    return undefined;
};

/**
 * 设置 index 表示的列表项目序号为 target ，实现排序功能
 * @param index Integer 类型
 * @param target Integer 类型
 * @uncrunch
 */
KDropList.prototype.setIndex = function(index, target)
{
    if(this._list) this._list.setIndex(index, target);
};

/**
 *  设置功能区容器样式是否始终为 theme_dpp_e 。
 * @param keep：Boolean 类型，默认为 false
 * @uncrunch
 */
KDropList.prototype.keepOpenedStyle = function(keep)
{
    if(this._dropPanel) this._dropPanel.keepOpenedStyle(keep);
};

KDropList.prototype._updateThemeClass = function(useDefault)
{
    if (this._dom && useDefault == false) this._dom.className = this._theme + "_dpl";
};

/**
 *  返回功能区容器样式是否始终为 theme_dpl_e 。
 * @return Boolean 类型
 * @uncrunch
 */
KDropList.prototype.openedStyleKept = function()
{
    if(this._dropPanel) return this._dropPanel.openedStyleKept();
    return false;
};



/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.finalize = function()
{
    KEvent.clear(this._dropPanel);
    KEvent.clear(this._list);
    if(this._dropPanel) this._dropPanel.finalize();
    if(this._list) this._list.finalize();
    KWidget.prototype.finalize.apply(this);
};

/**
 * @overwrite
 * @uncrunch
 */
KDropList.prototype.dependent = function()
{
    return [KWidget, KTools, KDropListOptions,jQuery, KEvent, KBubble,KSize,KPosition,KList, KDropPanel, KListItem];
};
/*
下拉面板以下拉方式显示额外的富文本区块，提高页面元素的交互性，拉升层次感。

    * 显示时可根据上下左右四个方位空间显示下拉面板，也可以指定在固定方位显示。
    * 可设置下拉面板相对目标元素的偏移值，以及目标元素的边距等，从而更精确的控制面板的显示位置。
    * 可控制隐藏方式：
          o 点击下拉列表之外自动隐藏。
          o 点击关闭按钮隐藏下拉列表。
    * 可设置下拉按钮的可见性，当按钮不可见时，点击下拉面板的“当前项元素”也可以打开下拉面板。

 作者：wangzheng
 版本：1.0
 创建时间：2010-02-26
 最后修改时间：2010-02-26 23:07
 ============================================
 『修改历史』
 */
var KDropPanel = KClass.create("KDropPanel", KWidget);

/**
 * 创建KDropPanel组件。当忽略 opts 参数时应自动读取标签内对应的自定义属性。
 * @param container Node 类型，组件 DOM 对象
 * @param opts KDropPanelOptions  类型
 */
KDropPanel.initialize = function(container, opts)
{
    //气泡对象
    this._bubble = undefined;
    //显示选中值处的jdom
    this._resultDiv = undefined;
    this._bubbleDom = undefined;
    this._resultDivA1 = undefined;
    this._resultDivA2 = undefined;
    this._keepOpen = false;

    if (KTools._isElement(container))
    {
        this._dom = container;
        this._opts = KTools.copyOptions(opts, KDropPanelOptions);
        this._theme = this._opts.theme;
        this._divs = $(">div", this._dom);
        this._resultDiv = this._divs.eq(0);
        var _as = $(">a", this._resultDiv);
        this._resultDivA1 = _as.eq(0);
        this._resultDivA2 = _as.eq(1);
        this._doms = [this._dom, this._resultDiv.get(0), this._resultDivA1.get(0), this._resultDivA2.get(0)];
        this._defaultDomClass(this._doms, true);
        this._bubbleDom = this._divs.get(1);
        if (this._bubbleDom) this._bubble = new KBubble(this._bubbleDom, {theme : this._theme, userstyle:true});
        if (this._opts.userstyle == false) this._updateThemeClass(false);
        var this_ = this;
        var _2AClickFun = function(event){
            event.preventDefault();
            //
            if (!this_._enabled) return true;
            var _action = "text";
            if (this === this_._resultDivA2.get(0)) _action = "dropbtn";
            if (this_._bubble.visible() == true) {
                this_.close(_action);
                this_._updateResultA2Class(false);
            } else {
                this_.open(_action);
                this_._updateResultA2Class(true);
            }
        };
        if (this._opts.hover && this._opts.hover === true) {
            this._resultDiv.bind("mouseenter", function(event){
                event.preventDefault();
                //
                if (!this_._enabled) return true;
                var _action = "text";
                if (this_._bubble.visible() == false) {
                    this_.open(_action);
                    this_._updateResultA2Class(true);
                }
            });
            $(this._dom).bind("mouseleave", function(event){
                event.preventDefault();
                //
                if (!this_._enabled) return true;
                var _action = "text";
                if (this_._bubble.visible() == true) {
                    this_.close(_action);
                    this_._updateResultA2Class(false);
                }
            });
        } else {
            KEvent.bind(this._resultDiv.get(0), "click", _2AClickFun);
        }
        
        
        KEvent.bind(this._bubble, 'aftershow', function() {
            if (this_._opts.userstyle == false)
            {
                this_._resultDiv.addClass(this_._theme + "_dpp_e");
            }
            KEvent.trigger(this_, "opened", this_, this_._mouse_action);
        });
        KEvent.bind(this._bubble, 'afterhide', function() {
            this_._updateResultA2Class(false);
            if (this_._opts.userstyle == false && this_._keepOpen == false)
            {
                this_._resultDiv.removeClass(this_._theme + "_dpp_e");
            }
            var _action = arguments[2];
            if(_action === "method") _action = this_._mouse_action
            KEvent.trigger(this_, "closed", this_, _action);
        });
        if(this._opts.size instanceof KSize && this_._bubble) this_._bubble.resize(this._opts.size);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.version = function()
{
    return "1.0";
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.cnname = function()
{
    return "下拉面板";
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.setOptions = function(obj)
{
    if(!this._enabled)return;
    this._opts = KTools.copyOptions(obj, this._opts);
    this._theme = this._opts.theme;
    if(this._dom) this._updateThemeClass(this._opts.userstyle);
    if(this._bubble)
    {
        this._bubble.setOptions({theme:this._theme,userstyle:this._opts.userstyle});
        if(obj.size instanceof KSize) this._bubble.resize(this._opts.size);
        if(this._bubble.visible() == true) this._bubble.show(this._resultDivA1.get(0), this._opts);
    }
};

/**
 * @uncrunch
 */
KDropPanel.prototype.bubbleVisible = function()
{
    if(!this._enabled) return;
    if(this._bubble) return this._bubble.visible();
    return false;
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.setTheme = function(scheme)
{
    if(!this._enabled)return;
    if (typeof scheme == 'string') this._theme = scheme;
    this._updateThemeClass(this._opts.userstyle);
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.layout = function()
{
    if(!this._enabled)return;
    if (this._bubble instanceof KBubble) this._bubble.layout();
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.clearResult = function()
{
    if(!this._enabled)return;
    if(!this._enabled)return;
    if (this._bubble instanceof KBubble) this._bubble.clearResult();
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.enable = function()
{
    if(this._dom)
    {
        $(this._dom).removeClass(this._theme+"_dpp_dis");
//        $(this._resultDivA1).css("cursor","");
//        $(this._resultDivA2).css("cursor","");
        if(this._lastbubbleV)
        {
            $(this._bubbleDom).show();
            this._bubble.layout();
        }
    }
    KWidget.prototype.enable.call(this);
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.disable = function()
{
    if(this._dom)
    {
        $(this._dom).addClass(this._theme+"_dpp_dis");
        this._lastbubbleV = $(this._bubbleDom).is(":visible");
        if(this._lastbubbleV) $(this._bubbleDom).hide();
    }
    KWidget.prototype.disable.call(this);
};

/**
 * 打开下拉面板
 * @uncrunch
 */
KDropPanel.prototype.open = function()
{
    if(!this._enabled) return;
    if(this._bubble instanceof KBubble && !this._bubble.visible())
    {
        this._mouse_action = arguments[0];
        if(typeof this._mouse_action != 'string') this._mouse_action = "method";
        this._bubble.show(this._resultDiv.get(0), this._opts);
    }
};

/**
 * 关闭面板
 * @uncrunch
 */
KDropPanel.prototype.close = function()
{
    if(!this._enabled)return;
    if(this._bubble instanceof KBubble && this._bubble.visible())
    {
        this._mouse_action = arguments[0];
        if(typeof this._mouse_action != 'string') this._mouse_action = "method";
        this._bubble.hide();
    }
};

/**
 * 设置当前项元素内容。
 * @param text KHtmlContent 类型
 * @uncrunch
 */
KDropPanel.prototype.setText = function(text)
{
    if(!this._enabled)return;
    if(!this._resultDivA1) return;
    if(typeof text == "string")
    {
        this._resultDivA1.html(text);
        this.layout();
    } else if(KTools._isElement(text)){
        this._resultDivA1.html("");
        this._resultDivA1.append(text);
        this.layout();
    }
};

/**
 * 设置面板内容。
 * @param content KHtmlContent 类型
 * @uncrunch
 */
KDropPanel.prototype.setContent = function(content)
{
    if(!this._enabled)return;
    if(this._bubble) this._bubble.setContent(content);
};

/**
 * 设置面板尺寸。
 * @param size KSize 类型
 * @uncrunch
 */
KDropPanel.prototype.setPanelSize = function(size)
{
    if(!this._enabled)return;
    if(this._bubble && this._bubble.visible() == true && size instanceof KSize)
    {
        this._opts.size = size;
        this._bubble.resize(size);
    }
};

/**
 *  设置功能区容器样式是否始终为 theme_dpp_e 。
 * @param keep：Boolean 类型，默认为 false
 * @uncrunch
 */
KDropPanel.prototype.keepOpenedStyle = function(keep)
{
    if(!this._enabled)return;
    if(typeof keep != 'boolean') keep = false;
    this._keepOpen = keep;
    if(this._dom && this._opts.userstyle == false)
    {
        if(keep) this._resultDiv.addClass(this._theme + "_dpp_e");
        else this._resultDiv.removeClass(this._theme + "_dpp_e");
    }
};

KDropPanel.prototype._defaultDomClass = function(doms, save)
{
    if (save)
    {
        for (var i = 0; i < doms.length; i++)
            if (doms[i]) doms[i]._dDClass = doms[i].className;
    } else {
        for (var i = 0; i < doms.length; i++)
            if (doms[i]) doms[i].className = doms[i]._dDClass;
    }
};

KDropPanel.prototype._updateThemeClass = function(useDefault)
{
    if (this._dom)
    {
        if (useDefault == true)
        {
            this._defaultDomClass(this._doms, false);
        } else {
            this._setClass(this._dom, this._theme + "_dpp");
            if (this._resultDiv.get(0))
            {
                if (this._resultDiv.get(0).className != "")
                {
                    var c = this._resultDiv.get(0).className;
                    c = c.replace(/[^\ ]*?_dpp_s/g, this._theme + "_dpp_s");
                    c = c.replace(/[^\ ]*?_dpp_e/g, this._theme + "_dpp_e");
                    this._setClass(this._resultDiv.get(0), c);
                } else
                    this._setClass(this._resultDiv.get(0), this._theme + "_dpp_s");
            }
            this._setClass(this._resultDivA1.get(0), this._theme + "_dpp_sv");
            if (this._resultDivA2.get(0))
            {
                if (this._resultDivA2.get(0).className != "")
                {
                    var c = this._resultDivA2.get(0).className;
                    c = c.replace(/[^\ ]*?_dpp_b/g, this._theme + "_dpp_b");
                    c = c.replace(/[^\ ]*?_dpp_bd/g, this._theme + "_dpp_bd");
                    this._setClass(this._resultDivA2.get(0), c);
                } else
                    this._setClass(this._resultDivA2.get(0), this._theme + "_dpp_b");
            }
        }
    }
};
KDropPanel.prototype._setClass = function(dom, className)
{
    if (dom) dom.className = className;
};

KDropPanel.prototype._updateResultA2Class = function(d)
{
    if (d == true)
    {
        if(this._resultDivA2.get(0)) this._resultDivA2.addClass(this._resultDivA2.get(0).className.replace(/([^\ ]*?)_dpp_b/g, "$1_dpp_b $1_dpp_bd"));
    } else {
        if(this._resultDivA2.get(0)) this._resultDivA2.get(0).className = this._resultDivA2.get(0).className.replace(/([^\ ]*?)_dpp_bd/g, "");
    }
};

/**
 *  返回功能区容器样式是否始终为 theme_dpl_e 。
 * @return Boolean 类型
 * @uncrunch
 */
KDropPanel.prototype.openedStyleKept = function()
{
    return this._keepOpen;
};



/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.finalize = function()
{
    if(this._dom)
    {
        KEvent.clear(this._dom);
        KEvent.clear(this._bubble);
        this._bubble.finalize();
        KEvent.clear(this._resultDiv.get(0));
    }
    KWidget.prototype.finalize.apply(this);
};

/**
 * @overwrite
 * @uncrunch
 */
KDropPanel.prototype.dependent = function()
{
    return [KWidget, KTools, KDropPanelOptions,jQuery, KEvent, KBubble,KSize,KPosition];
};
/*
 滚动列表组件。
 作者：songyr
 版本：1.0
 创建时间：2010-03-03
 最后修改时间：2010-03-03 14:01
 ============================================
 『修改历史』
 */

var KHScrollList = KClass.create("KHScrollList", KWidget);

KHScrollList.conf =
{
    CLASSNAME :
    {
        //顶级容器样式
        HSL : "_hsl"
        //列表遮罩层样式。
        ,MSK : "_hsl_msk"
        //列表容器样式。
        ,US:"_hsl_us"
        //左滚动按钮样式。
        ,LM:"_hsl_lm"
        // 左滚动按钮禁用样式。
        ,LMD :"_hsl_lmd"
        // 右滚动按钮样式。
        ,RM:"_hsl_rm"
        //  右滚动按钮禁用样式。
        ,RMD:"_hsl_rmd"
        //重置按钮样式。
        ,RST:"_hsl_rst"
        //列表项目选中样式，需要设置到 li 标签上。
        ,S:"_hsl_s"
        ,DIS:"_hsl_dis"
    }
};


/**
 * 构造方法。
 * @param container Node
 * @param opts KScrollListOptions
 * @uncrunch
 */

KHScrollList.initialize = function(container, opts)
{
    var _this = this;
    this._scrollWidth = 0;
    //opts参数设置
    this.setOptions(KHScrollListOptions);
    this.setOptions(opts);
    this.setTheme(this.options().theme);
    //定义组件Dom对象。
    this._jDom = $(container);
    this._dom = this._jDom[0];
    this._buttons = $(">a", this._jDom);
    this._msk = $("> div", this._jDom).eq(0);
    this._mskUl = $(">ul", this._msk);
    this._mskLis = $(">li", this._mskUl);
    this._mskLiWidth = this._mskLis.eq(0).outerWidth(true);
    this._mskSize = this._mskLis.size();
    this._listCount = Math.floor(this._msk.outerWidth(true) / this._mskLiWidth);
    this._resetBtn = null;
    this._enabled = true;
    this._buttons.each(function(i) {
        if (i > 1) {
            _this._resetBtn = $(this);
            _this.showResetBtn(false);
            $(this).click(function() {
                if(_this.enabled())_this.reset();
            });
            return false;
        }
        $(this).click(function() {
            if(_this.enabled())_this._scrollList(i);
        });

    });

    var ind = 0;
    if (this.options().multiple) {

        this._mskLis.each(function() {
            var $li = $(this);
            this.index = ind++;
            $li.bind("click",
                    function() {
                        if(_this.enabled()) {
                            $(this).toggleClass(_this._setClassName("S"));
                            _this.showResetBtn(!_this.selected().length == 0);
                            KEvent.trigger(_this, "selectchanged", _this, _this._liTodom(this), this);
                        }
                    }).mouseenter(function() {
                if(_this.enabled()){
                    KEvent.trigger(_this, "mouseover", _this, _this._liTodom(this), this);
                }
            }).mouseleave(function() {
                if(_this.enabled()){
                    KEvent.trigger(_this, "mouseout", _this, _this._liTodom(this), this);
                }
            });

            if ($li.attr("selected")) {
                _this.showResetBtn();
                $li.addClass(_this._setClassName("S"));
            }
        });
    } else {
        var _thisSelected = this._mskLis.filter("li[selected='true']").last().addClass(_this._setClassName("S"));
        this._mskLis.each(function() {
            var $li = $(this);
            this.index = ind++;
            $li.bind("click",
                    function() {
                        if(_this.enabled()) {

                            _thisSelected.removeClass(_this._setClassName("S"));
                            _thisSelected = $(this).toggleClass(_this._setClassName("S"));
    //                        _this._liTodom(this)
                            _this.showResetBtn(!_this.selected().length == 0);
                            KEvent.trigger(_this, "selectchanged", _this, _this._liTodom(this), this);
                        }
                    }).mouseenter(function() {
                if(_this.enabled()) {
                    KEvent.trigger(_this, "mouseover", _this, _this._liTodom(this), this);
                }
            }).mouseleave(function() {
                if(_this.enabled()) {
                    KEvent.trigger(_this, "mouseout", _this, _this._liTodom(this), this);
                }
            });
        });

    }
};

/**
 *  返回当前被选中的列表项目集合。
 *  @return  KListItem[] 类型。
 * @uncrunch
 */
KHScrollList.prototype.selected = function()
{
    var tmpArry = [],JLitem,KLitem;

    for (var i = 0, j = this._mskLis.length; i < j; i++) {
        JLitem = this._mskLis.eq(i);

        if (JLitem.is("." + this._setClassName("S")))
        {
            //            console.log(JLitem.is("." + this._setClassName("S")));
            KLitem = KTools.copyOptions({}, KListItem);
            KLitem.index = i;
            KLitem.text = JLitem.html();
            KLitem.kvalue = JLitem.attr("kvalue") || "";
            KLitem.node = JLitem[0];
            KLitem.itemClass = JLitem.children("a").attr("class");
            KLitem.selected = true;
            //            KLitem = {
            //                index:i,
            //                text: JLitem.children("a").html().split("<span>")[0]  ,
            //                node: JLitem[0],
            //                kvalue:  JLitem.attr("kvalue") || "" ,
            //                itemClass:JLitem.children("a").attr("class")  ,
            //                selected: true
            //            };
            tmpArry.push(KLitem);
        }
    }

    return tmpArry;
    //    return  this._mskLis.filter("." + this._setClassName("S"));
};

/**
 * 取消所有图标的被选中状态。
 * @uncrunch
 */
KHScrollList.prototype.reset = function()
{
    var _cName = this._setClassName("S");
    this._mskLis.each(function() {
        $(this).removeClass(_cName);
    });
    //    this._buttons
    this.showResetBtn(false);
    KEvent.trigger(this, "reset", this);
};

KHScrollList.prototype.showResetBtn = function(show){
    if(!this._resetBtn) return;
    var display = !this._resetBtn.is(":hidden");
    if(show || typeof show == "undefined"){
        if(display) return;
        this._resetBtn.show();
        this._jDom.width(this._jDom.width() + this._resetBtn.outerWidth());
    }else{
        if(!display) return;
        this._resetBtn.hide();
        this._jDom.width(this._jDom.width() - this._resetBtn.outerWidth());
    }
};
//实现KObject 接口
/**
 *  释放当前对象的所有资源
 * @uncrunch
 */
KHScrollList.prototype.finalize = function()
{
    KManager.unregister(this);
    KEvent.clear(this);
    KEvent.clear(this._dom);
    KWidget.prototype.finalize.apply(this);
};

//实现KWidget 接口

/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KHScrollList.prototype.version = function()
{
    return "1.0";
};

/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KHScrollList.prototype.cnname = function()
{
    return "滚动列表组件";
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KHScrollList.prototype.dependent = function()
{
    return [ KClass, KEvent, KHScrollListOptions, KListItem, KLitem, KManager, KObject, KScrollListOptions, KTools,
			KWidget, jQuery ];
};

/**
 * 设置组件配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 * @param obj
 * @uncrunch
 */
KHScrollList.prototype.setOptions = function(obj)
{
    this._opts = KTools.copyOptions(obj, this.options());
};

/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KHScrollList.prototype.setTheme = function(scheme)
{
    this._theme = scheme;
};

//end KWidget


/**
 * 左右滚动
 * @param i
 */
KHScrollList.prototype._scrollList = function(i)
{
    if (i === 0)
    {
        if (this._scrollWidth == 0) {
            //        this.changeCss(i, true);
            //            this._buttons.eq(i).addClass(this.setClassName("RMD")).removeClass(this.setClassName("RM"));

            return;
        }
        this._scrollWidth += this._mskLiWidth * (this.options().scrollcount || this._listCount );

    }
    else if (i === 1) {
        if (this._mskSize + (this._scrollWidth / this._mskLiWidth) <= this._listCount) {
            //           this.changeCss(i, true);
            //              this._buttons.eq(i).addClass(this.setClassName("LMD")).removeClass(this.setClassName("LM"));
            return;

        }
        this._scrollWidth -= this._mskLiWidth * (this.options().scrollcount || this._listCount);
        //  $(this._buttons[i]).addClass(this.setClassName("RM")).removeClass("RMD")

    }
    //    this._scrollWidth = this._scrollWidth + (i ? this._mskLiWidth * (this.options().scrollcount || 1) : - this._mskLiWidth * (this.options().scrollcount || 1));
    else {
        this._scrollWidth = 0;
    }

    if (this.options().animation)
    {
        //动画滑动
        this._mskUl.animate({marginLeft:this._scrollWidth}
                , 600
            //  3600/(this.options().scrollcount|| this._listCount)
                );

    } else {

        this._mskUl.css("marginLeft", this._scrollWidth);
    }
    this._changeCss(i);
};


/**
 *   根据缩写得到样式全名
 * @param arg  样式缩写
 */
KHScrollList.prototype._setClassName = function(arg)
{
    if (!this.options().userstyle && arg && KHScrollList.conf.CLASSNAME[arg])
    {
        return this.options().theme + KHScrollList.conf.CLASSNAME[arg];
    }
    return undefined;
};

/**
 * 设置左右键的样式
 * @param i   1代表右键 0代表左键
 */
KHScrollList.prototype._changeCss = function(i)
{
    this._buttons.eq(Math.abs(i - 1)).addClass(this._setClassName(i ? "LM" : "RM")).removeClass(this._setClassName(i ? "LMD" : "RMD"));

    //这部分代码感觉可以优化 songyr
    if (this._scrollWidth == 0) {
        this._buttons.eq(0).addClass(this._setClassName("LMD")).removeClass(this._setClassName("LM"));
    }
    else if (this._mskSize + (this._scrollWidth / this._mskLiWidth) <= this._listCount) {
        this._buttons.eq(1).addClass(this._setClassName("RMD")).removeClass(this._setClassName("RM"));
    }
};


KHScrollList.prototype._liTodom = function(li) {

    var KLitem = KTools.copyOptions({}, KListItem), JLitem = $(li);
    KLitem.index = li.index;
    KLitem.text = JLitem.html();
    KLitem.kvalue = JLitem.attr("kvalue") || "";
    KLitem.node = JLitem[0];
    KLitem.itemClass = JLitem.children("a").attr("class");
    KLitem.selected = JLitem.hasClass(this._setClassName("S"));
    return KLitem;
};
/**
 * 返回控件的使用状态
 * @uncrunch
 */
KHScrollList.prototype.enabled = function()
{
    return this._enabled;
};

/**
 * 启用控件的使用状态
 * @uncrunch
 */
KHScrollList.prototype.enable = function()
{
    if(this._enabled) return;
    this._enabled = true;
    this._jDom.removeClass(this._setClassName("DIS"));
};

/**
 * 禁用控件的使用状态
 * @uncrunch
 */
KHScrollList.prototype.disable = function()
{
    if(!this._enabled) return;
    this._enabled = false;
    this._jDom.addClass(this._setClassName("DIS"));
};
/*
列表控件实现类似多选 select 控件的功能，并增加排序、管理等功能。

    * 列表可控制单选或多选。
    * 列表项前支持图标。
    * 支持逐条编辑功能，每行后面显示修改和删除按钮，修改表示修改列表项目文字。
    * 支持拖拽排序功能。
    * 选择框并不局限于 checkbox ，可以是任何标签。默认为 checkbox 标签，否则需要通过列表项目的 selected 事件在应用层完成选中状态的切换。
    * 应用层需要动态设置图标元素的样式名称，以满足不同列表项目显示不同图标的功能。

 作者：wangzheng
 版本：1.0
 创建时间：2010-03-09
 最后修改时间：2010-03-09 20:07
 ============================================
 『修改历史』
 opt# 1011021057
 修改了编辑内容时回车后不能保存的问题
 */
var KList = KClass.create("KList", KWidget);

/**
 * 创建KList组件。当忽略 opts 参数时应自动读取标签内对应的自定义属性。
 * @param container Node 类型，组件 DOM 对象
 * @param opts KListOptions  类型
 */
KList.initialize = function(container, opts)
{
    var this_ = this;
    this._dom = undefined;
    this._opts = undefined;
    //[li node]
    this._items = [];
    //{li node}
    this._selected = [];

    var data_ = {this_:this_};
    if (KTools._isElement(container))
    {
        this._opts = KTools.copyOptions(opts, KListOptions);
        this._theme = this._opts.theme;
        this._dom = container;
        this._dom._ul = $(">ul", this._dom);
        this._lis = $(">ul >li", this._dom);
        this._items = [];
        this._editInput = $("<input type='text'' class='"+this._theme+"_lst_etb' ></input>").get(0);
        KEvent.bind(this._editInput, "click", KTools._stopPropagation);
        this._lis.each(function() {
            //列表信息初始化
            this_._initLiAttr(this);
            //对象保存
            this.index = this_._items.length;
            this_._items.push(this);
            if(this.selected)
                this_._selected.push(this);
            //事件处理
            this_._liEvents(this);
        });
        this._updateThemeClass(this._opts.userstyle);
        this._moveDiv = $("<div class=\""+this._dom.className+"\" style=\"position:absolute;height:0px;width:0px;opacity:0.7;*filter:alpha(opacity=70);border:0px none;z-index:"+(KTools._zindexMax - 5)+";"+this._dom.style.cssText+"\"><ul class=\""+this._dom.className+"\" style=\"border:0px;height:auto;width:auto;"+this._dom.style.cssText+"\"></ul></div>").appendTo(document.body).hide().get(0);
        this._moveDiv._ul = $(">ul", this._moveDiv);
        this._blackLi = $("<li style='background-color:#eee;border:none;'></li>").get(0);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KList.prototype.version = function()
{
    return "1.0"
};

/**
 * @overwrite
 * @uncrunch
 */
KList.prototype.cnname = function()
{
    return "列表组件";
};

/**
 * @overwrite
 * @uncrunch
 */
KList.prototype.setOptions = function(opts)
{
    this._opts = KTools.copyOptions(opts, KListOptions);
    this._theme = this._opts.theme;
    this._updateThemeClass(this._opts.userstyle);
};

/**
 * @overwrite
 * @uncrunch
 */
KList.prototype.setTheme = function(theme)
{
    if(typeof theme == "string")
    {
        this._theme = theme;
        this._opts.theme = this._theme;
        this._updateThemeClass(this._opts.userstyle);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KList.prototype.clearResult = function()
{
    if(this._dom)
    {
        for(var i = 0; i < this._items.length; i++) this._removeLiDom(this._items[i]);
        this._items = [];
        this._selected = []; 
        KTools.removeNode($(">ul >li", this._moveDiv).get(0));
        this._lis = $(">ul >li", this._dom);
    }
};

/**
 * 返回当前被选择的列表项目集合
 * @return KListItem[] 类型。
 * @uncrunch
 */
KList.prototype.selected = function()
{
    if(this._selected instanceof Array)
    {
        var _selects = [];
        for(var i = 0; i < this._selected.length; i++) _selects.push(this._liDomToItem(this._selected[i]));
        return _selects;
    }
    return [];
};

/**
 * 选中指定序号的列表项目。
 * @param index Integer 类型
 * @uncrunch
 */
KList.prototype.select = function(index, select)
{
    if(this._items instanceof Array && typeof index == 'number' && this._items[index])
    {
        if(typeof select != "boolean") select = true;
        if(this._opts.multiple == false)
        {
            var i = this._selected.pop();
            while(i) {
                i.selected = false;
                i._selectedIndex = -1;
                i._span0Input.attr("checked", "");
                if(this._opts.userstyle == false) i.className = "";
                i = this._selected.pop();
            }
        }
        var _liDom = this._items[index];
        var input_ = _liDom._span0Input;
        if(_liDom.selected)
        {
            if(select) return;
            _liDom._selectedIndex = -1;
            _liDom.selected = false;
            input_.attr("checked", "");
        } else {
            if(!select) return;
            _liDom.selected = true;
            input_.attr("checked", "checked");
        }
        if(this._opts.userstyle == false)
        {
            if(select) $(_liDom).addClass(this._theme + "_lst_s");else $(_liDom).removeClass(this._theme + "_lst_s");
        }
        this._updateItemAndSelect(false, false);
		var _lti = this._liDomToItem(_liDom);
		//想抛出 selectchanged 事件 为true
		if(arguments[2]) KEvent.trigger(this, "itemclick", this, _lti, true);
		//不想抛出 selectchanged 事件 为true 
        if(!arguments[3]) KEvent.trigger(this, "selectchanged", this, _lti);
    }
};


/**
 * 选中或取消选中所有列表项目。
 * @param select Boolean 类型，默认为 false
 * @uncrunch
 */
KList.prototype.selectAll = function(select)
{
    if(typeof select != "boolean") select = false;
    if(this._items)
        for(var i = 0; i < this._items.length; i++) this.select(i, select);
};


/**
 * 增加列表项目。如果设置了 index 参数，则将 item 增加到index 指定的列表项目之前。忽略 index 将新项目增加到最后。
 * @param item KListItem 类型
 * @param index Integer 类型
 * @uncrunch
 */
KList.prototype.insert = function(item, index)
{
    if(item)
    {
        if(typeof index == 'number') index = parseInt(index); else index = this._items.length;
        if(index < 0) index = 0;
        item = KTools.copyOptions(item, KListItem);
        var _dom = this._itemToLiDom(item);
        this._initLiAttr(_dom);
        this._liEvents(_dom);
        if(this._items[index]) $(this._items[index]).before(_dom);
        else {
            if(this._items.length > 0)
                $(this._items[this._items.length - 1]).after(_dom);
            else $(this._dom._ul).prepend(_dom);
        }
		if(item.selected) {
			for(var i = 0; i < this._selected.length; i++) {
				var lidom = this._selected[i];
				lidom.selected = false;
				lidom._span0Input.eq(0).attr("checked", "");
				lidom.className = "";
			}
		}
        this._updateItemAndSelect(true);
		//this._lis = $(">ul >li", this._dom);
		//this.select(index, true, false, true);
    }
};

/**
 * 修改指定序号的列表项目为 item。
 * @param index Integer 类型。 
 * @param item KListItem 类型。
 * @uncrunch
 */
KList.prototype.setItem = function(index, item)
{
    if(typeof index == 'number' && item && this._items[index])
    {
        this._removeLiDom(this._items[index]);
        this.insert(item, index+1);
    }
};

/**
 * 删除指定 index 列表项目。
 * @param index Integer
 * @uncrunch
 */
KList.prototype.remove = function(index)
{
    if(typeof index == 'number' && this._items[index])
    {
        this._removeLiDom(this._items[index]);
        KEvent.trigger(this, "afteremove", this, this._liDomToItem(this._items[index]));
        this._updateItemAndSelect(true);
    }
};

/**
 * 返回列表项目集合
 * @return KListItem[] 类型
 * @uncrunch
 */
KList.prototype.items = function()
{
    if(!this._items) return [];
    var _items = [];
    for(var i = 0; i < this._items.length; i++)
        _items.push(this.item(i));
    return _items;
};

/**
 * 返回指定序号的列表项目
 * @param index Integer 类型，当序号小于列表项目最小值或最大值，则返回第一个或最后一个列表项目。
 * @return KListItem 类型
 * @uncrunch
 */
KList.prototype.item = function(index)
{
    if(typeof index == 'number' && this._items.length > 0)
    {
        index = parseInt(index);
        if(index < 0) index = 0;
        if(index >= this._items.length) index = this._items.length - 1;
        return this._liDomToItem(this._items[index]);
    }
    return undefined;
};

/**
 * 设置 index 表示的列表项目序号为 target ，实现排序功能
 * @param index Integer 类型
 * @param target Integer 类型
 * @uncrunch
 */
KList.prototype.setIndex = function(index, target)
{
    if(this._opts.sortable == true && typeof index == 'number' && typeof target == 'number' && index != target && this._items[index] && this._items[target])
    {
        if(index < target) $(this._items[target]).after(this._items[index]);
        else $(this._items[target]).before(this._items[index]);
        this._updateItemAndSelect(true);
        KEvent.trigger(this, "aftersort", this, this._liDomToItem(this._items[index]));
    }
};

KList.prototype._liDomToItem = function(liDom)
{
    var _item = {};
        for(var j in KListItem)
        {
            if(j == "kvalue") _item[j] = decodeURIComponent(liDom[j]);
			else _item[j] = liDom[j];
        }
    return _item;
};

KList.prototype._itemToLiDom = function(item)
{
    var newLi = null;
    if(this._opts.checkbox === true)
        newLi = $('<li kvalue="'+encodeURIComponent(item.kvalue)+'" deletable="'+item.deletable+'" editable="'+item.editable+'" editable="'+item.editable+'" selected="'+item.selected+'"><span><input type="checkbox"  '+(item.selected?'checked="checked"':'')+'/></span><span class="'+item.iconClass+'"></span><label>'+item.text+'</label><a href="javascript:;" title="编辑">编辑</a><a href="javascript:;" title="删除">删除</a></li>').get(0);
    else
        newLi = $('<li kvalue="'+encodeURIComponent(item.kvalue)+'" deletable="'+item.deletable+'" editable="'+item.editable+'" editable="'+item.editable+'" selected="'+item.selected+'"><span></span><span class="'+item.iconClass+'"></span><label>'+item.text+'</label><a href="javascript:;" title="编辑">编辑</a><a href="javascript:;" title="删除">删除</a></li>').get(0);
    if(!this._opts.userstyle)
    {
        $(">span:eq(0)", newLi).addClass(this._theme+'_lst_c');
        $(">a:eq(0)", newLi).addClass(this._theme+'_lst_et');
        $(">a:eq(1)", newLi).addClass(this._theme+'_lst_rm');
    }
    return newLi;
};

KList.prototype._removeLiDom = function(liDom)
{
	if (liDom._span0Input && liDom._span0Input.get(0)) {
		KEvent.clear(liDom._span0Input.get(0));
	}
	//暂时捕捉此异常
	try{
		KEvent.clear(liDom._as.get(0));
		KEvent.clear(liDom._as.get(1));
	}catch(e){
	}
    KEvent.clear(liDom);
    liDom._spans = null;
    liDom._span0Input = null;
    liDom._labels = null;
    liDom._as = null;
    KTools.removeNode(liDom);
};

/**
 * @overwrite
 * @uncrunch
 */
KList.prototype.finalize = function()
{
    this.clearResult();
    KTools.removeNode(this._editInput);
    KEvent.clear(this._editInput);
    KTools.removeNode(this._blackLi);
    KEvent.clear(this._blackLi);
    KTools.removeNode(this._moveDiv);
    KEvent.clear(this._moveDiv);
    KEvent.clear(this._dom);
    KEvent.clear(this._dom);
    KEvent.unbind(document, "mousemove", this._docMouseMove);
    KEvent.unbind(document, "mouseup", this._docMouseUp);
    KWidget.prototype.finalize.apply(this);
};

/**
 * @overwrite
 * @uncrunch
 */
KList.prototype.dependent = function()
{
    return [KWidget, jQuery, KEvent, KTools, KListOptions, KListItem, KPoint];
};

KList.prototype._updateThemeClass = function(useDefault)
{
    var this_ = this;
    if (this._dom)
    {
        if (useDefault == false)
        {
            var _lis_ = this._lis;
            _lis_.each(function() {
                this._spans.eq(0).attr("className", this_._theme + "_lst_c");
                this._as.eq(0).attr("className", this_._theme + "_lst_et");
                this._as.eq(1).attr("className", this_._theme + "_lst_rm");
            });
            this._dom.className = this_._theme + "_lst";
        }
    }
};

KList.prototype._setClass = function(dom, className)
{
    if (dom) dom.className = className;
};

//opt# 1011021057 fix begin
/**
 * 响应编辑时的回车
 * @param event
 */
KList.prototype._keydownFun = function(event)
{
    if(event.keyCode == 13)
    {
        this.blur();
    }
};
//opt# 1011021057 fix end

KList.prototype._inputBlurFun = function(event)
{
    var _input = event.data['_input'];
    var _label = event.data['_label'];
    var _inputBlurFun = event.data['_inputBlurFun'];
    var _this_ = event.data['_this_'];
    var this_ = event.data['this_'];
    $(_input).replaceWith(_label).hide();
    $(_label).text(_input.value).show();
    _this_.text = _input.value;
    _input._on = "false";
    KEvent.unbind(_input, "blur", _inputBlurFun);
    KEvent.trigger(this_, "afteredit", this_, this_._liDomToItem(_this_));
    KEvent.unbind(this_._dom, "click", this_._domClickFun);
};

KList.prototype._domClickFun = function(event){
    KEvent.trigger(event.data.this_._editInput, "blur");
};

/**
 * 编辑按钮事件
 * @param event
 */
KList.prototype._editClickFun = function(event)
{
    var this_ = event.data.this_;
    var _this_ = event.data._this_;
    var _label =  _this_._labels.get(0);
    if(this_._editInput._on == "true")
    {
        this_._inputBlurFun({data:{ _input: this_._editInput, _label:this_._editInput._label, _inputBlurFun:this_._editInput._inputBlurFun, this_:this_, _this_:_this_}});
        _label =  _this_._labels.get(0);
        if(this_._editInput._label == _label) return;
    }
    KEvent.trigger(this_, "beforedit", this_, this_._liDomToItem(_this_));
    this_._editInput._on = "true";
    this_._editInput._label = _label;
    this_._editInput._inputBlurFun = this_._inputBlurFun;
    $(_label).replaceWith(this_._editInput).hide();
    $(this_._editInput).show().get(0).value = $(_label).text();
    KEvent.unbind(this_._editInput, "click", KTools._stopPropagation);
    KEvent.bind(this_._editInput, "click", KTools._stopPropagation);
    //opt# 1011021057 fix begin
    //add by zhangsq
    KEvent.bind(this_._editInput, 'keydown', this_._keydownFun);
    //opt# 1011021057 fix end
    this_._editInput.focus();
    KEvent.bind(this_._dom, "click", this_._domClickFun, {this_:this_});
    KEvent.bind(this_._editInput, "blur", this_._inputBlurFun, { _input: this_._editInput, _label:this_._editInput._label, _inputBlurFun:this_._editInput._inputBlurFun, this_:this_, _this_:_this_});
    return KTools._stopPropagation(event);
};

/**
 * 删除按钮事件
 * @param event
 */
KList.prototype._delClickFun = function(event)
{
    var this_ = event.data.this_;
    var _this_ = event.data._this_;
    KEvent.trigger(this_._editInput, "blur");
    var _item = this_._liDomToItem(_this_);
    KEvent.trigger(this_, "beforemove", this_, _item);
	if(!this_._opts.confirmdelete) {
		this_._removeLiDom(_this_);
		this_._updateItemAndSelect(true);
		KEvent.trigger(this_, "afteremove", this_, _item);
	}
    return KTools._stopPropagation(event);
};

/**
 * item事件
 * @param event
 */
KList.prototype._liClickFun = function(event) {
    var this_ = event.data.this_;
    var input_ = this._span0Input;
    if(this.selected && !this_._opts.multiple && !this_._opts.deselect) {
		KEvent.trigger(this_, "itemclick", this_, this_._liDomToItem(this), false);
		return;
	}
    this_.select(this.index, !this.selected, true);
};

KList.prototype._docMouseMove = function(event)
{
    var _this_ = event.data._this_;
    var this_ = event.data.this_;
    var _ulBounds = KTools.getBounds($(this_._dom).get(0));
    _this_.moved = true;
    //所li拿到body中
    if($(_this_).parent().get(0) != this_._moveDiv._ul.get(0))
    {
        $(this_._moveDiv).css({"height": $(_this_).outerHeight() + "px", "width": $(_this_).outerWidth() + "px"}).show();
        this_._moveDiv._on = true;
        if(this_._opts.userstyle == false)
        {
            $(_this_).addClass(this_._theme + "_lst_h");
        }
        this_._moveDiv._ul.append(_this_);
        $(this_._blackLi).css("height", $(_this_).outerHeight());
        KEvent.trigger(this_._editInput, "blur");
    }
    $(this_._moveDiv).css({"top": (_this_._bounds.min.y + (event.pageY - _this_._downY)) + "px", "left": (_this_._bounds.min.x + (event.pageX - _this_._downX)) + "px"});
    _this_._downX = event.pageX;
    _this_._downY = event.pageY;
    _this_._bounds = KTools.getBounds(this_._moveDiv);
    //确定当前移动到的li位置并在其下添加一个黑色li
    if(_ulBounds.intersects(_this_._bounds))
    {
        var _iDom = null;
        var _iBounds = null;
        var _finded = false;
        for(var i = 0; i < this_._items.length; i++)
        {
            _iDom = this_._items[i];
            if(_iDom == _this_) continue;
            _iBounds = KTools.getBounds(_iDom);
            if(_iBounds.intersect(_this_._bounds).size().height > _this_._bounds.size().height/2)
            {
                if(_this_._replaceIndex == i) _this_._replaceIndex = _iDom.index + 1;
                else _this_._replaceIndex = _iDom.index;
                _finded = true;
                break;
            }
        }
        if(_finded && _iBounds != null && !_ulBounds.contains(_iBounds))
        {
            if(_iBounds.min.y < _ulBounds.min.y + _ulBounds.size().height/2)
            {
                $(this_._dom).scrollTop($(this_._dom).scrollTop() - _iBounds.size().height);
            } else {
                $(this_._dom).scrollTop($(this_._dom).scrollTop() + _iBounds.size().height);
            }
        }
    }
    if(typeof _this_._replaceIndex != 'number' || _this_._replaceIndex == _this_.index)
    {
        //如果没有找到合适的位置 显示在原处 如果
        _this_._replaceIndex = _this_.index + 1;
    }

    if(_this_._replaceIndex >= this_._items.length)
        this_._dom._ul.append(this_._blackLi);
    else
    {
        $(this_._blackLi).insertBefore(this_._items[_this_._replaceIndex]).show();
    }
};

KList.prototype._docMouseUp = function(event)
{
	
    if(event.button == 2) return;
    var this_ = event.data.this_;
    var _this_ = event.data._this_;
    this_._releaseCapture(_this_);
    if(_this_.moved != true)
    {
        if(event.target != _this_._as.get(0) && event.target != _this_._as.get(1))
        {
			
            this_._liClickFun.apply(_this_, [event]);
        }
    } else {
        $(this_._blackLi).appendTo(document.body).hide();
        $(this_._moveDiv).hide();
        this_._moveDiv._on = false;
        //计算后确定自己的位置
        if(_this_._replaceIndex >= this_._items.length)
            this_._dom._ul.append(_this_);
        else
            $(this_._items[_this_._replaceIndex]).before(_this_);
        if(_this_._replaceIndex != _this_.index + 1)
        {
            this_._updateItemAndSelect(true);
            KEvent.trigger(this_, "aftersort", this_, this_._liDomToItem(_this_));
        }
    }
    KEvent.unbind(document, "mousemove", this_._docMouseMove);
    KEvent.unbind(document, "mouseup", this_._docMouseUp);
    _this_.moved = false;
    return KTools._stopPropagation(event);
};

KList.prototype._liEvents = function(liDom)
{
    //li事件
    KEvent.bind(liDom, "mousedown", function(event) {

        var this_ = event.data.this_;
        if(event.target == this_._editInput || event.button == 2) return;
        this.moved = false;
        this._downX = event.pageX;
        this._downY = event.pageY;
        this._bounds = KTools.getBounds(this);
        this_._setCapture(this);
        if(this_._opts.sortable == true && this_._items.length > 1) KEvent.bind(document, "mousemove", this_._docMouseMove, {this_:this_, _this_:this});
        KEvent.bind(document, "mouseup", this_._docMouseUp, {this_:this_, _this_:this});
        return KTools._stopPropagation(event);
    }, {this_ : this});
    KEvent.bind(liDom._span0Input.get(0), "click", function(){
        if(this.checked) $(this).attr("checked", "");
        else $(this).attr("checked", "checked");
    });

    KEvent.bind(liDom, "mouseover", function(event) {
        var this_ = event.data.this_;
        if(this_._moveDiv._on == true) return;
        if(this_._opts.userstyle == false)
        {
            if(this_.lastHLi && !this_.lastHLi.selected) $(this_.lastHLi).removeClass();
            $(this).addClass(this_._theme + "_lst_h");
            this_.lastHLi = this;
        }
        if(this_._opts.scroll2view) KTools.scrollIntoView(this, $(this).parent().parent()[0]);
    }, {this_:this});
    KEvent.bind(liDom, "mouseout", function(event) {
        var this_ = event.data.this_;
        if(this_._moveDiv._on == true) return;
        if(this_._opts.userstyle == false) $(this).removeClass(this_._theme + "_lst_h");
    }, {this_:this});
    var _as = liDom._as;
    //edit事件
    if(this._opts.editable && liDom.editable) KEvent.bind(_as.eq(0).get(0), "click", this._editClickFun, {this_ : this, _this_: liDom});
    //del事件
    if(this._opts.deleteable && liDom.deletable) KEvent.bind(_as.eq(1).get(0), "click", this._delClickFun, {this_ : this, _this_: liDom});
};

KList.prototype._initLiAttr = function(liDom)
{
    liDom = $(liDom).get(0);
    liDom._spans = $(">span", liDom);
    liDom._span0Input = $(">input", liDom._spans.eq(0));
    liDom._labels = $(">label", liDom);
    liDom._as = $(">a", liDom);

    liDom.index = parseInt($(liDom).attr("index"));
    liDom.text = liDom._labels.eq(0).text();
    if($(liDom).attr("kvalue") == undefined) liDom.kvalue = "";
    else liDom.kvalue = $(liDom).attr("kvalue");
    if($(liDom).attr("deletable") == undefined) liDom.deletable = KListItem.deletable;
    else liDom.deletable = ("true" == $(liDom).attr("deletable")) ? true : false;
    if($(liDom).attr("editable") == undefined) liDom.editable = KListItem.editable;
    else liDom.editable = ("true" == $(liDom).attr("editable")) ? true : false;
    if($(liDom).attr("selected") == undefined) liDom.selected = KListItem.selected;
    else liDom.selected = ("true" == $(liDom).attr("selected")) ? true : false;

    if(liDom.selected)
    {
        liDom._span0Input.attr("checked", "checked");
        if(this._opts.userstyle == false) liDom.className = this._theme + "_lst_s";
    } else {
        liDom._span0Input.attr("checked", "");
        if(this._opts.userstyle == false) liDom.className = "";
    }
    this._updateButtons(liDom);
    liDom.node = liDom;
    liDom.iconClass = liDom._spans.eq(1).attr("class");
    
};

KList.prototype._updateButtons = function(liDom)
{
    var _as = liDom._as;
    if(this._opts.deleteable && liDom.deletable) _as.eq(1).show(); else _as.eq(1).hide();
    if(this._opts.editable && liDom.editable) _as.eq(0).show(); else _as.eq(0).hide();

};

KList.prototype._setCapture = function(dom) {
    if(dom.setCapture) {
        dom.setCapture();
    } else if(window.captureEvents) {
        window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
    }
};

KList.prototype._releaseCapture = function(dom) {
    if(dom.releaseCapture){
        dom.releaseCapture();
    }else if(window.captureEvents){
        window.captureEvents(Event.MOUSEMOVE|Event.MOUSEUP);
    }
};

KList.prototype._updateItemAndSelect = function(item, regetLis)
{
    var this_ = this;
    if(typeof regetLis != "boolean") regetLis = true;
    if(regetLis) this._lis = $(">ul >li", this._dom);
    //此处有个未查明异常:this._span0Input为空或不是对象,暂时没发现对系统有影响，暂时应急处理，捕获该异常
    try{
	    if(item)
	    {
	        this_._items = [];
	        this_._selected = [];
	        this._lis.each(function() {
	            this.index = this_._items.length;
	            this_._items.push(this);
	            if(this.selected)
	            {
	                this._selectedIndex = this_._selected.length;
	                this_._selected.push(this);
	        	    this._span0Input.eq(0).attr("checked", "checked");
	            }
	        });
	    } else {
	        this_._selected = [];
	        this._lis.each(function() {
	            if(this.selected)
	            {
	                this._selectedIndex = this_._selected.length;
	                this_._selected.push(this);
	                this._span0Input.eq(0).attr("checked", "checked");
	            }
	        });
	    }
    }catch(e){}
};
/*
 本地搜索组件。
 作者：xionggq fuyg
 版本：2.1.1
 创建时间：2010-03-08
 最后修改时间：2010-03-08 23:07
 ============================================
 『修改历史』
opt#1010081700
增加对mwpf接口的支持
opt# 1011031702
增加对发送组件下载到汽车的支持
opt#
增加对联盟用户标点查询的支持
bug#201012161519
当返回结果为{}时，不显示无结果提示
opt#201101111618
增加气泡中“分享到微博”按钮
bug#201101141437
修正ie下气泡中按钮的分割竖线
 */
var KLocalsearch = KClass.create("KLocalsearch", KQuery);
KLocalsearch.conf =
{
    CLASSNAME :
    {
        //组件搜索提示框的样式。
        LS : "_ls"
    	//搜索建议框 added by zwq
        ,SS: "_ls_ss"
        //搜索提示区样式
        ,TIP : "_ls_tip"
        //	搜索提示区关闭按钮。
        ,CLB : "_ls_clb"
		//酒店查询区域
		,HS:"_ls_hs"
		//时间选择框
		,ST:"_ls_st"
		//查询条件选择框
		,SC:"_ls_sc"
		//更多
		,HSM:"_ls_hsm"
		//查询
		,HSB:"_ls_hsb"
		//提示
		,HST:"_ls_hst"
        //搜索结果列表。
        ,RLT : "_ls_rlt"
        //搜索结果条目
        ,RLS : "_ls_rls"
        //名称区域“更多”按钮元素
        ,M : "_ls_m"
        //扩展功能区域样式
        ,VA : "_ls_va"
        //图标区域样式
        ,RLN : "_ls_rln"
        //图标区域样式1
        ,RLN1 : "_ls_rln_"
        //认证图标区域样式
    	,RLNTG : "_ls_tg_rln"
    	//认证图标区域样式1	
		,RLNTG1 : "_ls_tg_rln"
        //认证
        ,LSS:"_ls_s"
        //推广
        ,LSPM:"_ls_pm"
        //名称区域“发送”按钮元素样式
        ,SDB  :"_ls_sdb"
        ,MK : "_ls_mk"
        ,MHK : "_ls_mkh"
    }
};

/**
 * 构造方法
 * @param container
 * @param opts
 * @return String
 * @uncrunch
 */
KLocalsearch.initialize = function(container, opts)
{
    var _this = this;
    this._opts = KTools.copyOptions(opts, KLocalsearchOptions);
    this._theme = this._opts.theme;
    this._addMarkerFlag = false;
    this._cityRedirect = false;
    //c=北京市&k=公司&pn=1&rn=10&cn=阜成门&cll=&cid=
    this._hashkeys = [ "k,c,pn,rn", "k,c,pn,rn,cn,cid", "k,c,pn,rn,cn,cid,cll", "k,c,pn,rn,pt,b", "k,c,pn,rn,n",
			"k,c,pn,rn,cn,cid,n", "k,c,pn,rn,cn,cid,cll,n", "k,c,pn,rn,pt,b,n" ];
    //add by fuyg: mwpf 标志符，用于改进_hashkeys方式
    _this._mwpf= KConfig.get("mwpf");
    //add by zhangwq油老婆雨点标示符 
    this._isGasline = false;
    //add by ligj poi列表头部广告是否显示 
    this._isShowPoiListTopAd = false;
    
    
    //add by zhangwq 雨点叠加层
    this._rainDropsLayer = null;
    this._lyptitle = $("#ylptitle").hide();
    
    this._queryopts = null;
    this._domAll = $(container);
    this._dom = this._domAll.get(0);

    //add by ligj poi列表头部广告Dom 
    this._poiListTopAdDom = $(">div", this._domAll).eq(0).hide()
    
    //拼音纠错dom
    this._spellECDom = $("#spell_ec").hide();
    this._spellEcTipDom = $(">div", this._domAll).eq(1).hide();
    
    //added by zwq 相关公交站点提示dom获取
    this._stdDom = $(">div", this._domAll).eq(2).hide();
    //this._stdHrefDom = $(">div>a", this._stdDom).eq(0);
    
    //added by zwq 逻辑选中提示dom获取
    this._logDom = $(">div", this._domAll).eq(3).hide();
    this._logContent = $(">div", this._logDom).eq(0);
    this._logMore = $(">div>a", this._logDom).eq(0);
    this._logmoreFlag = true;
    
    //added by zwq 更多相关结果dom获取
    this._ssDom = $(">div", this._domAll).eq(4).hide();
    this._ssDomContent = $(">div", this._ssDom).eq(0);
    this._ssMore = $(">div>span>a", this._ssDom).eq(0);
    this._ssmoreFlag = true;
    
    //增加页面div，相应div获取顺序也要改变
    var domIndex = 5;
    
    //相关公交线路dom获取
    this._tipDom = $(">div", this._domAll).eq(domIndex).hide();
    //this._tipHrefDom = $(">div>a", this._tipDom).eq(0);
    
    //酒店搜索头dom获取
    this._hotelDom = $(">div", this._domAll).eq(domIndex+1).hide().addClass(this._theme + KLocalsearch.conf.CLASSNAME.HS);
    
    //筛选dom获取
    this._topsxDom = $(">div", this._domAll).eq(domIndex+2).hide();
    
    this._isInitTopSx = false;
    
	//
	$(function(){
		_this._initHotelDom.apply(_this);
	});
	//
    this._gopageFlag = true;
    this._extendFlag = true;
    /*this._tipHrefDom.click(function() {
        KEvent.trigger(_this, "tipclick", _this, _this._queryopts.ls);
    });*/
    this._resultDom = $(">ol", this._domAll).eq(0);
    if (!this._resultDom)
    {
        this._resultDom = null;
    }
    //add by fuyg 2010-7-22
    this._queryHash=null;
    this._sendIndex=0;
	//added by zy,是否由气泡发送,以及其在列表中的序号
	this._sendFromBubble = false;
	this._bubbleIndex = 0;
    //
    this._queryResult = null;
    this._resultliDom = null;
    this._currentPage = 1;
    this._pagesize = 10;
    this._extendParam = "";
    _this._fitzoomflag = true;
    this._lsNoResultTip = $(">div", this._domAll).eq(domIndex+3).hide();
    this._$adWrap = $(">div", this._domAll).eq(domIndex+4);
	this._adHtml="";
	this._repeatTimes=0;
	//鼠标移上事件监听对象
	this._moEventTarget={};
	//
	var setAdHtml=function(){
		var $ads = $("a", _this._$adWrap);
		if (!_this._adHtml) {
			if ($ads.length) {
				var $tempDiv = $("<div/>");
				$ads.each(function(){
					$(this).clone().appendTo($tempDiv);
				});
				var html = $tempDiv.html();
				_this._adHtml = html;
			} else {
				if (_this._repeatTimes < 10) {
					_this._repeatTimes++;
					window.setTimeout(setAdHtml, 1000);
				}
			}
		}
	};
	if(this._$adWrap && this._$adWrap.length){
		this._$adWrap.hide();
		setAdHtml();
	}
	
    //
    //无意义,用于混淆
    this._KLocalsearch_bind_afteropeninfowindow = null;
    //只显示第N项,如果小于0, 则在查询时不提交
    _this._showOnlyN=-1;
	//移动平台url跳转上次携带的经纬度和名称信息
    this._forMobile = {
        latlon: undefined,
        name: undefined,
		level:undefined
    };
	this._IWDatePickers = {};
	//每隔30s自动清理一次气泡中未使用的KDatePicker对象
	this._intervalID = 	window.setInterval(function(){
		_this._IWDatePickersMgr.apply(_this);
	}, 30000);
	
	// google广告开关，当为true时，有广告，false时，没广告，目前暂时关闭广告
	this._enableGoogleAd = false;
	
	this._rightKeyLatlon = undefined;


	
};
KLocalsearch.prototype._initDom = function()
{
    var _this = this;

    this._tipCloseDom = $(">div>span", this._tipDom).eq(0);
    this._selectMarker = null;
    this._selectLi = null;
    this._tipCloseDom.unbind("click").click(function(e) {
        e.stopPropagation();
        _this._tipDom.hide();
        _this._layoutDom();
        KEvent.trigger(_this, "tipclosed", _this);
    });
    
    this._stdCloseDom = $(">div>span", this._stdDom).eq(0);
    this._stdCloseDom.unbind("click").click(function(e) {
        e.stopPropagation();
        _this._stdDom.hide();
        _this._layoutDom();
        KEvent.trigger(_this, "tipclosed", _this);
    });
};
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KLocalsearch.prototype.version = function()
{
    return "2.1.1";
};
/**
 * 释放当前对象的所有资源
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.finalize = function()
{
    var _this = this;
	window.clearInterval(this._intervalID);
	this._clearIWDatePickers();
	if(this._startPicker && typeof  this._startPicker.finalize === "function"){
		this._startPicker.finalize();
	}
	if(this._endPicker && typeof  this._endPicker.finalize === "function"){
		this._endPicker.finalize();
	}
    KEvent.clear($(">a", _this._tabCloseDom));
    KEvent.clear(_this._tabCloseDom);
   this._clearLiEvent();
   //
   if(_this._resultDom&&_this._resultDom.empty){
	   _this._resultDom.empty();
   }
  // KTools.removeNode(this._dom);
};
KLocalsearch.prototype._clearLiEvent = function()
{
   if (this._resultliDom != null)
    {
        this._resultliDom.each(

                function(index, domEl)
                {
                    KEvent.clear($(this));
                    KEvent.clear($(">h2>a", $(this)).eq(0));
                    KEvent.clear($(">h2>a", $(this)).eq(1));
                    KEvent.clear($("a[mfg='fs']", $(this)).eq(0));
                    KEvent.clear($("a[mfg='jp']", $(this)).eq(0));
                    KEvent.clear($("a[mfg='jd']", $(this)).eq(0));
                    KEvent.clear($("a[mfg='su8']", $(this)).eq(0));
                    KEvent.clear($("a[mfg='58z']", $(this)).eq(0));
                    KEvent.clear($("a[mfg='58e']", $(this)).eq(0));
                    KEvent.clear($("a[mfg='qbfd']", $(this)).eq(0));
                });
        this._resultliDom.empty();
    }
};
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.cnname = function()
{
    return "本地搜索组件";
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KLocalsearch.prototype.dependent = function()
{
    return [ KClass, KConfig, KEvent, KFeedbackType, KLine, KListener, KLocalsearchOptions, KMap, KMarker, KNamedValue,
			KObject, KPOIType, KPOInfo, KPrintOptions, KQuery, KQueryOptions, KQueryType, KSendOptions, KSendType,
			KTools, KUrlHash, KWidgetFlag, jQuery, KDatePicker ];
};
/**
 *  返回组件特征字符串
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.flag = function()
{
    return KWidgetFlag.localsearch;
};
KLocalsearch.prototype._setOptions = function(opt)
{
    var _this = this;
    this._theme = this._opts.theme;
    var diffOpts = KTools.compareOptions(this._opts, opt);
    $.each(diffOpts, function(name, value) {
        switch (name)
        {
            case 'theme':
                _this._setOption({'theme':value});
                _this._updateThemeOptions();
                break;
            /* case 'result':
             _this._setOption({'result':value});
             _this._updateResultOption();
             break;
             case 'mapoperation':
             _this._setOption({'mapoperation':value});
             _this._updateMapoperation();
             break;*/
            case  'initmap':
                _this._setOption({'initmap':value});
                _this._updateInitmapOption();
                break;
            case 'tipurl' :
                _this._setOption({'tipurl':value});
                _this._updateTipurl();
                break;
            case 'url':
                _this._setOption({'url': value});
                break;
            default:
        }
    });
};
KLocalsearch.prototype._setOption = function(opts)
{
    this._theme = this._opts.theme;
    this._opts = KTools.copyOptions(opts, this._opts);
};
/**
 * 设置组件的配置选项
 * @param opt
 * @uncrunch
 */
KLocalsearch.prototype.setOptions = function(opt)
{
    this._theme = this._opts.theme;
    this._setOptions(opt);
};
/**
 *  设置组件的样式方案
 * @uncrunch
 */
KLocalsearch.prototype.setTheme = function(scheme)
{
    this._setOptions({theme:scheme});
};
/**
 * 通知组件重新布局
 * @uncrunch
 */
KLocalsearch.prototype.layout = function()
{
    this._layoutDom();
};
/**
 *  根据指定的Hash值进行查询。
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.queryByHash = function(hash) {
	KQuery.prototype.queryByHash.call(this, hash);
	var queryHash = hash;
	var _this = this;
	this._extendParam = "";
	if (this._resultDom != null) {
		KQuery.prototype.queryByHash.call(this, hash);
		var queryOptions = KTools.copyOptions( {}, KQueryOptions);
		queryOptions.ls = KTools.copyOptions( {}, KPOInfo);
		if (queryHash.value("c") != null) {
			queryOptions.ls.city = queryHash.value("c");
		}
//		if (queryHash.value("vs") == "true") {
//			queryOptions.ls.vs = true;
//		}else{
		queryOptions.ls.vs = false;
//		}
		/***增加对联盟用户标点查询的支持***/
		if(queryHash.value("uid")!=null){
			queryOptions.ls.uid = queryHash.value("uid");
		}
		
		/***增加对缩放级别的支持***/
        if (queryHash.value("z")) {
            queryOptions.ls.level = parseInt(queryHash.value("z"), 10);
            if (queryHash.value("k") != null) {
                var kVal = queryHash.value("k");
				var kArr = kVal.split("_");
				queryOptions.ls.latlon = kArr[0];
				queryOptions.ls.name = kArr[1] || "";
            }
        } else {
            if (queryHash.value("k") != null) {
                queryOptions.ls.name = queryHash.value("k");
            }
        }
		if (queryHash.value("pn") != null) {
			this._currentPage = parseInt(queryHash.value("pn"));
		}
		if (queryHash.value("cn") != null) {
			queryOptions.center = KTools.copyOptions( {}, KPOInfo);
			queryOptions.center.pid = undefined;
			queryOptions.center.name = queryHash.value("cn");
			if (queryHash.value("cid") != null) {
				queryOptions.center.pid = queryHash.value("cid");
			}
			if (queryHash.value("cll") != null) {
				queryOptions.center.latlon = queryHash.value("cll");
			}
		} else {
			queryOptions.center = undefined;
		}
		this._gopageFlag = false;
		this._extendFlag = true;
		if (queryHash.value("rn") != null) {
			this._pagesize = queryHash.value("rn");
		}
		if (queryHash.value("b") != null) {
			this._extendFlag = false;
			this._extendParam = this._extendParam + "&b=" + queryHash.value("b");
		}
		if (queryHash.value("pt") != null) {
			this._extendFlag = false;
			this._extendParam = this._extendParam + "&pt=" + queryHash.value("pt");
		}
		if (queryHash.value("n") != null) {
			_this._showOnlyN = queryHash.value("n");
			_this._showOnlyN = parseInt(_this._showOnlyN, 10);
			if (isNaN(_this._showOnlyN)) {
				_this._showOnlyN = -1;
			}
		} else {
			_this._showOnlyN = -1;
		}
		queryOptions.type = KQueryType.localsearch;
		_this.query(queryOptions);
	} else {
	}
};

/**
 * 根据指定选项进行查询。忽略opts时将对当前结果重新查询。默认实现：设置 _queryopts = opts 。
 *
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.viewSearchQuery = function(city,keyword){
	
	var _this = this;
	var queryOptions = null;
	if(!_this._queryopts){
		queryOptions = KTools.copyOptions( {}, KQueryOptions);
		queryOptions.ls = KTools.copyOptions( {}, KPOInfo);
		queryOptions.type = "ls";
	}else{
		queryOptions = _this._queryopts;
	}
	queryOptions.ls.city = city;
	queryOptions.ls.name = keyword;
	queryOptions.ls.vs = true;
	queryOptions.ls.noqas = true;
    queryOptions.center = null;
	_this.query(queryOptions);
};

/**
 * 根据指定选项进行查询。忽略opts时将对当前结果重新查询。默认实现：设置 _queryopts = opts 。
 *
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.query = function(queryOpt){
	
	
    var _this = this;
    KQuery.prototype.query.call(this, queryOpt);
    _this._isGasline = false;//每次查询前重置[加油站]叠加层是否显示标志
    _this._isShowPoiListTopAd = false;
    
    var queryHash = new KUrlHash();
    var hasUseUid = false;
    if (queryOpt.ls) {
    	
        if (queryOpt.ls.city) {
            queryHash.setKey("c", queryOpt.ls.city);
        }
        
        if (queryOpt.ls.uid) {
            queryHash.setKey("uid", queryOpt.ls.uid);
            hasUseUid = true;
        }
        //对移动平台url跳转的支持
        var setMobileInfo = function(hash, ls){
            hash.setKey("z", ls.level);
            var kVal = "";
            if (ls.latlon) {
                kVal = ls.latlon + "";
                kVal += "_" + (ls.name || "");
                hash.setKey("k", kVal);
            }
        }
        if (queryOpt.ls.level != undefined) {
            setMobileInfo(queryHash, queryOpt.ls);
            this._forMobile.level = queryOpt.ls.level;
            this._forMobile.name = queryOpt.ls.name;
            this._forMobile.latlon = queryOpt.ls.latlon;
        } else {
            if (this._forMobile.latlon != undefined && (this._forMobile.name === queryOpt.ls.name)) {
                queryOpt.ls.latlon = this._forMobile.latlon;
                queryOpt.ls.level = this._forMobile.level;
                setMobileInfo(queryHash, queryOpt.ls);
            } else {
                this._forMobile.level = undefined;
                this._forMobile.name = undefined;
                this._forMobile.latlon = undefined;
                if (queryOpt.ls.name) {
//                	var keyword = "加油站";
                    queryHash.setKey("k", queryOpt.ls.name);
//                    (keyword === queryOpt.ls.name) ?_this._isGasline = true : _this._isGasline = false ;
                }
            }
        }
        if (this._gopageFlag) {
            this._currentPage = 1;
        }
        if (this._extendFlag) {
            this._extendParam = "";
        } else {
            var getb = _this._getRequestParam('b');
            var getpt = _this._getRequestParam('pt');
            (getb !== null) && (queryHash.setKey("b", getb));
            (getpt !== null) && (queryHash.setKey("pt", getpt));
        }
        // queryHash.setKey方法第二个参数必须为String类型。
        queryHash.setKey("pn", this._currentPage + "");
        queryHash.setKey("rn", this._pagesize + "");
        if (queryOpt.center) {
            if (queryOpt.center.name && queryOpt.center.name != "") {
                queryHash.setKey("cn", queryOpt.center.name);
            }
            if (queryOpt.center.latlon) {
                queryHash.setKey("cll", queryOpt.center.latlon);
            } else {
                //queryHash.setKey("cll", "");
            }
            if (queryOpt.center.pid) {
                queryHash.setKey("cid", queryOpt.center.pid);
            } else {
                //queryHash.setKey("cid", "");
            }
        }
        if (this._opts.searchbox && !hasUseUid) {
            this._opts.searchbox.query(queryOpt, true);
        }
        //
        if (_this._showOnlyN > -1 && _this._showOnlyN < _this._pagesize) {
            queryHash.setKey("n", _this._showOnlyN);
        } else {
            queryHash.remove("n");
        }
        //
        queryHash.setKey(_this._mwpf, _this.flag());
    }
    KListener.setHash(queryHash, true, false);
    this._gopageFlag = true;
    this._extendFlag = true;
    if (this._resultDom != null) {
    	_this._ajaxPostRequest();
    } else {
    }
};
/**
 * 本地搜索searchberfore事件触发函数。
 */
KLocalsearch.prototype._searchbeforeEvent = function(){
    KEvent.trigger(this, "searchbefore", this, this._queryopts);
};
/**
 * resultload事件触发函数。
 */
KLocalsearch.prototype._resultloadedEvent = function()
{

    KEvent.trigger(this, "resultloaded", this,"query",this._result);
};
/**
 * resultshow事件触发函数。
 */
KLocalsearch.prototype._resultshowEvent = function()
{
	var _this=this;
    KEvent.trigger(this, "resultshown", this, "query", this._result);
    this._addResultEvent();
	
};
/**
 * 更新参数theme时动态修改组件的样式
 */
KLocalsearch.prototype._updateThemeOptions = function(){
	
    var _this = this;
    this._domAll.removeClass(this._theme + KLocalsearch.conf.CLASSNAME.LS).addClass(this.theme() + KLocalsearch.conf.CLASSNAME.LS);
    //added by zwq 更多相关结果dom样式
    this._ssDom.removeClass(this._theme + KLocalsearch.conf.CLASSNAME.TIP).addClass(this.theme() + KLocalsearch.conf.CLASSNAME.TIP);
    this._logDom.removeClass(this._theme + KLocalsearch.conf.CLASSNAME.TIP).addClass(this.theme() + KLocalsearch.conf.CLASSNAME.TIP);
    
    this._stdDom.removeClass(this._theme + KLocalsearch.conf.CLASSNAME.TIP).addClass(this.theme() + KLocalsearch.conf.CLASSNAME.TIP);
    
    this._tipDom.removeClass(this._theme + KLocalsearch.conf.CLASSNAME.TIP).addClass(this.theme() + KLocalsearch.conf.CLASSNAME.TIP);
    this._tipCloseDom.removeClass(this._theme + KLocalsearch.conf.CLASSNAME.CLB).addClass(this.theme() + KLocalsearch.conf.CLASSNAME.CLB);
    if (this._resultDom != null) {
        this._resultDom.removeClass(this._theme + KLocalsearch.conf.CLASSNAME.RLT).addClass(this.theme() + KLocalsearch.conf.CLASSNAME.RLT);
        //$(">li",_this._resultDom).removeClass(this._theme + KLocalsearch.conf.CLASSNAME.RLS).addClass(this._theme + KLocalsearch.conf.CLASSNAME.RLS)
        $("a[mfg='fs']", _this._resultDom).removeClass(this._theme + KLocalsearch.conf.CLASSNAME.SDB).addClass(this._opts.theme + KLocalsearch.conf.CLASSNAME.SDB);
        $(">li", _this._resultDom).each(function(index){
        	//差异化标注样式 t
        	var t = $("a[mfg='rz']", $(this)).eq(0).length>0 ? t =true : t = false;
        	
            $(">h2>a", $(this)).eq(1).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.M).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.M);
			var len = $(">div", $(this)).length;
            if (len > 1) {
                $(">div", $(this)).eq(len-2).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.VA).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.VA);
                $(">div", $(this)).eq(len-1).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLN).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLN1 + (index + 1)).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLN).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLN1 + (index + 1));
                if(t){
                    $(">div", $(this)).eq(len-1).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLNTG).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLNTG1 + (index + 1)).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLNTG).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLNTG1 + (index + 1));
                }
            
            } else {
                $(">div", $(this)).eq(len-1).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLN).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLN1 + (index + 1)).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLN).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLN1 + (index + 1));
                if(t){
                    $(">div", $(this)).eq(len-1).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLNTG).removeClass(_this._theme + KLocalsearch.conf.CLASSNAME.RLNTG1 + (index + 1)).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLNTG).addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLNTG1 + (index + 1));
                }
            }
        });
    }
};
KLocalsearch.prototype._updateTipurl = function()
{
    var _this = this;
//    this._tipHrefDom.unbind("click").click(function() {
//    	KEvent.trigger(_this, "tipclick", _this, _this._queryopts.ls);
//        var value = $(this).html();
//        var opts = KTools.copyOptions({}, KQueryOptions);
//        opts.type = KQueryType.busline;
//        opts.busline = KTools.copyOptions({}, KPOInfo);
//        opts.busline.name = value;
//        if (_this._opts.searchbox)
//        {
//            _this._opts.searchbox.query(opts, false);
//        }
//    });
//    this._stdHrefDom.unbind("click").click(function() {
//    	KEvent.trigger(_this, "stdclick", _this, _this._queryopts.ls);
//        var value = $(this).html();
//        var opts = KTools.copyOptions({}, KQueryOptions);
//        opts.type = KQueryType.bustation;
//        opts.bustation = KTools.copyOptions({}, KPOInfo);
//        opts.bustation.name = value;
//        if (_this._opts.searchbox)
//        {
//            _this._opts.searchbox.query(opts, false);
//        }
//    });
};
/**
 * 本地搜索的ajax请求。
 */
KLocalsearch.prototype._ajaxPostRequest = function(qtype){
    var _this = this;
    //判断城市跳转
    _this._searchbeforeEvent();
    var ajaxUrl = _this._opts.url;
    var hash = new KUrlHash();
    hash.setKey("s", "json");
    hash.setKey("pn", _this._currentPage + "");
    hash.setKey("rn", _this._pagesize);
    if (_this._queryopts.ls) {
        if (_this._queryopts.ls.city) {
            hash.setKey("c", _this._queryopts.ls.city);
        } else {
            //hash.setKey("c", _this._queryopts.ls.city);
        }
        //筛选控件
        if (_this._queryopts.ls.topicPara && _this._isInitTopSx) {
        	hash.setKey("tp", _this._queryopts.ls.topicPara);
        }
        var keywordFlag = "k";
        if (_this._queryopts.ls.uid) {
            hash.setKey("uid", _this._queryopts.ls.uid);
            keywordFlag = "id";
        }
        if (_this._queryopts.ls.name) {
            hash.setKey(keywordFlag, _this._queryopts.ls.name);
        }
        
        //区域搜索 缩放级别大于7
//        if(KMap.zoom()>7 && _this._queryopts.ls.vs){
        if(_this._queryopts.ls.vs){
        	hash.setKey("ll", KMap.getMapViewBound().LeftUp);
        	hash.setKey("rl", KMap.getMapViewBound().RightDown);
        }

        if(_this._queryopts.ls.noqas){
        	hash.setKey("qas", "false");
        }
        //如果有level,那么是对移动平台url跳转的支持
        if (_this._queryopts.ls.level) {
            hash.setKey("z", _this._queryopts.ls.level);
            var kVal = "";
            if (_this._queryopts.ls.latlon) {
                kVal = _this._queryopts.ls.latlon + "";
                kVal += "_" + (_this._queryopts.ls.name + "");
                hash.setKey("k", kVal);
                hash.setKey("kt", "1");
            }
        }
        //
        var ct = _this._queryopts.center;
        if (ct && ct.pid) {
            hash.setKey("cid", ct.pid);
        }
        if (ct && (ct.name || ct.latlon)) {
            hash.setKey("t", "ns");
            //hash.setKey("r", 2000);
            ct.name && hash.setKey("cn", ct.name);
            if(ct.name === "自定义中心点" && _this._rightKeyLatlon){
            	ct.latlon = _this._rightKeyLatlon;
            }
            ct.latlon && hash.setKey("cll", ct.latlon);
        } else {
            hash.setKey("t", "s1.2");
        }
        //added by zwq 
        if(!_this._ssmoreFlag){
        	hash.setKey("v","false");
        	_this._ssmoreFlag = true;
        }
        if(!_this._logmoreFlag){
        	hash.setKey("ns","false");
        	_this._logmoreFlag = true;
        }
        
        if (_this._extendParam != "") {
            var getb = _this._getRequestParam('b');
            var getpt = _this._getRequestParam('pt');
            (getb !== null) && (hash.setKey("b", getb));
            (getpt !== null) && (hash.setKey("pt", getpt));
        }
        if (_this._showOnlyN > -1 && _this._showOnlyN < _this._pagesize) {
            hash.setKey("n", _this._showOnlyN);
        } else {
            hash.remove("n");
        }
    }

    //added by zwq 设置请求参数（更多相关结果）
    hash.setKey("w", $(_this._opts.mapcontainer).width() + "");
    hash.setKey("h", $(_this._opts.mapcontainer).height() + "");
    
    var cl = KMap.maplet().getCenter();
    if(_this._queryopts.ls.topicFlag && _this._result && _this._result.d && _this._result.d.c){
    	cl = _this._result.d.c;
    }
    
    hash.setKey("cl", cl);
    
    if(_this._result && _this._result.pt){
        hash.setKey("pt", _this._result.pt);
    }


    _this._queryHash = hash;
    if (_this._opts.url) {
        if (ajaxUrl.indexOf("?") != -1) {
            var num = ajaxUrl.indexOf("?");
            ajaxUrl = ajaxUrl.substring(0, num);
        }
        $.ajax({
            type: "GET",
            url: ajaxUrl,
            cache: false,
            data: (hash.toString()),
            error: function(XMLHttpRequest, textStatus, errorThrown){
                if (!KMap.isInitialized(_this._opts.mapcontainer)) {
                    KEvent.trigger(_this, "mapready", _this, undefined, undefined);
                }
            },
            success: function(data){
            	_this._lyptitle.hide();
            	_this._poiListTopAdDom.hide();
            	_this._topsxDom.hide();
            	_this._spellECDom.hide();
            	_this._spellEcTipDom.hide();
            	_this._hotelDom.hide();
            	
                if (!data) {
                    _this._lsNoResultTip.show();
           			$(">div",_this._lsNoResultTip).eq(1).hide().end().eq(0).show();
                    return;
                }
                
                _this._result = data;
                
                //控制酒店查询的可见性
                if(data && data.k && data.k.a === "true") {
                    _this._hotelBaseUrl = data.k.b;
                    _this._hotelDom.show()
                } else {
                    _this._hotelDom.hide();
                }
                
                
                //筛选控件
                if(data && data.th){
                	_this._initTopSx();
                } 
                
                //搜房广告
            	if(data && data.sf){
            		_isShowPoiListTopAd = true;
            		var re1=/^http:\/\//;
            		if(!re1.test(data.sf.b)){
            			data.sf.b = "http://"+data.sf.b;
            		}
            		$(">a",_this._poiListTopAdDom).attr("href",data.sf.b).attr("title",data.sf.c);
            		$(">a>img",_this._poiListTopAdDom).attr("src",data.sf.a);
                    $(_this._poiListTopAdDom).show();
            	}
            	//城市跳转
            	if(data && data.qas){
            		var qas = data.qas;
					var lsDom = $(">div",_this._lsNoResultTip).eq(3);
					if(qas.c){
						var _lsDom = $(">div",lsDom).hide().eq(0).show(); 
						
						$("strong",_lsDom).html("");
						$("p",_lsDom).eq(1).html("");
						$("img",_lsDom).attr("src","").hide();
						
						$("strong",_lsDom)
							.eq(0).html(qas.c + qas.d).end()
							.eq(1).html(_this._queryopts.ls.city).end()
							.eq(2).html('"'+_this._queryopts.ls.name+'"');
						$("a",_lsDom).eq(0).attr("href",qas.u);
						$("a",_lsDom).eq(1).click(function(){
							_this._queryopts.ls.noqas = true;
							_this.query(_this._queryopts);
						});
						if(qas.i){
							$("img",_lsDom).attr("src",qas.i).show();
						}else{
							$("img",_lsDom).hide();
						}
						$("p",_lsDom).eq(1).html(qas.m);
					}else{
						var _lsDom = $(">div",lsDom).hide().eq(1).show(); 
						$("strong",_lsDom)
							.eq(0).html(qas.a).end()
							.eq(1).html(_this._queryopts.ls.city).end()
							.eq(2).html('"'+_this._queryopts.ls.name+'"');
						$("a",_lsDom).click(function(){
							_this._queryopts.ls.noqas = true;
							_this.query(_this._queryopts);
						});
					}
					setTimeout(function(){
            			if(qas.p && qas.p.length > 0){
            				var lines = Array();
    						for(j in qas.p){
    							var line = KLine.fromEncoded(qas.p[j], qas.l[j]);
    						    KMap.addLine(line);
    						    lines = lines.concat(line.latlons());
    						}
    						KMap.fitzoom(lines);	
                        }else{
                        	KMap.setCenter(data.d.a,parseInt(data.d.b));
                        }
            		},200);
            	}
            	//城市跳转（跳转到目标城市搜索）
            	if(data && data.qas2){
        			var qas2 = data.qas2,
                        isCityJump = qas2.j == 'true' ? true : false,
                        cDom = _this._logDom.find('span').eq(0);
        			$("strong",_this._logDom)
        				.eq(0).html(qas2.a).end()
        				.eq(1).html(isCityJump ? _this._queryopts.ls.city : qas2.c).end()
        				.eq(2).html(_this._queryopts.ls.name);

        			
                    if(!isCityJump) {
                        cDom.hide();
                    }else{
                        cDom.show();
                    }
                    var currentCity = _this._queryopts.ls.city;
        			$("a",_this._logDom).eq(0).unbind('click')
        				.click(function(){
        					_this._queryopts.ls.noqas = true;
                            if(!isCityJump){
                                _this._queryopts.ls.city = qas2.a;
                            }else{
                                _this._queryopts.ls.city = currentCity;
                            }
                            _this.query(_this._queryopts);
        				});
        			_this._logDom.show();
        			if(qas2.a){
        				_this._queryopts.ls.city = qas2.a;
        			}
        			
            	}else{
        			_this._logDom.hide();
        		}
            	//拼音纠错
            	$("#spellEC_tip").hide();

            	if(data && data.sp){
            		var spells = data.sp;
            		var spanDom = null;
            		if(data.e && data.e.length > 0){
            			spanDom = $("span",_this._spellEcTipDom).eq(0).html("");
            			_this._spellEcTipDom.show();
            			$("strong",_this._spellEcTipDom).html(_this._queryopts.ls.name);
            		}else{
            			spanDom = $("span",_this._spellECDom).html("");
            			_this._spellECDom.show();
            		}
            		for ( var i = 0; i < spells.length; i++) {
            			spanDom.append('<a href="javascript:void(0)" >'+spells[i]+'</a>&nbsp;');
            			$("a",spanDom).eq(i).click(function(){
            				_this._queryopts.ls.name = $(this).html();
            				_this.query(_this._queryopts);
            			});
					}
            	}
            	//搜索结果全国分布
            	if(data && data.acd){
            		var rs = data.acd;
            		var lsDom = $(">div",_this._lsNoResultTip).eq(4);
            		$("strong",lsDom).eq(0).text(_this._queryopts.ls.city);
            		$("strong",lsDom).eq(1).text(_this._queryopts.ls.name);
            		$("strong",lsDom).eq(3).text(_this._queryopts.ls.name);

                    $("strong",lsDom).eq(4).text(_this._queryopts.ls.city);
                    $("strong",lsDom).eq(5).text(_this._queryopts.ls.name);

            		$("ul",lsDom).html("");
            		for ( var i = 0; i < rs.length; i++) {
						$("ul",lsDom).append('<li><a href="javascript:void(0)" c="'+ rs[i].a +'">'+rs[i].a+'</a>&nbsp;('+rs[i].b+')</li>');
					}
            		$("ul>li>a",lsDom).click(function(){
            			_this._queryopts.ls.city = $(this).attr("c");
        				_this.query(_this._queryopts);
            		});
            		$("p>a",lsDom).eq(0).click(function(){
            			_this._queryopts.ls.city = "全国";
        				_this.query(_this._queryopts);
            		}).end().eq(1).click(function(){
                        _this._queryopts.ls.noqas = true;
                        _this.query(_this._queryopts);
                    });
            	}
                
                
                //清空雨点叠加层
                if(_this._rainDropsLayer){
                	KMap.maplet().removeLayer(_this._rainDropsLayer, true);
                	_this._rainDropsLayer = null;
                }
                //酒店雨点叠加层
                if(data && data.k && data.k.a === "true"){
                	_this._baseMapLayer("jiudian");
                }
                
                _this._hotelBaseUrl = (data && data.k && data.k.b) ? data.k.b : _this._hotelBaseUrl;	
               //如果有n属性，表明是联盟标注查询
                if (_this._opts.searchbox && data.n) {
                    var qOpts = $.extend(true, {}, _this._queryopts);
                    qOpts.ls.name = data.n;
                    _this._opts.searchbox.query(qOpts, true);//同步searchbox中的文字
                }
                
                _this._lsNoResultTip.hide();
                
                _this._appendLiToResult();
                _this._initMapTriggest();
                //处理酒店最低价格
                _this._initHotelPrice();

                if (_this._fitzoomflag && data.d && data.d.a && data.d.b) {
                    //KMap.centerAndZoom(data.d.a, parseInt(data.d.b)); //去掉多余缩放
                }
              //加油站雨点叠加层
//                if(_this._isGasline){
////                	_this._baseMapLayer("youlp");
//////                	_this._lyptitle.show();
//                	//KMap.centerAndZoom(data.d.a, 8);
//                }
                
                // 清除上次查询_showOnlyN的记忆
                _this._showOnlyN = -1;
                //added by zwq 区域画线
                KMap.clearLine();
            },
            dataType: "json"
        });
    }
};

KLocalsearch.prototype._initHotelPrice = function(){
    var _this = this, jsonData = this._result, i = 0, hotelIds = [];
    if (!!jsonData && !!jsonData.e) {
        for(;i < jsonData.e.length;i++){
            if(jsonData.e[i].m && jsonData.e[i].m.e){
                hotelIds.push(jsonData.e[i].m.e);
            }
        }
        if(hotelIds.length > 0){
            //http://social.hotel.kuxun.cn/Partner/GetPriceByHotelid?hotelid=10000881,10071380&callback=1234
            setTimeout(function(){
                $.ajax( {
                    url : 'http://social.hotel.kuxun.cn/Partner/GetPriceByHotelid?hotelid='+hotelIds.join(','),
                    type : "GET",
                    dataType : "jsonp",
                    jsonp:"callback",
                    success : function(data) {
                        if(data && data.status === 1 && data.data){
                            for(var p in data.data){
                                $("#hotel_" + p + " strong").html(data.data[p].price);
                                $("#hotel_" + p).css('visibility','visible');
                            }
                        }
                    }
                });
            },500);
        }
    }
};

//初始化头部筛选
KLocalsearch.prototype._initTopSx = function() {
	var _this = this;
	var data = _this._result;
	_this._topsxDom.show();
	if(!_this._isInitTopSx){

		$(_this._topsxDom).html(data.th);
		var topsx_tabs = $(".mwp_topsx_tabs",_this._topsxDom);
		var uc = null;//当前选中类型
		if(data.uc){
			uc = data.uc.split("=");
		}
        topsx_tabs.width((99/topsx_tabs.length) + '%');
    	$(topsx_tabs).each(function(index,obj){
    		$(obj).addClass("mwp_topsx_tabs_"+(index+1));
    		var tabs = $(".mwp_topsx_tab",obj);
    		var title = $(".mwp_topsx_tabs_title >strong",obj).hide();
    		var key = $(obj).attr("key");
    		
    		_this._setSxKeyValue(key,"",false);
    		
			if(uc && uc[0] == key){
				_this._setSxKeyValue(key,uc[1],false);
			}
    		
			var nowCode = function (text) {
                //title.eq(0).html(text).show();
            };
			
            $(".mwp_topsx_tabs_title span").click(function (){
            	$(".mwp_topsx_tab_t2").eq(1).show();
            	$(".mwp_topsx_tab_t3").hide();
            });
            
    		$(tabs).each(function(i,o){
    			
    			var aclick = function(clickObj,clickIndex,isInit){
    				var code = $(clickObj).attr("code");
                    nowCode($(clickObj).text());
    				$("a",o).removeClass("mwp_topsx_tab_current");
    				$(clickObj).addClass("mwp_topsx_tab_current");
    				return false;
    			};
    			$("a",o).click(function(){
    				var code = $(this).attr("code");
    				var i = ($(this).index())+1;
    				var mtab2 = $("#mwp_topsx_tab"+i);
    				if(mtab2.length > 0){
    					$(".mwp_topsx_tab_t2").eq(1).hide();
    					
    					mtab2.show();
    				}
    				_this._setSxKeyValue(key,code,true);
    				aclick(this,i);
    			});
    			if(uc && uc[0] == key){
    				$("a",o).each(function(i2,o2){
        				if(uc[1] === $(o2).attr("code")){
                            (function(index,obj){
        						var upCode = $(obj).attr("u");
            					if(upCode){
            						var upObj = $("a[code='"+ upCode +"']",$(tabs).eq(index-1)).eq(0);
            						clickUp(index-1,upObj);
            					}
            					aclick(obj,index,true);
            					return false;
        					})(i,o2);
        				}
        			});
    			}else{
    				i===0 && aclick($("a",o).eq(0));//.addClass("mwp_topsx_tab_current");
    			}
    			
    		});

    		if($(tabs).length){
				$(">a",topsx_tabs).show();
				$(obj).mouseover(function(){
					$(obj).addClass("mwp_topsx_tabs_on");
				})
				.mouseout(function(){
					$(obj).removeClass("mwp_topsx_tabs_on");
				});
			}

    		
    	});
	}
	_this._isInitTopSx = false;
};
//设置筛选字段值
KLocalsearch.prototype._setSxKeyValue = function(key,value,query){
	var _this = this;
	var topicParas = new Array();
	if(_this._topicPara != undefined){
		topicParas = _this._topicPara.split(";");
	}
	
	var para = new Array();
	if(typeof(key) == "string"){
		para[0] = ""+key+"="+value+"";	
	}else{
		for(var i=0;i<key.length;i++){
			para[i] = ""+key[i]+"="+value[i]+"";
		}
	}
	
	for(var i=0 ; i<para.length; i++){
		for(var j=0 ; j<topicParas.length; j++){
			
    		if(topicParas[j]==null || para[i]==null){continue;}
    		
			var k1 = para[i].split("=");
			var k2 = topicParas[j].split("=");
			if(k1[0] == k2[0]){
				topicParas[j] = para[i];
				para[i] = null;
			}
		}
	}
	
	var newPara = new Array();
	for(var i=0 ; i<para.length; i++){
		if(para[i] != null){newPara.push(para[i]);}
	}
	var _para = topicParas.concat(newPara).join(";");
	if(_this._topicPara != _para){
		_this._queryopts.ls.topicPara = _this._topicPara = _para;
		_this._isInitTopSx = true;
		_this._queryopts.ls.topicFlag = true;
		query && _this.query(_this._queryopts);
		return false;
	}
	return false;
};
KLocalsearch.prototype._addNbMarker = function(nbcity) {
	// if (this._result && this._result.g && this._result.g.n) {
	if (this._result) {
		var centerMarkerOpts = KConfig.get("mk_mo_ct");
		centerMarkerOpts.group = KWidgetFlag.localsearch + "_center";
		
		var result = this._result.g;
		centerMarkerOpts.infowin = KConfig.get("iw_iwo_poi", {
			c : !!result ? result.c : "",
			d : !!result ? result.d : "",
			"djp" : "none",
			"djd" : "none",
			"58z" : "none",
			"58e" : "none",
            "fjjd": "none"
		});
		// 如果后台没有返回中心点的标题，标题默认是“中心点”
		centerMarkerOpts.infowin.title = !!result ? result.n : "中心点";
		centerMarkerOpts.infowin.content = "<div class='mwpg_poiw_caW'><p>" + result.c + "<br>" + result.d + "</p></div>";
		centerMarkerOpts.infowin.cmdata = {poi:{city:nbcity,name:result.n,pid:result.f,latlon:result.e}};
		var nb = null;
		if (!!result) {
			nb = new KMarker(result.e, centerMarkerOpts);
		} else {
			var val = this._queryHash.value("cll");
			if (val) {
				nb = new KMarker(val.toString(), centerMarkerOpts);
			}
		}
		if (nb) {
			KMap.addMarker(nb);
		}
		//console.log(centerMarkerOpts);
		var addMEllipse = function(){   
            var say = sax = 1000;   
            var ctr = new MPoint(result.e);   
  
            var brush = new MBrush();   
            brush.color = "gray";   
            brush.bgcolor = "gray";   
            brush.fill = true;   
            brush.transparency = 80;   
            brush.bgtransparency = 30;   
            brush.stroke = 1;
            ellipse = new MEllipse(ctr, sax, say, brush);   
            maplet.addOverlay(ellipse);   
        }
		//addMEllipse();
	}
};
/**
 * 为本地搜索组件各个列表添加事件
 */
KLocalsearch.prototype._addResultEvent = function(){
    var _this = this;
    var jsonData = _this._result;
    this._clearAllOverlay("bsline");
    _this._resultliDom = $(">li", _this._resultDom);
    var length = $(">li", _this._resultDom).length;
    $(">li", _this._resultDom).each(function(index, domEl){
		//每个列表结果
        $(this).mouseenter(function(e){
        	//差异化认证标示样式 t
        	var t = $("a[mfg='rz']", $(this)).eq(0).length>0 ? t =true : t = false;
        	
            var obj = {
                data: {
                    num: index,
                    dom: undefined,
                    tg : t
                }
            };
            if (KMap.getMarkers(KWidgetFlag.localsearch) &&
            KMap.getMarkers(KWidgetFlag.localsearch)[length - index - 1]) {
                obj = {
                    data: {
                        num: index,
                        dom: KMap.getMarkers(KWidgetFlag.localsearch)[length - index - 1],
                        tg : t
                    }
                };
            }
            _this._hiliteMarker(obj);
        }).click(function(e){
            _this._clickMarker(e, index);
        });
        
		//名称与详情
        $(">h2>a", $(this)).eq(0).click(function(e){
            e.preventDefault();
        }).end().eq(1).click(function(e){
            e.stopPropagation();
        });
        // 发送按钮
        if (_this._opts.sender) {
            $("a[mfg='fs']", $(this)).eq(0).show().click(function(e){
                e.stopPropagation();
                _this._sendIndex = index;
                _this.send();
            });
        } else {
            $("a[mfg='fs']", $(this)).hide();
        }
        // 认证
        $("a[mfg='rz']", $(this)).attr("title", "此用户通过图吧认证").click(function(e){
            e.stopPropagation();
            e.preventDefault();
        });
        // 全部分店
        $("a[mfg='qbfd']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._tgClickFun(index, this);
            _this._extrafun("qbfd", index);
        });
        // 订机票
        $("a[mfg='jp']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._extrafun("jp", index);
        });
        // 订酒店
        $("a[mfg='jd']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._extrafun("jd", index);
        });
        // 推广
        $("a[mfg='tg']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._extrafun("tg", index);
        });
        // 注册VIP赢免费房
        $("a[mfg='su8']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._extrafun("su8", index);
        });
        // 附近租房
        $("a[mfg='58z']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._extrafun("58z", index);
        });
        //二手房
        $("a[mfg='58e']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._extrafun("58e", index);
        });
        
        //收藏
        $("a[mfg='tbsc']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            _this._sendIndex = index;
            //暂时调用页面添加收藏的方法--collection.addRecord--后期单独开发完收藏组件后，再做修改
            collection.addRecord(_this._getCollection());
            _this._extrafun("tbsc", index);
        });
        
        // 新浪微博
        $("a[mfg='xlwb']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            KMap.closeInfoWindow();
            var url = window.location.toString();
            var title = $(">h2>a", $(domEl)).eq(0).text() + " " + $(">p", $(domEl)).eq(0).text() + " —图吧地图 ";
            _this._toWeibo(title, url, index, _this._selectMarker);
            _this._extrafun("xlwb", index);
        });
        // 纠错
        $("a[mfg='err']", $(this)).eq(0).click(function(e){
            e.stopPropagation();
            var poinfo = _this.resultAt(index);
            var info = {
                "type": KFeedbackType.POI_ERROR,
                "poinfo": poinfo,
                "url": window.location.href + "&n=" + (index)
            };
            KEvent.trigger(_this, "feedback", _this, info, null);
        });
        //导游图大图展示
        $("a[mfg='bpic']", $(this)).eq(0).imageBox();
        
        //处理poi列表内图片
        var initSPic = function(picDom){
         	var ajaxUrl = picDom.attr("src");
         	var imgPattern=/\.(gif|jpg|jpeg|png|bmp)$/i;
         	if(!ajaxUrl){
         		return;
         	}
         	var $img = picDom;
         	var setImgSrc = function(imgElem, src){
         		var img = new Image();
         		img.onload=function(){
         			$(imgElem).attr("src", src).show().css("visibility","visible");
         			img=null;
         		};
         		img.src=src;
         	};
     		if (imgPattern.test(ajaxUrl)) {
     			$img.attr("setsrc","true");
     			setImgSrc($img.get(0), ajaxUrl);
     		} else {
     			$.ajax({
     				url: ajaxUrl,
     				type: "get",
     				dataType: "text",
     				success: function(data){
     					if (data != null && data != "") {
     						$img.attr("setsrc","true");
     						setImgSrc($img.get(0), data);
     					}
     				}
     			});
     		}
        }
        initSPic($("img[mfg='spic']", $(this)).eq(0));
    });
    //在结果集dom增加公交和站点提示 
	if ((jsonData.f || jsonData.sc) && jsonData.t !='true' && jsonData.k.a != "true") {
		var lihtml = undefined ;
		var atype = "busline" ;
		if(jsonData.f){
			lihtml = jsonData.f;
			atype = "busline";
			_this._resultDom.prepend('<div class="mwp_ls_bs_line " ></div>');
		}else{
			lihtml = jsonData.sc;
			atype = "station";
			_this._resultDom.prepend('<div class="mwp_ls_bs_station" ></div>');
		}
		$(">div", _this._resultDom).append(lihtml.h);
		_this._busLineOrStationHandler(lihtml,atype);
		if(jsonData.e.length == 0){
			setTimeout(function(){
				KMap.maplet().setAutoZoom();
			},100);
		}
	};
	
    //google ads add by ligj@mapbar.com
    if(_this._enableGoogleAd){
    	var googleAdId = "gad"+new Date().getTime();
    	_this._addGooleAdSense(_this._queryopts.ls.name,googleAdId,function(flag){
				if(flag){
	    			_this._resultDom.append('<li style="height:75px;"></li>');
	    			$(">li",_this._resultDom).last().append($("#"+googleAdId));
	    		}
			}
    	);
    }
};
/**
 * 来自新浪，最好不要修改
 */
KLocalsearch.prototype._sinaWeibo = function(s, d, e, r, l, p, t, z, c) {
	//var f = 'http://v.t.sina.com.cn/share/share.php?appkey=1355173317',
	var f = 'http://service.weibo.com/share/share.php?&appkey=112179156&ralateUid=1831898730',
	//u = z || d.location,
	u="",
	p = [ '&url=', e(u),
			'&title=', 	e(t || d.title),
			'&source=', e(r),
			'&sourceUrl=', e(l),
			'&content=', c || 'gb2312',
			'&wm=', '9972_0001',
			'&pic=',e(p || '')
			].join('');
	function a() {
		if (!window.open( [ f, p ].join(''), 'mb', [ 'toolbar=0,status=0,resizable=1,width=440,height=430,left=',
				(s.width - 440) / 2, ',top=', (s.height - 430) / 2 ].join(''))) u.href = [ f, p ].join('');
	}
	if (/Firefox/.test(navigator.userAgent))
		setTimeout(a, 0);
	else a();
};

KLocalsearch.prototype._toWeibo = function(title, url, index, marker) {
	var _this=this;
	var snapOpts = {
		size: new KSize(240,240),
		format : "jpg",
		zoom : 13
	};
	if(marker && marker.latlon){
		snapOpts.latlon = marker.latlon();
		KMap&&KMap.setCenter && KMap.setCenter(snapOpts.latlon, 13);
	}
	var latlon = snapOpts.latlon.getPid();
	var point = new KPoint(12,30);
	var configPoint = KConfig.get("mk_mo_sn", {
		a : (index+1)
	});
	if(configPoint && configPoint.icon && configPoint.icon.anchor){
		point=configPoint.icon.anchor;
	}
	//var url = [ "http://staticmap.mapbar.com/staticmap/?format=" + snapOpts.format ];
	var ajaxUrl = [ "proxy.jsp?format=" + snapOpts.format ];
	//
	ajaxUrl.push("size=" + snapOpts.size.width + "x" + snapOpts.size.height);
	ajaxUrl.push("zoom=" + snapOpts.zoom);
	ajaxUrl.push("codeform=1");
	ajaxUrl.push("customer=0");
	ajaxUrl.push("center=" + latlon);
	ajaxUrl.push("markers=" + latlon + ",,0,0,,,http://img.mapbar.com/web/3in1/icons/an" + (index + 1) + ".png," + point.x
			+ "," + point.y);
	ajaxUrl.push("processMode=event");
	//"weibo=1"为标志位，设置proxy.jsp中的url
	ajaxUrl.push("weibo=1");
	//
	ajaxUrl = ajaxUrl.join("&");
	var imgurl="";
	//
	$.ajax( {
		url : ajaxUrl,
		type : "get",
		async:false,
		dataType : "json",
		error : function() {
			throw new Error("ajax error...");
		},
		success : function(data) {
			if(data && data.url){
//				imgurl = data.url;
				imgurl = 'http://www.mapbar.com/search/im?p=' + encodeURIComponent(data.url);
			}
		}
	});
	var getByteLength = function(str) {
		var len = 0, chlen, code;
		for ( var i = 0; i < str.length; i++) {
			code = str.charCodeAt(i);
			chlen = 0;
			do {
				chlen++;
			} while ((code = code / 256) > 1);
			len += chlen;
		}
		return len;
	};
	var getChineseLength = function(str) {
		str = $.trim(str);
		return Math.ceil(getByteLength(str) / 2);
	};
	
	var pid = marker._opts.infowin.cmdata.poi.pid;
    url = url + (pid ?"&pid="+pid : "");
    
	if (getChineseLength(title + url) > 140) {
		url = "http://www.mapbar.com/search/";
		if (getChineseLength(title + url)> 140) {
			url = "";
		}
	}

	var hash = url.split("&");
	var _keyValue = [];
	for (var i = 0; i < hash.length; i ++)
	{
		hash[i] = decodeURIComponent(decodeURIComponent(hash[i]));
	    var _hash = hash[i].split("=");
	    _keyValue.push(_hash[0] + "=" + encodeURIComponent(_hash[1]));
	}
	url = _keyValue.join("&");
	
	title = title + encodeURI(encodeURIComponent(url));
	_this._sinaWeibo(screen, document, encodeURIComponent, 'mapbar.com', 'http://www.mapbar.com/search/', imgurl, title, "", 'utf-8');
};

KLocalsearch.prototype._tgClickFun = function(index, obj)
{
    var b = $(obj).attr("b");
    this._queryopts.ls.name = b;
    var pt = $(obj).attr("pt");
    //应急处理 [全部分店]
    //this._extendParam = "&b=" + b + "&pt=" + pt;
    this._extendParam = "&pt=" + pt;
    
    this._extendFlag = false;
    this._queryopts.center = undefined;
    this.query(this._queryopts);
};
KLocalsearch.prototype._extrafun = function(mfg, index)
{
    var _this = this;
    KEvent.trigger(_this, "extrafun", _this, mfg, index);
};
/**
 * 当地图未初始化时，是否使用查询结果对其进行初始化，默认为true。
 */
KLocalsearch.prototype._updateInitmapOption = function()
{
    var _this = this;

    if (typeof this._opts.mapcontainer != "undefined")
    {      
        if (typeof this._opts.initmap == "undefined" || this._opts.initmap)
        {
            if (KMap.isInitialized(_this._opts.mapcontainer))
            {
                _this._addMarker();
            }
        }
    }
};
KLocalsearch.prototype._addMarker = function()
{
    var _this = this;
	var markerArray = [];
	KMap.clearMarker(KWidgetFlag.localsearch);
	KMap.clearMarker(KWidgetFlag.localsearch + "_center");
	if (!_this._result || !_this._result.e || !_this._result.e.length) {
		return;
	}
	var length = _this._result.e.length;
	for ( var i = length - 1; i >= 0; i--) {
		var result = {};
		for (var o in this._result.e[i]) {
			result[o] = this._result.e[i][o];
		}
		result.ex_djp = _this._getInforShow(i, "jp");
		result.ex_djd = _this._getInforShow(i, "jd");
		result._58z = _this._getInforShow(i, "58z");
		result._58e = _this._getInforShow(i, "58e");
		result.a = _this._result.e[i].c;
		result.p = _this._result.e[i].d;
		result.m = _this._result.e[i].m;
        //附件酒店url
        result.fj = _this._result.e[i].fj || null;
		result.ex_pi = "none";
		//result.g = "";
        var isHotel = !!(result.m && result.m.a); 
        var statisticsCode = 'http://click.mapbar.com/GO/';
		var iconNum = -1;
		try {
			iconNum = parseInt(_this._result.e[i].a, 10);
		} catch (ex) {
		}
		if (isNaN(iconNum) || iconNum === -1) {
			iconNum = i + 1;
		}
		var lsOptions = KConfig.get("mk_mo_sn", {
			a : iconNum
		});
		//差异化认证标注气泡
		var t = false;
		if(result.rz == "true"){
			lsOptions = KConfig.get("mk_mo_sntg", {
				a : iconNum
			});
			t = true;
		}
		lsOptions.group = KWidgetFlag.localsearch;
        var iwOpts = {
        	pr:result.rzh?"<p class=ls_m_pr><span style='float:left;color:red;'>特惠信息：</span><marquee style='float:left;width: 180px;' scrollamount='3' onMouseOut=this.start() onMouseOver=this.stop() behavior=scroll><a hidefocus='true' style='color: #333;text-decoration: none;' href='" + statisticsCode + result.l +"' target='_blank'>"+result.rzh+"</a></marquee></p>":"",
            c: result.c,
            //"&nbsp;"防止有图片没有电话时，气泡出现滚动条
            d: result.d||"",
            e: result.mh||"",
            "djp": result.ex_djp,
            "djd": result.ex_djd,
            "58z": result._58z,
            "58e": result._58e,
            "fjjd":(result.fj ? '' : 'none'),
            "djpurl": result.ex_djp,

            "djdurl": result.ex_djd,
            "58zurl": result._58z,
            "58eurl": result._58e,
            "fjjdurl": (result.fj || ""),
            //气泡广告的可见性
            "ad_v": (!this._adHtml ? "none" : "block"),
            //气泡广告的内容
            "ad": this._adHtml
        }
		if(isHotel){
			var hotelHtml =['<span class="mwpg_poiw_h_tad"><em>&nbsp;</em>7x24小时快速预定电话：<span>400-890-9817</span></span><ul>'];
			hotelHtml.push('<li class="mwpg_poiw_h_tab_s"><a href="javascript:void(0);">房型及价格</a></li>');
			hotelHtml.push('<li><a href="javascript:void(0);">酒店简介</a></li>');
			hotelHtml.push('<li><a href="javascript:void(0);">酒店图片</a></li>');
			hotelHtml.push('<li><a href="javascript:void(0);">客人评论</a></li>');
			hotelHtml.push('<li><a href="javascript:void(0);"></a></li>');
			hotelHtml.push('</ul>');
			//
			hotelHtml.push('<div class="mwpg_poiw_h_tab_c"><div class="mwpg_poiw_h_rt"><table><thead></thead><tbody><tr><td>加载中...</td></tr></tbody></table></div></div>');
			hotelHtml.push(result.m.a);
			hotelHtml.push(result.m.b);
			hotelHtml.push(result.m.c);
			hotelHtml.push(result.m.d);
			//hotelHtml.push(result.m.a);
			iwOpts.hotel=hotelHtml.join("");
		}
        
        lsOptions.infowin = KConfig.get(isHotel ? "iw_iwo_hotel" : "iw_iwo_poi", iwOpts);
        
        
        if(result.pd){
        	var poi_detail_html =['加载数据...'];
			iwOpts.poi_detail=poi_detail_html.join("");
			lsOptions.infowin = KConfig.get("iw_iwo_poi_detail", iwOpts);
        }
        
        
        if(result.op){
        	var priceHtml =['<ul class = "mwpg_poiw_ylp_data_ul">'];
        	for(var p = 0 ; p < result.op.length ; p++){
        		priceHtml.push('<li class="">'+result.op[p].b+'<span>('+result.op[p].a+')</span></li>');
        	}
        	if(result.op.length == 0){
        		priceHtml.push('<span>暂无油价数据</span>')
        	}
			priceHtml.push('</ul>');
			//$("#price").html(priceHtml.join(""))
            var html =['<ul class = "mwpg_poiw_ylpul">'];
        	html.push('<li class="mwpg_poiw_ylpul_li">实时油价</li>');
        	html.push('<li class="mwpg_poiw_ylpul_lg">数据由<a href="http://www.youlaopo.com/" target="_blank"><em style="text-decoration:none;cursor:pointer;">&nbsp;</em></a>提供</li>');
        	html.push('</ul>');
        	html.push('<div class="mwpg_poiw_ylp_div"><div class="mwpg_poiw_ylp_data" style="height:70px" ><span class="mwpg_poiw_ylpui_load"></span>'+priceHtml.join("")+'</div></div>');
    		iwOpts.hotel=html.join("");
        	lsOptions.infowin = KConfig.get("iw_iwo_gasoline", iwOpts);
        }
        
        
		
		if(result.rz == "true"){
			lsOptions.infowin.title = "<span title='"+ _this._result.e[i].n + "'>"+ cut_str(_this._result.e[i].n,28) + "</span><span class='mwpg_iw_ls_title'>&nbsp;-&nbsp;<a href='" + statisticsCode + _this._result.e[i].l + "' target='_blank'>详情&gt;&gt;</a><a class=mwp_ls_rz  mfg=rz>认证用户</a></span>";
		}else if(_this._result.e[i].l){
			lsOptions.infowin.title = "<span title='"+ _this._result.e[i].n + "'>"+ cut_str(_this._result.e[i].n,32) + "</span><span class='mwpg_iw_ls_title'>&nbsp;-&nbsp;<a href='" + statisticsCode + _this._result.e[i].l + "' target='_blank'>详情&gt;&gt;</a></span>";
		}else{
			lsOptions.infowin.title = "<span title='"+ _this._result.e[i].n + "'>"+ cut_str(_this._result.e[i].n,33) + "</span><span class='mwpg_iw_ls_title'></span>";
		}
        
		var poiInfo = KTools.copyOptions( {
			type : KQueryType.localsearch,
			name : _this._result.e[i].n,
			//移动平台url跳转时，会返回q
			city : (_this._result.e[i].q || this._queryopts.ls.city),
			latlon : _this._result.e[i].e,
			pid : _this._result.e[i].f || ""
		}, KPOInfo);
		lsOptions.infowin.cmdata = {
			poi : poiInfo
		};
		var markerAdd = new KMarker(_this._result.e[i].e, lsOptions);
		markerAdd._classObj = _this;//设置afteropeninfowindow事件绑定对象
		// markerAdd._num = i + 1;
		markerAdd._num = iconNum;
		if(isHotel && result.m && result.m.e){
			markerAdd._hotelID = result.m.e;
		}
		if(result.pd){
			markerAdd._poiDetail = "show";
		}
		var obj = {
			num : i,
			dom : markerAdd,
			tg  : t
		};
		KEvent.bind(markerAdd, "mouseover", _this._hiliteMarker, obj, _this);
		markerArray.push(markerAdd);
	}
	//
	KMap.addMarkers(markerArray, false);
	if (_this._queryopts.center) {
		var nbcity = "";
		if(_this._queryopts.center.city){
			nbcity = _this._queryopts.center.city
		}else{
			nbcity = decodeURI(window.location.hash.split("&")[0].split("=")[1]);
		}
		_this._addNbMarker(nbcity);
	}
	if (_this._fitzoomflag && !_this._queryopts.ls.vs) {
		KMap.centerAndZoom(_this._result.d.a, parseInt(_this._result.d.b));
	}
};
/**
 * 返回结果分页的数量。
 *
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.pageCount = function()
{
	if(!this._result||!this._result.c){
		return 0;
	}
    if (this._result.c)
    {
        if (this._result.c == 0)
        {
            return 0;
        } else
        {
            return Math.ceil(this._result.a / this._result.c);
        }
    }
    return 0;

};
/**
 *  返回结果分页的当前页码。
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.currentPage = function()
{
    return parseInt(this._currentPage);
};
/**
 *  返回结果分页中每页显示的记录数量。
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.pageSize = function()
{
    //return  this._result.c;
    return  this._pagesize;
};
KLocalsearch.prototype._hiliteMarker = function(eventinfo)
{
    var _this = this;
    var widget = eventinfo.data.dom;
    if (_this._selectLi != null)
    {
        _this._selectLi.removeClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLS);
    }
    if (_this._selectMarker != null)
    {
        _this._selectMarker.setOptions({icon:{snapIcon:KConfig.get("mk_s_sns",{h:"",a:_this._selectMarker._num})}});
        _this._selectMarker.setIconClass(KConfig.get("mk_s_snn", {a:_this._selectMarker._num}));//更新图标的样式。
        //差异化认证标记
        if(_this._selectMarker.rz){
        	_this._selectMarker.setOptions({icon:{snapIcon:KConfig.get("mk_s_snstg",{h:"",a:_this._selectMarker._num})}});
        	_this._selectMarker.setIconClass(KConfig.get("mk_s_snntg", {a:_this._selectMarker._num}));//差异化认证图标的样式。
        }
    }
    _this._selectLi = $(">li", _this._resultDom).eq(eventinfo.data.num);
    _this._selectLi.addClass(_this._opts.theme + KLocalsearch.conf.CLASSNAME.RLS);
    if (widget && widget != null)
    {
        var num = widget._num;
        widget.hilite();
        _this._selectMarker = widget;
        _this._selectMarker.rz = eventinfo.data.tg;
        this._selectMarker.setOptions({icon:{snapIcon:KConfig.get("mk_s_sns",{h:"a",a:_this._selectMarker._num})}});
        _this._selectMarker.setIconClass(KConfig.get("mk_s_snh", {a:_this._selectMarker._num}));
        if(eventinfo.data.tg){
        	 this._selectMarker.setOptions({icon:{snapIcon:KConfig.get("mk_s_snstg",{h:"a",a:_this._selectMarker._num})}});
             _this._selectMarker.setIconClass(KConfig.get("mk_s_snhtg", {a:_this._selectMarker._num}));
        }
        
    }
    KTools.scrollIntoView(_this._selectLi, _this._selectLi.parent(), "fast");
};
/**
 * 绑定与地图相关的事件
 */
KLocalsearch.prototype._bindMapEvents = function(map, theMarker){
    var _this = this;
    KEvent.unbind(_this,"afteropeninfowindow", _this._afteropeninfowindow);
    KEvent.bind(_this, "afteropeninfowindow", _this._afteropeninfowindow);
};
KLocalsearch.prototype._afteropeninfowindow = function(event, map, theMarker){
	var _this = this;
    if (theMarker instanceof KMarker && theMarker.group) {
        var infoDom = theMarker.iwcDom();
        if (!infoDom) {
            return;
        }
        var hideAllLineSpan = function(elem){
            $("span", $(elem)).each(function(){
                var txt = $(this).text();
                if (txt && $.trim(txt) === "|") {
                    $(this).hide();
                }
            });
        };
        var hideNextLineSpan = function(elem){
            var $span = $(elem).next("span").eq(0);
            if ($span.text() && $.trim($span.text()) === "|") {
                $span.hide();
            }
        };
        //
        if(theMarker.group() === "tbsc"){
        	$(".mwpg_poiw_caV").hide();
        }
        if (theMarker.group() === KWidgetFlag.localsearch) {
            if (theMarker._KLocalsearch_bind_afteropeninfowindow !== true) {
                _this._setInforWinImg(theMarker);
                _this._initHotelTabs(theMarker);
                var mIndex = theMarker._num - 1;
				//租房/二手房, 订酒店， 订机票
				$.each(["58z","58e", "djd", "djp"], function(index, val){
                    var $a = $("a[mfg='" + val + "']", infoDom);
					if ($a.length) {
						var href = $a.attr("href");
						//href的值为none(ie下为http://www.mapbar.com/search/none)的<a/>标签不显示
						if (/none$/i.test(href)) {
							hideNextLineSpan($a);
						}
					}
                });
                // 纠错
                var $err = $("a[mfg='err']", infoDom).eq(0);
                $err.bind("click", function(){
                    var poinfo = _this.resultAt(mIndex);
                    var info = {
                        "type": KFeedbackType.POI_ERROR,
                        "poinfo": poinfo,
                        "url": window.location.href + "&n=" + (mIndex)
                    };
                    KEvent.trigger(_this, "feedback", _this, info, theMarker);
                });
                // 发送
                var $fs = $("a[mfg='fs']", infoDom).eq(0);
                if (_this._opts.sender) {
                    $fs.click(function(e){
                        e.stopPropagation();
                        _this._sendIndex = (mIndex);
						//added by zy,该消息是由气泡发送
						_this._sendFromBubble = true;
						_this._bubbleIndex = _this._sendIndex;
                        _this.send();
                    });
                } else {
                    $fs.hide();
                    hideNextLineSpan($fs);
                }
                
              //收藏(气泡) add by zwq
                var $tbsc = $("a[mfg='tbsc']", infoDom).eq(0);
                $tbsc.click(function(e){
                    e.stopPropagation();
                    _this._sendIndex = (mIndex);
                    collection.addRecord(_this._getCollection());
                });
                
                //新浪微博
                var $wb = $("a[mfg='xlwb']", infoDom).eq(0);
                $wb.click(function(e){
                    e.stopPropagation();
                    var $li = $(">li", _this._resultDom).eq(mIndex);
                    var title = $(">h2>a", $li).eq(0).text() + " " + $(">p", $li).eq(0).text() + " —图吧地图 ";
                    var url = window.location.toString();
                    _this._toWeibo(title, url, mIndex, theMarker);
                });
                
                theMarker._KLocalsearch_bind_afteropeninfowindow = true;
                _this._loadHotelInfo(theMarker);
    			_this._loadPoiInfo(theMarker);
            }
            //google ad add by ligj@mapbar.com
            if(_this._enableGoogleAd){
            	var _gAdDom = $("#google_ads", infoDom);
            	if(_gAdDom.length > 0){
            		var query = theMarker._opts.infowin.cmdata.poi.name;
                	var pid = theMarker._opts.infowin.cmdata.poi.pid;
                	_this._addGooleAdForPoint(query,pid,_gAdDom,theMarker);
            	}
            	
            }
			
        }
        if (theMarker.group() === KWidgetFlag.localsearch + "_center") {
            $("a[mfg='err']", infoDom).hide();
            $("a[mfg='fs']", infoDom).hide();
            $("a[mfg='xlwb']", infoDom).hide();
            $("a[mfg='tbsc']", infoDom).hide();
            hideAllLineSpan(infoDom);
        }
    }

};
KLocalsearch.prototype._clickMarker = function(e, index)
{
	KEvent.clear(this._moEventTarget);
	var _this=this;
	_this._logRequest(index);
    e.stopPropagation();
    if (_this._selectMarker != null)
    {
        KMap.setCenter(_this._selectMarker.latlon(), KMap.zoom());
        _this._selectMarker._classObj = _this;//设置afteropeninfowindow事件绑定对象
        KMap.openInfoWindow(_this._selectMarker);
    }
};
KLocalsearch.prototype._layoutDom = function(){
    if (!this._domAll.is(":visible")) return;
    //padding-top, padding-bottom 尚未考虑在内
    // 得到_domAll的样式高度（当用户用样式表设置了该高度时）;如果用户未设置,_domAll.css("height")返回"auto"
    var aheight = parseInt(this._domAll.css("height"));
    if (isNaN(aheight)) {
        // 用户未设置_domAll的样式高度,通过jQuery计算高度
        aheight = this._domAll.innerHeight();
    }
    // 获取_domAll父节点的计算高度
    var temp = this._domAll.parent().innerHeight();
    // 如果父节点的计算高度更小, aheight取父节点的高度
    aheight = (temp < aheight) ? temp : aheight;
	//
    if (this._lsNoResultTip.is(":visible")) {
        this._resultDom.hide();
        //隐藏更多相关
        this._ssDom.hide();
        //隐藏逻辑选择
        this._logDom.hide();
        this._tipDom.hide();
        this._stdDom.hide();
        this._hotelDom.hide();
        this._lsNoResultTip.height(aheight-48)
    } else {
    	//added by zwq _ssDom
    	var ssHeight = this._ssDom.outerHeight(true);
    	var logHeight = this._logDom.outerHeight(true);
        var tipHeight = this._tipDom.outerHeight(true);
        var stdHeight = this._stdDom.outerHeight(true);
        var hotelHeight = this._hotelDom.outerHeight(true);
        var topsxHeight = this._topsxDom.outerHeight(true);
        var spellEcHeight = this._spellEcTipDom.outerHeight(true);
        var poiListTopAdHeight = this._poiListTopAdDom.outerHeight(true);
        
        var topHeight = 0;//poi列表顶部高度
        
        if (this._hotelDom.is(":visible")) {
        	topHeight += hotelHeight;
        }
        if (this._tipDom.is(":visible")) {
        	topHeight += tipHeight;
        }
        if (this._stdDom.is(":visible")) {
        	topHeight += stdHeight;
        }
        if(this._ssDom.is(":visible")){
        	topHeight += ssHeight;
        }
        if(this._logDom.is(":visible")){
        	topHeight += logHeight;
        }
        if(this._poiListTopAdDom.is(":visible")){
        	topHeight += poiListTopAdHeight;
        }
        if(this._topsxDom.is(":visible")){
        	topHeight += topsxHeight;
        }
        if(this._spellEcTipDom.is(":visible")){
        	topHeight += spellEcHeight;
        }
        this._resultDom.css({
	        height: aheight  - topHeight
	    });
    }
    return;
};
KLocalsearch.prototype._initMapTriggest = function()
{
    var _this = this;
    _this._fitzoomflag = true;
    if (!KMap.isInitialized(_this._opts.mapcontainer))
    {
        _this._fitzoomflag = false;
        var point = undefined;
        if (_this._result && _this._result != null && _this._result.d && _this._result.d.a)
        {
            point = new MPoint(_this._result.d.a);
        }
        KEvent.bind(KMap, "mapinit", function() {
            KEvent.unbind(KMap, "mapinit", arguments.callee);
            _this._addMarker();
            _this._bindMapEvents();
        });
        var zoom = undefined;
        if (_this._result && _this._result != null && _this._result.d && _this._result.d.b)
        {
            zoom = _this._result.d.b;
        }
//        KEvent.trigger(_this, "mapready", _this, point, zoom); //去除多余缩放
    } else {
        _this._addMarker();
        _this._bindMapEvents();
    }
};
KLocalsearch.prototype._appendLiToResult = function() {

	this._clearLiEvent();
	var _this = this;
	var resultDomArray = [];
	var jsonData = this._result;
	var isShowNoResult = true;
	if(jsonData.f || jsonData.sc){
		isShowNoResult = false;
	}
	/*if (!jsonData || !jsonData.e || jsonData.e.length === 0) {// 没有查到相关的信息
		_this._lsNoResultTip.show();
		KEvent.trigger(_this, "noresults", _this, _this._lsNoResultTip);
	}*/
	// 不论返回的结果如何， 都触发"resultloaded"
	_this._resultloadedEvent();
	//
	
	if (!!jsonData && !!jsonData.e) {
		
		
		//add by zwq 显示更多相关信息提示
		if(jsonData.t=='true'){
			var ss = jsonData.t;
			_this._ssMore.unbind('click').click(function(e){
				e.stopPropagation();
				_this._ssmoreFlag = false;
				_this._ajaxPostRequest(false);
			});
			_this._ssDom.show();
		}else{
			_this._ssDom.hide();	
		}
		if (jsonData.e) {
			var resultDom = jsonData.e;
			var length = resultDom.length;
			for ( var i = 0; i < length; i++) {
				resultDomArray.push(resultDom[i].h);
			}
			_this._resultDom.show().empty().append($(resultDomArray.join(""))).scrollTop(0);
			//
			_this._resultDom.ready(function() {
				_this._initDom();
				_this._updateThemeOptions();
				_this._updateTipurl();
				_this._resultshowEvent();
				if (length === 0 && isShowNoResult) {
					KEvent.trigger(_this, "noresults", _this, _this._lsNoResultTip);
					_this._lsNoResultTip.show();
					if(jsonData.th){
						$(">div",_this._lsNoResultTip).hide().eq(1).show();
					}else if(_this._queryopts.ls.vs){
						$(">div",_this._lsNoResultTip).hide().eq(2).show();
					}else if(jsonData.qas){
						$(">div",_this._lsNoResultTip).hide().eq(3).show();
					}else if(jsonData.acd){
						$(">div",_this._lsNoResultTip).hide().eq(4).show();
					}else{
						$(">div",_this._lsNoResultTip).hide().eq(0).show();
					}
				}
				_this._layoutDom();
			});
		}
	} else {
		// no results, so to hide the result dom
		_this._resultDom.empty().hide();
		KMap.clearMarker(KWidgetFlag.localsearch);
		KMap.clearMarker(KWidgetFlag.localsearch + "_center");
		//
		KEvent.trigger(_this, "resultshown", _this, "query", _this._result);
		KEvent.trigger(_this, "noresults", _this, _this._lsNoResultTip);
		_this._lsNoResultTip.show();
		if(jsonData.th){
			$(">div",_this._lsNoResultTip).hide().eq(1).show();
		}else if(_this._queryopts.ls.vs){
			$(">div",_this._lsNoResultTip).hide().eq(2).show();
		}else{
			$(">div",_this._lsNoResultTip).hide().eq(0).show();
		}
	}
};
/**
 * 跳转到指定页码，当页码小于1或大于最大页码时自动跳转到第一页或最后一页。
 *
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.goPage = function(page)
{
    if (page < 1)
    {
        this._currentPage = 1;
    } else if (page > this.pageCount())
    {
        this._currentPage = this.pageCount();
    }
    else
    {
        this._currentPage = page;
    }
    this._gopageFlag = false;
    this._extendFlag = false;
    
//    if(this._result.t == 'false'){
//    	this._ssmoreFlag = false;
//    	this._logmoreFlag = true;
//    }
//	
    //added by zwq   z区分逻辑查询和显示更多查询的请求，用于控制各自请求的参数
    if(this._result.z == '1'){
    	this._ssmoreFlag = false;
    }
    if(this._result.w == 'false' && this._result.z == '2'){
    	this._logmoreFlag = false;
    }
    //如果是专题搜索，_isInitTopSx = true
    if(this._result.th)this._isInitTopSx = true;
    this.query(this._queryopts);
};
/**
 * 清除数据
 * @return String
 * @uncrunch
 */
KLocalsearch.prototype.clearResult = function()
{
    if (this._resultDom)
    {
        this._resultDom.empty();
        this._resultDom.hide();
    }
    KMap.clearMarker(KWidgetFlag.localsearch);
    KMap.clearMarker(KWidgetFlag.localsearch+"_center");
};
/**
 * 获取标注的阴影字符串，如果当前浏览器为IE6，则返回undefined
 */
KLocalsearch.prototype._shadow = function() {
    if ($.browser.msie && $.browser.version < 7) {
        return undefined;
    } else {
        return KConfig.get("mk_sn_s_t");
    }
};
KLocalsearch.prototype._getRequestParam = function(name)
{
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
    var r = this._extendParam.substr(this._extendParam.indexOf("\?") + 1).match(reg);
    if (r != null) return r[2];
    return null;
};
/**
 * 根据类型得到是否有相关类型的按钮。
 * @param index
 * @param type
 */
KLocalsearch.prototype._getInforShow = function(index, type)
{
    if (this._resultDom)
    {
        var length = $("a[mfg='" + type + "']", $(">li", this._resultDom).eq(index)).length;
        if (length > 0)
        {
            return $("a[mfg='" + type + "']", $(">li", this._resultDom).eq(index)).attr("href");
        }
        else
        {
            return "none";
        }
    }
};

KLocalsearch.prototype._setInforWinImg = function(marker) {
	var index = marker._num-1;
	var ajaxUrl = this._result.e[index].g;
	var imgPattern=/\.(gif|jpg|jpeg|png|bmp)$/i;
	var $img = $("img", marker.iwcDom()).eq(0);
	if(!ajaxUrl){
		var nextDiv = $("+ div",$img.parent());
		$("> p",nextDiv).width("96%");
		return;
	}
	//return;
	
	var setImgSrc = function(imgElem, src){
		var img = new Image();
		img.onload=function(){
			$(imgElem).attr("src", src).show().css("visibility","visible");
			img=null;
		};
		img.src=src;
	};
	if ($img.data("setsrc") !== "true") {
		if (imgPattern.test(ajaxUrl)) {
			$img.attr("setsrc","true");
			setImgSrc($img.get(0), ajaxUrl);
		} else {
			//ajaxUrl = ajaxUrl.replace("./s?", "/proxy.jsp?");
			$.ajax({
				url: ajaxUrl,
				type: "get",
				dataType: "text",
				error: function(){
				},
				success: function(data){
					if (data != null && data != "") {
						$img.attr("setsrc","true");
						setImgSrc($img.get(0), data);
					// $("img", marker.iwcDom()).eq(0).parent().show();
					}
				}
			});
		}
	}
};
/**
 * 返回结果总记录数。
 * 
 * @uncrunch
 */
KLocalsearch.prototype.totalCount = function()
{
	//edit by zwq 唯一点时，返回记录条数为0
//    if (this._result.a&&this._result.t!='true')
//    {
//       return parseInt(this._result.a);
//    }
//    else
//    {
//        return 0;
//    }
    return parseInt(this._result.a);
    
};

/**
 * 打印搜索结果
 *
 * @uncrunch
 */
KLocalsearch.prototype.print = function() {

	//var l=new KLine([new MPoint(116.38672, 39.90805),new MPoint(116.38672, 39.80805),new MPoint(117.38672, 39.90805)],{});
	//KMap.addLine(l);
	//return;
	//
	var _this=this;
	if(!_this._opts||!_this._opts.printer){
		return;
	}
	//如果满足条件，开始打印
	var printer = _this._opts.printer;
	var lines = KMap.getLines();
	// KPrintOptions类型
	var data = {
		"queryopts" : _this._queryopts,
		"resultnum": _this._selectMarker ? _this._selectMarker._num : 0,
		"pagenum" : _this._currentPage,
		"markers" : _this._getStringMarkers(),
		"lines" : lines.toString()
	};
	//
	printer.print(data);
};
/**
 * 将当前查询结果以指定方式发送。
 *
 * @param sendtype
 *            KSendType 类型，默认为 KSendType.all。
 * @param selected
 *            KSendType 类型，默认选中的发送功能
 * @uncrunch
 */
KLocalsearch.prototype.send = function(sendtype, selected) {
	var _this=this;
	//如果没有sender, 返回
	if(!_this._opts||!_this._opts.sender){
		return;
	}
	//如果返回的值为空
	if (!_this._result || !_this._result.e || _this._result.e.length < 1) {
		return ;
	}
	//如果满足条件，准备发送
	var sender =  _this._opts.sender;
	var data =KTools.copyOptions({}, KSendOptions);
	data.querytype = KQueryType.localsearch;
	//data.sendtype=KSendType.email| KSendType.gps | KSendType.sms;
	data.sendtype = sendtype || (KSendType.email | KSendType.gps | KSendType.sms);
	data.selected = selected || KSendType.sms;
	data.sms=[];
	data.email=[];
	data.gps=[];
	//added by zy,为从气泡点发送添加独有判断
	data.sendFromBubble = this._sendFromBubble;
	if(data.sendFromBubble) data.bubbleIndex = this._bubbleIndex;
    //opt# 1011031702 fix begin
    //add by zhangsq
    data.car = [];
	//
	var result= _this._result.e;
	var len = result.length, i;
	var smsData,gpsData,carData;    //add [carData] by zhangsq
	var queryHash = KUrlHash.parseByHash(_this._queryHash.toString(), true);
	queryHash.setKey("t","ssm");
	if (_this._queryHash.value("cn") !== null) {
		queryHash.setKey("t", "nssm");
	}
	queryHash.setKey("n", _this._sendIndex);
	//邮件中的n以0开始
	data.email.push(_this._getKNamedValue("param", queryHash.toString()));
//	var tempStr = "";
	for (i = 0; i < len; i++) {
//		tempStr = "";
//		if (result[i].d && $.trim(result[i].d).length) {
//			tempStr += " " + $.trim(result[i].d);
//		}
//		if (result[i].c && $.trim(result[i].c).length) {
//			tempStr += " " + $.trim(result[i].c);
//		}
//        console.log(result[i])
		smsData = {
			"selected" : (i === _this._sendIndex) ? true : false,
			"content" : (result[i].mv),
            "sendkey" : (result[i].mk)
		};
		gpsData = {
			"selected":(i === _this._sendIndex) ? true : false,
			"type" : "其它",
			"pos" : result[i].i,
			"name" : result[i].n,
			"address" : result[i].c,
			"phoneNumber" : result[i].d,
			"regionName" : ""
		};
        //add by zhangsq
        if(i === _this._sendIndex)
        {
            carData = {
                'latlon' : result[i].i
                ,'name' : result[i].n
                ,'address' : result[i].c
                ,'phone' : result[i].d
                ,'preview' : result[i].n + (result[i].c ? ('\n' + result[i].c) : '') + (result[i].d ? ('\n' + result[i].d) : '')
            };
			//added by zy,修正点击地图顶栏汽车发送无法正确得到选中选项卡，从而出错的问题
			//if($('#_iw_shadow_0').length == 0){}
//			if ($('#olResult>li').hasClass('mwp_ls_rls')) {
//				var selectedNO = $('#olResult li.mwp_ls_rls').index();
//				console.log(selectedNO)
//				carData = {
//                	'latlon' : result[selectedNO].i
//                	,'name' : result[selectedNO].n
//                	,'address' : result[selectedNO].c
//                	,'phone' : result[selectedNO].d
//                	,'preview' : result[selectedNO].n + (result[selectedNO].c ? ('\n' + result[selectedNO].c) : '') + (result[selectedNO].d ? ('\n' + result[selectedNO].d) : '')
//            	};
//			}
            data.car.push(_this._getKNamedValue('car', carData));
        }
        //opt# 1011031702 fix end
		data.sms.push(_this._getKNamedValue(result[i].n, smsData));
		data.gps.push(_this._getKNamedValue(result[i].n, gpsData));
	}
	//
	this._sendFromBubble = false;
	sender.send(data);
};
/***
 * 将数据包装为KNamedValue类型的对象
 * @param name
 * @param val
 * @return KNamedValue object
 */
KLocalsearch.prototype._getKNamedValue = function(name,val)
{
   var obj = {"name":name, "kvalue":val};
   KTools.copyOptions(obj,KNamedValue);
   return obj;
};

/**
 * parse this._result to get map markers
 *
 * @return Array String[] the string can be converted to KMarker object;
 */
KLocalsearch.prototype._getStringMarkers=function(){
	var  _this=this;
	var markers=KMap.getMarkers();
	if(!markers||markers.length===0){return [];}
	//
	var len=markers.length;
	var index=0;
	var arrOut=[];
	for(index=0; index<len; index++){
		arrOut.push(markers[index].toString());
	}
	//
	return arrOut;
};
/**
 * 返回当前结果页中指定序号的条目信息。
 *
 * @param index
 *            Integer 从0开始
 * @return KPOInfo 类型。
 * @uncrunch
 */
KLocalsearch.prototype.resultAt = function(index) {
	var _this=this;
	var arr=[];
	if (_this._result && _this._result.e) {
		arr = _this._result.e;
	}
	var obj= arr[index];
	if(!obj){
		return undefined;
	}
	//KPOInfo类型
	var reObj={
		"type":KPOIType.NORMAL,
		"city" : _this._queryHash.value("c"),
		"name" : obj.n,
		"pid" : obj.f,
		"latlon" : obj.e,
		"address" : obj.c,
		"phone" : obj.d
	};
	return reObj;
};
/**
 * 返回当前结果页中指定序号的结果列表条目 Dom 元素。
 *
 * @param index
 *            Integer 从0开始
 * @return Node 类型。
 * @uncrunch
 */
KLocalsearch.prototype.resultDomAt = function(index) {
	var _this = this;
	var $dom = null;
	if (_this._resultDom) {
		$dom = $(">li", _this._resultDom).eq(index);
		if ($dom && $dom.get) {
			return $dom.get(0);
		}
	}
};
/**
 * 初始化酒店查询
 */
KLocalsearch.prototype._initHotelDom = function(){
	var _this=this;
	var klass = KLocalsearch.conf.CLASSNAME;
	var theme = this._theme;
	var $inputContainer = this._hotelDom.children("div").eq(0).addClass(theme+klass.ST);
	var $listContainer = this._hotelDom.children("div").eq(1).addClass(theme+klass.SC);
	var $tipContainer = this._hotelDom.children("div").eq(2).addClass(theme+klass.HST);
	var $moreBtn = $listContainer.children("a").eq(0);
	var $queryBtn = $listContainer.children("input").eq(0);
	//初始化日期选择器
	var $inputs = $inputContainer.find("input");
    var box = this._hotelDom.parent().parent().get(0);
//    var today = new Date();
    var today = new Date(new Date().getTime() + 1*24*60*60*1000);

    var startOpts = {
        month: 2,
        icon: $inputs.eq(0).siblings("a").get(0),
        box: box,
        date: today,
		min:new Date(),
		max:this._nextMonthDay_1(today, 2)
    }
	var endDate = new Date(today.getTime() + 1*24*60*60*1000);//345600000 = 4*24*60*60*1000

    var endOpts = {
        month: 2,
        icon: $inputs.eq(1).siblings("a").get(0),
        box: box,
        date: endDate,
        min:new Date(),
		max:this._nextMonthDay_1(endDate, 2)
    }
	startOpts = KTools.copyOptions(startOpts, KDatePickerOptions);
	endOpts = KTools.copyOptions(endOpts, KDatePickerOptions);
    this._startPicker = new KDatePicker($inputs.get(0), startOpts);
  	this._endPicker = new KDatePicker($inputs.get(1), endOpts);
    this._endPicker.setReferPicker(this._startPicker);
    KEvent.bind(this._startPicker, "selected", function(evt, wgt, date){
        _this._endPicker.setOptions({
            //86400000 = 24*60*60*1000
            min: new Date(date.getTime() + 86400000)
        });
        window.setTimeout(function(){
            _this._endPicker.show();
        }, 10);
    });
	//初始化酒店条件选择
    var priceListOpts = {
        select2text: true,
        editable: false,
        deletable: false,
        sortable: false,
        multiple: false,
        deselect: false,
        checkbox: false,
        sroll2view: false,
		hover:true
    };
    var starListOpts = {
        select2text: true,
        editable: false,
        deletable: false,
        sortable: false,
        multiple: false,
        deselect: false,
        checkbox: false,
        sroll2view: false,
		hover:true
    };
    priceListOpts = KTools.copyOptions(priceListOpts, KDropListOptions);
    starListOpts = KTools.copyOptions(starListOpts, KDropListOptions);
	this._priceList = new KDropList($listContainer.children("div").get(0), priceListOpts);
	this._starList = new KDropList($listContainer.children("div").get(1), starListOpts);
	KEvent.bind(this._priceList, "opened", function(){
		_this._starList.close();
	});
	KEvent.bind(this._starList, "opened", function(){
		_this._priceList.close();
	});
    _this._hotelBaseUrl = "http://jiudian.kuxun.cn/?fromid=Kmapbar123-S1679378-T1001061&est=marketing";
	//点击更多
	$moreBtn.bind("click", function(event){
		event.preventDefault();
		var statisticsCode = 'http://click.mapbar.com/GO/';
		window.open(statisticsCode + _this._hotelBaseUrl);
	})
	//点击查询
    $queryBtn.bind("click", function(event){
		 event.preventDefault();
        var baseUrl = _this._hotelBaseUrl;
        var startDate = _this._startPicker.getDate(true);
        var endDate = _this._endPicker.getDate(true);
        var rank = _this._starList.selected()[0];
        rank = (rank && rank.kvalue) ? rank.kvalue : "0";
        var price = _this._priceList.selected()[0];
        price = (price && price.kvalue) ? price.kvalue : "0-200";
		var statisticsCode = 'http://click.mapbar.com/GO/';
		var url = statisticsCode + _this._hotelQueryUrl(baseUrl, startDate, endDate, rank, price);
		window.open(url);       
    });
	//
	this._resetHotelView();
	
};
/**
 * baseUrl: http://hotel.mapbar.com/hotellist.asp?cityid=53
 * &tm1=2011-05-05&tm2=2011-06-06&rank=3&price=0-200
 */
KLocalsearch.prototype._hotelQueryUrl = function(baseUrl, startDate, endDate, rank, price){
    var url = [baseUrl];
//    url.push("checkindate=" + startDate);
//    url.push("checkoutdate=" + endDate);
    switch (rank) {
        case "5":
        case "4":
        case "3":
        case "2":
        case "0":
            break;
        default:
            rank = "0"
    }
//    url.push("rank=" + rank);
	switch (price) {
        case "0-200":
        case "200-300":
        case "300-400":
        case "400-500":
        case "500-0":
//			url.push("price=" + price);
            break;
    }
    
    return url.join("&");
};

KLocalsearch.prototype._resetHotelView = function(){
	var today = new Date();
	this._startPicker.setDate(today);
	this._endPicker.setDate(new Date(today.getTime() + 345600000));//345600000 = 4*24*60*60*1000
	this._priceList.select(0);
	this._starList.select(0);
	
};
/**
 * 返回下N个月该天的前一天
 * @param {Date} date
 * @param {Integer} n
 * @return {Date} 
 */
KLocalsearch.prototype._nextMonthDay_1 = function(date, n){
    n = (typeof n !== "number" || isNaN(n)) ? 1 : n;
    var nextNMonth = new Date(date.getFullYear(), date.getMonth() + n, 1);
    var dateToday = date.getDate();
    var getLastDay = function(dateObj){
        var nextDateObj = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);
        nextDateObj = new Date(nextDateObj.getTime() - 86400000);//86400000 = 24*60*60*1000
        return nextDateObj.getDate();
    };
    var returnDate = "";
    if (dateToday === 1) {
        returnDate = new Date(nextNMonth.getFullYear(), nextNMonth.getMonth(), 1);
        returnDate = new Date(returnDate.getTime() - 86400000);//86400000 = 24*60*60*1000
    } else {
        var nextMonthLastDay = getLastDay(nextNMonth);
        returnDate = new Date(nextNMonth.getFullYear(), nextNMonth.getMonth(), Math.min(dateToday, nextMonthLastDay));
		returnDate = new Date(returnDate.getTime() - 86400000);//86400000 = 24*60*60*1000
    };
    return returnDate;
};

/**
 *
 * @param {KMarker} marker
 */
KLocalsearch.prototype._initHotelTabs = function(marker){
	var _this=this;
    var infoDom = marker.iwcDom();
    var $hotel = $("[mfg='hotel']", infoDom);
	//在火狐3.x中，当酒店气泡中的垂直滚动条不在开始位置时， 移动地图会出现闪白屏的bug
	if ($.browser.mozilla) {
		$hotel.bind("mouseleave", function(){
			var $vDiv = $(">div", $hotel).filter(":visible");
			$vDiv.animate({
				scrollTop: 0
			}, 10);
		});
	}
    if ($hotel.length === 1) {
		//tabs
        var $lis = $(">ul>li", $hotel);
        var $divs = $(">div", $hotel);
		$lis.removeClass("mwpg_poiw_h_tab_s").eq(0).addClass("mwpg_poiw_h_tab_s");
		$divs.removeClass("mwpg_poiw_h_tab_sc").hide().eq(0).addClass("mwpg_poiw_h_tab_sc").fadeIn();
        $lis.bind("click", function(event){
            var index = $lis.index(this);
            $divs.removeClass("mwpg_poiw_h_tab_sc").hide().eq(index).addClass("mwpg_poiw_h_tab_sc").show();
            $lis.removeClass("mwpg_poiw_h_tab_s");
            $(this).addClass("mwpg_poiw_h_tab_s");
        });
		var $firstDiv = $divs.eq(0);
		//date picker
		var $inputs = $firstDiv.find("form input[type='text']");
		var today = new Date();
        if ($inputs.length === 2) {
			var box = $hotel.parents("table").get(0);
            var startOpts = {
                month: 2,
				box:box,
                date: today,
                min: new Date(),
                max: this._nextMonthDay_1(today, 2)
            }
            var endDate = new Date(today.getTime() + 345600000);//345600000 = 4*24*60*60*1000 
            var endOpts = {
                month: 2,
				box:box,
                date: endDate,
                min: new Date(),
                max: this._nextMonthDay_1(endDate, 2)
            }
            startOpts = KTools.copyOptions(startOpts, KDatePickerOptions);
            endOpts = KTools.copyOptions(endOpts, KDatePickerOptions);
			var startInput = $inputs.get(0);
			var endInput = $inputs.get(1);
            var startPicker = new KDatePicker(startInput, startOpts);
            var endPicker = new KDatePicker(endInput, endOpts);
            endPicker.setReferPicker(startPicker);
            KEvent.bind(startPicker, "selected", function(evt, wgt, date){
               endPicker.setOptions({
                    //86400000 = 24*60*60*1000
                    min: new Date(date.getTime() + 86400000)
                });
                window.setTimeout(function(){
                    endPicker.show();
                }, 10);
            });
			//
			var startUID = this._getUID();
			var endUID = this._getUID();
			$(startInput).attr("lsuid", startUID);
			$(endInput).attr("lsuid", endUID);
			this._IWDatePickers[startUID] = startPicker;
			this._IWDatePickers[endUID] = endPicker;
			//
			var hotelID = marker._hotelID;
			var $form = $firstDiv.find("form").eq(0);
			$form.bind("submit", function(event){
				event.preventDefault();
				var $inputs = $(this).find("input[type='text']");
//				var url = 'http://hotel.mapbar.com/'+hotelID+'/?tm1='+$inputs.eq(0).val()+'&tm2='+$inputs.eq(1).val();
                var url = 'http://jiudian.kuxun.cn/?fromid=Kmapbar123-S1679378-T1001061&est=marketing';
                    window.open(url);
			});
        }
		//table 
//		var $table = $firstDiv.find("table");
//		if($table.length===1){
//			$table.bind("click", function(event){
//				event.preventDefault();
//				var $target =$(event.target);
//				if($target.is("a")){
//				var hotelID = $target.attr("hotelid");
//				var roomID = $target.attr("roomid");
//				var planID = $target.attr("planid");
//				if(hotelID && roomID && planID){
//					_this._bookHotel(hotelID, roomID, planID);
//				}}
//			});
//		}
		
    };
};
KLocalsearch.prototype._loadHotelInfo = function(marker){
	if(!marker._hotelID){
		return;
	}
    var infoDom = marker.iwcDom();
    var $hotel = $("[mfg='hotel']", infoDom);
	if ($hotel.length === 1) {
		var $divs = $(">div", $hotel);
		var table = $divs.eq(0).find("table").get(0);
		if (!$(table).data("htmlcontent")) {
			this._jsopHotelInfo(table, marker._hotelID);
		}
	}
};

KLocalsearch.prototype._loadPoiInfo = function(marker){
	if(marker._poiDetail){
	    var infoDom = marker.iwcDom();
	    var $poiInfo = $("[mfg='poid']", infoDom);
	    this._jsonPoiInfo($poiInfo,marker._opts.infowin.cmdata.poi.pid);
	}
};

KLocalsearch.prototype._jsonPoiInfo= function(dom, poiId){
	var _this = this;
	var hash = new KUrlHash();
    var url = _this._opts.url;
    hash.setKey("t","ps");
    hash.setKey("c",_this._queryopts.ls.city);
    hash.setKey("id", poiId);
    if (url.indexOf("?") != -1) {
        var num = url.indexOf("?");
        url = url.substring(0, num);
    }
	$.ajax( {
		url : url + "?" +hash.toString(),
		type : "GET",
		dataType : "json",
		success : function(data) {
			if(data.html){
				var html = $(""+data.html+"");
				$(dom).html(html);
				var $uls = $(">ul", dom);
				var $lis = $(">ul>li", dom);
			    var $divs = $(">div", dom);
			    $uls.addClass("mwp_subPop_nav");
				$lis.removeClass("mwp_subPop_nav_currnet").eq(0).addClass("mwp_subPop_nav_currnet");
				$divs.removeClass("mwp_subPop_cont_box").hide().eq(0).addClass("mwp_subPop_cont_box").fadeIn();
			    $lis.bind("click", function(event){
			        var index = $lis.index(this);
			        $divs.removeClass("mwp_subPop_cont_box").hide().eq(index).addClass("mwp_subPop_cont_box").show();
			        $lis.removeClass("mwp_subPop_nav_currnet");
			        $(this).addClass("mwp_subPop_nav_currnet");
			    });
			    //导游图大图展示
                $("a[mfg='bpic']", $(dom)).eq(0).imageBox();
			}else{
				$(dom).html("无数据");
			}
		}
	});
};
/**
 *
 * 使用jsonp方法加载数据
 * http://www.api.zhuna.cn/e/json.php?hid=10604
 tm1=2011-05-07
 tm2=2011-05-08
 orderfrom=undefined
 call=callback
 r=0.4653051046192864
 * @param {HTMLElement} table
 * @param {String}  hotelID
 */
KLocalsearch.prototype._jsopHotelInfo= function(table, hotelID){
	var today = new Date();
	//345600000 = 4*24*60*60*1000
    //http://social.hotel.kuxun.cn/Partner/TubaPrice?hotelid=10030485&fromid=Kmapbar123-S1679378-T1001061&est=marketing&startDate=2014-05-02&endDate=2014-05-05
//	var next4Day =new Date(today.getTime() + 60*60*24*1000*4);
	var url =["http://social.hotel.kuxun.cn/Partner/TubaPrice?hotelid="+ hotelID];
	url.push("startDate="+ this._formatDate(new Date(today.getTime() + 60*60*24*1000*1)));
	url.push("endDate="+ this._formatDate(new Date(today.getTime() + 60*60*24*1000*2)));
	url.push("fromid=Kmapbar123-S1679378-T1001061");
    url.push("est=marketing");
	//
	var _this=this;
	$.ajax( {
		url : url.join("&"),
		type : "GET",
		dataType : "jsonp",
		jsonp:"callback",
		success : function(data) {

			if(data && data.status === 1 && data.data && data.data.room){
				var inner = _this._genHotelTBodyInner(data.data.room, hotelID);
				if(!inner){
					inner="<tr><td colspan='5'><p class='mwpg_poiw_h_haveNot'>无可预定客房，请选择其他酒店。</p></td></tr>"
				}
				$("tbody", table).html(inner);
				$(table).data("htmlcontent",true);
			}
		}
	});
};
/**
 * 
 * @param {Date} date
 */
KLocalsearch.prototype._formatDate = function(date){
    return date.getFullYear() + "-" + this._prefixZero((date.getMonth() + 1), 2) + "-" + this._prefixZero(date.getDate());
};
/**
 * 
 * @param {Integer} num
 * @param {Integer} n
 */
KLocalsearch.prototype._prefixZero = function(num, n){
    while ((num + "").length < n) {
        num = "0" + num;
    }
	return num;
};
/**
 * 
 * @param {Object} data
 * @param {String} hotelID
 */
KLocalsearch.prototype._genHotelTBodyInner = function(data, hotelID){
	var tbody=[""];
    for(var i in data){
        tbody.push(this._genHotelTR(data[i]));
    }
//	if(data && data.rooms){
//        for (var index = 0; index < data.rooms.length; index++) {
//            tbody.push(this._genHotelTR(data.rooms[index], data.status, hotelID));
//        }
//	}
	return tbody.join("");
	
};
/**
 * 
 * @param {Object} room
 * @param {String} status
 * @param {String} hotelID
 */
KLocalsearch.prototype._genHotelTR = function(room){
    var html = ['<tr>'];
    //
    html.push("<td style='width:100px;'>" + room.roomName + "</td>");
    html.push("<td>" + room.priceNowDay + "元</td>");
//    html.push("<td>" + Math.round(room.plans[0].totalprice / 4) + "元</td>");
//    html.push("<td><b>" + room.priceNowDayWithDiscount+"</b>元</td>");
    html.push("<td style='width:80px;'><span class='mwpg_poiw_h_price'><em>返</em>¥" + (room.prize || 0) + "</span></td>");
//    html.push("<td>" + room.adsl + "</td>");
//    if ((status + "") === "0" && (room.status + "") === "0") {
        html.push("<td style='width:80px;'><a href='" + room.orderUrl + "' target='_blank'>预订</a></td>");
//    } else {
//        html.push("<td><a href='javascript:void(0);' class='btn_dis'>满房</a></td>");
//    }
    //
    html.push('</tr>');
    return html.join("");
};
/**
 * to get unique ic
 */
KLocalsearch.prototype._getUID = function(){
    if (!this._lsUID) {
        this._lsUID = 1;
    } else {
        this._lsUID++;
    }
	return this._prefixZero(this._lsUID, 6);
};
KLocalsearch.prototype._IWDatePickersMgr = function(){
	for(var prop in this._IWDatePickers){
		if(this._IWDatePickers.hasOwnProperty(prop) && /\d{6,}/.test(prop)){
			var $input = $("input[lsuid='"+prop+"']");
			if($input.length===0){
				var picker = this._IWDatePickers[prop];
				if (picker && typeof picker.finalize === "function") {
					this._IWDatePickers[prop]=undefined;
					delete this._IWDatePickers[prop];
					KEvent.unbind(picker);
					picker.finalize();
				}
			}
		}
	}
};
KLocalsearch.prototype._clearIWDatePickers = function(){
    for (var prop in this._IWDatePickers) {
        if (this._IWDatePickers.hasOwnProperty(prop) && /\d{6,}/.test(prop)) {
            var picker = this._IWDatePickers[prop];
            if (picker && typeof picker.finalize === "function") {
                this._IWDatePickers[prop] = undefined;
                delete this._IWDatePickers[prop];
                KEvent.unbind(picker);
                picker.finalize();
            }
        }
    }
};
/**
 * 
 * @param {String} hotelID
 * @param {String} roomID
 * @param {String} planID
 * @param {String} startDate
 * @param {String} endDate
 */
KLocalsearch.prototype._bookHotel = function(hotelID, roomID, planID, startDate, endDate){
    if (!this._hotelFormID || !$("#" + this._hotelFormID).length) {
        this._createHotelBookForm();
    }
    var form = $("#" + this._hotelFormID).get(0);
	var statisticsCode = 'http://click.mapbar.com/GO/';
    form.action = statisticsCode + "http://jiudian.kuxun.cn/?fromid=Kmapbar123-S1679378-T1001061&est=marketing";
//    form.hid.value = hotelID;
//    form.rid.value = roomID;
//    form.pid.value = planID;
//    var today = new Date();
//    form.tm1.value = startDate || this._formatDate(today);
//    //345600000 = 4*24*60*60*1000
//    form.tm2.value = endDate || this._formatDate(new Date(today.getTime() + 345600000));
    form.submit();
};
KLocalsearch.prototype._createHotelBookForm = function(){
    var formID = "ls_hotel_form_" + this._getUID();
    var html = ['<form action="http://jiudian.kuxun.cn/?fromid=Kmapbar123-S1679378-T1001061&est=marketing" method="post" target="_blank" id="' + formID + '" name="' + formID + '" style="display:none">'];
//    html.push('<input name="hid" type="hidden"/>');
//    html.push('<input name="rid" type="hidden"/>');
//    html.push('<input name="pid" type="hidden"/>');
//    html.push('<input name="tm1" type="hidden"/>');
//    html.push('<input name="tm2" type="hidden"/>');
    html.push('</form>');
    $(document.body).append(html.join(""));
    this._hotelFormID = formID;
};


/**
 * 收藏点信息获取 add by zhangwq
 */
KLocalsearch.prototype._getCollection =function(){
	var _this = this;
	var result= _this._result.e;
	var len = result.length, i;
	var _collData;
	for (i = 0; i < len; i++) {
		if(i === _this._sendIndex){
			_collData = {
				"city" : _this._queryopts.ls.city,
				"name" : result[i].n,
				"pid" : result[i].f,
				"latlon" : result[i].e,
				"addr" : result[i].c,
				"tel" : result[i].d,
				"type" : 1,
				"intro" : ""
			};
		}
	}
	return _collData;
}


/**
 * 用于热点poi的日志统计(日后可不用可以删除) add by zhangwq
 * */

KLocalsearch.prototype._logRequest = function(index){
    var _this = this;
    var ajaxUrl = _this._opts.url;
    var hash = new KUrlHash();
    hash.setKey("t", "logstat");
    hash.setKey("keyword", KUrlHash.parseByHash(location.href, false)._UrlHash.k);
    if(KUrlHash.parseByHash(location.href, false)._UrlHash.cn){
    	hash.setKey("cn", KUrlHash.parseByHash(location.href, false)._UrlHash.cn);
    }
    var city = decodeURI(window.location.hash.split("&")[0].split("=")[1]);
    if(_this._result.e[index].g !== ""){
    	city = decodeURI(decodeURI(KUrlHash.parseByHash(_this._result.e[index].g, false)._UrlHash.c));
    	hash.setKey("type", decodeURI(decodeURI(KUrlHash.parseByHash(_this._result.e[index].g, false)._UrlHash.pt)));
    }
    hash.setKey("pid", _this._result.e[index].f);
    hash.setKey("city", city);
    hash.setKey("index", index);
    if (_this._opts.url) {
        if (ajaxUrl.indexOf("?") != -1) {
            var num = ajaxUrl.indexOf("?");
            ajaxUrl = ajaxUrl.substring(0, num);
        }
        $.ajax({
            type: "GET",
            url: ajaxUrl,
            cache: false,
            data: (hash.toString()),
            error: function(XMLHttpRequest, textStatus, errorThrown){
            },
            success: function(data){
               
            },
            dataType: "json"
        });
    }
};


/**
 * 增加雨点叠加层 add by zhangwq
 * @param {String} t 雨点叠加层类型
 * 
 */
KLocalsearch.prototype._baseMapLayer = function(t){
	var _this = this;
	_this._rainDropsLayer = null; 
	var serverPath = "";
	var dataPattern = "";
	var minLevel = 6;
	var maxLevel = 15;
    switch (t)
    {
        case 'jiudian':
        	serverPath = "http://img.mapbar.com/maplite/mapbank/maplayer/jiudian/";
        	dataPattern = "jiudian";
            break;
        case  'youlp':
        	serverPath = "http://img.mapbar.com/maplite/mapbank/maplayer/youlaopo/";
        	dataPattern = "youlaopo3";
            break;
        default:
    }
    _this._rainDropsLayer = new MLayer({
		serverPath: serverPath,
		dataFormat: MLayer.DATAFORMAT.GLOBALVARIABLE,
	    needData: true,
	    imgType: "png",
	    minLevel: minLevel,
	    maxLevel: maxLevel,
	    dataPattern: dataPattern + MLayer.DPLACEHOLDER,
	    tip:{mode:MLayer.TM_MOUSEOVER},
        click : {
				fun : function(){
					var _param = new KUrlHash();
					var ylpId = arguments[0]['ylp'];
					//热区经纬度，气泡默认定位在热区上
					var currlat = arguments[0]['l'];
					var hotname = arguments[0]['n'];
					_param.setKey("t","ps");
                    _param.setKey("id",arguments[0]['p']);
                    _param.setKey("c","北京市");
                    $.ajax({
                        url : bjLayers_url
                        ,cache : false
                        ,data :  _param.toString()
                        ,success:function(data) {
                            try{
                            	var datac = data.c;
                            	if(!data.c && !data.d && !data.e){
                            		datac = "对不起，暂时读取不到信息，请尝试搜索！"
                            	};
                            	var iwOpts = {
                            			g: data.g,
                                        c: datac,
                                        //"&nbsp;"防止有图片没有电话时，气泡出现滚动条
                                        d: data.d || "&nbsp;"
                                    }
                            	var _iwOpts = "";
                            	if(t === "youlp"){
                            		var html =['<ul class = "mwpg_poiw_ylpul">'];
                                	html.push('<li class="mwpg_poiw_ylpul_li">实时油价</li>');
                                	html.push('<li class="mwpg_poiw_ylpul_lg">数据由<a href="http://www.youlaopo.com/" target="_blank"><em style="text-decoration:none;cursor:pointer;">&nbsp;</em></a>提供</li>');
                                	html.push('</ul>');
                        			//hotelHtml.push('<div class=""><div class=""><table style="height:100px;"><tbody id = "price"><tr><td>加载中...</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></tbody></table></div></div>');
                                	html.push('<div class="mwpg_poiw_ylp_div"><div class="mwpg_poiw_ylp_data" style="height:70px" id=price><span class="mwpg_poiw_ylpui_load">加载中....</span></div></div>');
                        			iwOpts.hotel=html.join("");
                                	_iwOpts = KConfig.get("iw_iwo_gasoline",iwOpts);
                                    setTimeout(function(){
                                    	 _this._jsopGasolineInfo(ylpId);
                                    }, 500);
                            	}else{
                            		_iwOpts = KConfig.get("iw_iwo_poi",iwOpts);
                            		_iwOpts.content = "<div class='mwpg_poiw_caW'><p>" + datac + "<br>" + data.d + "</p></div>";
                            	}
                            	if(!data.n){
                            		data.n = hotname;
                            	}
                            	_iwOpts.title = data.n;
                                _iwOpts.cmdata = {poi:{city:data.h,name:data.n,pid:data.f,latlon:currlat}};
                                KMap.openInfoWindow(new MPoint(currlat), _iwOpts);
                            } catch(e) {
//                            	_showBaseMsg("加载数据失败！");
                            }
                        }
                        ,error : function() {
//                            _showBaseMsg("加载数据失败！");
                        }
                        ,dataType:"json"
                    });
					
				}
			}
	});
	maplet.addLayer(_this._rainDropsLayer);
};


KLocalsearch.prototype._jsopGasolineInfo= function(uid){
	var url = [ "./proxy.jsp?key=79517c0a3337da945bda7fadccb35098" ];
	url.push("uid="+uid);
	url.push("youlp=1");
	var _this=this;
	$.ajax( {
		url : url.join("&"),
		type : "GET",
		dataType : "json",
		success : function(data) {
			if(data&&data.code){
				var priceHtml =['<ul class = "mwpg_poiw_ylp_data_ul">'];
				if(data['90']){
					priceHtml.push('<li class="">'+data['90']+'<span>(90#)</span></li>');
				}
				if(data['93']){
					priceHtml.push('<li class="">'+data['93']+'<span>(93#)</span></li>');
				}
				if(data['97']){
					priceHtml.push('<li class="">'+data['97']+'<span>(97#)</span></li>');
				}
				if(data['92']){
					priceHtml.push('<li class="">'+data['92']+'<span>(92#)</span></li>');
				}
				if(data['95']){
					priceHtml.push('<li class="">'+data['95']+'<span>(95#)</span></li>');
				}
				if(data['98']){
					priceHtml.push('<li class="">'+data['98']+'<span>(98#)</span></li>');
				}
				if(data['10000']){
					priceHtml.push('<li class="">'+data['10000']+'<span>(0#柴油)</span></li>');
				}
				if(data['10010']){
					priceHtml.push('<li class="">'+data['10010']+'<span>(-10#柴油)</span></li>');
				}
				priceHtml.push('</ul>')
				$("#price").html(priceHtml.join(""))
			}else{
				$("#price").html("该地区暂无实时数据")
			}
		}
	});
};
/**
*本地搜增加google广告，--add by ligj@mapbar.com
*/
KLocalsearch.prototype._addGooleAdSense = function(query,container,callback){
	var _this = this;
	var options = {
		'pubId' : 'googlepsotest-afs-china',
		'hl' : 'zh_CN',
		'query' : query,
		'linkTarget' : '_blank',
		'hl' : 'zh_CN'
	};
	var lockOpt = { 
		'container' : container,
		'number' : '1',
		'colorBackground' : '#fcfcfe',
		'colorTitleLink' : '#01479d',
		'colorDomainLink' : '#01479d'
	};
	
	if($("#"+lockOpt.container).length == 0){
		$("body").append("<div id='"+lockOpt.container+"'></div>");
	}
	var _googleAdDom = $("#"+lockOpt.container);
	try{
		if(typeof(eval(google.ads.search.Ads)) == "function"){
			_this._enableGoogleAd = false;
			new google.ads.search.Ads(options, lockOpt);
			var j = 0;
			var i = setInterval(function(){
				if($("#"+lockOpt.container).height() > 50){
					$("#"+lockOpt.container).prepend('<div style="width:30px;position: absolute;right: 15px;color:#c4c4c4;">广告</div>');
					clearInterval(i);
					setTimeout(function(){
						_this._enableGoogleAd = true;
						callback(true);
					},0);
				}else if(j == 4){
					clearInterval(i);
					_this._enableGoogleAd = true;
					callback(false);
					_googleAdDom.remove();
				}
				j++;
			},200);
		}
	}catch(e){
		_this._enableGoogleAd = false;
	}
};
/**
*气泡中google广告，--add by ligj@mapbar.com
*/
KLocalsearch.prototype._addGooleAdForPoint = function(query,container,adDom,marker){
	var _this = this;
	if(marker._KLocalsearch_show_googlead == undefined){
    	_this._addGooleAdSense(query,container,function(flag){
    		if(flag){
    			marker._KLocalsearch_show_googlead = true;
    			if($("#"+container).length > 0 && $("#"+container).height() > 50){
    				setTimeout(function(){
    					adDom.empty().height(95).append($("#"+container));
    					KMap.openInfoWindow(marker);
    				},50);
    			}else{
        			marker._KLocalsearch_show_googlead = false;
        		}
    			
    		}else{
    			marker._KLocalsearch_show_googlead = false;
    		}
    	});
    	
	}else if($.browser.msie && $.browser.version < 9.0 && marker._KLocalsearch_show_googlead == true ){//针对ie9以下浏览器
		$("#"+container).appendTo(adDom.empty());
    }
};



/**
*
* @param item
*            {KTabItem}
* @return
*/
KLocalsearch.prototype._busLineOrStationHandler = function(reData,type){
	
   var _this = this;
   var urlHead = "http://bus.mapbar.com/" + reData.pc +"/poi/";
   if(type == "busline"){
	   var lineOpts = KConfig.get("ln_lo_bsl");
//	   lineOpts.group = _this.flag()+"_line";
	   lineOpts.group = "bs"+"_line";
	   var line = KLine.fromEncoded(reData.p, reData.l, lineOpts);
	   if (line) {
	       KMap.addLine(line);
	   }
//     var $headLinks = _this._tipDom.find("li>a");
//	   var $headLinks = _this._tipDom.find("a");
	   var $headLinks = $(">div", _this._resultDom).find("a");
	   $(">div", _this._resultDom).mouseover(function(event){
	       event.preventDefault();
	       $(">div", _this._resultDom).addClass("mwp_ls_bs_online");
	       if($('#olResult>li').hasClass('mwp_ls_rls')){
	    	   $('#olResult>li').removeClass("mwp_ls_rls");
	       }
	   }).mouseout(function(event){
		   event.preventDefault();
		   $(">div", _this._resultDom).removeClass("mwp_ls_bs_online");
	   });
	   $(">div", _this._resultDom).eq(0).click(function(){
		   KMap.closeInfoWindow();
		   KMap.setCenter(reData.m.a,parseInt(reData.m.b));
	   });
	   $(">div", _this._resultDom).find("div").eq(0).addClass("mwp_ls_bs_linediv1");
	   $(">div", _this._resultDom).find("div").eq(1).addClass("mwp_ls_bs_linediv2");
	   $headLinks.click(function(event){
	       event.preventDefault();
		   var value = $(this).html();
		   if(value.indexOf("更多") > -1 || value.indexOf("查看途径") > -1){
			   value = _this._queryopts.ls.name;
		   }
		   var opts = KTools.copyOptions({}, KQueryOptions);
		   opts.type = KQueryType.busline;
		   opts.busline = KTools.copyOptions({}, KPOInfo);
		   opts.busline.name = value;
		   if (_this._opts.searchbox)
		   {
		      _this._opts.searchbox.query(opts, false);
		   }
	   });
	   for(var i = 0 ;i<reData.s.length; i++){
		   var marker =  _this._createMarkerForBusLine(reData.s[i], i, reData.s.length, urlHead, "b");
		   KMap.addMarker(marker);
	   }
   }else if(type == "station"){
	   var markerOpts = KConfig.get("mk_mo_lss", {
           n: name,
           t: ""
       });
	   markerOpts.hoverLabel = false;
//       markerOpts.group = _this.flag() + "_line";
	   markerOpts.group = "bs" + "_line";
	   
       markerOpts.infowin = KConfig.get("iw_iwo_st", {
           h: urlHead + reData.a,
           cd: "none",
           fs: "none",
           nb: "none"
       });
       markerOpts.infowin.title = reData.n;
       markerOpts.icon.img = '<div class="bus_marker_sn_r" id="lstMarker"><span></span></div>';
       var stationMarker = new KMarker(reData.p, markerOpts);
       KMap.addMarker(stationMarker);
       $("#lstMarker").mouseover(function(event){
	       event.preventDefault();
	       $("#lstMarker").addClass("bus_marker_sn_or");;
	   }).mouseout(function(event){
		   event.preventDefault();
		   $("#lstMarker").removeClass("bus_marker_sn_or");;
	   });
//     KEvent.bind(stationMarker, "mouseover",stMarkerClass);
//     stationMarker.setOptions({icon:{snapIcon:KConfig.get("mk_s_sns",{h:"a",a:_this._selectMarker._num})}});
//     stationMarker.setIconClass("bus_marker_sn_or");  //设置站点marker样式
       var $stationHeadLinks = $(">div", _this._resultDom).find("a");
       $(">div", _this._resultDom).mouseover(function(event){
	       event.preventDefault();
	       $(">div", _this._resultDom).addClass("mwp_ls_bs_onstaion");
	       if($('#olResult>li').hasClass('mwp_ls_rls')){
	    	   $('#olResult>li').removeClass("mwp_ls_rls");
	       }
	       $("#lstMarker").addClass("bus_marker_sn_or");;
	   }).mouseout(function(event){
		   event.preventDefault();
		   $(">div", _this._resultDom).removeClass("mwp_ls_bs_onstaion");
		   $("#lstMarker").removeClass("bus_marker_sn_or");;
	   });
       $(">div", _this._resultDom).find("div").eq(0).addClass("mwp_ls_bs_stationdiv1");
	   $(">div", _this._resultDom).find("div").eq(1).addClass("mwp_ls_bs_stationdiv2");
	   $stationHeadLinks.click(function(event){
	       event.preventDefault();
		   var value = $(this).html();
		   if(value.indexOf("更多") > -1 || value.indexOf("查看途径") > -1){
			   value = _this._queryopts.ls.name;
		   }
		   var opts = KTools.copyOptions({}, KQueryOptions);
		   opts.type = KQueryType.bustation;
		   opts.bustation = KTools.copyOptions({}, KPOInfo);
		   opts.bustation.name = value;
		   if (_this._opts.searchbox)
		   {
		      _this._opts.searchbox.query(opts, false);
		   }
	   });
   }
   
};
/**
 * 创建沿路站点 add by zhangwq
 * */
KLocalsearch.prototype._createMarkerForBusLine = function(data, index, length, urlHead, stationType){
    var _this = this;
    var markerOpts;
    var isSoe = (index == 0 || index == length - 1);
    var name = data.a;
    name = $.trim(name.replace(/(\d+.)/i, ""));
    if (isSoe) {
        markerOpts = KConfig.get("mk_mo_sdt", {
            n: name,
            t: index == 0 ? "s" : "e"
        });
        markerOpts.hoverLabel = false;
//        markerOpts.group = _this.flag() + "_line_s";
        markerOpts.group = "bs" + "_line_s";
    } else {
        markerOpts = KConfig.get("mk_mo_s", {
            n: name,
            t: stationType
        });
        markerOpts.hoverLabel = true;
        //markerOpts.group = _this.flag() + "_line";
        markerOpts.group = "bs" + "_line";
    }
    // h:查看途经公交点链接的目标地址, 见途径点打开的infoWindow中的“查看途径的公交车"链接
    markerOpts.infowin = KConfig.get("iw_iwo_st", {
        h: urlHead + data.n,
        cd: "none",
        fs: "none",
        nb: "none"
    });
    markerOpts.infowin.title = name;
    return (new KMarker(data.b, markerOpts));
};


/**
 * 清除所有的叠加物 add by zhangwq
 * @param type {String} “trans”, "busline","bustation", "all"
 * @return
 */
KLocalsearch.prototype._clearAllOverlay = function(type){
//    var flag = this.flag();
	var flag = "bs";
    var types = {
        trans: "_search_s,_search_l,_search_l_w,_search_s_all,_hoverlines",
        busline: "_line,_line_s,_line_e",
        bustation: "_station1,_station2"
    };
    types.all = types.trans + "," + types.busline + "," + types.bustation;
    var groups = (types[type || "all"] || types.all).split(",");
    $.each(groups, function(index, value){
        KMap.clear(flag + value);
    });
};

/**
 * 主搜索城市跳转 add by zhangwq 以改为qas跳转，此方法不在使用
 * @param {String} “trans”, "busline","bustation", "all"
 * @return
 */
KLocalsearch.prototype._cityRedirectCheck = function(){
    //判断输入是否为汉字
	var _this = this ;
	var ct = _this._queryopts.center;
	var kvalue = _this._queryopts.ls.name;
	var kcity = _this._queryopts.ls.city;
    var charString = /^[\u4E00-\u9FA5\uF900-\uFA2D]*$/ ;
	if(charString.test(_this._queryopts.ls.name) && _this._queryopts.ls.name.length > 1 && !(ct && (ct.name || ct.latlon)) && !(kvalue === kcity || kvalue+"市" === kcity) ){
        var sughash = new KUrlHash();
        var sugUrl = _this._opts.url;
        sughash.setKey("t","cs");
        sughash.setKey("a",8);
        sughash.setKey("s","json");
        sughash.setKey("k", _this._queryopts.ls.name);
        if (sugUrl.indexOf("?") != -1) {
            var num = sugUrl.indexOf("?");
            sugUrl = sugUrl.substring(0, num);
        }
        $.ajax({
            type: "GET",
            url: sugUrl,
            cache: false,
            data: (sughash.toString()),
            error: function(XMLHttpRequest, textStatus, errorThrown){
                if (!KMap.isInitialized(_this._opts.mapcontainer)) {
                    KEvent.trigger(_this, "mapready", _this, undefined, undefined);
                }
            },
            success: function(data){
            	if(data.a && data.a.length ==1 && (kvalue == data.a[0].c.split("<span>")[0] || kvalue+"市" == data.a[0].c.split("<span>")[0] ) && kvalue !="北海"&&kvalue !=="朝阳" ){
            		KMap.setCenter(data.a[0].b.a,parseInt(data.a[0].b.b));
            		$("#resultCount").hide();
            		$("#losResult").hide();
            		$("#bkbtn").hide();
            		$("#pnBar").hide();
            		$("#navTopBts").hide();
            		$("#busNavLink").hide();
            		$("#bssButton").hide();
            		if($("#feedback").is(":visible")){
            			$("#feedback").hide();
            		}
            		if($("#bussResult").is(":visible")){
            			$("#bussResult").hide();
            			KMap.clearLine("bs_search_l");
            			KMap.clearMarker("bs_search_s")
            		}
            		if($("#navResult").is(":visible")){
            			$("#navResult").hide();
            			KMap.clearLine("navs");
            			KMap.clearMarker("navs");
            		}
            		if(!$("#mapmarker").is(":visible")){
            			$("#defaultDiv").show();
            		}
            	}else{
            		$("#bkbtn").show();
            		_this._ajaxPostRequest();
            	}
            },
            dataType: "json"
        });
    }else{
    	$("#bkbtn").show();
    	_this._ajaxPostRequest();
    }
};

KLocalsearch.prototype.menuNbQuery = function(mpoint,menuCity){
	KMap.clearMarker(KWidgetFlag.localsearch + "_center");
	var menuMarkerOpts = KConfig.get("mk_mo_mnct");
	menuMarkerOpts.group = KWidgetFlag.localsearch + "_center";
	menuMarkerOpts.infowin = KConfig.get("iw_iwo_poi", {
		"djp" : "none",
		"djd" : "none",
		"58z" : "none",
		"58e" : "none",
        "fjjd": "none"
	});
	// 如果后台没有返回中心点的标题，标题默认是“自定义中心点”
	menuMarkerOpts.infowin.title = "自定义中心点";
	menuMarkerOpts.infowin.content = "<div class='mwpg_poiw_caW'></div>";
	menuMarkerOpts.infowin.cmdata = {poi:{city:menuCity,name:'自定义中心点',latlon:mpoint.getPid()}};
	this._rightKeyLatlon = mpoint.getPid();
	var menuNb = new KMarker(mpoint,menuMarkerOpts);
	menuNb.menunb = "nbquery";
	KMap.addMarker(menuNb);
	KMap.openInfoWindow(menuNb, menuMarkerOpts.infowin);
};
/*
    消息框组件，支持富文本消息内容。关键功能点如下：
    * 可在浏览器中心位置，或针对某一元素进行说明。
    * 可根据提示内容自适应大小。
    * 针对某一元素时，可自动选择合适方位显示。
    * 作者：wangzheng
    * 版本：1.0
    * 创建时间：2010-05-13
    * 最后修改时间：2010-05-15 23:07
 */
var KMsgBox = KClass.create("KMsgBox", KWidget);

KMsgBox.initialize = function(container, opts)
{
    if(KTools._isElement(container))
    {
        this._buttons = {};
        this._dom = container;
        this._opts = KTools.copyOptions(opts, KMsgBoxOptions);
        this._theme = this._opts.theme;
        this._bubbleJDom = $(">div:eq(0)", this._dom);
        this._titleJDom = $(">div:eq(0) >h3:eq(0)", this._bubbleJDom);
        this._cursorJDom = $(">span:eq(0)", this._bubbleJDom);
        this._closeJDom = $(">span:eq(1)", this._bubbleJDom);
        var _bubbleDiv0JDom = $(">div:eq(0)", this._bubbleJDom);
        this._msgJDom = $(">div:eq(0)", _bubbleDiv0JDom);
        this._btJDom = $(">div:eq(1)", _bubbleDiv0JDom);
        this._bubbleShadowJDom = $(">div:eq(1)", this._dom);
        this._bubble = new KBubble(this._bubbleJDom[0], {theme:this._theme, userstyle: this._opts.userstyle});
        this._updateThemeClass(this._opts.userstyle);
        KEvent.bind(this._bubble, "beforehide", function(evt, obj, action) {
            this._bubbleShadowJDom.hide();
        }, {}, this);
        KEvent.bind(this._bubble, "afterhide", function(evt, obj, action) {
            this._bubbleShadowJDom.hide();
            switch(action)
            {
                case "method":
                        action = this._closeAction;
                    break;
                case "document":
                        action = "outside";
                    break;
            }
            KEvent.trigger(this, "closed", this, action, this._closeButton);
            if(this._openOpts && this._openOpts.lightbox) KTools.lightbox({element:this._dom,visible:false});
        }, {}, this);
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KMsgBox.prototype.cnname = function()
{
    return "消息框组件";
};

/**
 * @overwrite
 * @uncrunch
 */
KMsgBox.prototype.version = function()
{
    return "1.0.0";
};

/**
 * @overwrite
 * @uncrunch
 */
KMsgBox.prototype.layout = function()
{
    if(this._bubbleJDom.is(":visible") && this._bubble)
    {
        if(this._elementJDom && this._openOpts.node === this._elementJDom[0]) this._updateElementJDom();
        this._bubble.layout();
        this._updateShadowJDom();
    }
};

/**
 * @overwrite
 * @uncrunch
 */
KMsgBox.prototype.setOptions = function(opts)
{
    if(!this._dom) return;
    this._opts = KTools.copyOptions(opts, this._opts);
    this.setTheme(this._opts.theme);
};

/**
 * @overwrite
 * @uncrunch
 */
KMsgBox.prototype.setTheme = function(theme)
{
    if(!this._dom) return;
    this._theme = theme;
    this._updateThemeClass(this._opts.userstyle);
};

/**
 * 打开提示框
 * @param msg
 * @param opts
 */
KMsgBox.prototype.open = function(msg, opts)
{
    var _this = this;
    if(!msg || !this._dom)return;
    this._msgJDom.empty();
    if(KTools._isElement(msg))
    {
        this._msgJDom.append(msg);
        $(msg).show();
    } else this._msgJDom.html(msg);
    this._openOpts = KTools.copyOptions(opts, KMsgBoxOpenOptions);
    
    var bubbleOpenOpts = this._openOpts.buboptions;
    if(!bubbleOpenOpts) bubbleOpenOpts = {};
//    bubbleOpenOpts.offsetx = 136;
    if(typeof bubbleOpenOpts.closebtn === "undefined") bubbleOpenOpts.closebtn = KBubbleShowOptions.closebtn;
    if(typeof this._openOpts.title == 'string' && this._openOpts.title.length > 0)
    {
        this._titleJDom.show();
        $(this._dom).removeClass(this._theme+"_mbx_b");
        this._titleJDom.html(this._openOpts.title);
    } else {
        this._titleJDom.hide();
        $(this._dom).addClass(this._theme+"_mbx_b");
        if(bubbleOpenOpts.closebtn === true) this._msgJDom.css("padding-right", this._openOpts.cbmargin + "px");
    }

    if(bubbleOpenOpts.closebtn === false) $(this._dom).removeClass(this._theme+"_mbx_b");
    this._finalizeButtons();
    this._buttons = [];
    this._btJDom.hide();

    var _focusDom = null;
    if(this._openOpts.buttons instanceof Array && this._openOpts.buttons.length > 0)
    {
        this._btJDom.show();
        for(var i = 0; i < this._openOpts.buttons.length; i++)
        {
            var btI = this._openOpts.buttons[i];
            if(!btI.name || !btI.kvalue) continue;
            this._buttons[btI.name] = $('<input class="mwp_mbx_"'+btI.name+' kname="'+btI.name+'" type="button" value="'+btI.kvalue+'" />');
            KEvent.bind(this._buttons[btI.name], "click", this._closeButtonFun, {_this:this});
            this._btJDom.append(this._buttons[btI.name]);
            if(i != this._openOpts.buttons.length - 1) this._btJDom.append("&nbsp;");
            if(!_focusDom) _focusDom = this._buttons[btI.name][0];
        }
    } else {
        if(bubbleOpenOpts.closebtn) _focusDom = $(">span:eq(1) >a", this._bubbleJDom).get(0);
    }
    if(this._openOpts.autoclose > 0)
    {
        this._autoTimeout = setTimeout(function() {
            _this.close("auto");
        }, parseInt(this._openOpts.autoclose)*1000);
    }
    this._bubbleJDom.css({width:"",height:""});

    if(!KTools._isElement(this._openOpts.node))
    {
        this._cursorJDom.hide();
        bubbleOpenOpts.pos = KPosition.BOTTOM;
        if(!this._elementJDom) this._elementJDom = $('<div style="position:absolute;height:0px;width:0px;"></div>').appendTo(document.body);
        this._updateElementJDom();
        this._openOpts.node = this._elementJDom[0];
    }
    this._bubble.show(this._openOpts.node, bubbleOpenOpts);
    this._updateShadowJDom();
    if(this._openOpts.lightbox)
    {
        KTools.lightbox({element:this._dom,visible:true});
    }
    if(_focusDom) _focusDom.focus();
};

/**
 * 关闭提示框
 * @uncrunch
 */
KMsgBox.prototype.close = function()
{
    if(!this._dom) return;
    this._closeAction = arguments[0];
    this._closeButton = arguments[1];
    this._bubble.hide();
};

/**
 * @overwrite
 * @uncrunch
 */
KMsgBox.prototype.finalize = function()
{
    if(!this._dom) return;
    clearTimeout(this._autoTimeout);
    this._finalizeButtons();
    KTools.lightbox({element:this._dom,visible:false});
    this._bubble.finalize();

    if(this._elementJDom) KTools.removeNode(this._elementJDom[0]);

    KTools.removeNode(this._dom);
    KWidget.prototype.finalize.apply(this);
    
};

/**
 * @overwrite
 * @uncrunch
 */
KMsgBox.prototype.dependent = function()
{
    return [KWidget,KTools,KMsgBoxOptions,KBubble,KBubbleShowOptions,KEvent,KPosition,KSize,KMsgBoxOpenOptions];
};

KMsgBox.prototype._finalizeButtons = function()
{
    if(this._buttons)
    {
        for(var i in this._buttons)
        {
            KEvent.unbind(this._buttons[i], "click", this._closeButtonFun);
            KTools.removeNode(this._buttons[i][0]);
        }
        this._buttons = null;
    }
};

KMsgBox.prototype._closeButtonFun = function(event)
{
    var _this = event.data._this;
    _this.close("button", {name:$(this).attr("kname"), kvalue:$(this).attr("value")});
};

KMsgBox.prototype._updateElementJDom = function()
{
    var _viewBounds;
    if(this._openOpts.range instanceof KBounds)
    {
        _viewBounds = this._openOpts.range;
    } else {
        _viewBounds = KTools.getBounds(window)
    }
    var _viewSize = _viewBounds.size();
    var bubbleSize = new KSize(this._bubbleJDom.width(), this._bubbleJDom.height());
    this._elementJDom.css({top:(_viewBounds.min.y + _viewSize.height/2-bubbleSize.height/2)+"px", left:(_viewBounds.min.x + _viewSize.width/2)+"px"});
};

KMsgBox.prototype._updateShadowJDom = function()
{
    if(this._dom)
    {
        this._bubbleShadowJDom.offset(this._bubbleJDom.offset());
        this._bubbleShadowJDom.css({height:this._bubbleJDom.outerHeight(true)+1,width:this._bubbleJDom.outerWidth(true)+1});
    }
};

KMsgBox.prototype._setClass = function(dom, className)
{
    if (dom) dom.className = className;
};

KMsgBox.prototype._updateThemeClass = function(useDefault)
{
    if (this._dom)
    {
        if (useDefault == false)
        {
            this._setClass(this._dom, this._theme + "_mbx");
            this._setClass(this._bubbleShadowJDom.get(0), this._theme + "_mbx_s");
            this._setClass(this._titleJDom.get(0), this._theme + "_mbx_t");
            this._setClass(this._msgJDom.get(0), this._theme + "_mbx_c");
            this._setClass(this._btJDom.get(0), this._theme + "_mbx_ba");
        }
    }
};
/*
 驾车导航组件
 作者：zhangsq
 版本：1.2.3
 创建时间：2010-11-24
 最后修改时间：2011-3-31 16:14
 ======================================================
 『修改历史』
 opt# 201103151005
 将stationlist的simplenoresult选项放开给组件外部设置
 opt# 201103151448
 增加sl_resultshow的参数
 opt# 200103151801
 增加途经点数量限制
 opt# 201103151953
 触发cancelappend事件
 bug# 201103231628
 修正重新查询结果时不能将结果切换到简要模式
 opt# 201103301648
 组件UI重绘时隐藏打车费用气泡和碳足迹气泡
 err# 201103311612
 解决非驾车查询时也会执行相关方法的问题
*/

var KNavsearch = KClass.create('KNavsearch', KQuery);
KNavsearch.conf =
{
    CLASSNAME :
    {
        // 顶级容器（div）样式。
        NS :''
        //起终点区域容器（div）样式。
        ,SP :'_sp'
        //查询结果区域（div）样式。
        ,SR : '_sr'
        //查询结果区域->标题区（div）样式。
        ,SRT : '_srt'
        //查询结果区域->列表容器（div），显示简单信息时使用此样式。
        ,SRCS : '_srcs'
        //查询结果区域->列表容器（div），显示详细信息时使用此样式。
        ,SRCD : '_srcd'
        //查询结果区域->列表区->选项卡图标区域->起点样式。
        ,SSP : '_ssp'
        // 	查询结果区域->列表区->选项卡图标区域->途经点样式。
        ,STP : '_stp'
        // 	查询结果区域->列表区->选项卡图标区域->终点样式。
        ,SEP : '_sep'
        //查询结果区域->操作区（div）样式。
        ,OPC : '_opc'
        //查询结果区域->追加目的地区域（div）样式。
        ,AC : '_ac'
        //查询结果区域->追加目的地区域->目的地操作容器（div）未展开时样式。
        ,ACUS : '_acus'
        //查询结果区域->追加目的地区域->目的地操作容器（div）展开后样式。
        ,ACS : '_acs'
        //查询结果区域->追加目的地区域->目的地操作容器->图标提示（span）样式。
        ,SAT : '_sat'
        //查询结果区域->追加目的地区域->目的地操作容器->展开按钮（a）样式。
        ,SAB : '_sab'
        //查询结果区域->追加目的地区域->目的地操作容器->输入区容器（div）样式。
        ,ATB : '_atb'
        //查询结果区域->追加目的地区域->目的地操作容器->途经点输入框（input）样式。
        ,ATTB : '_attb'
        //查询结果区域->追加目的地区域->目的地操作容器->目的地确认列表容器（div）样式
        ,ACD : '_acd'
        // 路段描述二态样式
        ,SRH : '_srh'
        //无结果区域样式。
        ,EPT :'_ept'
        //碳足迹按钮
        ,OCO2 : '_opc_co2'
        //碳足迹容器样式.
        ,CO2 :'_g_co2'
        //查询结果区域->列表区->展开详情按钮展开前样式。
        ,SDO : '_sdo'
        //查询结果区域->列表区->展开详情按钮展开后样式。
        ,SDC :'_sdc'
    }
};

/**
 * 构造方法
 * @param container Node 组件容器
 * @param opts KNavsearchOptions
 */
KNavsearch.initialize = function(container, opts)
{
    //初始化变量
    this._initVariable();
    //更新组件设置
    this.setOptions(opts);
    //取得组件DOM
    this._getDom(container);
    //应用样式
    this._applyTheme();
    //初始化组件事件
    this._initEvent();
};

/*==================== 实现KObject接口 ====================*/
/**
 * 释放内存的方法。
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.finalize = function()
{
    this.clearResult();
};

/*===================== 实现KWidget接口 =====================*/
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KNavsearch.prototype.version = function()
{
    return "1.2.3";
};
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KNavsearch.prototype.cnname = function()
{
    return "驾车导航组件";
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KNavsearch.prototype.dependent = function()
{
    return [ KNamedValue, KQuery, KQueryType, KEvent, jQuery, KUrlHash, KWidgetFlag, KTools, KPOInfo,
			KNavsearchOptions, KQueryOptions, KConfig, KMap, KMarker, KLine, KStdSuggest, KAccordion, KStationList,
			KCityList, KPOIType, KSize, KListener, KCityInfo, KPrintOptions, KStdPrinter, KSendOptions, KStdSender,
			KNamedValue ];
};
/**
 * 设置组件配置选项
 * @param opts KNavsearchOptions
 */
KNavsearch.prototype.setOptions = function(opts)
{
    var _this = this;
    this.options() && (this._oldOpts = this.options().theme);
    var diffOpts = KTools.compareOptions(this._opts, opts);
    this._setOption(KTools.copyOptions(diffOpts, KNavsearchOptions));
    $.each(diffOpts, function(name, value) {
        if(name == 'theme') _this._applyTheme();
    });
};
/**
 * 设置驾车组件的样式方案。
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.setTheme = function(scheme)
{
    this.setOptions({'theme' : scheme});
};
/**
 *  返回组件特征字符串
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.flag = function()
{
    return KWidgetFlag.navsearch;
};
/**
 * 清除接口在页面的渲染内存问题。
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.clearResult = function()
{
    //如果地图初始化了就清除所有当前组件的标注
    if(KMap.isInitialized(this._opts.mapcontainer))
    {
        KMap.clear(KWidgetFlag.navsearch);
    }
    //清空标注数组
    for(var m in this._markerArray)
    {
        this._markerArray[m] = null;
    }
    this._markerArray.length = 0;
    //清空线段数组
    for(var l in this._lineArray)
    {
        this._lineArray[l] = null;
    }
    this._lineArray.length = 0;
    //如果添加终点列表有内容则清除结果
    if (this._navExtendSearchAddList)
    {
        this._navExtendSearchAddList.clearResult();
    }
    //如果起终点列表有内容则清除结果
    if (this._navStationList)
    {
        this._navStationList.clearResult();
    }
    this.menuSmarker = null;
    this.menuEmarker = null;
};

/*======================== 实现KQuery接口 =======================*/
/**
 * 根据指定选项进行查询
 * @param queryOpt KQueryOptions
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.query = function(queryOpt)
{
	/*#opts fix start 
	 * added by zwq 解决重新选择起终点后，radio默认状态不重置的问题*/
	 /*change by liufang start 20131128
		当查询参数来自url时，应自动选中相应的radio
	*/
    if(this._navTypeCheck == undefined)	{	
		this._navTypeCheck = 0;
		this._navTypeByEMail = 0;
		this._navPrintByType = 0;
	}

	$(">input", this._navTypeDom).eq(this._navTypeCheck).attr("checked", true);
	/*#change by liufang end 20131128*/
    /*# fix end*/
    if(!this._innerQuery)
    {
        this._stationListQueryOpts = undefined;
    }
    this._innerQuery = false;
    this.clearResult();
    KQuery.prototype.query.call(this, queryOpt);    //更新组件的_queryOpts
    this._startQuery(); //启动查询
};
/**
 * 根据指定的Hash值进行查询
 * @param hash KUrlHash
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.queryByHash = function (hash)
{
    var opts = KTools.copyOptions({
        type : KQueryType.navsearch
        ,navorig : KTools.copyOptions({name : hash.value("on") ? hash.value("on") : "", city : hash.value("oc") ? hash.value("oc") : "", latlon : hash.value("ol") ? hash.value("ol") : "", pid : hash.value("oid") ? hash.value("oid") : ""}, KPOInfo)
        ,navdest : KTools.copyOptions({name : hash.value("dn") ? hash.value("dn") : "", city : hash.value("dc") ? hash.value("dc") : "", latlon : hash.value("dl") ? hash.value("dl") : "", pid : hash.value("did") ? hash.value("did") : ""}, KPOInfo)
        }, KQueryOptions);
    if(hash.value("os")){
        //opts.navorig.latlon = '_' + opts.navorig.name;  //标识使用了辅助名称
    	opts.navorig.latlon = opts.navorig.name;  //标识使用了辅助名称
        opts.navorig.name = hash.value("os");
    }
    if(hash.value("ds")){
        //opts.navdest.latlon = '_' + opts.navdest.name;  //标识使用了辅助名称
    	opts.navdest.latlon = opts.navdest.name;  //标识使用了辅助名称
        opts.navdest.name = hash.value("ds");
    }
	if (hash.value("mc")) {
		opts.mapcity = KTools.copyOptions( {}, KCityInfo);
		opts.mapcity.name = hash.value("mc");
	}
	if (hash.value("nh")) {
		opts = this._setQueryOptions(hash.value("nh"));
	}
	/*add by liufang 20131128 start
		从链接取值查询模式值，bw
	*/
	if (!isNaN(hash.value('bw'))) {
		this._navTypeCheck = hash.value('bw'); //驾车模式标识
		this._navTypeByEMail = hash.value('bw');//根据当前驾车模式发送邮件
		this._navPrintByType = hash.value('bw');//根据当前模式打印
	}
	/*add by liufang 20131128 end*/
	
	/* delete by liufang 20131128 start*/
	/*
	if (hash.value("bw") && hash.value("bw") == 2) {
		this._noHightwayCheck = true;
	} else {
		this._noHightwayCheck = false;
	}
	this._noHightwayClick = false;
	*/
	/* delete by liufang 20131128 end*/
	
    this._innerQuery = true;
	this.query(opts);
};
/**
 * 打印方法。
 * @uncrunch
 */
KNavsearch.prototype.print = function()
{
    if(this.options().printer)
    {
        var printopts = KTools.copyOptions({queryopts : this._queryopts, markers : [], lines : []}, KPrintOptions);
        for(var i = 0; i < this._markerArray.length; i++)
        {
            printopts.markers.push(this._markerArray[i].toString());
        }
        for(var j = 0; j < this._lineArray.length; j++)
        {
            printopts.lines.push(this._lineArray[j].toString());
        }
        this.options().printer.print(printopts);
    }
};
/**
 * 发送方法。
 * @param sendtype KSendType
 * @param selected KSendType 默认选中的发送功能
 * @uncrunch
 */
KNavsearch.prototype.send = function(sendtype, selected)
{
    if(this.options().sender)
    {
    	/*设置默认邮件发送标识  start  added by zwq*/
    	if(this._navTypeByEMail == undefined){
    		this._navTypeByEMail = 0;
    	}
        var sendopts = KTools.copyOptions({querytype : KQueryType.navsearch, sendtype : sendtype ? sendtype : KSendType.email, selected : selected ? selected : KSendType.email, email : []}, KSendOptions);
        sendopts.email.push(KTools.copyOptions({name : 'param', kvalue : this._buildHash({t : 'nsm', nh : this._gethash(this._queryopts), di : '0',nt : this._navTypeByEMail}).toString()}, KNamedValue));
        /* end*/
        this.options().sender.send(sendopts);
    }
};

/*========================= 组件方法 ==========================*/
/**
 * 显示详细信息视图。
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.detail = function()
{
    this._displayPattern('detail');
};
/**
 * 显示简单信息视图。
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.summary = function()
{
    this._displayPattern('summary');
};
/**
 * 显示当前导航结果的返程线路。
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.reverse = function()
{
    var backopt = KTools.copyOptions({navdest : this._queryopts.navorig, navorig : this._queryopts.navdest, mid : []}, KQueryOptions);
    backopt.mid = this._queryopts.mid.concat().reverse();
    this.query(backopt);
};
/**
 * 将地图缩放到合适级别显示整条线路
 * @overwrite
 * @uncrunch
 */
KNavsearch.prototype.showall = function()
{
    KMap.fitzoom();
};
/**
 * 是否支持以公交方式出行。
 * @return Boolean
 * @uncrunch
 */
KNavsearch.prototype.supportbus = function()
{
    return this._chkSupport('b');
};
/**
 * 是否存在打车信息
 * @return Boolean
 * @uncrunch
 */
KNavsearch.prototype.supportTaxi = function()
{
    return this._result && this._result.taxi && this._result.taxi != '';
};
/**
 * 是否支持特价机票，支持则返回机票页面 url ，否则返回空字符串。
 * @return String
 * @uncrunch
 */
KNavsearch.prototype.airticket = function()
{
    return this._chkSupport('a') ? 'http://jipiao.mapbar.com' : '';
};
/**
 * 根据当前的查询条件重新显示起终点列表
 * @uncrunch
 */
KNavsearch.prototype.reListStations = function()
{
    if(!this._stationListQueryOpts) //如果未设置查询设置则根据现在设置重新组织
    {
        this._stationListQueryOpts = KTools.copyOptions({type : KQueryType.navsearch, highway : this._queryopts.highway, navorig : KTools.copyOptions({name : this._queryopts.navorig.name, city : this._queryopts.navorig.city}, KPOInfo), navdest : KTools.copyOptions({name : this._queryopts.navdest.name, city : this._queryopts.navdest.city}, KPOInfo)}, KQueryOptions);
    }
    this._stationListAutoSelect = false;
    this.query($.extend(true, {}, this._stationListQueryOpts));
};
/**
 * 是否允许重新选择起/终点
 * @return Boolean
 * @uncrunch
 */
KNavsearch.prototype.allowReList = function()
{
    return this._navResultDom.is(':visible');
};
/**
 * 通知驾车导航组件重新布局
 * @uncrunch
 */
KNavsearch.prototype.layout = function()
{
    if (!this._domAll.is(":visible")) return;
    //opt# 201103301648 fix begin
    //add by zhangsq
    this._fareId && KTools.hideMsg(this._fareId);
    this._msgId && KTools.hideMsg(this._msgId);
    //opt# 201103301648 fix end
    var aheight = parseInt(this._domAll.css("height"));
    if (this._navSearchDom.is(":visible"))
    {
        this._navSearchDom.css({height:(aheight)});
        $(">div", this._navSearchDom).css({height:(aheight)});
        if (this._navStationList)
        {
            this._navStationList.layout();
        }
    }
    else
    {
    	aheight = aheight - 57;//添加网易车险广告后，结果集dom高度对应 -57
        this._navResultDom.css({"overflow-y":"scroll",height:aheight});
    }
    if(this._opts.sender)
    {
        this._opts.sender.layout();
    }
};
/**
 * 显示打车费用
 * @param opts KMsgBoxOpenOptions 类型
 * @uncrunch
 */
KNavsearch.prototype.showTaxiFare = function(opts){
    var _this = this;
    var _opts = $.extend(true, {}, opts);
    _opts['closedcbk'] = function(){_this._navTaxiFareDom.hide();};
    if(this._chkSupport('b') && !this._navTaxiFareDom.is(':visible'))
    {
        this._fareId = KTools.showMsg(this._navTaxiFareDom.get(0), KTools.copyOptions(_opts, KMsgBoxOpenOptions));
    }
    else
    {
        if(this._fareId)
        {
            this._navTaxiFareDom.hide();
            KTools.hideMsg(this._fareId);
        }
        this._fareId = undefined;
    }
	/*if(!node){
		return;
	}
	//
	if(!this._$taxiFareDom || !this._$taxiFareDom.length || !this._taxiContent){
		return;
	}
	var _this=this;
	if (!this._$taxiFareDom.is(":visible")) {
		//this._$taxiFareDom.html(this._taxiContent.replace(/\<p[^<]+/g, "<p></p>")).show();
		this._$taxiFareDom.html(this._taxiContent).show();
		this._msgId = KTools.showMsg(this._$taxiFareDom.get(0), {
			closedcbk : function() {
				_this._$taxiFareDom.hide().html("");
			},
			node : $(node).get(0),
			cbmargin : 0,
			buboptions : {
				offsetx : 113
			},
			//theme:"blue",
			title:"打车费用"
		});
	} else {
		this._$taxiFareDom.hide().html("");
		KTools.hideMsg(this._msgId);
	}
	//*/
};

/*==================== 私有方法 =====================*/
/**
 * 初始化变量
 */
KNavsearch.prototype._initVariable = function()
{
    this._navstationList = undefined;  //起终点查询列表
    this._mwpf = KConfig.get("mwpf");   //UrlHash的标志
    this._split = ",";      //分隔符
    this._splitN = "_";     //分隔符
	/*delete by liufang 20131128 start
	2012之前旧版使用，新版该参数废弃
	*/
	/*
    this._noHightwayCheck = false;  //是否选中了避开高速
	*/
	/*delete by liufang 20131128 end*/
    
    /*added by zwq 驾车模式选择标识 start*/
    this._navTypeCheck = undefined; //驾车模式标识
    this._navTypeByEMail = undefined;//根据当前驾车模式发送邮件
    this._navPrintByType = undefined;//根据当前模式打印
    /*end*/
    this._LIMITNUM = 10;    //手风琴组件选择卡最大展开数量
    this._lineArray = [];   //线的集合
    this._markerArray = []; //标注集合
    this._result = undefined;   //查询结果
    this._extendOpen = false;   //追加终点界面是否打开
    this._requesting = false;   //正在发送了拖拽请求
    this._dragLeftLine = undefined;     //拖拽点前的线段
    this._dragRightLine = undefined;    //拖拽点后的线段
    this._dragingTempData = undefined;     //拖拽时使用的临时变量
    this._dragedTempData = undefined;       //拖拽完成时使用的临时变量
    this._revDragTempData = undefined;      //撤消拖拽使用的临时变量
    this._dragTempIndex = undefined;    //拖拽时使用的临时变量
    this._dragedSuccess = false;        //拖放请求是否返回
    this._stationListQueryOpts = undefined; //StationList查询条件
    this._stationListAutoSelect = true; //KStationList是否唯一点自动选择
    this._innerQuery = false;  //是否组件内部查询
    
    this._menuLablename = undefined;
    
    this._wangyiIconDom = $("#wangyiIcon").hide();
    
};
/**
 * 根据标志取得样式名称
 * @param sign String 标志名称
 * @param theme String Theme名称
 * @return String 完整的样式名称
 */
KNavsearch.prototype._getClassName = function(sign, theme)
{
    return (theme ? theme : this.theme()) + '_ns' + KNavsearch.conf.CLASSNAME[sign];
};
/**
 * 更新设置
 */
KNavsearch.prototype._setOption = function(opts)
{
    this.options() && (this._oldOpts = this.options().theme);
    this._opts = KTools.copyOptions(opts, this._opts);
};
/**
 * 设置组件的显示模式
 * @param p String 视图模式字符串 summary - 简单视图  detail - 详细视图
 */
KNavsearch.prototype._displayPattern = function(p)
{
    this._navResultContainDom.removeClass().addClass(p == 'detail' ? this._getClassName('SRCD') : this._getClassName('SRCS'));
    KMap.closeInfoWindow();
    this._pattern = p;
};
/**
 * 取得组件DOM
 * @param container Node
 */
KNavsearch.prototype._getDom = function(container)
{
    this._domAll = $(container);
    this._dom = this._domAll.get(0);
    var tempDom = $(">div", this._domAll);
    this._navSearchDom = tempDom.eq(0); //起终点选择界面
    this._navResultDom = tempDom.eq(1).hide(); //查询结果界面
    this._navstationListDom = $(">div", this._navSearchDom).eq(0).hide();  //KStationList组件Dom
    this._origDestSelectEtn = $(">div>div>input", this._navSearchDom).eq(0);    //起终点选择确定按钮
    var navResultDomArray = $(">div", this._navResultDom);
    /*added by zwq 驾车模式选择区 start*/
    var num = 1;
    this._navTypeDom = navResultDomArray.eq(0);
    $(">input", this._navTypeDom).eq(0).attr("checked", true);//页面初始化，默认设置第一个radio为选中状态
    /*end*/
    this._navResultDescDom = navResultDomArray.eq(num+0);   //查询结果标题
    this._navResultContainDom = navResultDomArray.eq(num+1).hide();    //查询结果区
    this._navResultOperationDom = navResultDomArray.eq(num+2);  //结果操作区
    this._navResultExtendDom = navResultDomArray.eq(num+3); //追加目的地区域
    this._navNoResultTip = navResultDomArray.eq(num+4).hide();     //无结果提示区
    this._navCo2ShowDom = navResultDomArray.eq(num+5).hide();  //碳排放数据区
    this._navTaxiFareDom = navResultDomArray.eq(num+6).hide();  //打车费用数据区
    this._navCo2ShowDistance = $(">p>span", this._navCo2ShowDom).eq(0); //行驶距离值
    this._navCo2ShowUI = $(">ul", this._navCo2ShowDom).eq(0);   //碳足迹详细区
    this._navCo2Href = $(">a[mfg='bsc']", this._navResultOperationDom).eq(0);   //碳足迹按钮
    this._navCo2Content = $(">span[mfg='bscv']", this._navCo2Href).eq(0);   //碳足迹值
    this._addFavHrefDom = $(">a[mfg='nfav']", this._navResultOperationDom).eq(0);   //收藏按钮
    this._sendHrefDom = $(">a[mfg='nfs']", this._navResultOperationDom).eq(0);  //发送按钮
    this._printHrefDom = $(">a[mfg='nprt']", this._navResultOperationDom).eq(0);    //打印按钮
    this._errorHrefDom = $(">a[mfg='nerr']", this._navResultOperationDom).eq(0);    //纠错按钮
    this._startDescDom = $(">div>strong", this._navResultDescDom).eq(0);    //起点名称Dom
    this._endDescDom = $(">div>strong", this._navResultDescDom).eq(1);  //终点名称Dom
    this._distanceDom = $(">span", this._navResultDescDom).eq(0);   //行程距离和用时Dom
    var navResultExtendBtn = $(">div", this._navResultExtendDom);
    this._navExtendDiv = navResultExtendBtn.eq(0);  //追加终点输入Dom
    this._navExtendSearchList = navResultExtendBtn.eq(1);
    this._navExtendSearchDom = $(">div", navResultExtendBtn.eq(1)).eq(0).hide();   //添加终点选择区（KList）
    this._navExtendsearchContainer = $(">div>div>ul", navResultExtendBtn.eq(1)).eq(0);
    this._navExtendsearchClose = $(">div>div>a", navResultExtendBtn.eq(1)).eq(0);   //添加终点区关闭按钮
    this._navExtendAddEnterBtn = $("div>input", navResultExtendBtn.eq(1)).eq(0);
    this._navExtendCannelBtn = $("pre>a", this._navResultExtendDom).eq(0);  //添加终点取消按钮
    this._navExtendBtn = $(">div>a", this._navResultExtendDom).eq(0);   //追加目的地按钮
    this._navExtendSearchAddEnterbtn = $("pre>input", this._navResultExtendDom).eq(0);
    this._navExtendCitylistDiv = $(">div", this._navExtendDiv).eq(0);
    this._navExtendCitylistDom = $(">div>div", this._navExtendCitylistDiv).eq(0);   //城市选择(KCityList)
    this._navExtendNameInput = $(">div>input", this._navExtendCitylistDiv).eq(0);   //追加终点输入框
    this._navResultSeletDom = $(">div", this._navResultContainDom).eq(0).hide();    //结果列表(KAccordion)
};
/**
 * 应用组件样式
 */
KNavsearch.prototype._applyTheme = function()
{
    if(this._domAll)
    {
        this._domAll.removeClass().addClass(this._getClassName('NS'));
        this._navSearchDom.removeClass().addClass(this._getClassName('SP'));
        this._navResultDom.removeClass().addClass(this._getClassName('SR'));
        this._navResultDescDom.removeClass().addClass(this._getClassName('SRT'));
        this._navResultContainDom.removeClass().addClass(this._getClassName((this._pattern == 'detail' ? 'SRCD' : 'SRCS')));
        this._navResultOperationDom.removeClass().addClass(this._getClassName('OPC'));
        this._navResultExtendDom.removeClass().addClass(this._getClassName('AC'));
        this._navNoResultTip.removeClass().addClass(this._getClassName('EPT'));
        this._navCo2ShowDom.removeClass().addClass(this._getClassName('CO2'));
        this._navCo2Href.removeClass().addClass(this._getClassName('OCO2'));
        this._navExtendDiv.removeClass().addClass(this._getClassName((this._extendOpen ? 'ACS' : 'ACUS')));
        this._navExtendSearchList.removeClass().addClass(this._getClassName('ACD'));
        this._navExtendBtn.removeClass().addClass(this._getClassName('SAB'));
        this._navExtendCitylistDiv.removeClass().addClass(this._getClassName('ATB'));
        $(">div>span", this._navResultExtendDom).eq(0).removeClass().addClass(this._getClassName('SAT'));
        this._navExtendNameInput.removeClass().addClass(this._getClassName('ATTB'));
    }
};
/**
 * 更新标题
 */
KNavsearch.prototype._updateTitle = function()
{
    var acc = this._navAccordion;
    if (acc)
    {
        var length = acc.length();
        this._startDescDom.html($(">strong", acc.tab(0).tabDom).html());
        this._endDescDom.html($(">strong", acc.tab(length - 1).tabDom).html());
        var tmp = this._getTimeAndDistance();
        var descstr = this._convertDistance(tmp.d) + " / 用时" + this._convertTime(tmp.t);
        this._distanceDom.html(descstr);
    }
};
/**
 * 取得时间和距离
 * @param lines Integer[] 线段集合
 */
KNavsearch.prototype._getTimeAndDistance = function(lines)
{
    var lineLength = this._lineArray.length;
    var time = 0;
    var distance = 0;
    for(var i in (lines || this._lineArray))
    {
        time += parseInt(this._lineArray[lines ? lines[i] : i].time);
        distance += parseInt(this._lineArray[lines ? lines[i] : i].distance);
    }
    return {t : time, d : distance};
};
/**
 * 根据标记的index取得相关线段的index
 * @param midx Integer 标记index
 * @return Integer[] 线段index合集
 */
KNavsearch.prototype._getLineIndex = function(midx)
{
    var result = [];
    result.push(midx == 0 ? 0 : parseInt(midx - 1));
    if((midx != this._markerArray.length - 1) && midx != 0)
    {
        result.push(midx);
    }
    return result;
};
/**
 * 初始化组件绑定事件
 */
KNavsearch.prototype._initEvent = function()
{
    var _this = this;
    //碳排放按钮Click事件
    this._navCo2Href.click(function() {
        //如果提示未打开
        if (_this._msgId == undefined)
        {
            _this._msgId = KTools.showMsg(_this._navCo2ShowDom.get(0), {cbmargin:0, buboptions : {offsetx : 125}, node : _this._navCo2Content.get(0), closedcbk : function(){
                _this._navCo2ShowDom.hide();
                _this._msgId = undefined;
            }});
        }
        else
        {
            KTools.hideMsg(_this._msgId);   //关闭提示
            _this._msgId = undefined;
        }
    });

    //收藏按钮Click事件
    this._addFavHrefDom.click(function() {
        KTools.addFavorite("从" + (_this._queryopts.navorig.city ? _this._queryopts.navorig.city : '') + (_this._queryopts.navorig.name ? _this._queryopts.navorig.name : '') + '到' + (_this._queryopts.navdest.city ? _this._queryopts.navdest.city : '') + (_this._queryopts.navdest.name ? _this._queryopts.navdest.name : '') + ' - 图吧导航 – 图吧:地图导航生活', document.location.href, this);
    });

    //发送按钮Click事件
    this._sendHrefDom.click(function(){
       _this.send();
    });

    //打印按钮Click事件
    this._printHrefDom.click(function(){
       _this.print();
    });

    //纠错按钮Click事件
    this._errorHrefDom.click(function(){
        var kfeedbackInfo = KTools.copyOptions({}, KFeedbackInfo);
        kfeedbackInfo.type = KFeedbackType.ROUTE_ERROR;
        kfeedbackInfo.errortype = KFBErrorType.INFO;
        kfeedbackInfo.notes = _this._queryopts.navorig.name +"到"+_this._queryopts.navdest.name;
        var krouteInfo =  KTools.copyOptions({}, KRouteInfo);
        krouteInfo.type = KRouteType.NAVIGATION;
        krouteInfo.queryopts =_this._queryopts;
        krouteInfo.name = _this._queryopts.navorig.name +"到"+_this._queryopts.navdest.name;
        KEvent.trigger(_this, "feedback", _this,kfeedbackInfo,krouteInfo);
    });

    //关闭增加添加终点按钮Click事件
    this._navExtendsearchClose.click(function(e) {
        KEvent.trigger(_this, "sl_submitbtn", _this, false);
        //opt# 201103151953 fix begin
        //add by zhangsq
        KEvent.trigger(_this, "cancelappend", _this);
        //opt# 201103151953 fix end
        //_this._navExtendCloseClick();
        _this._triggerExtend(false);
    });

    //输入追加点的取消按钮。
    this._navExtendCannelBtn.click(function(e) {
        _this._extendOpen = false;
        _this._triggerExtend(false);
    });

    this._navExtendSearchAddEnterbtn.click(function(e) {
        _this._extendQuery();
    });

    this._navExtendNameInput.keydown(function(e)
    {
        if(e.keyCode == 13)
        {
            _this._extendQuery();
        }
    }).focus(function() {
        if (_this._navExtendTip)
        {
            KTools.hideMsg(_this._navExtendTip);
            _this._navExtendTip = undefined;
        }
    });

    this._navExtendBtn.click(function() {
        _this._triggerExtend(true);
    });
};
/**
 * 追加点查询
 */
KNavsearch.prototype._extendQuery = function()
{
    var _this = this;
    var insertValue = this._navExtendNameInput.val();
    if (insertValue.replace(/(^\s*)|(\s*$)/g, '') == "")
    {
        this._navExtendTip = KTools.showMsg("请输入要追加的名称", {node:this._navExtendNameInput.get(0),outside:true,autoclose:5,closedcbk:function() {
            _this._navExtendTip = undefined;
        }});
        return;
    }
    this._navExtendDiv.hide();
    this._navAccordion.collapse();
    this._setExtendQueryOpts();
    //this._setOverlyDragFun(false);
    this._initExtendSearchList();
    this._navExtendSearchDom.show();
    this._navExtendDiv.removeClass(this._getClassName('ACS', this._oldOpts)).addClass(this._getClassName('ACUS'));
};
/**
 * 通过拼串得到追加目的地的查询条件。
 */
KNavsearch.prototype._setExtendQueryOpts = function()
{
    this._extendOpts = KTools.copyOptions({type : KQueryType.navsearch},KQueryOptions);
    this._extendOpts.navdest = this._extendOpts.navdest || {};
    this._extendOpts.navdest.city = this._navExtendCitylist ? this._navExtendCitylist.city().name : '全国';
    this._extendOpts.navdest.name = this._navExtendNameInput.val();

    this._extendOpts.navorig = $.extend(true, {}, this._queryopts.navdest);
};
/**
 *  初始化追加点的选择。
 */
KNavsearch.prototype._initExtendSearchList = function()
{
    var _this = this;
    if (!this._navExtendSearchAddList)
    {
        var opts = KTools.copyOptions({
            initmap:false,
            citylist:false,
            autoheight:true,
            origarea:false,
            changehash:false
        }, this._opts.slopts);
        this._navExtendSearchAddList = new KStationList(this._navExtendSearchDom, opts);
        KEvent.bind(this._navExtendSearchAddList, "selectdone", function(evt, w, oinfo, dinfo) {
            var q = {orig : oinfo, dest : dinfo};
			if (!_this._navstationListDom._query) {
				if (_this._checkLatlonExtend(q)) {
					//_this._navExtendBtnClick(evt, w, q);
                    _this._startExtendQuery(q);
				} else {
					KTools.showMsg("该站点名称已经在列表中存在，请重新选择！");
					KEvent.trigger(_this, "sl_submitbtn", _this, true);
				}
			}
		});
        KEvent.bind(this._navExtendSearchAddList, "submitbtn", function(evt, w, v) {
            KEvent.trigger(_this, "sl_submitbtn", _this, v);
        });
        KEvent.bind(this._navExtendSearchAddList, "resultloaded", function() {
            _this._navExtendSearchDom._query = true;    //设置当前执行查询的是添加终点选择
            _this._navstationListDom._query = false;    //设置当前执行查询的是添加终点选择
            KEvent.trigger(_this, "sl_resultloaded", _this);
        });
        KEvent.bind(this._navExtendSearchAddList, "resultshown", function(evt, w, action, result, isNoResult) {
            //opt# 201103151448 fix begin
            //delete by zhangsq
            //KEvent.trigger(_this, "sl_resultshown", _this);
            //add by zhangsq
            _this._triggerSlResultShown('appenddest');
            //opt# 201103151448 fix end
            if(isNoResult)
            {
                _this._triggerExtend(false);
                _this._navExtendDiv.removeClass(_this._getClassName('ACUS')).addClass(_this._getClassName('ACS'));
                this.showNoResultTip([_this._navExtendNameInput.get(0)]);
            }
            else
            {
                _this.layout();
            }
        });
        KEvent.bind(this._navExtendSearchAddList, "mapready", function(evt, w, c, l) {
            KEvent.trigger(_this, "mapready", _this, c, l);
        });
        KEvent.bind(this._navExtendSearchAddList, "selectchanged", function(evt, w, p) {
            KMap.fitzoom();
        });
        this.layout();
    }
    this._navExtendSearchAddList.query(this._extendOpts);
    this._changeEndMarkerIcon(0);
};
/**
 * 开始查询追加点结果
 * @param q object
 */
KNavsearch.prototype._startExtendQuery = function(q)
{
    this._extendOpts.navdest = this._extendOpts.navdest || {};
    //this._extendOpts.navorig = this._extendOpts.navdest && this._queryopts.navdest;
    this._extendOpts.navdest.name = q.dest.name;
    this._extendOpts.navdest.latlon = q.dest.latlon;
    //this._setOverlyDragFun(true);
    this._queryExtendResult();
};
/**
 * 查询追加点结果
 */
KNavsearch.prototype._queryExtendResult = function()
{
    this._ajaxFun(this._buildHash({nh : this._gethash(this._extendOpts), di : this._getTimeAndDistance().d}), this._queryExtendComplete);
};
/**
 * 追加点查询完成处理方法
 * @param data JSON
 */
KNavsearch.prototype._queryExtendComplete = function(data)
{
    this._parseResult(data);        //格式化结果
    this._triggerResultLoaded('appendest', this._result);   //触发resultloaded事件
    this._showExtendResult();       //显示追加点结果
    this._syncSearchbox();          //同步搜索框
    this.showall();                 //将地图缩放到合适级别显示整条线路
    this._updateTitle();
    this._updateQueryOpts();
    this._triggerResultShown('appendest', this._result); //触发resultshown事件
    this._updateCo2ShowDom(); //更新碳足迹信息
    this._updateTaxiFare(); //更新打车费用
    //opt# 200103151801 fix begin
    //add by zhangsq
    this._toggleExtend();   //切换显示添加终点
    //opt# 200103151801 fix end
};
/**
 * 显示追加点结果
 */
KNavsearch.prototype._showExtendResult = function()
{
    var _lidx = [];
    var _idxs = this._getLineIndex(this._markerArray.length);//新增线段序号
    KEvent.trigger(this, "resultloaded", this, 'appendest', this._result);  //触发resultloaded事件
    KEvent.trigger(this, "sl_submitbtn", this, false);    //触发sl_submitbtn事件
    if (this._navExtendSearchAddList)
    {
        this._navExtendSearchAddList.clearResult();
    }
    this._insertResultDesc(this._result);   //插入查询结果描述
    var lines = this._initLineAndMarker(true);
    for(var i = 0; i < lines.length; i++)
    {
        _lidx.push(lines[i]._idx);
    }
    this._initAccordionIndex(_lidx);
    this._volumeBindDetailHerfEvent(_lidx);
    this._volumeBindResultEvent(_lidx); //绑定事件
    this._triggerExtend(false); //关闭追加点
    this._updateQueryOpts();
    this._updateDragState();
};
/**
 * 插入查询结果描述
 * @param data Object 查询返回结果
 * @param tabindex Integer
 * @param index Integer
 */
KNavsearch.prototype._insertResultDesc = function(data, tabindex, index)
{
    if(tabindex == undefined)
    {
        tabindex = this._navAccordion.length() - 1;
        var text = '<span class="' + this._getClassName('STP') + '">经过</span><pre/><strong>' + $(">strong", this._navAccordion.tab(tabindex).tabDom).eq(0).html() + '</strong><i style="display:block;height:0;font-size:0;clear:both;"></i>';
        this._navAccordion.insert({index : tabindex, text : text, content : ''});
        //$('>strong' , this._navAccordion.tab(tabindex + 1).tabDom).eq(0).html(this._extendOpts.navdest.name);
        this._changeAccordionTab(tabindex + 1, this._extendOpts.navdest.name);  //更改终点标题内容
    }
    var des = this._getDescript(data);
    var d = des[tabindex] ? des[tabindex] : des[0];
    var next = undefined;
    if(index != undefined) next = $('>ol', this._navAccordion.tab(tabindex).contentDom).eq(index);
    if(next && next.get(0))
    {
        next.before(d);
    }
    else
    {
        $(this._navAccordion.tab(tabindex).contentDom).append(d);
    }
    this._resetDesNum(tabindex);
    this._triggerAccordionTab(tabindex); //打开新的选项卡
    //this._navAccordion.select(tabindex); //打开新加的内容
};
/**
 * 更改指定Tab的标题
 * @param idx Integer 序号
 * @param text String 标题名称
 */
KNavsearch.prototype._changeAccordionTab = function(idx, text)
{
    idx && $('>strong' , this._navAccordion.tab(idx).tabDom).eq(0).html(text);
};
/**
 * 取得结果描述
 * @param data Object 查询返回结果
 * @return String 查询结果描述
 */
KNavsearch.prototype._getDescript = function(data)
{
    var result = [];
    if(data && data.b && data.b != '')
    {
        var tmp  = data.b.replace(/<h3[\s\S]*?<\/h3>/gi, '').split(/<\/div>/);
        for(var i = 0; i < tmp.length; i++)
        {
            if(tmp[i] && tmp[i].length > 0)
            {
                result.push(tmp[i].replace(/<div[\s\S]*?>/gi, '').replace(/<\/div>/gi, ''));
            }
        }
    }
    return result;
};
/**
 * 重新设置描述步骤编号
 * @param tabindex Integer 序号
 */
KNavsearch.prototype._resetDesNum = function(tabindex)
{
    if(tabindex == undefined)
    {
        var len = this._navAccordion.length();
        for(var i = 0; i < len; i++)
        {
            this._resetDesNum(i);
        }
    }
    else
    {
        var c = this._navAccordion.tab(tabindex).contentDom;
        $('>ol>li', c).each(function(i){
            $('>b', this).html((i + 1) + '.');
        });
        $('>dl>dt', c).each(function(j){
            $('>b', this).html((j + 1) + '.');
        });
    }
};
/**
 * 删除Accordion中的结果
 * @param idxs Integer[]
 */
KNavsearch.prototype._removeResult = function(idxs)
{
    var _dls = $('>div>dl', this._navAccordion.dom());
    var _ols = $('>div>ol', this._navAccordion.dom());
    var tidx = [];
    for(var j in idxs)
    {
        var idx = parseInt(idxs[j]);
        this._bindDetailHerfEvent(idx, true);   //解除详情链接绑定的事件
        this._bindResultEvent(idx, true);       //解除绑定的事件
        tidx.push(this._getIndexInTab(_ols[idx]));
        $(_dls[idx]).remove();
        $(_ols[idx]).remove();
    }
    return tidx;
};
/**
 * 取得在Tab内的序号
 * @param ol Node
 * @return Integer 序号
 */
KNavsearch.prototype._getIndexInTab = function(ol)
{
    var idx = undefined;
    $('>ol', $(ol).parent()).each(function(i){
        if(this == ol) idx = i;
    });
    return idx;
};
/**
 * 更新途经点
 * @param dest
 */
KNavsearch.prototype._updateWaypoint = function(dest)
{
    if(dest)
    {
        this._queryopts.mid = this._queryopts.mid || [];
        this._queryopts.navdest.type = KPOIType.MIDNODE;    //设置途经点的type
        this._queryopts.mid.push(this._queryopts.navdest);  //将当前终点添加到途经点
        this._queryopts.navdest = dest; //设置新的途经点
        this._setHash(true);    //更新UrlHash
    }
};
/**
 * 更新QueryOptions
 * @param updateurl Boolean 是否更新Url 默认为true
 */
KNavsearch.prototype._updateQueryOpts = function(updateurl)
{
    updateurl = updateurl == undefined ? true : updateurl;
    var length = this._markerArray.length;
    /*edit by zwq  highway 参数的值由_noHightwayCheck 改为 _navPrintByType  #start*/
    var opts = KTools.copyOptions({type : KQueryType.navsearch, highway : this._navPrintByType, navorig : KTools.copyOptions({}, KPOInfo), navdest : KTools.copyOptions({}, KPOInfo)}, KQueryOptions);
    /*end*/
    opts.navdest.latlon = this._markerArray[length - 1].latlon().getPid();
    opts.navdest.name = this._markerArray[length - 1].POIName;
    opts.navdest.city = this._markerArray[length - 1]._city;
    opts.navdest.type = KPOIType.NORMAL;
    opts.navorig.latlon = this._markerArray[0].latlon().getPid();
    opts.navorig.name = this._markerArray[0].POIName;
    opts.navorig.type = KPOIType.NORMAL;
    opts.navorig.city = this._markerArray[0]._city;

    opts.mid = [];
    for (var i = 1; i < length - 1; i++)
    {
        var marker = this._markerArray[i];
        var tempPOI = KTools.copyOptions({latlon : marker.latlon().getPid(), name : marker.POIName, type : marker._type}, KPOInfo);
        tempPOI.city = this._markerArray[i]._city;
        opts.mid.push(tempPOI);
    }
    this._queryopts = opts;
    updateurl && this._setHash(true);
};
/**
 * 检查追加终点是否重复
 * @param q
 */
KNavsearch.prototype._checkLatlonExtend = function(q)
{
    if ((q.dest.name == this._queryopts.navorig.name && q.dest.city == this._queryopts.navorig.city) || (q.dest.name == this._queryopts.navdest.name && q.dest.city == this._queryopts.navdest.city))
    {
        return false;
    }
    if (this._queryopts.mid)
    {
        for (var i in this._queryopts.mid)
        {
            if (q.dest.name == this._queryopts.mid[i].name && q.dest.city == this._queryopts.mid[i].city && this._queryopts.mid[i].type == KPOIType.MIDNODE)
            {
                return false;
            }
        }
    }
    return true;
};
/**
 * 打开或关闭追加终点界面
 * @param flag Boolean
 */
KNavsearch.prototype._triggerExtend = function(flag)
{
    flag = flag == undefined ? (!this._extendOpen) : flag;
    this._extendOpen = flag;
    if(flag)    //打开界面
    {
        this._initExtendCitylist(); //初始化城市列表
        this._navExtendNameInput.val("");
        this._navExtendDiv.removeClass(this._getClassName('ACUS', this._oldOpts)).addClass(this._getClassName('ACS'));
        this.layout();
        KTools.scrollIntoView(this._navExtendCannelBtn, this._navResultDom, "fast");
    }
    else    //关闭界面
    {
        this._navExtendSearchDom.hide();
        this._navExtendDiv.show();
        //this._setOverlyDragFun(true);
        this._changeEndMarkerIcon(1);
        this._navExtendDiv.removeClass(this._getClassName('ACS', this._oldOpts)).addClass(this._getClassName('ACUS'));
        if(this._navExtendSearchAddList)
        {
            this._navExtendSearchAddList.clearResult();
        }
    }
};
/**
 * 设置标注的可编辑性
 * @param flag
 */
KNavsearch.prototype._setOverlyDragFun = function(flag)
{
    for(var i in this._markerArray)
    {
        this._markerArray[i].setEditable(flag);
    }
    for(var j in this._lineArray)
    {
        this._lineArray[j].setEditable(flag);
    }
};
/**
 *
 * @param flag
 */
KNavsearch.prototype._changeEndMarkerIcon = function(flag)
{
    var _endArr = this._markerArray[this._markerArray.length - 1];
    var text = (flag == 0 ? 'w' : 'e');
    var extendIcon = KConfig.get("mk_s_sdtn", {t:text});
    var labelCss = KConfig.get("mk_s_sdtln", {t:text});
    var endtab = this._navAccordion.tab(this._navAccordion.length() - 1).tabDom;
    $(">span", endtab).eq(0).removeClass().addClass(this._getClassName((flag == 0 ? 'STP' : 'SEP')));
    _endArr.setOptions({icon:{snapIcon:KConfig.get("mk_s_sdts", {t:text})}});
    _endArr.setIconClass(extendIcon);
    _endArr.setLabelClass(labelCss);
    _endArr._type = (flag == 0 ? KPOIType.MIDNODE : KPOIType.NORMAL);
};
/**
 * 初始化追加终点内城市列表
 */
KNavsearch.prototype._initExtendCitylist = function()
{
    if (!this._navExtendCitylist)
    {
        var _this = this;
        this._navExtendCitylist = new KCityList(this._navExtendCitylistDom, this._opts.cylopts ? this._opts.cylopts : {});
        KEvent.bind(this._navExtendCitylist, 'citychanged', function(e,w,c,p){
            if(_this._navExtendNameSug)
            {
                _this._navExtendNameSug.clearCache();
                var _hash = new KUrlHash();
                _hash.setKey('c', c.name);
                _this._navExtendNameSug.setOptions({url:_this.options().sugopts.url + '&' + _hash.toString()});
            }
        });
    }
    if(!this._navExtendNameSug && this.options().sugopts)
    {
        var _hash = new KUrlHash();
        _hash.setKey('c', this._navExtendCitylist.city().name);
        var _opt = KTools.copyOptions({}, this.options().sugopts);
        _opt.url += '&' + _hash.toString();
        this._navExtendNameSug = new KStdSuggest(this._navExtendNameInput.get(0), _opt);
    }
};
/**
 * 启动组件查询
 */
KNavsearch.prototype._startQuery = function()
{
	/*add by liufang 20131128 start
		本地搜数字后，地图上有条公交线
		删除这条公交线
	*/
    this._clearAllOverlay('all');
	/*add by liufang 20131128 end*/
	KEvent.trigger(this, 'searchbefore', this, this._queryopts);    //抛出searchbefore事件
    //如果存在起终点经纬度则启动地图划线，否则开始查询起终点
    if(this._queryopts.navorig && this._queryopts.navorig.latlon && this._queryopts.navdest && this._queryopts.navdest.latlon)
    {
        this._queryResult();   //查询换乘结果
    }
    else
    {
        this._stationListQueryOpts = $.extend(true, {}, this._queryopts);
        this._wangyiIconDom.hide(); //关闭网易车险广告
        this._queryStationList();   //查询起终点
    }
};
/**
 * 改变stationlist和结果显示状态。
 * @param flag Integer 1 显示结果  0 显示起终点列表
 */
KNavsearch.prototype._changeShowState = function(flag)
{
    if (flag == 1)
    {
        this._navSearchDom.hide();
        this._navstationListDom.hide();
        this._navResultDom.show();
    }
    else
    {
        this._navResultDom.hide();
        this._navstationListDom.show();
        this._navSearchDom.show();
    }
};
/**
 * 设置UrlHash
 * @param flag
 */
KNavsearch.prototype._setHash = function(flag)
{
    var queryHash = new KUrlHash();
    var queryOpt = this._queryopts;
    if (queryOpt)
    {
        if (!queryOpt.navorig.latlon || !queryOpt.navdest.latlon)
        {
            if (queryOpt.navdest.name)
            {
                queryHash.setKey("dn", queryOpt.navdest.name);
            }
            if (queryOpt.navorig.name)
            {
                queryHash.setKey("on", queryOpt.navorig.name);
            }
            if (queryOpt.navorig.city != undefined)
            {
                if (queryOpt.navorig.city != "")
                {
                    queryHash.setKey("oc", queryOpt.navorig.city);
                }
                else
                {
                    queryHash.setKey("oc", "none");
                }
            }
            if (typeof queryOpt.navdest.city != undefined)
            {
                if (queryOpt.navdest.city != "")
                {
                    queryHash.setKey("dc", queryOpt.navdest.city);
                }
                else
                {
                    queryHash.setKey("dc", "none");
                }
            }
            if (queryOpt.mapcity)
            {
                queryHash.setKey("mc", queryOpt.mapcity.name);
            }
        }
        else
        {
            queryHash.setKey("nh", this._gethash(queryOpt));
			/*change by liufang 20131128 start
			  bw 在2012年之后的新版中已无用，但由于对外接提供此参数，所以不能废弃
				搜索中 被 nt 代替
				0 最快	1.最短	2.避开高速
			*/
			queryHash.setKey("bw", this._navTypeCheck);
			/*change by liufang 20131128 end*/
			
			/*delete by liufang 20131128 start*/
			/*
            queryHash.setKey("bw", this._noHightwayCheck ? "2" : "1");
			*/
			/*delete by liufang 20131128 end*/
        }
    }
    queryHash.setKey(this._mwpf, KWidgetFlag.navsearch);
    KListener.setHash(queryHash, flag);
};
/**
 * 同步SearchBox
 * @param opts KQueryOptions
 */
KNavsearch.prototype._syncSearchbox = function(opts)
{
    if(this.options().searchbox)
    {
        this.options().searchbox.query(opts ? opts : this._queryopts, true);
    }
};
/**
 * 查询起终点
 */
KNavsearch.prototype._queryStationList = function()
{
    if(!this._navStationList)
    {
        var _this = this;
        var opts = KTools.copyOptions({
            initmap:false,
            citylist:true,
            changehash:false,
            autoselect:this._stationListAutoSelect
            //opt# 201103151005 fix begin
            //delete by zhangsq
            //simplenoresult : false
            //opt# 201103151005 fix end
        }, this._opts.slopts);
        this._navStationList = new KStationList(this._navstationListDom, opts); //初始化起终点查询列表
        //绑定resultloaded事件
        KEvent.bind(this._navStationList, 'resultloaded', function(evt, wgt, action, result){
            _this._navExtendSearchDom._query = false;   //设置当前执行查询的是起终点选择
            _this._navstationListDom._query = true;     //设置当前执行查询的是起终点选择
            KEvent.trigger(_this, 'sl_resultloaded', _this);    //抛出sl_resultloaded事件
        });
        //绑定resultshown事件
        KEvent.bind(this._navStationList, 'resultshown', function(eventinfo, widget, action, query, result){
            _this._navStationList.show();   //显示起终点列表
            _this._changeShowState(0);  //改变显示状态为显示起终点列表
            _this.layout(); //调整组件显示
            _this._syncSearchbox(); //同步搜索框
            if (_this.options().searchbox) {
				this.showNoResultTip(_this.options().searchbox.getCurrInputs());
			}
            _this._navStationList.setOptions({autoselect : true}); //恢复KStationList唯一点自动跳转
            _this._stationListAutoSelect = true; //恢复KStationList唯一点自动跳转
            //opt# 201103151448 fix begin
            //add by zhangsq
            _this._triggerSlResultShown('query');
            //delete by zhangsq
            //KEvent.trigger(_this, 'sl_resultshown', _this); //抛出sl_resultshown事件
            //opt# 201103151448 fix end
        });
        //绑定changehash事件
        KEvent.bind(this._navStationList, 'changehash', function(e,w,opt,urlhash){
            urlhash = urlhash.clone();
            urlhash.setKey(_this._mwpf, _this.flag());
            KListener.setHash(urlhash, true);   //设置UrlHash
        });
        //绑定locationchanged事件
        KEvent.bind(this._navStationList, 'locationchanged', function(e,w,which,poinfo){
            switch(which)
            {
                case 'orig':
                    _this._queryopts.navorig = poinfo;
                    break;
                case 'dest':
                    _this._queryopts.navdest = poinfo;
                    break;
            }
            _this._syncSearchbox($.extend(true, {}, _this._queryopts)); //同步Searchbox
        });
        //绑定selectdone事件
        KEvent.bind(this._navStationList, "selectdone", function(evt, w, oinfo, dinfo) {
            //判断当前执行查询的是否为起终点查询
            if (_this._navstationListDom._query)
            {
                _this._noHightwayCheck = false;
                /*#start added by zwq 重置发送邮件和打印状态 */
                _this._navTypeByEMail = undefined;
        		_this._navPrintByType = undefined;
        		
        		/*#end*/
                _this._navEnterSearch(evt, w, {orig : oinfo, dest : dinfo});
            }
        });
        //绑定mapready事件
        KEvent.bind(this._navStationList, "mapready", function(evt, w, c, l) {
            KEvent.trigger(_this, "mapready", _this, c, l); //抛出mapready事件
        });
        //绑定submitbtn事件
        KEvent.bind(this._navStationList, "submitbtn", function(evt, w, v) {
            KEvent.trigger(_this, "sl_submitbtn", _this, v);    //抛出sl_submitbtn事件
        });
    }
    this._navStationList.setOptions({autoselect : this._stationListAutoSelect});
    this._navStationList.query(this._queryopts);    //查询起终点
};
/**
 * 查询结果
 */
KNavsearch.prototype._queryResult = function()
{
    var obj = {};
    if(this._queryopts.navdest)
    {
        obj.dl = this._queryopts.navdest.latlon ? this._queryopts.navdest.latlon : '';
        obj.did = this._queryopts.navdest.latlon ? this._queryopts.navdest.latlon : '';
        obj.dn = this._queryopts.navdest.name ? this._queryopts.navdest.name : '';
    }
    if(this._queryopts.navorig)
    {
        obj.ol = this._queryopts.navorig.latlon ? this._queryopts.navorig.latlon : '';
        obj.oid = this._queryopts.navorig.pid ? this._queryopts.navorig.pid : '';
        obj.on = this._queryopts.navorig.name ? this._queryopts.navorig.name : '';
    }
    obj.nh = this._gethash(this._queryopts);
    obj.di = "0";
    this._ajaxFun(this._buildHash(obj), this._queryComplete);
};
/**
 * 组合Hash
 * @param data Object
 * @param hash KUrlHash
 */
KNavsearch.prototype._buildHash = function(data, hash)
{
    hash = hash || new KUrlHash();
    data = $.extend(true, {
        t : 'n'
        ,h : this._getRequestParam('h')
        ,w : this._getRequestParam('w')
        ,z : this._getRequestParam('z')
    }, data);
	/*delete by liufang 20131128 start
	_noHightwayCheck 参数废弃
	*/
	/*
    this._noHightwayCheck && (data.nt = '2');
	*/
    /*added by zwq 根据选中状态设置请求参数nt start*/
	/* 
    if(this._navTypeCheck){
    	data.nt = this._navTypeCheck;
    	this._navTypeCheck = undefined;
    }*/
    /*end*/
	/*delete by liufang 20131128 end*/
	/*add by liufang 20131128 start*/	
	data.nt = this._navTypeCheck;
	/*add by liufang 20131128 end*/
    for(var i in data)
    {
        hash.setKey(i.toString(), data[i]);
    }
    hash.setKey(this._mwpf, KWidgetFlag.navsearch);

    return hash;
};
/**
 * 查询完成处理方法
 * @param data
 */
KNavsearch.prototype._queryComplete = function(data)
{
    if(data)
    {
        var _this = this;
        if(!KMap.isInitialized(this.options().mapcontainer))
        {
            KEvent.bind(KMap, 'mapinit', function(){
                KEvent.unbind(KMap, 'mapinit', arguments.callee);
                _this._queryComplete(data);
            });
        }
        else
        {
            this._parseResult(data);    //格式化结果
            this._triggerResultLoaded(this._noHightwayClick ? 'highway' : 'query', this._result); //触发resultloaded事件
            this._showResult();         //显示结果
            this._triggerResultShown(this._noHightwayClick ? 'highway' : 'query', this._result); //触发resultshown事件
            this._noHightwayClick = false;
            this._updateQueryOpts();
            this._syncSearchbox();      //同步搜索框
            this.layout();              //调整组件外观
            this.showall();             //将地图缩放到合适级别显示整条线路
            this._wangyiIconDom.show();  //显示网易车险广告
            //opt# 200103151801 fix begin
            //add by zhangsq
            this._toggleExtend();   //切换显示添加终点
            //opt# 200103151801 fix end

            var point = undefined;
            if (_this._result && _this._result != null && _this._result.f && _this._result.f.a)
            {
                point = new MPoint(_this._result.f.a);
            }
            var zoom = undefined;
            if (_this._result && _this._result != null && _this._result.f && _this._result.f.b)
            {
                zoom = _this._result.f.b;
            }
            KEvent.trigger(this, 'mapready', this, point, zoom);
        }
    }
};
/**
 * 触发resultshown事件
 * @param type String 类型 query 查询结果 heighway：避开高速公路。appendest：追加途经点。editpath：使用鼠标拖拽修改了线路。
 * @param data Object
 */
KNavsearch.prototype._triggerResultShown = function(type, data)
{
    KEvent.trigger(this, 'resultshown', this, type, data);
};
/**
 * 触发resultshown事件
 * @param type String
 * @param data
 */
KNavsearch.prototype._triggerSlResultShown = function(type, data)
{
    KEvent.trigger(this, 'sl_resultshown', this, type, data);
};
/**
 * 触发resultloaded事件
 * @param type String 类型 ighway：避开高速公路。appendest：追加途经点。editpath：使用鼠标拖拽修改了线路。
 * @param data Object
 */
KNavsearch.prototype._triggerResultLoaded = function(type, data)
{
    KEvent.trigger(this, 'resultloaded', this, type, data);
};
/**
 * 执行接口Ajax查询
 * @param hash KUrlHash
 * @param sCallback 成功回调方法
 * @param eCallback 出错后的回调方法
 */
KNavsearch.prototype._ajaxFun = function(hash, sCallback, eCallback)
{
    var _this = this;
    var ajaxUrl = this._opts.url ? (this._opts.url.replace(/\?.*$/, '')) : undefined;   //取得请求地址
    if(ajaxUrl)
    {
        $.ajax({
            type : 'GET'
            ,url : ajaxUrl
            ,cache : false
            ,data : hash.toString()
            ,dataType : 'json'
            ,error : function(){
                eCallback && eCallback.call(_this);
            }
            ,success : function(data){
                sCallback && sCallback.call(_this, data);
            }
        });
    }
};
/**
 * 显示查询结果
 */
KNavsearch.prototype._showResult = function()
{
    KEvent.trigger(this, "sl_submitbtn", this, false);  //抛出sl_submitbtn事件
    this.clearResult();
    this._initLineAndMarker();  //初始化地图中的线和标记
    this._initAccordion(this._result.b);    //初始化查询结果列表
    this._resetDesNum();
    this._updateCo2ShowDom(); //更新碳足迹信息
    this._updateTaxiFare(); //更新打车费用
    this._navAccordion.show();
    this._navResultContainDom.show();
    this._navNoResultTip.hide();
    this._updateTitle();    //更新标题
    this._setHash(true);    //设置UrlHash
    this._setOverlyDragFun(true);   //设置叠加手可拖拽
    this._changeShowState(1);   //设置显示状态
    this._updateDragState();   //更新拖拽状态
};
/**
 * 初始化地图中的线和标记
 * @param extend Boolean 是否为追加点
 */
KNavsearch.prototype._initLineAndMarker = function(extend)
{
    if(!this._result) return;
    var newLines = [];
    var sIdx = this._lineArray.length;  //当前线段的数量
    var a = this._result.a;
    var c = this._result.c;
    //初始化线段
    if(a && a.length > 0)
    {
        for(var j in a)
        {
            newLines.push(this._addLine(a[j].a, a[j].b, parseInt(j) + sIdx, this._result.a[j]));
        }
    }
    //初始化标注(因为直接取接口返回的标注经纬度会出现大幅偏差，所以使用线段的端点做为标注点)
    if(c && c.length > 0)
    {
		/*delete by liufang 20131202 start
			解决以下问题：
			url刷新时，出现缺点的现象
			比如：地图上共八个拖拽点，刷新后，变成六个了
			原因，url中传入6个坐标点，接口接收到，输出了5个点，四条线
		*/
		/*
		1.暂先屏蔽了掉，本来是要修改上面的bug，但是由于接口延迟修改，还是使用原来的代码
		2.即使接口修改好了，这个代码也不能直接使用，如果放开，需要考虑extend追加点的问题
		*//*
		var _e, flag, latlon, labelname, newlineNum, _opts;
		var _queryopts = this._queryopts;
        for(var i in c)
        {
			//_e:1起终点，2拖拽点，4追加点
            _e = parseInt(c[i].e);	
            flag = _e == 1 ? (i == 0 ? 's' : 'e') : (_e == 2 ? 'd' : (_e == 4 ? 'w' : ''));
			//起终点的信息，从整个大线段的最前端和最末端取得
			if(_e == 1) {
				_opts = flag == 's' ? _queryopts.navorig : _queryopts.navdest;
				labelname = _opts.name;
				newlineNum = i == newLines.length ? newLines.length - 1 : 0;
				latlon = newLines[newlineNum].latlons(i == 0 ? 'begin' : 'end');
			} else {		
				labelname = _queryopts.mid[i - 1].name;
				latlon = newLines[i].latlons('begin');
			}
            this._addMarker(flag, latlon, labelname, c[i].f);
        }*/
		/*delete by liufang 20131202 end*/		

        for(var i in c)
        {
            var _e = parseInt(c[i].e);
            //标注类型 s 起点   e 终点   w 途经点   d 拖拽点
            var flag = _e == 1 ? (i == 0 ? 's' : 'e') : (_e == 2 ? 'd' : (_e == 4 ? 'w' : ''));
            var latlon = newLines[i < newLines.length ? i : i - 1].latlons(i == newLines.length ? 'end' : 'begin');
            var labelname = i == 0 ? (extend ? this._extendOpts.navorig.name : this._queryopts.navorig.name) : (i == c.length - 1 ? (extend ? this._extendOpts.navdest.name : this._queryopts.navdest.name) : (this._queryopts.mid[i - 1].name));
            if(i == 0 && extend) continue;
            this._addMarker(flag, latlon, labelname, c[i].f);
        }		
    }
    return newLines;
};
/**
 * 添加标注
 * @param flag String 标注类型 s 起点   e 终点   w 途经点   d 拖拽点
 * @param latlon String 经纬度字符串
 * @param name String 标注名称
 * @param city String 所在城市
 * @param idx Integer 序号
 */
KNavsearch.prototype._addMarker = function(flag, latlon, name, city, idx)
{
    if(!KMap.isInitialized(this.options().mapcontainer)) return;
    name = (!name) || name == '' ? '未知路段' : name;

    var markeropts = flag == 'd' ? KConfig.get('mk_mo_m', {n : name}) : KConfig.get('mk_mo_sdt', {t : flag, n : name});
    markeropts.editable = true;
    markeropts.group = KWidgetFlag.navsearch;
	/*add by liufang 20131202 start
		修正问题：
		标注点首次拖拽到海里时，会出现直线
		原因：标注与折线的坐标是同一坐标对象引用
	*/
	latlon = typeof latlon === 'string' ? latlon : latlon.getPid();
	/*add by liufang 2013202 end*/
    var marker = new KMarker(latlon, markeropts);
    marker.POIName = name;
    marker._city = city;
    switch(flag)
    {
        case 's':   //起点
        	this.menuSmarker = marker;
            marker._type = KPOIType.NORMAL;
            break;
        case 'e':   //终点
        	this.menuEmarker = marker;
            marker._type = KPOIType.NORMAL;
            break;
        case 'w':   //途经点
            marker._type = KPOIType.MIDNODE;
            break;
        case 'd':   //拖拽点
            marker._type = KPOIType.DRAGNODE;
            break;
    }
    idx = idx == undefined ? this._markerArray.length : idx;
    marker._idx = idx;
    KEvent.bind(marker, "dragstart", this._dragStart, {type : 'm'}, this);
    KEvent.bind(marker, "draging", this._draging, {type : 'm'}, this);
    KEvent.bind(marker, "dragend", this._draged, {type : 'm'}, this);
    KMap.addMarker(marker);
    if(flag == 'd')
    {
        var _this = this;
        $('>div>div>a[mfg="ncc"]', marker.labelDom()).eq(0).unbind('click').bind('click', function(){
            _this._revDrag(marker._idx);
        });
    }
    this._insertMarker(marker);
};
/**
 * 将标注插入到标注数组
 * @param marker
 */
KNavsearch.prototype._insertMarker = function(marker)
{
    if(marker._idx == this._markerArray.length)
    {
        this._markerArray.push(marker);
    }
    else
    {
        for(var i in this._markerArray)
        {
            if(i >= marker._idx)
            {
                this._markerArray[i]._idx += 1;
            }
        }
        this._markerArray.splice(marker._idx, 0, marker);
    }
};
/**
 * 删除指定序号的标注
 * @param idx Integer[] 序号集合
 */
KNavsearch.prototype._removeMarker = function(idx)
{
    for(var i in idx)
    {
        KMap.removeMarker(this._markerArray[idx[i]]);
    }
    var tmp = [];
    for(var j = 0; j < this._markerArray.length; j++)
    {
        if($.inArray(j, idx) == -1) tmp.push(this._markerArray[j]);
    }
    this._markerArray = tmp.concat([]);
    for(var k = 0; k < this._markerArray.length; k++)
    {
        this._markerArray[k]._idx = parseInt(k);
    }
};
/**
 * 删除临时线段
 */
KNavsearch.prototype._removeTempLine = function()
{
    this._dragLeftLine && KMap.removeLine(this._dragLeftLine);
    this._dragRightLine && KMap.removeLine(this._dragRightLine);
    this._dragLeftLine = undefined;
    this._dragRightLine = undefined;
};
/**
 * 叠加物开始拖拽
 */
KNavsearch.prototype._dragStart = function(e, o, p)
{
    //opt# 200103151801 fix begin
    //add by zhangsq
    //if(this._markerArray.length >= this._LIMITNUM) return;
    //opt# 200103151801 fix end
    this._requesting = false;      //未开始接口请求，阻止重复发送请求
    this._dragedSuccess = false;    //设置拖放请求未返回
    if(e.data.type == 'm')
    {
        if(o._type && o._type != KPOIType.MIDNODE && o._type != KPOIType.NORMAL)
        {
            o.hideLabel();
        }
    }
};
/**
 * 拖拽叠加物
 * @param e KEventInfo
 * @param o KOverlay KMarker或KLine
 * @param p MPoint
 */
KNavsearch.prototype._draging = function(e, o, p)
{
    //opt# 200103151801 fix begin
    //add by zhangsq
//    if(this._markerArray.length >= this._LIMITNUM) return;
    //opt# 200103151801 fix end
    if(this._requesting) return;
    this._requesting = true;    //阻塞请求
    this._dragingTempData = {e : e, o : o, p : p}; //传递信息给拖拽中查询成功处理方法
    this._ajaxFun(this._buildHash({f : e.data.type == 'm' ? 'real' : 'temp', nh : this._gethash(this._buildDragQueryOptions(e, o, p))}), this._dragingComplete);
};
/**
 * 叠加物拖拽完成
 * @param e KEventInfo
 * @param o KOverlay KMarker或KLine
 * @param p MPoint
 */
KNavsearch.prototype._draged = function(e, o, p)
{
    //opt# 200103151801 fix begin
    //add by zhangsq
//    if(this._markerArray.length >= this._LIMITNUM) return;
    //opt# 200103151801 fix end
    this._dragedTempData = {e : e, o : o, p : p}; //传递信息给拖拽完成查询成功处理方法
    var obj = {
        nh : this._gethash(this._buildDragQueryOptions(e, o, p)),
        di : this._getTimeAndDistance().d - (o._type ? this._getTimeAndDistance(this._getLineIndex(parseInt(o._idx))).d : this._getTimeAndDistance([o._idx]).d)
    };
    /*this._removeTempLine(); //删除临时线
    KMap.hideCursorTip();
    return;*/
    this._ajaxFun(this._buildHash(obj), this._dragedComplete);
};
/**
 * 撤消拖拽
 * @param idx Integer 撤消点序号
 */
KNavsearch.prototype._revDrag = function(idx)
{
    this._revDragTempData = {idx : idx}; //传递信息给撤消查询成功处理方法
    this._ajaxFun(this._buildHash({nh : this._gethash(this._buildQueryOptions('r', this._markerArray[idx])), di : (this._getTimeAndDistance().d - this._getTimeAndDistance(this._getLineIndex(parseInt(idx))).d).toString()}), this._revDragComplete);
};
/**
 * 撤消查询成功处理方法
 * @param data Object
 */
KNavsearch.prototype._revDragComplete = function(data)
{
    if(data && data.a && data.a.length > 0)
    {
        this._parseResult(data);    //格式化查询数据.
        var idx = this._revDragTempData.idx;
        var _tabindex = this._getTabIndex('m', idx);
        _tabindex.sort();
        var _tidx = [];
        var _idxs = [];
        var _lines = [];
        var _lidx = [];
        _idxs = this._getLineIndex(parseInt(idx));
        //删除线段和结果
        this._removeLine(_idxs);
        _tidx = this._removeResult(_idxs);
        //重新划线
        for(var j in data.a)
        {
            var a = data.a[j].a;
            var b = data.a[j].b;
            _lines.push(this._addLine(a, b, _idxs[j], this._result.a[j]));
            _lidx.push(_lines[_lines.length - 1]._idx);
        }
        //更改结果描述
        for(var i = 0; i < _tabindex.length; i++)
        {
            this._insertResultDesc(data, _tabindex[i], _tidx[i]);
        }
        this._removeMarker([idx]);  //删除拖拽点
        this._initAccordionIndex(_lidx); //初始化描述编号
        this._volumeBindDetailHerfEvent(_lidx);
        this._volumeBindResultEvent(_lidx);//绑定事件
        this._updateTitle();
        this._updateQueryOpts();
        this._updateCo2ShowDom(); //更新碳足迹信息
        this._updateTaxiFare(); //更新打车费用
        this._triggerResultShown('editpath', this._result); //触发resultshown事件
        //opt# 200103151801 fix begin
        //add by zhangsq
        this._toggleExtend();   //切换显示添加终点
        //opt# 200103151801 fix end
        this._updateDragState();   //更新拖拽状态
    }
};
/**
 * 拖拽完成查询成功处理方法
 * @param data
 */
KNavsearch.prototype._dragedComplete = function(data)
{
    this._removeTempLine(); //删除临时线
    if(data && data.a && (data.a.length > 0))
    {
        var _obj = this._dragedTempData.o;
        var _idx = _obj._idx;
        var _type = this._dragedTempData.e.data.type;
        var _tabindex = this._getTabIndex(_type, _idx);
        _tabindex.sort();
        var _idxs = [];
        var _lines = [];
        var _lidx = [];
        var _tidx = [];
        this._parseResult(data);    //格式化查询数据
        this._triggerResultLoaded('editpath', this._result);    //触发resultloaded事件
        //删除线段和结果
        if(_type == 'm') //如果拖拽的是标注
        {
            _idxs = this._getLineIndex(parseInt(_idx));
            this._removeLine(_idxs);
            _tidx = this._removeResult(_idxs);
        }
        else if(_type == 'l') //如果拖拽的是线段
        {
            _idxs.push(_idx);
            this._removeLine(_idxs);
            _tidx = this._removeResult(_idxs);
            _idxs = new Array(_idx, _idx + 1);
        }
        //重新划线
        for(var j in data.a)
        {
            var a = data.a[j].a;
            var b = data.a[j].b;
            _lines.push(this._addLine(a, b, _idxs[j], this._result.a[j]));
            _lidx.push(_lines[_lines.length - 1]._idx);
        }
        //更改结果描述
        for(var i = 0; i < _tabindex.length; i++)
        {
            this._insertResultDesc(data, _tabindex[i], _tidx[i]);
        }
        //更新拖拽后的标注所在城市
        if(_type == 'm')
        {
            if(_obj._type == KPOIType.DRAGNODE || _obj._type == KPOIType.MIDNODE)   //拖拽点或途经点
            {
                _obj._city = data.c[1].f;
            }
            else if(_obj._type == KPOIType.NORMAL) //起/终点
            {
                _obj._city = data.c[_idx == 0 ? 0 : 1].f;
            }
        }
        //更新手风琴Tab
        if(_type == 'm' && _obj._type != KPOIType.DRAGNODE)
        {
            var tabidx = undefined;
            var text = undefined;
            if(_obj._type == KPOIType.MIDNODE) //途经点
            {
                tabidx = _tabindex[0] > _tabindex[1] ? _tabindex[0] : _tabindex[1];
                text = data.c[1].a;
            }
            else if(_obj._type == KPOIType.NORMAL) //起/终点
            {
                tabidx = _idx == 0 ? _tabindex[0] : _tabindex[0] + 1;
                text = data.c[_idx == 0 ? 0 : 1].a;
            }
            text = text || '未知路段';
            this._changeAccordionTab(tabidx, text);
        }
        if(_type == 'l')
        {
            this._addMarker('d', this._lineArray[_idxs[0]].latlons('end').getPid(), data.c[1].a || '未知路段', data.c[1].f, parseInt(_idx) + 1);  //添加新的标注
        }
        this._setMarkerLabel('draged', data);
        this._initAccordionIndex(_lidx); //初始化描述编号
        this._volumeBindDetailHerfEvent(_lidx);//绑定详细描述链接事件
        this._volumeBindResultEvent(_lidx);//绑定事件
        this._updateTitle();    //更新距离和时间
        this._updateCo2ShowDom(); //更新碳足迹信息
        this._updateTaxiFare(); //更新打车费用
        this._triggerAccordionTab(tabidx);  //打开相关选项卡
        this._triggerResultShown('editpath', this._result); //触发resultshown事件
        this._updateQueryOpts();    //更新queryopts
        this._syncSearchbox();  //同步更新Searchbox
        //opt# 200103151801 fix begin
        //add by zhangsq
        this._toggleExtend();   //切换显示添加终点DOM
        //opt# 200103151801 fix end
    }
	//添加data.a不存在时的容错
    if((!data || !data.a || data.a.length == 0) || this._dragedTempData.e.data.type == 'm')
    {
        this._correctionMarker(this._dragedTempData.o._idx);  //校正标注位置
    }
    if(this._dragedTempData.o._type == KPOIType.DRAGNODE)
    {
        this._dragedTempData.o.showLabel();
    }
    KMap.hideCursorTip();
    this._updateDragState();   //更新拖拽状态
    this._dragedSuccess = true;
};

/**
 * 更新marker拖拽状态
 */
KNavsearch.prototype._updateDragState = function()
{	
	var able = this._lineArray.length < this._LIMITNUM-1 ;
	for ( var i = 0; i < this._lineArray.length; i++) {
		this._lineArray[i].setEditable(able);
	}
	
//	var able = this._markerArray.length < this._LIMITNUM ;
//	for ( var i = 0; i < this._markerArray.length; i++) {
//		this._markerArray[i].setEditable(able);
//	}
};
/**
 * 拖拽中查询成功
 * @param data JSON 拖拽查询结果
 */
KNavsearch.prototype._dragingComplete = function(data)
{
    this._removeTempLine();
    if(this._dragedSuccess) return; //如果拖放请求已返回则不再执行此方法
    if(data && data.a && (data.a.length == 1 || data.a.length == 2))
    {
        this._setMarkerLabel('draging', data);
        for(var i in data.a)
        {
            var a = data.a[i].a;
            var b = data.a[i].b;
            var line = this._addTmpLine(a, b, undefined, true, data);
            if(i == 1)
            {
                this._dragRightLine = line;
            }
            else if(i == 0)
            {
                data.a.length > 1 ? (this._dragLeftLine = line) : (this._dragRightLine = line);
            }
        }
    }

    this._requesting = false;   //解除请求阻塞
};
/**
 * 切换显示添加终点
 */
KNavsearch.prototype._toggleExtend = function()
{
    if(this._markerArray.length >= this._LIMITNUM)
    {
        this._navResultExtendDom.hide();
    }
    else
    {
        this._navResultExtendDom.show();
    }
};
/**
 * 通过线段或标注的序号取得影响的Tab的序号
 * @param flag String m 标注  l 线段
 * @param idx Integer 序号
 * @return Integer[] 影响Tab的序号数组
 */
KNavsearch.prototype._getTabIndex = function(flag, idx)
{
    var result = [0];
    for(var i = 0; i < this._markerArray.length; i++)
    {
        if(this._markerArray[i]._type == KPOIType.MIDNODE)
        {
            result[0] += 1;
        }
        if(parseInt(this._markerArray[i]._idx) == parseInt(idx))
        {
            if(this._markerArray[i]._type == KPOIType.MIDNODE && flag == 'm')
            {
                result.push(result[0] - 1);
            }
            return result;
        }
    }
    return result;
};
/**
 * 取得标注的标题
 * @param etype String 事件类型 draged或draging
 * @param data Object 拖拽查询结果
 */
KNavsearch.prototype._setMarkerLabel = function(etype, data)
{
    if(data && data.c && data.c.length > 0)
    {
        var tmpData = etype == 'draged' ? this._dragedTempData : this._dragingTempData;
        if((tmpData.e.data.type == 'm' && tmpData.o._type != KPOIType.DRAGNODE) || (etype == 'draged' && tmpData.o._type == KPOIType.DRAGNODE))
        {
            var _type = tmpData.o._type;
            var idx = parseInt(tmpData.o._idx);
            this._markerArray[idx].POIName = data.c[idx == 0 ? 0 : 1].a || '未知路段';
            //this._markerArray[idx]._city = data.c[idx == 0 ? 0 : 1].f;
            if(_type)
            {
                $((tmpData.o._type == KPOIType.DRAGNODE ? 'span' : 'div') + '[mfg ="lbl"]', $(this._markerArray[idx].labelDom())).html(data.c[idx == 0 ? 0 : 1].a || '未知路段');
            }
        }
        else if(tmpData.e.data.type == 'l' || tmpData.o._type == KPOIType.DRAGNODE)
        {
            KMap.showCursorTip(data.c[1].a || '未知路段');
        }
    }
};
/**
 * 校正指定标注的位置
 * @param idx Integer 标注序号
 */
KNavsearch.prototype._correctionMarker = function(idx)
{
    /*if(idx != undefined)
    {*/
        var latlon = this._lineArray[this._getLineIndex(idx)[0]].latlons(idx == 0 ? 'begin' : 'end').getPid();
        var marker = this._markerArray[idx];
        if(latlon != marker.latlon().getPid())
        {
            marker.setLatlon(latlon);
        }
    /*}*/
};
/**
 * 生成拖拽查询的KQueryOptions
 * @param e KEventInfo
 * @param obj KOverlay 拖拽源对象
 * @param point MPoint 当前点
 */
KNavsearch.prototype._buildDragQueryOptions = function(e, obj, point)
{
    return this._buildQueryOptions(e.data.type, obj, point);
};
/**
 * 根据参数生成查询条件
 * @param type String 类型 m 拖拽点  l 拖拽线  r 撤消拖拽点
 * @param obj KOverlay 操作对象
 * @param point MPoint
 * @return KQueryOptions
 */
KNavsearch.prototype._buildQueryOptions = function(type, obj, point)
{
    var opts = KTools.copyOptions({type : KQueryType.navsearch, navorig : KTools.copyOptions({}, KPOInfo), navdest : KTools.copyOptions({}, KPOInfo)}, KQueryOptions);
    var idx = obj._idx; //取得当前标注的顺序
    if(type == 'm') //如果拖拽点是标注
    {
        if (idx == this._markerArray.length - 1)
        {
            opts.navorig.latlon = this._markerArray[idx - 1].latlon().getPid();
            opts.navdest.latlon = point.getPid();
        }
        else if (idx == 0)
        {
            opts.navorig.latlon = point.getPid();
            opts.navdest.latlon = this._markerArray[idx + 1].latlon().getPid();
        }
        else if (idx != -1)
        {
            opts.navorig.latlon = this._markerArray[idx - 1].latlon().getPid();
            opts.navorig.name = this._markerArray[idx - 1].POIName;
            opts.navdest.latlon = this._markerArray[idx + 1].latlon().getPid();
            opts.navdest.name = this._markerArray[idx + 1].POIName;
            opts.mid = [];
            opts.mid.push(KTools.copyOptions({latlon : point.getPid(), type : obj._type}, KPOInfo));
        }
    }
    else if(type == 'l')
    {
        opts.navorig.latlon = obj.latlons('begin').getPid();
        opts.navdest.latlon = obj.latlons('end').getPid();
        opts.mid = [];
        opts.mid.push(KTools.copyOptions({latlon : point.getPid(), type : KPOIType.DRAGNODE}, KPOInfo));
    }
    else if(type == 'r')
    {
        var preMarker = this._markerArray[idx - 1];
        var nextMarker = this._markerArray[idx + 1];
        opts.navorig.latlon = preMarker.latlon().getPid();
        opts.navorig.name = preMarker.POIName;
        opts.navdest.latlon = nextMarker.latlon().getPid();
        opts.navdest.name = nextMarker.POIName;
    }
    return opts;
};
/**
 * 添加线段
 * @param markers
 * @param leave
 * @param idx
 * @param data Object 查询结果
 * @param cover Boolean 是否覆盖已存在的线段
 */
KNavsearch.prototype._addLine = function(markers, leave, idx, data, cover)
{
    if(!KMap.isInitialized(this.options().mapcontainer)) return;
    cover = cover || false;
    var line = this._addTmpLine(markers, leave, idx, false, data);
    line.addDirMarkers(line._d.split(','), KTools.copyOptions({}, KDirMarkOptions));
    KEvent.bind(line, 'pathnode_dragstart', this._dragStart, {type : 'l'}, this);
    KEvent.bind(line, 'pathnode_draging', this._draging, {type : 'l'}, this);
    KEvent.bind(line, 'pathnode_dragend', this._draged, {type : 'l'}, this);
    this._insertLine(line, cover);
    return line;
    //this._lineArray.splice(idx, 1, line);
};
/**
 * 在线段数组中插入指定的线段
 * @param line
 */
KNavsearch.prototype._insertLine = function(line, cover)
{
    var idx = parseInt(line._idx == undefined ? this._lineArray.length - 1 : line._idx);
    this._lineArray.splice(idx, cover ? 1 : 0, line);
    if(!cover)
    {
        for(var i in this._lineArray)
        {
            if(i > idx)
            {
                this._lineArray[i]._idx = parseInt(this._lineArray[i]._idx) + 1;
            }
        }
    }
};
/**
 * 清除指定线段
 * @param idx Ingeter[]
 */
KNavsearch.prototype._removeLine = function(idx)
{
    for(var i in idx)
    {
        KMap.removeLine(this._lineArray[idx[i]]);
    }
    var tmp = [];
    for(var j = 0; j < this._lineArray.length; j++)
    {
        if($.inArray(j, idx) == -1) tmp.push(this._lineArray[j]);
    }
    this._lineArray = tmp.concat([]);
    for(var k = 0; k < this._lineArray.length; k ++)
    {
        this._lineArray[k]._idx = parseInt(k);
    }
};
/**
 * 添加临时线段
 * @param markers
 * @param leave
 * @param idx
 * @param temp Boolean
 * @pram data Object 查询结果
 */
KNavsearch.prototype._addTmpLine = function(markers, leave, idx, temp, data)
{
    var lineopts = KConfig.get(temp ? 'ln_lo_navd' : 'ln_lo_navs');
    lineopts.editable = true;
    lineopts.path = true;
    lineopts.group = KWidgetFlag.navsearch;
    var line = KLine.fromEncoded(markers, leave, lineopts);
    if(data)
    {
        line.time = parseInt(data.f);
        line.distance = parseInt(data.e);
        line._c = data.c;
        line._d = data.d;
        line._h = data.h;
    }
    if(idx != undefined) line._idx = parseInt(idx);
    KMap.addLine(line);

    return line;
};
/**
 * 初始化查询结果列表
 * @param data_b String
 */
KNavsearch.prototype._initAccordion = function(data_b)
{
    var _this = this;
    this._navResultSeletDom.html(data_b);
    var opts = KTools.copyOptions({collapse : true, initexpand : this._LIMITNUM}, KAccordionOptions);
    this._navAccordion = new KAccordion(this._navResultSeletDom.get(0), opts);  //初始化KAccordion组件
    
    this._getResultByNavType();
    //绑定避开高速选择框事件
    /* delete by zwq 
     * 去掉了返回结果中的避开高速复选框，避开高速改为页面radio模式
    if(this._navAccordion.tab(0))
    {
        $("input[type='checkbox']", this._navAccordion.tab(0).tabDom)
                .attr('checked', (this._noHightwayCheck ? 'checked' : false)).click(function(e){
            if ($(this).attr("checked"))
                {
                    _this._noHightwayClick = true;
                    _this._noHightwayCheck = true;
                    _this._queryopts.highway = true;
                }
                else
                {
                    _this._noHightwayClick = true;
                    _this._noHightwayCheck = false;
                    _this._queryopts.highway = false;
                }
                e.stopPropagation();
                _this.query(_this._queryopts);
        });
    }
    */
    this._bindDetailHerfEvent();    //绑定展开详情链接事件
    this._initAccordionIndex();     //初始化Accordion的index
    this._bindResultEvent();    //绑定结果列表相关事件
    //bug# 201103231628 fix begin
    //add by zhangsq
    !this._noHightwayClick &&this._displayPattern('summary');    //显示简要描述
    //bug# 201103231628 fix end
};
/**
 * 初始化Accordion的index
 * @param num Integer
 */
KNavsearch.prototype._initAccordionIndex = function(num)
{
    var _this = this;
    if(num)
    {
        if(typeof num == 'number')
        {
            //var c = $(this._navAccordion.tab(num).contentDom).attr('tIdx', num);
            var c = $('>div>dl', this._navAccordion.dom()).eq(num);
            var oc = $('>div>ol', this._navAccordion.dom()).eq(num);
            $(c).get(0)._line = this._lineArray[num];
            $(oc).get(0)._line = this._lineArray[num];
            $('>dt', c).each(function(i){
                $(this).attr('tIdx', i);
            });
            $('>dd', c).each(function(){
                $('>ul>li', this).each(function(j){
                    $(this).attr('tIdx', j);
                });
            });
            $('>li', oc).each(function(i){
                $(this).attr('tIdx', i);
            });
        }
        else if(num instanceof Array)
        {
            for(var i = 0; i < num.length; i++)
            {
                this._initAccordionIndex(parseInt(num[i]));
            }
        }
    }
    else
    {
        $('>div>dl', this._navAccordion.dom()).each(function(i){
            $(this).get(0)._line = _this._lineArray[i];
            $('>dt', this).each(function(j){
                $(this).attr('tidx', j);
                $('>ul>li',$(this).next('dd')).each(function(k){
                    $(this).attr('tidx', k);
                });
            });
        });
        $('>div>ol', this._navAccordion.dom()).each(function(i){
            $(this).get(0)._line = _this._lineArray[i];
            $('>li', this).each(function(j){
                $(this).attr('tidx', j);
            });
        });
    }
};
/**
 * 批量绑定展开详情链接事件
 * @param idxs
 * @param unbind
 */
KNavsearch.prototype._volumeBindDetailHerfEvent = function(idxs, unbind)
{
    for(var i = 0; i < idxs.length; i++)
    {
        this._bindDetailHerfEvent(parseInt(idxs[i]), unbind);
    }
};
/**
 * 绑定展开详情链接事件
 * @param num Integer
 * @param unbind Boolean 是否为解除事件
 */
KNavsearch.prototype._bindDetailHerfEvent = function(num, unbind)
{
    var _this = this;
    //var container = num ? this._navAccordion.tabs(num).contentDom : this._navAccordion.dom();
    //var container = num ? $('>div>dt', this._navAccordion.dom()).eq(num) : this._navAccordion.dom();
    var _href = $('>div>dl' + (num != undefined ? ':eq(' + num + ')' : '') + '>dt>p>a', this._navAccordion.dom()).unbind('click');
    if(!unbind)
    {
        _href.click(function(e){
            e.stopPropagation();
            var content = $(this).parent().parent().next();
            content.is(':visible') ? content.hide() : content.show();
            $(this).removeClass().addClass(_this._getClassName(content.is(':visible') ? 'SDO' : 'SDC'))
                    .html('<span></span>' + (content.is(':visible') ? '简要描述' : '展开详情'));
        });
    }
};
/**
 * 批量绑定结果列表事件
 * @param idxs
 * @param unbind
 */
KNavsearch.prototype._volumeBindResultEvent = function(idxs, unbind)
{
    for(var i = 0; i < idxs.length; i++)
    {
        this._bindResultEvent(parseInt(idxs[i]), unbind);
    }
};
/**
 * 绑定结果列表相关事件
 * @param num
 * @param unbind Boolean 是否解除事件绑定
 */
KNavsearch.prototype._bindResultEvent = function(num, unbind)
{
    var _this = this;
    //var container = num ? this._navAccordion.tabs(num).contentDom : this._navAccordion.dom();
    var container = this._navAccordion.dom();
    var _hstyle = this._getClassName('SRH');
    var _dt = $('>div>dl' + (num != undefined ? ':eq(' + num + ')' : '') + '>dt', container).unbind('hover').unbind('click');    //DT元素
    var _uli = $('>div>dl' + (num != undefined ? ':eq(' + num + ')' : '') + '>dd>ul>li', container).unbind('hover').unbind('click');   //简要描述LI元素
    var _oli = $('>div>ol' + (num != undefined ? ':eq(' + num + ')' : '') + '>li', container).unbind('hover').unbind('click');   //详细描述LI元素
    if(!unbind)
    {
        //绑定DT元素的相关事件
        _dt.hover(function(){
                _this._hiliteLine('s', $(this).parent().get(0)._line, parseInt($(this).attr('tIdx')));
                $(this).addClass(_hstyle);
        },
        function(){
            _this._resumeLine($(this).parent().get(0)._line);
            $(this).removeClass(_hstyle);
        }).bind('click', function(){
            _this._showInfoWindow(this, $('>p', this).html().replace(/<a[\s\S]*?<\/a>/gi, ''), 's', $(this).parent().get(0)._line, parseInt($(this).attr('tIdx')));
        });
        //绑定LI元素相关事件
        _uli.hover(function(){
            _this._hiliteLine('s', $(this).parent().parent().parent().get(0)._line, parseInt($(this).parent().parent().prev().attr('tIdx')), parseInt($(this).attr('tIdx')));
            $(this).addClass(_hstyle);
        },
        function(){
            _this._resumeLine($(this).parent().parent().parent().get(0)._line);
            $(this).removeClass(_hstyle);
        }).bind('click', function(){
            _this._showInfoWindow(this, $('>p', this).html(), 's', $(this).parent().parent().parent().get(0)._line, parseInt($(this).parent().parent().prev().attr('tIdx')), parseInt($(this).attr('tIdx')));
        });
        //绑定详细信息LI元素相关事件
        _oli.hover(function(){
            _this._hiliteLine('d', $(this).parent().get(0)._line, parseInt($(this).attr('tIdx')));
            $(this).addClass(_hstyle);
        },
        function(){
            $(this).removeClass(_hstyle);
            _this._resumeLine($(this).parent().get(0)._line);
        }).bind('click', function(){
            _this._showInfoWindow(this, $('>p', this).html(), 'd', $(this).parent().get(0)._line, parseInt($(this).attr('tIdx')));
        });
    }
};
/**
 * 高亮指定线的指定部分
 * @param type String 显示模式， 默认为's'  s - 简要模式  d - 详细模式
 * @param line KLine 线段
 * @param tidx Integer 简要模式中大步骤序号/详细模式中的步骤序号
 * @param lidx Integer 简要模式中小步骤序号
 */
KNavsearch.prototype._hiliteLine = function(type, line, tidx, lidx)
{
    var se = this._getStartAndEnd(type, line, tidx, lidx);
    line.hilite(se.start, se.end);
    return se;
};
/**
 * 恢复高亮的线段
 * @param line KLine 线段
 */
KNavsearch.prototype._resumeLine = function(line)
{
    if(line == undefined) line = this._lineArray;
    if(line instanceof Array)
    {
        for(var i = 0; i < line.length; i++)
        {
            this._resumeLine(line[i]);
        }
    }
    else
    {
        line.resume();
    }
};
/**
 * 取得指定线段的起终点
 * @param type String 显示模式，默认值为's'  s - 简要模式  d - 详细模式
 * @param line KLine 线段
 * @param tidx Integer  简要模式中大步骤序号/详细模式中的步骤序号
 * @param lidx Integer 简要模式中小步骤序号
 */
KNavsearch.prototype._getStartAndEnd = function(type, line, tidx, lidx)
{
    var d = line._d.split(',');
    var h = line._h.split(',');
    var c = line._c.split(',');

    var result = {start : undefined, end : undefined};
    if(lidx != undefined)
    {
        var tmp = h[tidx].replace(/'/g, '').split('-');
        result.start = parseInt(tmp[0]) == 0 ? 0 : (parseInt(d[parseInt(tmp[0]) + lidx]));
        result.end = (parseInt(tmp[0]) + lidx + 1) == d.length ? parseInt(c[1]) : (parseInt(d[parseInt(tmp[0]) + lidx + 1]));
    }
    else
    {
        if(type == 's')
        {
            result.start = tidx == 0 ? 0 : (parseInt(d[parseInt(h[tidx == 0 ? 0 : (tidx - 1)].split('-')[1]) + 1]));
            result.end = tidx == h.length - 1 ? parseInt(c[1]) : parseInt(d[parseInt(h[tidx].split('-')[1]) + 1]);
        }
        else if(type == 'd')
        {
            result.start = tidx == 0 ? 0 : parseInt(d[tidx]);
            result.end = tidx == d.length - 1 ? parseInt(c[1]) : parseInt(d[tidx + 1]);
        }
    }
    return result;
};
/**
 * 转换查询结果
 * @param data
 */
KNavsearch.prototype._parseResult = function(data)
{
    if(data.a)
    {
        for(var i in data.a)
        {
            data.a[i].h = data.a[i].h.replace(/(')(\d+)(')/g, '$1$2-$2$3');
        }
    }
    this._result = data;
};
/**
 * 更新碳足迹信息
 */
KNavsearch.prototype._updateCo2ShowDom = function()
{
    if (this._result.e)
    {
        var data_e = this._result.e;
        this._navCo2Content.html(data_e.f);
        this._navCo2ShowDistance.html((this._getTimeAndDistance().d / 1000).toFixed(2));
        $(">strong", $(">li[mfg='bscmoto']", this._navCo2ShowUI)).html(data_e.a);
        $(">strong", $(">li[mfg='bscebk']", this._navCo2ShowUI)).html(data_e.b);
        $(">strong", $(">li[mfg='bsctram']", this._navCo2ShowUI)).html(data_e.c);
        $(">strong", $(">li[mfg='bscbus']", this._navCo2ShowUI)).html(data_e.d);
        $(">strong", $(">li[mfg='bscsbw']", this._navCo2ShowUI)).html(data_e.e);
        $(">strong", $(">li[mfg='bsccar']", this._navCo2ShowUI)).html(data_e.f);
        $(">strong", $(">li[mfg='bsccoach']", this._navCo2ShowUI)).html(data_e.g);
        $(">strong", $(">li[mfg='bsctrain']", this._navCo2ShowUI)).html(data_e.h);
        $(">strong", $(">li[mfg='bscplain']", this._navCo2ShowUI)).html(data_e.i);
    }
};
/**
 * 更新打车费用
 */
KNavsearch.prototype._updateTaxiFare = function()
{
    this._navTaxiFareDom.html(this._result.taxi);
};
/**
 * 起点终点选择stationlist点击执行方法。
 * @param evt
 * @param w
 * @param q
 */
KNavsearch.prototype._navEnterSearch = function(evt, w, q)
{
    this._queryopts.navdest = q.dest;
    this._queryopts.navorig = q.orig;
    this._navStationList.clearMarkers(); //清除标记
    this._syncSearchbox(); //同步Searchbox
    this._innerQuery = true;
    this.query(this._queryopts);
};
/**
 *
 * @param queryots
 */
KNavsearch.prototype._gethash = function(queryots)
{
	var hashArray = [];
	hashArray.push(queryots.navorig.latlon + this._splitN + (queryots.navorig.name ? queryots.navorig.name : "未知路段"));
	if (queryots.mid) {
		for ( var i = 0; i < queryots.mid.length; i++) {
			hashArray.push((queryots.mid[i].type ? queryots.mid[i].type : KPOIType.DRAGNODE) + this._splitN
					+ queryots.mid[i].latlon + this._splitN + (queryots.mid[i].name ? queryots.mid[i].name : "未知路段"));
		}
	}
	hashArray.push(queryots.navdest.latlon + this._splitN + (queryots.navdest.name ? queryots.navdest.name : "未知路段"));
	return hashArray.join(this._split);
};
/**
 * 取得地图设置
 */
KNavsearch.prototype._getMapletOption = function()
{
    if (this.options().mapcontainer)
    {
        return '&h=' + $(this.options().mapcontainer).outerHeight() + '&w=' + $(this.options().mapcontainer).outerWidth() + '&z=' + KMap.zoom();
    }
    return "&h=" + 1084 + "&w=" + 502 + "&z=8";
};
/**
 * 取得request值中取得指定name的值
 * @param name
 */
KNavsearch.prototype._getRequestParam = function(name)
{
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
    var r = this._getMapletOption().substr(this._getMapletOption().indexOf("\?") + 1).match(reg);
    if (r != null) return r[2];
    return null;
};
/**
 * 动态设置hash值。
 * @param strUrl String
 */
KNavsearch.prototype._setQueryOptions = function(strUrl)
{
    var UrlArray = strUrl.split(this._split);
    var length = UrlArray.length;
    var origArray = UrlArray[0].split(this._splitN);
    var destArray = UrlArray[length - 1].split(this._splitN);
    var midArray = [];
    for (var i = 1; i < length - 1; i++)
    {
        var tempArray = UrlArray[i].split(this._splitN);
        midArray.push(KTools.copyOptions({name : tempArray[2], latlon : tempArray[1], type : tempArray[0]}, KPOInfo));
        //this._DRAGNUM = this._DRAGNUM + 1;//为了得到当前的拖拽点和途径点的数目。
    }
    return  KTools.copyOptions({mid : midArray, type : KQueryType.navsearch, navorig : KTools.copyOptions({name : origArray[1], latlon : origArray[0]}, KPOInfo), navdest : KTools.copyOptions({name : destArray[1], latlon : destArray[0]}, KPOInfo)}, KQueryOptions);
};
/**
 * 转换距离
 * @param streetDistance
 */
KNavsearch.prototype._convertDistance = function(streetDistance)
{
    var distance = streetDistance > 1000 ? (streetDistance / 1000).toFixed(2) + "公里" : parseInt(streetDistance) + "米";
    return distance == 'NaN米'  || distance == 'NaN公里' ? '' : distance;
};
/**
 * 计算所需时间  sec : 秒
 * @param sec
 */
KNavsearch.prototype._convertTime = function(sec) {
    if (sec < 60) {
        return  sec + "秒";
    }
    var times = Math.round(sec / 60); //minute
    if (times > 60) {
        var h = parseInt(times / 60);
        var d = times % 60;
        return h + "小时" + d + "分钟";
    }
    return times + "分钟";
};
/**
 * 显示InfoWindow
 * @param node Node 被点击的对象
 * @param content String 描述内容
 * @param type String 显示模式， 默认为's'  s - 简要模式  d - 详细模式
 * @param line KLine 线段
 * @param tidx Integer 简要模式中大步骤序号/详细模式中的步骤序号
 * @param lidx Integer 简要模式中小步骤序号
 */
KNavsearch.prototype._showInfoWindow = function(node, content, type, line, tidx, lidx)
{
    if(KMap.isInitialized(this.options().mapcontainer)) //检查地图是否初始化完成
    {
        this._resumeLine(); //恢复线段
        var se = this._hiliteLine(type, line, tidx, lidx);  //高亮线段
        var center = line.latlons()[se.start]; //取得高亮起点做为地图中心点
        KMap.setCenter(center, 13); //设置地图中心点
        var iwopts = KConfig.get('iw_iwo_wk', {t : content});//取得InfoWindow设置
        //err# 201103311612 fix begin
        //delete by zhangsq
        //KEvent.unbind(KMap, 'afteropeninfowindow', this._openedInfoWindow);
        //err# 201103311612 fix end
        KEvent.bind(KMap, 'afteropeninfowindow', this._openedInfoWindow, {opentype : KQueryType.navsearch, intedata : {type : type, line : line, se : se, node : node}}, this);    //绑定afteropeninfowindow事件
        KMap.openInfoWindow(center, iwopts);
    }
};
/**
 * InfoWindow打开处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图容器
 * @param overlay KOverlay 所属叠加物对象
 */
KNavsearch.prototype._openedInfoWindow = function(eventinfo, container, overlay)
{
    if(eventinfo.data.opentype == KQueryType.navsearch)
    {
        //err# 201103311612 fix begin
        //add by zhangsq
        KEvent.unbind(KMap, 'afteropeninfowindow', this._openedInfoWindow);
        //err# 201103311612 fix end
        var line = eventinfo.data.intedata.line;
        var se = eventinfo.data.intedata.se;
        //加载Loadding图片
        /*this._loadding = new Image();
        this._loadding.src = '/loadding.gif';*/
        this._bindInfowinEvent(eventinfo.data, overlay);    //绑定事件
        this._setSnapshot(line.latlons()[se.start], overlay);    //设置快照
    }
};
/**
 * 设置InfoWindow快照
 * @param latlon MPoint 中心点
 * @param infowin KOverlay
 */
KNavsearch.prototype._setSnapshot = function(latlon, infowin)
{
    var img = $('img[mfg="pic"]', infowin.iwcDom()).eq(0); //快照图片
    //img.attr('src', this._loadding.src).show(); //显示Loadding图片
    var icontainer = img.parent(); //快照图片容器
    var width = icontainer.width();
    var height = icontainer.height();
    var isize = new KSize(width, height); //快照大小
    KMap.snapshot({latlon : latlon, size : isize, zoom : 13, oncomplete : {fun : function(){
        img.attr('src', arguments[1]).show();
    }}});
};
/**
 * 绑定Infowindow事件
 * @param data Object 事件信息
 * @param infowin KOverlay
 */
KNavsearch.prototype._bindInfowinEvent = function(data, infowin)
{
    var _this = this;
    var prevNode = this._getNearNode('prev', data.intedata.node);
    var nextNode = this._getNearNode('next', data.intedata.node);
    var prev = $('>div>div>a[mfg="prev"]', infowin.iwcDom()).css({display : prevNode ? '' : 'none'}).unbind('click').bind('click', function(){
        _this._openInfoWindow(data.intedata.node, prevNode);
    });
    var next = $('>div>div>a[mfg="next"]', infowin.iwcDom()).css({display : nextNode ? '' : 'none'}).unbind('click').bind('click', function(){
        _this._openInfoWindow(data.intedata.node, nextNode);
    });
};
/**
 * 取得临近的结果节点
 * @param flag String prev 前一个  next 后一个
 * @param node Node 当前节点
 * @return Node 结果节点
 */
KNavsearch.prototype._getNearNode = function(flag, node)
{
    var noteType = this._getTagName(node);
    var parentType = this._getTagName($(node).parent());
    var result = undefined;
    var _idx = undefined;
    var tmp = undefined;
    var _childStr = flag == 'prev' ? 'last-child' : 'first-child';
    if(parentType == 'ol')  //详细描述
    {
        result = flag == 'prev' ? $(node).prev().get(0) : (flag == 'next' ? $(node).next().get(0) : undefined); //取相临元素
        if(result == undefined) //相临元素不存在
        {
            _idx = parseInt($(node).parent().get(0)._line._idx); //取得线段的序号
            if((flag == 'prev' && _idx == 0) || (flag == 'next' && _idx == this._lineArray.length - 1))
            {
                result = undefined;
            }
            else
            {
                result = $('>li:' + _childStr, $('>div>ol', this._navAccordion.dom()).eq(flag == 'prev' ? _idx - 1 : _idx + 1)).get(0);
            }
        }
    }
    else if(parentType == 'ul') //简要描述小步骤
    {
        result = flag == 'prev' ? $(node).prev().get(0) : (flag == 'next' ? $(node).next().get(0) : undefined); //取得相临元素
        if(result == undefined) //相临元素不存在
        {
            var _dd = $(node).parent().parent();
            var _dt = _dd.prev();
            _idx = parseInt(_dt.parent().get(0)._line._idx);//取得线段序号
            if((flag == 'prev' && (_dt.prevAll("dt").get(0) == undefined) && _idx == 0) || (flag == 'next' && (_dt.nextAll("dt").get(0) == undefined) && _idx == this._lineArray.length - 1))
            {
                result = undefined;
            }
            else
            {
                tmp = flag == 'prev' ? _dt.prev() : _dd.next();
                tmp = tmp.get(0) ? tmp : $('>dt:' + _childStr, $('>div>dl', this._navAccordion.dom()).eq(flag == 'prev' ? _idx - 1 : _idx + 1));
                result = this._getTagName(tmp) == 'dd' ? ($('>ul>li:' + _childStr, tmp).get(0)) : (tmp.next().get(0) && this._getTagName(tmp.next()) == 'dd' ? $('>ul>li:' + _childStr, tmp.next()).get(0) : tmp.get(0));
            }
        }
    }
    else if(parentType == 'dl') //简要描术大步骤
    {
        result = flag == 'prev' ? $(node).prev().get(0) : $(node).next().get(0); //取得相临元素
        if(result == undefined) //相临元素不存在
        {
            _idx = parseInt($(node).parent().get(0)._line._idx);
            if((flag == 'prev' && _idx == 0) || (flag == 'next' && _idx == this._lineArray.length - 1))
            {
                result = undefined;
            }
            else
            {
                tmp = $('>dt', $('>div>dl', this._navAccordion.dom()).eq(flag == 'prev' ? _idx - 1 : _idx + 1));
                tmp = flag == 'prev' ? tmp.last() : tmp.first();
                result = tmp.next().get(0) && this._getTagName(tmp.next()) == 'dd' ? ($('>ul>li:' + _childStr, tmp.next()).get(0)) : tmp.get(0);
            }
        }
        if(result != undefined)
        {
            result = this._getTagName(result) == 'dd' ? ($('>ul>li:' + _childStr, result).get(0)) : ($(result).next().get(0) && this._getTagName($(result).next()) == 'dd' ? ($('>ul>li:' + _childStr, $(result).next()).get(0)) : result);
        }
    }
    return result;
};
/**
 * 取得节点的标签名称
 * @param node Node
 * @return String 标签名称
 */
KNavsearch.prototype._getTagName = function(node)
{
    return $(node).get(0).tagName.toLowerCase();
};
/**
 * 打开InfoWindow
 * @param prevNode Node 前一个打开InfoWindow的节点
 * @param node Node 打开InfoWindow的节点
 */
KNavsearch.prototype._openInfoWindow = function(prevNode, node)
{
    if(!node) return;
    var tag = this._getTagName($(node).parent());
    var parent = tag == 'ul' ? $(node).parent().parent().parent() : $(node).parent();
    var type = tag == 'ul' || tag == 'dl' ? 's' : 'd';
    var tidx = tag == 'ul' ? parseInt($(node).parent().parent().prev().attr('tIdx')) : parseInt($(node).attr('tIdx'));
    var lidx = tag == 'ul' ? parseInt($(node).attr('tIdx')) : undefined;
    this._hiliteDes(prevNode, node);    //高亮描述
    this._showInfoWindow(node, $('>p', node).html(), type, parent.get(0)._line, tidx, lidx);
};
/**
 * 高亮描述中的节点
 */
KNavsearch.prototype._hiliteDes = function(prevNode, node)
{
    if(!node) return;
    var tag = this._getTagName($(node).parent());
    var parent = tag == 'ul' ? $(node).parent().parent().parent() : $(node).parent();
    var div = parent.parent();
    var tabidx = 0;
    var cla = this._getClassName('SRH');
    KTools.scrollIntoView(node, $(this._navAccordion.dom()).parent().parent().get(0));
    //取得Tab序号
    $('>div', this._navAccordion.dom()).each(function(i){
        if(this == div.get(0)) tabidx = i;
    });
    //if(div.is(':hidden')) this._navAccordion.select(tabidx);    //如果选项卡关闭则打开选项卡
    this._triggerAccordionTab(tabidx);  //打开选项卡
    if(tag == 'ul')
    {
        var content = $(node).parent().parent();
        content.show();
        $('>p>a', content.prev()).removeClass().addClass(this._getClassName('SDO')).html('<span></span>简要描述');
    }
    $(node).addClass(cla);
    $(prevNode).removeClass(cla);
};
/**
 * 打开手风琴Tab
 * @param tidx Integer[]/Integer
 * @param action Boolean true 打开   false 关闭  默认为true
 */
KNavsearch.prototype._triggerAccordionTab = function(tidx, action)
{
    action = action == undefined ? true :action;
    if(tidx instanceof Array)
    {
        for(var i in tidx)
        {
            this._triggerAccordionTab(parseInt(tidx[i]), action);
        }
    }
    else if(typeof tidx == 'number')
    {
        if($(this._navAccordion.tab(tidx).contentDom).is(action ? ':hidden' : ':visible')) this._navAccordion.select(tidx);
    }
};
/**
 * 检查线路是否支持公交或机票
 * @param flag String b 是否支持公交   a 是否支持机票
 * @return Boolean
 */
KNavsearch.prototype._chkSupport = function(flag)
{
    if(flag == 'a')
    {
        return (this._getTimeAndDistance().d > 500000 ? true : false);
    }
    else if(flag == 'b')
    {
        var city = undefined;
        for(var i in this._markerArray)
        {
            city = city ? city : this._markerArray[i]._city;
            if(city != this._markerArray[i]._city) return false;
        }
        return true;
    }
    return false;
};
/**
 * 判断当前选中的驾车模式，设置相应变量，用于设置请求参数 added by zwq 
 * @param 
 * @return 
 */
KNavsearch.prototype._getResultByNavType = function()
{
	var _this = this;
	$(">input", this._navTypeDom).eq(0).unbind("click").click(function(e) {
		_this._navTypeCheck = 0;
		_this._navTypeByEMail = 0;
		_this._navPrintByType = 0;
		_this.query(_this._queryopts);
	});
	
	$(">input", this._navTypeDom).eq(1).unbind("click").click(function(e) {
		_this._navTypeCheck = 1;
		_this._navTypeByEMail = 1;
		_this._navPrintByType = 1;
		_this.query(_this._queryopts);
	});
	
	$(">input", this._navTypeDom).eq(2).unbind("click").click(function(e) {
		_this._navTypeCheck = 2;
		_this._navTypeByEMail = 2;
		_this._navPrintByType = 2;
		_this.query(_this._queryopts);
	});
	
}
/**
 * 右键添加起终点
 * @param flag
 * @param latlon
 * @param name
 * @param city
 * @param idx
 * @uncrunch
 */
KNavsearch.prototype.menuaddMarker = function(flag, latlon, name, city, idx)
{
    if(!KMap.isInitialized(this.options().mapcontainer)) return;
    if(KMap.getLines().length === 0){
		KMap.clearMarker("bs_search_s");
	}
    name = (!name) || name == '' ? '未知路段' : name;

    if (flag === 's') {
        this.menuSmarker && KMap.removeMarker(this.menuSmarker);
    } else {
        this.menuEmarker && KMap.removeMarker(this.menuEmarker);
    }
    if(!$(this._navstationListDom).is(":hidden")){
        this._navStationList._dragEndMarker({data:flag},null,new MPoint(latlon),name);
    }else{
        this._addMarker(flag,latlon,name, city, idx);
    }
    if(this.menuSmarker && this.menuEmarker){
    	var opts = KTools.copyOptions({type : KQueryType.navsearch, highway : 0, navorig : KTools.copyOptions({}, KPOInfo), navdest : KTools.copyOptions({}, KPOInfo)}, KQueryOptions);
	    opts.navorig.latlon = this.menuSmarker._point.getPid();

	    if(flag === "s"){
	    	opts.navorig.name = name;
	    }else{
	    	opts.navorig.name = this.menuSmarker.POIName;
	    }
	    opts.navorig.type = KPOIType.NORMAL;
	    opts.navorig.city = this.menuSmarker._city;

	    opts.navdest.latlon = this.menuEmarker._point.getPid();

	    if(flag === "e"){
	    	opts.navdest.name = name;
	    }else{
	    	opts.navdest.name =  this.menuEmarker.POIName;
	    }

	    opts.navdest.city =  this.menuEmarker._city;

	    opts.navdest.type = KPOIType.NORMAL;
	    this._queryopts = opts;
	    this.query(this._queryopts);
	    
    }
};
/**
 * 获取当前线路起终点
 * @param type
 * @returns {{s: *, e: *}}
 * @uncrunch
 */
KNavsearch.prototype.getStartAndEnd = function(type){
    this.menuSmarker && (this.menuSmarker.city = this.menuSmarker._city);
    this.menuEmarker && (this.menuEmarker.city = this.menuEmarker._city);
    return {s:this.menuSmarker,e:this.menuEmarker}
};
/**
 * 删除当前线路起终点
 * @param type
 * @returns {{s: *, e: *}}
 * @uncrunch
 */
KNavsearch.prototype.removeStartAndEnd = function(type){
    KMap.clear(KWidgetFlag.navsearch);
    this.menuSmarker = null;
    this.menuEmarker = null;
};

/**
 * 清除所有的叠加物
 * @param type {String} “trans”, "busline","bustation", "all"
 * @return
 */
KNavsearch.prototype._clearAllOverlay = function(type){
	if(this._hLine){
		this._hLine.resume();
		this._hLine = undefined;
	}
    var flag = 'bs';
    var types = {
        trans: "_search_s,_search_l,_search_l_w,_search_s_all,_hoverlines",
        busline: "_line,_line_s,_line_e",
        bustation: "_station1,_station2"
    };
    types.all = types.trans + "," + types.busline + "," + types.bustation;
    var groups = (types[type || "all"] || types.all).split(",");
    $.each(groups, function(index, value){
        KMap.clear(flag + value);
    });
};

/*
 搜索框组件。
 作者：xionggq  fuyg
 版本：1.0.8
 创建时间：2010-02-24
 最后修改时间：2010-02-24 15:40
 ============================================
 『修改历史』
 opt#   1006291032
 新增当一级查询分类选项卡选中状态发生改变时触发"tabchanged"事件。
 
opt# 1006291318 
 新增当二级查询分类选项卡选中状态发生改变时触发"secondcatchanged"事件。

bug# 1006301022
dependent方法中将JQuery修改为jQuery

opt# 1006301645
对_getCurrQueryOpts方法中if下的inputValue进行容错处理

opt# 1010261200
增加对自定义起（终）点的特殊支持

opt# 1011241025
增加对输入校验控制选项(KSearchboxOptions.check)的支持
opt#1011301329
优化自定义搜索框提示文字，可从搜索框的value属性中读取
bug#1011301338
修正一级选项卡拆分使用时，功能示例从cookie中读取出错的bug
bug#1011301912
修正提示文字作为查询关键字的bug
opt#201012061514
增加对KSearchbox.defaultdemo的支持
bug#201012201357
Enter键时ie下无法直接查询
bug#201012211654
对KSearchbox.defaultdemo的支持有bug
opt#201012222032
增加对txtlen和demos的支持
opt#201012271855
1.增加对demohint的支持
2.根据新需求调整功能示例区

 */
var KSearchbox = KClass.create("KSearchbox", KWidget);

KSearchbox.conf =
{
    CLASSNAME :
    {
        //搜索框顶层容器样式。
        SHX : "_shx"
        //公交换乘查询起终点调换按钮样式。
        ,SWO: "_shx_swo"
        //公交换乘查询起终点调换按钮被点击后的样式。
        ,SWD: "_shx_swd"
        //搜索示例容器样式。
        ,TIP : "_shx_tip"
        //每个选项卡下的搜索按钮样式。
        ,SMT : "_shx_smt"
        ,GRAY : "_shx_gray"
    }
};
/**
 * 构造方法
 * @param container
 * @param opts
 */
KSearchbox.initialize = function(container, opts)
{
    var _this = this;
    this._dom = $(container).get(0);
    this._domAll = $(container);
    this._opts = KTools.copyOptions(opts, KSearchboxOptions);
    this._oldOpts = this._opts.theme;
    this.setTheme(this.options().theme);
    this._currentItem = null;
    this._secondHeader = null;
    this._tipContentHeader = null;
    this._busSecondTabs = null;
    this._lcCityList = null;
    this._busChangeCityList = null;
    this._busLineCityList = null;
    this._busStationCityList = null;
    this._tipContentItems = [];
    this._queryOptions = KTools.copyOptions({},KQueryOptions);
    //功能示例显示的个数
    this._demoSum = {
		ls : 10,// 本地搜示例个数
		bl : 10,// 公交线路示例个数
		bz : 10,// 公交站点示例个数
		bo : 10,// 公交换乘起点示例个数
		no : 10,// 驾车导航起点示例个数
		zc : 10// 周边搜示例个数
	};
    if (opts.demos) {
		for ( var i in opts.demos) {
			var sum = opts.demos[i];
			if (typeof sum == "number" && sum > -1) {
				this._demoSum[i] = sum;
			}
		}
	}
    //
    this._demohint = (opts.demohint || "推荐搜索：,历史记录：").split(",");
	//
    //this._supportDefaultDemo();
    //
    this._navorigCity = undefined;
    this._navdestCity = undefined;
    this._domAll.addClass(this.options().theme + "_shx");
    this._firstHeader = $(">div", this._domAll).eq(0);
    //
    this._tipContentHeader = $(">div", this._domAll).eq(1);
    if(this._tipContentHeader.length){
    	this._tipContentHeader.addClass(this.options().theme+KSearchbox.conf.CLASSNAME.TIP);
    }
  
    this._mfgArray = ["ls","bl","bz","bo","bd","no","nd","zc","zk"];
    this._tipArray = ["请输入地名或其他关键字","请输入线路名","请输入站点名","起点：请输入地名或建筑物名","终点：请输入地名或建筑物名","起点：请输入地名或城市名称","终点：请输入地名或城市名称","请输入地名","请输入查询内容"];
    
    //周边搜关键字提示（类型词）
    this._zkInputTip = ["酒店","餐厅","超市","KTV","加油站","银行","ATM"];
    if (opts.hints) {
		var i = -1;
		for ( var hint in opts.hints) {
			i = this._indexArray(this._mfgArray, hint);
			if (i > -1) {
				this._tipArray[i] = opts.hints[hint];
			}
			i = -1;
		}
	}
    var enterKeyHandler = function(event){
    	if($.browser.msie){
    		if(event.keyCode===13){
    			event.preventDefault();
    			$(this.form).trigger("submit");
    		}
    	}
    };
    this._lsInputDom = $("input[mfg='ls']", this._domAll);
    this._blInputDom = $("input[mfg='bl']", this._domAll);
    this._bzInputDom = $("input[mfg='bz']", this._domAll);
    this._boInputDom = $("input[mfg='bo']", this._domAll).bind("keyup", enterKeyHandler);
    this._bdInputDom = $("input[mfg='bd']", this._domAll).bind("keyup", enterKeyHandler);
    this._noInputDom = $("input[mfg='no']", this._domAll).bind("keyup", enterKeyHandler);
    this._ndInputDom = $("input[mfg='nd']", this._domAll).bind("keyup", enterKeyHandler);
    this._zcInputDom = $("input[mfg='zc']", this._domAll).bind("keyup", enterKeyHandler);
    this._zkInputDom = $("input[mfg='zk']", this._domAll).bind("keyup", enterKeyHandler);
    
    this._lsbimg = $("input[mfg='lsb']", this._domAll);
    this._blbimg = $("input[mfg='blb']", this._domAll);
    this._bzbimg = $("input[mfg='bzb']", this._domAll);
    this._bsbimg = $("input[mfg='bsb']", this._domAll);
    this._nsbimg = $("input[mfg='nsb']", this._domAll);
    this._zsbimg = $("input[mfg='zsb']", this._domAll);
    this._imgArray = [this._lsbimg,this._blbimg,this._bzbimg,this._bsbimg,this._nsbimg,this._zsbimg];

    
    //各选项卡中的搜索，是否被执行过，默认false--没有执行过
    this._lsFlag = false;
    this._bsFlag = false;
    this._blFlag = false;
    this._bstFlag = false;
    this._navsFlag = false;
    this._nsFlag = false;
    
    
    this._input = {};
    this._inputSuggestArray = [];
    //创建一级选项卡
    this._firstTabs = new KStdTabs(this._firstHeader);
	/*****************************************/ 
    var firstTabItems = this._firstTabs.tabs();
    this._lsTabIndex = this._bsTabIndex = this._navsTabIndex = this._nsTabIndex = undefined; 
    $.each(firstTabItems, function(index, item) {
		switch (item.kvalue) {
			case "ls":
				_this._lsTabItem = item;
				break;
			case "bs":
				_this._bsTabItem = item;
				break;
			case "navs":
				_this._navsTabItem = item;
				break;
			case "ns":
				_this._nsTabItem = item;
				break;
		}
	});
    //
    var $contentDiv; 
    if(this._lsTabItem){
    	$contentDiv = $(this._lsTabItem.contentDom);
    	this._lcCityDom = $(">form>div", $contentDiv);
    }
    if (this._bsTabItem) {
    	$contentDiv = $(this._bsTabItem.contentDom);
		this._busChangeCityListDom = $("form>div", $contentDiv).eq(0);
		this._busChangeADom = $("form>span a", $contentDiv).eq(0);
		this._busLineCityListDom = $("form>div", $contentDiv).eq(1);
		this._busStationCityListDom = $("form>div", $contentDiv).eq(2);
		this._busSecondHeaderDom = $(">div", $contentDiv);
		this._busChangeIDomArray = $(">ul input", this._busSecondHeaderDom);
		// 这是一个A标签，给它添加一个tabindex="-1"的属性要么使用跳格键时有点问题
		this._busChangeADom.attr("tabindex", "-1");
		this._busChangeADom.click(function(e) {
			_this._swapFg("bo", "bd", $(this));
		});
	}
    //
    if (this._navsTabItem) {
    	$contentDiv = $(this._navsTabItem.contentDom);
		this._navChangeADom = $("form>span a", $contentDiv).eq(0).addClass(this.options().theme+KSearchbox.conf.CLASSNAME.SWO);
		this._navChangeADom.attr("tabindex", "-1").click(function(){
			_this._swapFg("no", "nd", $(this));
		});
	}
    //
    if (this._nsTabItem) {
    	$contentDiv = $(this._nsTabItem.contentDom);
		this._nbCityListDom = $("form>div", $contentDiv).eq(0);
	}
    
    
    /****************************************/
    this._initInputFg();
    //
	KEvent.bind(_this._firstTabs, "selected", function(eventinfo, widget, oldItem, currentItem) {
		_this._setSuggestEventHandle();
		 switch (currentItem.kvalue)
		    {
		        case 'bs':
		        case 'navs': _this._setnavbusValue(); break;
		        case 'ns': _this._setzkValue(); break;
		    }
		_this._updateDemos(currentItem.kvalue);
		// opt# 2010-6-29 trigger "tabchanged" event
		KEvent.trigger(_this, "tabchanged", _this, _this.tab(), _this.secondcat());
	});
	KEvent.bind(_this._firstTabs, "funtab", function(eventinfo, widget, tabitem) {
		KEvent.trigger(_this, "funtab", _this, tabitem);
	});

    $("form", _this._domAll).each(function() {
		$(this).submit(function(e) {
			e.preventDefault();
			if (_this._checkGrayImg()) {
				// e.stopPropagation();
				_this._submitQuery();
			}
		});
	});


    this._LCOOKIE = 10;
    this._CSPLIT = ",";
    //
    this._mfgInputSelect();
    this._updateThemeOptions();
    this._updateInputSuggestUrl();
    this._updateDemopos();
    this._updateDemolist();
    this._updateCitylist();
    this._suggestFun({data:{dom:this._lsInputDom,num:0}});
    this._updateSuggest();
    this._updateDemos(firstTabItems[0].kvalue);
    
};
/***********************************************************************************************************************
 * 复写继承自KObject的接口
 **********************************************************************************************************************/
/**
 * 释放当前对象的所有资源
 * @uncrunch
 */
KSearchbox.prototype.finalize = function()
{
    var _this = this;
    //finalize KStdTabs Object(s)
    if(_this._busSecondTabs&&_this._busSecondTabs.finalize){
    	_this._busSecondTabs.finalize();
    }
    if(_this._firstTabs&&_this._firstTabs.finalize){
    	_this._firstTabs.finalize();
    }
    //finalize KStdSuggest Object(s)
    if(_this._inputSuggestArray){
    	var i=0, temp=null;
    	//finalize KStdSuggeest object
    	for(i=_this._inputSuggestArray.length-1;i>=0;i--){
    		temp=_this._inputSuggestArray[i];
    		if(temp&&temp.finalize){
    			temp.finalize();
    		}
    	}
    	//
    	delete _this._inputSuggestArray;
    }
    //finalize KCityList Object(s)
   if(_this._nbCityList&&_this._nbCityList.finalize){
    	_this._nbCityList.finalize();
    } 
    if (_this._busStationCityList && _this._busStationCityList.finalize) {
    	 _this._busStationCityList.finalize();
	}
	if (_this._busLineCityList && _this._busLineCityList.finalize) {
		 _this._busLineCityList.finalize();
	}
	if (_this._busChangeCityList && _this._busChangeCityList.finalize) {
		 _this._busChangeCityList.finalize();
	}
	if (_this._lcCityList && _this._lcCityList.finalize) {
		 _this._lcCityList.finalize();
	}
    //
    KEvent.clear(_this._busChangeADom);
    KEvent.clear(_this._navChangeADom);
    $("form", _this._domAll).each(function()
    {
        KEvent.clear($(this));
    });
    KWidget.prototype.finalize.call(this);

};


/***********************************************************************************************************************
 * 复写继承自KWidget的接口
 **********************************************************************************************************************/
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KSearchbox.prototype.cnname = function()
{
    return "搜索框组件";
};
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KSearchbox.prototype.version = function()
{
    return "1.0.8";
};
/**
 * 返回组件特征字符串
 *  @uncrunch
 */
KSearchbox.prototype.flag = function()
{
    return "searchbox";
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KSearchbox.prototype.dependent = function()
{
   return [ KCityInfo, KCityList, KClass, KEvent, KManager, KObject, KPOInfo, KPosition, KQuery, KQueryOptions,
			KQueryType, KSearchboxOptions, KStdSuggeest, KStdSuggest, KStdTabs, KTools, KUrlHash, KWidget, KWidgetFlag,
			jQuery ];
};
/**
 * 设置搜索框组件的配置选项
 * @param opt
 * @uncrunch
 */
KSearchbox.prototype.setOptions = function(opt)
{

    this._setOptions(opt);
};
/**
 *     设置搜索框组件的样式方案
 * @uncrunch
 */
KSearchbox.prototype.setTheme = function(scheme)
{
    var newTheme = {"theme":scheme};
    this._setOptions(newTheme);
};
///**
// * 通知搜索框组件重新布局
// * @uncrunch
// */
//KSearchbox.prototype.layout = function()
//{
//
//};
///**
// * 返回搜索框组件 Dom 对象
// * @uncrunch
// */
//KSearchbox.prototype.dom = function()
//{
//    return this._domAll;
//};
/***********************************************************************************************************************
 * 公开接口
 **********************************************************************************************************************/
/**
 *  禁用 types 指定的一个或多个功能搜索按钮，忽略此参数将禁用所有按钮。
 * @overwrite
 * @uncrunch
 */
KSearchbox.prototype.disableQuery = function(type) {
	if (typeof type == "undefined") {
		var length = this._imgArray.length;
		for ( var i = 0; i < length; i++) {
			this._setGrayImg(this._imgArray[i]);
		}
	} else {
		var length = type.length;
		for ( var i = 0; i < length; i++) {
			var domlength = this._getImgDom(type[i]).length;
			for ( var j = 0; j < domlength; j++) {
				this._setGrayImg(this._getImgDom(type[i])[j]);
			}
		}
	}
};
/**
 * 启用 types 指定的一个或多个功能搜索按钮，忽略此参数将启用所有按钮。
 * 
 * @overwrite
 * @uncrunch
 */
KSearchbox.prototype.enableQuery = function(type) {
	if (typeof type == "undefined") {
		var length = this._imgArray.length;
		for ( var i = 0; i < length; i++) {
			this._setbackImg(this._imgArray[i]);
		}
	} else {
		var length = type.length;
		for ( var i = 0; i < length; i++) {
			var domlength = this._getImgDom(type[i]).length;
			for ( var j = 0; j < domlength; j++) {
				this._setbackImg(this._getImgDom(type[i])[j]);
			}
		}
	}
};
/**
 * 返回二级查询分类。
 * 
 * @uncrunch
 */
KSearchbox.prototype.secondcat = function() {
	if (this.tab().kvalue == KWidgetFlag.busearch) {
		var tabsIndex = this._busSecondTabs.current().index;
		var tabsItem = this._busSecondTabs.current();
		var secondTabsLiDom = $(">ul>li", this._busSecondHeaderDom).eq(tabsIndex);
		if (tabsItem.kvalue == -1 || typeof tabsItem.kvalue == "undefined") {
			tabsItem.kvalue = secondTabsLiDom.attr("kvalue");
		}
		if (tabsItem.text == "" || typeof tabsItem.text == "undefined") {
			tabsItem.text = secondTabsLiDom.attr("text");
		}
		return tabsItem;
	} else {
		return null;
	}
};
/**
 * 返回被选择的选项卡。
 * 
 * @uncrunch
 */
KSearchbox.prototype.tab = function()
{
    var tabsIndex = this._firstTabs.current().index;
    var tabsItem = this._firstTabs.current();
    var firstTabsLiDom = $(">ul>li", this._firstHeader).eq(tabsIndex);
    if (tabsItem.kvalue == -1 || typeof tabsItem.kvalue == "undefined")
    {
        tabsItem.kvalue = firstTabsLiDom.attr("kvalue");
    }
    if (tabsItem.text == -1 || typeof tabsItem.text == "undefined")
    {
        tabsItem.text = firstTabsLiDom.attr("text");
    }

    return tabsItem;
};
/**
 * 根据 opts 进行查询。如果启用 only2text ，则表示只是同步相关查询文本输入框中的值，而不进行查询操作。
 * @return String
 * @uncrunch
 */
KSearchbox.prototype.query = function(opts, only2text)
{
    var _this = this;
    var result = this._setQueryOptions(opts);
    if (!only2text && !result)
    {
        this._submitQuery();
    }
};
/**
 * 获取当前查询状态的可见的input文本输入元素
 * @return {Array} 包含input文本输入元素的数组
 * @uncrunch
 */
KSearchbox.prototype.getCurrInputs = function(){
	return $("input[mfg]:text:visible", this._dom).get();
}

/***********************************************************************************************************************
 * 私有方法
 **********************************************************************************************************************/
KSearchbox.prototype._initInputFg = function() {
	var grayClass = this.options().theme + KSearchbox.conf.CLASSNAME.GRAY, length = this._mfgArray.length, $input, val;
	for ( var i = 0; i < length; i++) {
		$input = $("input[mfg='" + this._mfgArray[i] + "']", this._domAll);
		if ($input.length) {
			val = $input.val();
			(val && val !== this._tipArray[i]) ? $input.removeClass(grayClass) : $input.addClass(grayClass).val(
					this._tipArray[i]);
		}
	}
};

KSearchbox.prototype._setSuggestEventHandle = function()
{
    var _this = this;
    switch (_this.tab().kvalue)
    {
        case KWidgetFlag.localsearch:
            _this._suggestFun({data:{dom:_this._lsInputDom,num:0}});
            break;
        case KWidgetFlag.busearch:
            var secondcat = _this.secondcat().kvalue;
            if (secondcat == KQueryType.busearch)
            {
                _this._suggestFun({data:{dom:_this._boInputDom,num:3}});
                _this._suggestFun({data:{dom:_this._bdInputDom,num:4}});

            }
            else if (secondcat == KQueryType.busline)
            {
                _this._suggestFun({data:{dom:_this._blInputDom,num:1}});
            } else if (secondcat == KQueryType.bustation)
            {
                _this._suggestFun({data:{dom:_this._bzInputDom,num:2}});
            }
            break;
        case KWidgetFlag.navsearch:
            _this._suggestFun({data:{dom:_this._noInputDom,num:5}});
            _this._suggestFun({data:{dom:_this._ndInputDom,num:6}});

            break;
        case "ns":
            _this._suggestFun({data:{dom:_this._zcInputDom,num:7}});
            _this._suggestFun({data:{dom:_this._zkInputDom,num:8}});

            break;
        default :
    }
};
/**
 * 设置搜索框组件的配置选项
 * @param opt
 */
KSearchbox.prototype._setOptions = function(opt)
{
	var _this = this;
    this._oldOpts = this._opts.theme;
    var diffOpts = KTools.compareOptions(this._opts, opt);
    $.each(diffOpts, function(name, value) {
        switch (name)
        {
            case 'theme':
                _this._setOption({'theme':value});
                _this._updateThemeOptions();
                break;
            case 'suggest':
                _this._setOption({'suggest':value});
                _this._updateSugOptions();
                break;
            case 'demolist':
                _this._setOption({'demolist':value});
                _this._updateDemolist();
                break;
            case  'demopos':
                _this._setOption({'demopos':value});
                _this._updateDemopos();
                break;
            case  'citylist':
                _this._setOption({'citylist':value});
                _this._updateCitylist();
                break;
            case  'sugopts':
                _this._setOption({'sugopts':value});
                _this._updateSuggest();
                break;
            case  'cylopts':
                _this._setOption({'citylist':value});
                _this._updateCitylist();
                break;
            case 'cityfun':
                _this._setOption({'cityfun' : value});
                break;
            case 'check':
            	if (value !== 0 && value !== 1 && value !== 2) {
					value = 0;
				}
            	_this._setOption({'check':value});
            default:
        }
    });
};
/**
 * 更新搜索框组件的 options项
 * @param opt
 */
KSearchbox.prototype._updateOptions = function(opt)
{
    this._oldOpts = this._opts.theme;
    this._opts = KTools.copyOptions(opt, this._opts);
};





/**
 * 返回查询条件。
 * @uncrunch
 */
KSearchbox.prototype.queryOptions = function()
{
    //this._getCurrQueryOpts();
    return this._queryOptions;
};
/**
 * 更新参数theme时动态修改组件的样式
 */
KSearchbox.prototype._updateThemeOptions = function() {
	var _this = this;
	this._domAll.removeClass(this._oldOpts + KSearchbox.conf.CLASSNAME.SHX).addClass(
			this.options().theme + KSearchbox.conf.CLASSNAME.SHX);
	if (this._busChangeADom) {
		this._busChangeADom.removeClass(this._oldOpts + KSearchbox.conf.CLASSNAME.SWO).addClass(
				this.options().theme + KSearchbox.conf.CLASSNAME.SWO);
	}
	if (this._navChangeADom) {
		this._navChangeADom.removeClass(this._oldOpts + KSearchbox.conf.CLASSNAME.SWO).addClass(
				this.options().theme + KSearchbox.conf.CLASSNAME.SWO);
	}
	$("input[type='image']", this._domAll).each(function() {
		$(this).removeClass(_this._oldOpts + KSearchbox.conf.CLASSNAME.SMT).addClass(
						_this.options().theme + KSearchbox.conf.CLASSNAME.SMT);
	});
	/*
	 * var mfgArray =["ls","bl","bz","bo","bd","no","nd","zc","zk"]; var length = mfgArray.length; for(var i=0;i<length;i++) {
	 * if(this._input[mfgArray[i]]) { $("input[fg='"+mfgArray[i]+"']", this._domAll).removeClass(this._opts.theme +
	 * KSearchbox.conf.CLASSNAME.GRAY); } else { $("input[fg='"+mfgArray[i]+"']",
	 * this._domAll).addClass(this._opts.theme + KSearchbox.conf.CLASSNAME.GRAY); } }
	 */
};
/**
 * 搜索组件设置是否显示功能事例
 */
KSearchbox.prototype._updateDemolist = function() {
	var _this = this;
	// this._tipContentHeader.show();
	/*
	 * if(this._opts.demopos == KPosition.RIGHT) { this._tipContentHeader.hide(); } else {
	 */
	if (this._opts.demolist !== false) {
		this._tipContentHeader.show();
	} else {
		this._tipContentHeader.hide();
	}
	// }
};
/**
 * 设置二级公交功能的显示位置
 */
KSearchbox.prototype._updateDemopos = function()
{
    if (this._opts.demopos == KPosition.RIGHT)
    {
        this._domAll.addClass(this.options().theme+"_shx_h");
    }
    else
    {
        this._domAll.removeClass(this.options().theme+"_shx_h");
    }
};
/**
 * 搜索组件设置是否显示城市选择组件
 */
KSearchbox.prototype._updateCitylist = function() {
	var _this = this;
	var citylistOpt = _this._opts.cylopts;
	
	var seachCitychange = function (citydom){
		KEvent.bind(citydom,"citychanged",function(e,w,c,o){
//			_this._opts.cylopts.defcity = c;
			$(">span>input", _this._lcCityDom).val(c.name);
			$(">span>input", _this._busChangeCityListDom).val(c.name);
			$(">span>input", _this._busLineCityListDom).val(c.name);
			$(">span>input", _this._busStationCityListDom).val(c.name);
			$(">span>input", _this._nbCityListDom).val(c.name);
			var cityObjMap = [_this._lcCityList,_this._busChangeCityList,_this._busLineCityList,_this._busStationCityList,_this._nbCityList];
			for(var i = 0;i < cityObjMap.length;i++){
				if(citydom != cityObjMap[i]){
//					KEvent.trigger(cityObjMap[i], "citychanged", cityObjMap[i], c, o);
					cityObjMap[i]._city = c;
				}
			}
		});
	}
	
	if (this._opts.citylist) {
		if (this._lcCityDom && this._lcCityDom.length != 0 && this._lcCityList == null) {
			this._lcCityList = new KCityList(this._lcCityDom, citylistOpt);
			seachCitychange(this._lcCityList);
		}
		if (this._busChangeCityListDom && this._busChangeCityListDom.length != 0 && this._busChangeCityList == null) {
			this._busChangeCityList = new KCityList(this._busChangeCityListDom, citylistOpt);
			seachCitychange(this._busChangeCityList);
		}
		if (this._busLineCityListDom&&this._busLineCityListDom.length != 0 && this._busLineCityList == null) {
			this._busLineCityList = new KCityList(this._busLineCityListDom, citylistOpt);
			seachCitychange(this._busLineCityList);
		}
		if (this._busStationCityListDom&&this._busStationCityListDom.length != 0 && this._busStationCityList == null) {
			this._busStationCityList = new KCityList(this._busStationCityListDom, citylistOpt);
			seachCitychange(this._busStationCityList);
		}
		if (this._nbCityListDom && this._nbCityListDom.length != 0 && this._nbCityList == null) {
			this._nbCityList = new KCityList(this._nbCityListDom, citylistOpt);
			seachCitychange(this._nbCityList);
		}
	} else {
		if (this._lcCityDom && this._lcCityDom.length != 0) {
			this._lcCityList = null;
			this._lcCityDom.hide();
		}
		if (this._busChangeCityListDom && this._busChangeCityListDom.length != 0) {
			this._busChangeCityList = null;
			this._busChangeCityListDom.hide();
		}
		if (this._busLineCityListDom && this._busLineCityListDom.length != 0) {
			this._busLineCityList = null;
			this._busLineCityListDom.hide();
		}
		if (this._busStationCityListDom && this._busStationCityListDom.length != 0) {
			this._busStationCityList = null;
			this._busStationCityListDom.hide();
		}
		if (this._nbCityListDom && this._nbCityListDom.length != 0) {
			this._nbCityList = null;
			this._nbCityListDom.hide();
		}
	}
	if (this._busSecondTabs == null && this._busSecondHeaderDom) {
		//$.browser.msie ? $(initRadio) : initRadio();
		_this._busSecondHeaderDom.find("input:radio").attr("checked", false).eq(0).attr("checked", true);
		this._busSecondTabs = new KStdTabs(this._busSecondHeaderDom);
		KEvent.bind(_this._busSecondTabs, "selected", function(eventinfo, widget, oldItem, currentItem) {
			//window.alert("second tabs: " + currentItem.index);
			_this._busChangeIDomArray.eq(currentItem.index).attr("checked", "checked");
			_this._setSuggestEventHandle();
			_this._updateDemos(_this.tab().kvalue);
			// opt# 1006291318 trigger "secondcatchanged"
			KEvent.trigger(_this, "secondcatchanged", _this, _this.tab(), _this.secondcat());
		});
	}
};
KSearchbox.prototype._getSuggestUrl = function() {
	var _this = this;
	if (this._opts.sugopts.url) {
		var sugopts = this._opts.sugopts.url;
		if (sugopts.indexOf("?") != -1) {
			var num = sugopts.indexOf("?");
			sugopts = sugopts.substring(0, num);
		}
		sugopts = sugopts + "?s=json&c=";
		switch (this.tab().kvalue) {
			case KWidgetFlag.localsearch:
				sugopts = sugopts + _this._getCityListCity(_this._lcCityDom, _this._lcCityList).name + "&t=ks&";
				break;
			case KWidgetFlag.busearch:
				if (_this.secondcat().kvalue == KQueryType.busearch) {
					sugopts = sugopts
							+ _this._getCityListCity(_this._busChangeCityListDom, _this._busChangeCityList).name
							+ "&t=ks";
				} else if (_this.secondcat().kvalue == KQueryType.bustation) {
					sugopts = sugopts
							+ _this._getCityListCity(_this._busStationCityListDom, _this._busStationCityList).name
							+ "&t=bss";
				} else if (_this.secondcat().kvalue == KQueryType.busline) {
					sugopts = sugopts + _this._getCityListCity(_this._busLineCityListDom, _this._busLineCityList).name
							+ "&t=bls";
				}
				break;
			case KWidgetFlag.navsearch:
				// sugopts = sugopts + _this._getCityListCity([], null).name+"&t=nas";
				sugopts = sugopts + "全国&t=nas";
				break;
			case "ns":
				sugopts = sugopts + _this._getCityListCity(_this._nbCityListDom, _this._nbCityList).name + "&t=ks";
				break;
			default:
				sugopts = sugopts + _this._getCityListCity( [], null).name + "&t=ks";
		}
		return sugopts;
	} else {
		return "";
	}
};
KSearchbox.prototype._suggestFun = function(eventinfo) {
	var _this = this;
	var arrTemp = [ "ks", "bls", "bss", "ks", "ks", "nas", "nas", "ks", "ks" ];
	var num = eventinfo.data.num;
	var obj = eventinfo.data.dom;
	var inputbones = KTools.getBounds(obj.get(0));
	var minwidth1 = parseInt(inputbones.max.x - inputbones.min.x);
	if (_this._inputSuggestArray && typeof _this._inputSuggestArray[num] != "undefined") {
		_this._inputSuggestArray[num].clearCache();
		var sugurl = _this._gethashvalue(_this._getSuggestUrl());
		_this._inputSuggestArray[num].setOptions( {
			url : sugurl
		});
	} else if (_this._opts.sugopts) {
		if (typeof _this._opts.sugopts != "undefined" && typeof _this._opts.sugopts.url != "undefined" && arrTemp[num]) {
			var sugopts = _this._opts.sugopts.url;
			sugopts = _this._getSuggestUrl();
			var sugurl = sugopts.replace(/t=[^&]*/g, "t=" + arrTemp[num]).replace(/(^\s*)|(\s*$)/g, '');
			sugurl = _this._gethashvalue(sugurl);
			_this._inputSuggestArray[num] = new KStdSuggest(obj, {
				'url' : sugurl,
				'autocomplete' : false,
				'listlimit' : _this._opts.suglimit,
				minwidth : minwidth1
			});
			if (arrTemp[num] == "nas") // 驾车得到城市，没有城市组件，通过suggest得到城市绑定事件。
			{
				_this._navGetCity(num);
			}
		}
	} else {
		if (_this._inputSuggestArray[num]) {
			_this._inputSuggestArray[num].finalize();
			_this._inputSuggestArray[num] = undefined;
		}
	}
};
/**
 * 为了解决绑定事件作用域的问题。
 * 
 * @param eventinfo
 */
KSearchbox.prototype._suggestDomFun = function(eventinfo)
{
	var _this = eventinfo.data._this;
    _this._suggestFun({data:{dom:$(this),num:eventinfo.data.num}});
};
KSearchbox.prototype._updateInputSuggestUrl = function()
{
    var _this = this;
    KEvent.bind(this._lsInputDom, "focus", _this._suggestDomFun, {_this:this,num:0});
    KEvent.bind(this._blInputDom, "focus", _this._suggestDomFun, {_this:this,num:1});
    KEvent.bind(this._bzInputDom, "focus", _this._suggestDomFun, {_this:this,num:2});
    KEvent.bind(this._boInputDom, "focus", _this._suggestDomFun, {_this:this,num:3});
    KEvent.bind(this._bdInputDom, "focus", _this._suggestDomFun, {_this:this,num:4});
    KEvent.bind(this._noInputDom, "focus", _this._suggestDomFun, {_this:this,num:5});
    KEvent.bind(this._ndInputDom, "focus", _this._suggestDomFun, {_this:this,num:6});
    KEvent.bind(this._zcInputDom, "focus", _this._suggestDomFun, {_this:this,num:7});
    KEvent.bind(this._zkInputDom, "focus", _this._suggestDomFun, {_this:this,num:8});
};
KSearchbox.prototype._navGetCity = function(num)
{
    var _this = this;
    if (num == 5) {
		KEvent.bind(this._inputSuggestArray[num], "datachanged", function(eventInfo, widget, suggsetInfo) {
			if (suggsetInfo.kvalue) {
				//得到经纬度
				_this._navorigCity = suggsetInfo.kvalue.a;
			} else {
				_this._navorigCity = undefined;
			}
		});
	} else {
		KEvent.bind(this._inputSuggestArray[num], "datachanged", function(eventInfo, widget, suggsetInfo) {
			if (suggsetInfo.kvalue) {
				//得到经纬度
				_this._navdestCity = suggsetInfo.kvalue.a;
			} else {
				_this._navdestCity = undefined;
			}

		});
	}
};
KSearchbox.prototype._updateKeywordSuggest = function()
{
    var _this = this;
    var suggestShowFlag = (_this._opts.suggest || typeof this._opts.suggest == "undefined");
    if (suggestShowFlag)
    {
        _this._setSuggestEventHandle();
    }
};
/**
 * 搜索组件设置是否开启关键字提示功能
 */
KSearchbox.prototype._updateSuggest = function()
{
    var _this = this;
    var suggestShowFlag = (_this._opts.suggest || typeof this._opts.suggest == "undefined");
    _this._updateKeywordSuggest();

    if (this._lcCityList != null)
    {
        this._lcCityList.setOptions({sugurl:(suggestShowFlag ? _this._lcCityList.sugurl : "")});
        this._lcCityList._updateSugOptions();
    }
    if (this._busChangeCityList != null)
    {
        this._busChangeCityList.setOptions({sugurl:(suggestShowFlag ? _this._busChangeCityList.sugurl : "")});
        this._busChangeCityList._updateSugOptions();
    }
    if (this._busLineCityList != null)
    {
        this._busLineCityList.setOptions({sugurl:(suggestShowFlag ? _this._busLineCityList.sugurl : "")});
        this._busLineCityList._updateSugOptions();
    }
    if (this._busStationCityList != null)
    {
        this._busStationCityList.setOptions({sugurl:(suggestShowFlag ? _this._busStationCityList.sugurl : "")});
        this._busStationCityList._updateSugOptions();
    }
    if (this._nbCityList != null)
    {
        this._nbCityList.setOptions({sugurl:(_this._opts.suggest ? _this._nbCityList.sugurl : "")});
        this._nbCityList._updateSugOptions();
    }
};
/**
 * 搜索组件更新查询选项
 * @returns Boolean
 */
KSearchbox.prototype._getCurrQueryOpts = function() {
	var _this = this;
	var firstItem = this.tab();
	var queryOptions =KTools.copyOptions(queryOptions, KQueryOptions);
	var secondItem = this.secondcat();
	switch (firstItem.kvalue) {
		case KWidgetFlag.localsearch:
			queryOptions.type = KQueryType.localsearch;
			queryOptions.ls = KTools.copyOptions( {}, KPOInfo);
			queryOptions.ls.name = this._lsInputDom.val();
			queryOptions.ls.city = this._getCityListCity(this._lcCityDom, this._lcCityList).name;
			delete queryOptions.center;
			break;
		case KWidgetFlag.busearch:
			if (secondItem.kvalue == KQueryType.busearch) {
				queryOptions.type = KQueryType.busearch;
				queryOptions.busorig = KTools.copyOptions( {}, KPOInfo);
				queryOptions.busdest = KTools.copyOptions( {}, KPOInfo);
				queryOptions.busorig.name = this._boInputDom.val();
				queryOptions.busdest.name = this._bdInputDom.val();
				queryOptions.busorig.city = this._getCityListCity(this._busChangeCityListDom, this._busChangeCityList).name;
				queryOptions.busdest.city = this._getCityListCity(this._busChangeCityListDom, this._busChangeCityList).name;
				if (queryOptions.busorig.name === "自定义起点") {
					queryOptions.busorig = $.extend(true, {}, this._queryOptions.busorig);
				}
				if (queryOptions.busdest.name === "自定义终点") {
					queryOptions.busdest = $.extend(true, {}, this._queryOptions.busdest);
				}
			} else if (secondItem.kvalue == KQueryType.busline) {
				queryOptions.type = KQueryType.busline;
				queryOptions.busline = KTools.copyOptions( {}, KPOInfo);
				queryOptions.busline.name = this._blInputDom.val();
				queryOptions.busline.city = this._getCityListCity(this._busLineCityListDom, this._busLineCityList).name;
			} else if (secondItem.kvalue == KQueryType.bustation) {
				queryOptions.type = KQueryType.bustation;
				queryOptions.bustation = KTools.copyOptions( {}, KPOInfo);
				queryOptions.bustation.name = this._bzInputDom.val();
				queryOptions.bustation.city = this._getCityListCity(this._busStationCityListDom,
						this._busStationCityList).name;
			}
			break;
		case KWidgetFlag.navsearch:
			queryOptions.type = KQueryType.navsearch;
			//
			queryOptions.navorig = KTools.copyOptions( {}, KPOInfo);
			queryOptions.navdest = KTools.copyOptions( {}, KPOInfo);
			//
			var isOrigNameEqual = false, isDestNameEqual=false;
			var noInputVal = this._noInputDom.val(), ndInputVal = this._ndInputDom.val();
			if (this._queryOptions && this._queryOptions.navorig && this._queryOptions.navorig.name === noInputVal) {
				isOrigNameEqual =true;
			}
			if (this._queryOptions && this._queryOptions.navdest &&  this._queryOptions.navdest.name === ndInputVal) {
				isDestNameEqual = true;
			}
			queryOptions.navorig.name = noInputVal;
			queryOptions.navdest.name = ndInputVal;
			//
			if(this._navorigCity){
				queryOptions.navorig.city = this._navorigCity;
			}else if(isOrigNameEqual && this._queryOptions.navorig.city){
				queryOptions.navorig.city = this._queryOptions.navorig.city;
			}else{
				queryOptions.navorig.city = "";
			}
			if(this._navdestCity){
				queryOptions.navdest.city = this._navdestCity;
			}else if(isDestNameEqual && this._queryOptions.navdest.city){
				queryOptions.navdest.city = this._queryOptions.navdest.city;
			}else{
				queryOptions.navdest.city = "";
			}
			//
			var currentCity = "";
			if (this._opts.cityfun && this._opts.cityfun.fun && this._opts.cityfun.thisobj) {
				currentCity = _this._opts.cityfun.fun.call(_this._opts.cityfun.thisobj);
			}
			queryOptions.mapcity = currentCity;
			//
			var customNavOrig = (queryOptions.navorig.name === "自定义起点");
			var customNavDest = (queryOptions.navdest.name === "自定义终点");
			if (customNavOrig || customNavDest) {
				if (customNavOrig) {
					queryOptions.navorig = $.extend(true, {}, this._queryOptions.navorig);
				}
				if (customNavDest) {
					queryOptions.navdest = $.extend(true, {}, this._queryOptions.navdest);
				}
				queryOptions.mapcity = $.extend(true, {}, this._queryOptions.mapcity);
			}
			_this._navorigCity = undefined;// 将原来的城市值置成undefined
			_this._navdestCity = undefined; // 将原来的城市值置成undefined
			break;
		case "ns":
			queryOptions.type = KQueryType.localsearch;
			queryOptions.center = KTools.copyOptions( {}, KPOInfo);
			queryOptions.ls = KTools.copyOptions( {}, KPOInfo);
			queryOptions.center.name = this._zcInputDom.val();
			queryOptions.ls.name = this._zkInputDom.val();
			queryOptions.center.city = this._getCityListCity(this._nbCityListDom, this._nbCityList).name;
			queryOptions.ls.city = this._getCityListCity(this._nbCityListDom, this._nbCityList).name;
			break;
		default:
			queryOptions =false;
	}
	return queryOptions;
};
/**
 * 通过传递dom对象和城市选择对象得到当前的组件的城市数据。
 * 
 * @param dom
 * @param listObj
 */
KSearchbox.prototype._getCityListCity = function(dom, listObj) {
	var _this = this;
	var currentCity = "";
	if (dom.length != 0 && listObj != null) {
		// currentCity = listObj.city();
		currentCity = listObj.city();
	} else {
		if (!this._opts.citylist && this._opts.cityfun && this._opts.cityfun.fun && this._opts.cityfun.thisobj) {
			currentCity = _this._opts.cityfun.fun.call(_this._opts.cityfun.thisobj);
		} else {
			currentCity = KCityInfo;
		}
	}
	return currentCity;
};
/**
 * 组件交换fg自定义费标签属性的fg
 * 
 * @param firstFg
 * @param secondFg
 * @param dom
 */
KSearchbox.prototype._swapFg = function(firstFg, secondFg, dom)
{
    var _this = this;
    if (this._input[firstFg] || this._input[secondFg])
    {
        var tempvalue = this._input[firstFg] ? $("input[mfg='" + firstFg + "']", _this._domAll).val() : "";
        var tempsvalue = this._input[secondFg] ? $("input[mfg='" + secondFg + "']", _this._domAll).val() : "";
        var tempFfg = this._input[firstFg];
        var tempSfg = this._input[secondFg];
        if (tempFfg) {
            this._input[secondFg] = tempFfg;
            $("input[mfg='" + secondFg + "']", _this._domAll).removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(tempvalue).blur();
        }
        else
        {
            this._input[secondFg] = undefined;
            $("input[mfg='" + secondFg + "']", _this._domAll).addClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(tempvalue).blur();
        }
        if (tempSfg) {
            this._input[firstFg] = tempSfg;
            $("input[mfg='" + firstFg + "']", _this._domAll).removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(tempsvalue).blur();
        }
        else
        {
            this._input[firstFg] = undefined;
            $("input[mfg='" + firstFg + "']", _this._domAll).addClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(tempsvalue).blur();
        }
    }
    //dom.removeClass(_this.options().theme + KSearchbox.conf.CLASSNAME.SWO).addClass(_this.options().theme + KSearchbox.conf.CLASSNAME.SWD);
};
/**
 * 设置option选项
 * @param opt
 */
KSearchbox.prototype._setOption = function(opt)
{
    this._oldOpts = this._opts.theme;
    this._opts = KTools.copyOptions(opt, this._opts);
};
/**
 * 更新autoquery 点击submit按钮执行事件。
 */
KSearchbox.prototype._updateAutoquery = function()
{  //通过autoquery开关判断是否自动匹配的组件，并自动执行匹配组件的query的方法。
    var _this = this;
    if (this._opts.autoquery)
    {
        _this._submitQueryEvent();
    }
    else
    {

    }
};
/**
 *  将查询的提交提给匹配组件的匹配相应的组件，判断autoquery是否执行query方法。
 */
KSearchbox.prototype._submitQueryEvent = function()
{
    var _this = this;
    var matchvalue = _this.tab().kvalue;
    switch (matchvalue)
    {
        case 'ls':
			//查询时，应隐藏suggest
			this._inputSuggestArray[0] && this._inputSuggestArray[0].setVisible(false);
            matchvalue = KWidgetFlag.localsearch;
            break;
        case 'bs':
			this._inputSuggestArray[3] && this._inputSuggestArray[3].setVisible(false);
			this._inputSuggestArray[4] && this._inputSuggestArray[4].setVisible(false);
            matchvalue = KWidgetFlag.busearch;
            break;
        case 'navs':
			this._inputSuggestArray[5] && this._inputSuggestArray[5].setVisible(false);
			this._inputSuggestArray[6] && this._inputSuggestArray[6].setVisible(false);
            matchvalue = KWidgetFlag.navsearch;
            break;
        case 'ns':
			this._inputSuggestArray[7] && this._inputSuggestArray[7].setVisible(false);
			this._inputSuggestArray[8] && this._inputSuggestArray[8].setVisible(false);			
			
            matchvalue = KWidgetFlag.localsearch;
            break;
        default :
    }
    //if(_this.tab().kvalue =="ns") matchvalue = KWidgetFlag.localsearch;
    var kqueryWidget = KManager.match(matchvalue, KQuery);
    this._setCookie();
    if (kqueryWidget.length > 0) {
		if (this._opts.preprocessFun) {
			var fun = _this._opts.preprocessFun.fun;
			var thisobj = _this._opts.preprocessFun.thisobj;
			kqueryWidget[0].query(fun.call(thisobj, _this.queryOptions()));
		} else {
			kqueryWidget[0].query(_this.queryOptions());
		}
	}
};

KSearchbox.prototype._setQueryOptions = function(opts) {
	var _this = this;
	var tabs = this._firstTabs.tabs();
	var keys = {}, kvalue;
	for ( var i = 0; i < tabs.length; i++) {
		keys[tabs[i].kvalue] = tabs[i].index; 
	}
	if (opts.type) {
		switch (opts.type) {
			case KQueryType.localsearch:
				if (opts.center) {
					this._firstTabs.select(keys["ns"]);
					// 当opts.center存在，而opts.center.name不存在时，跳到周边查询但不查询
					if (!opts.center.name) {
						return true;
					}
					if (opts.ls) {
						this._setInputValue(this._zkInputDom, opts.ls.name);
					}
					this._setInputValue(this._zcInputDom, opts.center.name);
				} else {
					this._firstTabs.select(keys["ls"]);
					if (opts.ls) {
						this._setInputValue(this._lsInputDom, opts.ls.name);
					}
				}
				break;
			case KQueryType.busearch:
				this._firstTabs.select(keys["bs"]);
				this._busSecondTabs.select(0);
				var tab0 = this._busSecondTabs.tab(0);
				//由于默认选中第0个，所以要主动触发
				KEvent.trigger(this._busSecondTabs, "selected", this._busSecondTabs, tab0, tab0);
				if (opts.busorig) {
					
					this._setInputValue(this._boInputDom, opts.busorig.name);
					// 为了支持自定义起点
					if (opts.busorig.name === "自定义起点") {
						if (!this._queryOptions.busorig) {
							this._queryOptions.busorig = {};
						}
						this._queryOptions.busorig.name = "自定义起点";
						if (opts.busorig.latlon) {
							this._queryOptions.busorig.latlon = opts.busorig.latlon;
						}
						if (opts.busorig.pid) {
							this._queryOptions.busorig.pid = opts.busorig.pid;
						}
					}
				}
				if (opts.busdest) {
					this._setInputValue(this._bdInputDom, opts.busdest.name);
					// 为了支持自定义终点
					if (opts.busdest.name === "自定义终点") {
						if (!this._queryOptions.busdest) {
							this._queryOptions.busdest = {};
						}
						this._queryOptions.busdest.name = "自定义终点";
						if (opts.busdest.latlon) {
							this._queryOptions.busdest.latlon = opts.busdest.latlon;
						}
						if (opts.busdest.pid) {
							this._queryOptions.busdest.pid = opts.busdest.pid;
						}
					}
				}
				break;
			case KQueryType.busline:
				this._firstTabs.select(1);
				this._busSecondTabs.select(1);
				if (opts.busline) {
					this._setInputValue(this._blInputDom, opts.busline.name);
				}
				break;
			case KQueryType.bustation:
				this._firstTabs.select(1);
				this._busSecondTabs.select(2);
				if (opts.bustation) {
					this._setInputValue(this._bzInputDom, opts.bustation.name);
				}
				break;
			case KQueryType.navsearch:
				this._firstTabs.select(keys["navs"]);
				if (opts.navorig) {
					this._setInputValue(this._noInputDom, opts.navorig.name);
					// 为了支持自定义起点
					if (opts.navorig.name === "自定义起点") {
						if (!this._queryOptions.navorig) {
							this._queryOptions.navorig = {};
						}
						this._queryOptions.navorig.name = "自定义起点";
						if (opts.navorig.latlon) {
							this._queryOptions.navorig.latlon = opts.navorig.latlon;
						}
						if (opts.navorig.pid) {
							this._queryOptions.navorig.pid = opts.navorig.pid;
						}
					}
				}
				if (opts.navdest) {
					this._setInputValue(this._ndInputDom, opts.navdest.name);
					// 为了支持自定义终点
					if (opts.navdest.name === "自定义终点") {
						if (!this._queryOptions.navdest) {
							this._queryOptions.navdest = {};
						}
						this._queryOptions.navdest.name = "自定义终点";
						if (opts.navdest.latlon) {
							this._queryOptions.navdest.latlon = opts.navdest.latlon;
						} else if (opts.navdest.pid) {
							this._queryOptions.navdest.pid = opts.navdest.pid;
						}
					}
				}
				break;
			default:
				return true;
		}
	}
	// if(opts.ns)
};
KSearchbox.prototype._setInputValue = function(dom, value)
{
    this._input[dom.attr("mfg")] = dom.attr("mfg");
    dom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(value);
};
KSearchbox.prototype._setCookie = function() {
	var _this = this, val="";
	switch (_this.tab().kvalue) {
		case KWidgetFlag.localsearch:
			val = this._lsInputDom.val();
			this._updateCookie("ls", val);
			this._updateCookie("nls", this._getCity("nls") + ":" + val);
			break;
		case KWidgetFlag.busearch:
			if (_this.secondcat().kvalue == KQueryType.busearch) {
				this._updateCookie("bo", this._boInputDom.val());
				this._updateCookie("bd", this._bdInputDom.val());
				this._updateCookie("bod", this._getBodOrNod(true));
			} else if (_this.secondcat().kvalue == KQueryType.busline) {
				val = this._blInputDom.val();
				this._updateCookie("bl", val);
				this._updateCookie("nbl", this._getCity("nbl") + ":" + val);
			} else if (_this.secondcat().kvalue == KQueryType.bustation) {
				val = this._bzInputDom.val();
				this._updateCookie("ba", val);
				this._updateCookie("nba", this._getCity("nba") + ":" + val);
			}
			break;
		case KWidgetFlag.navsearch:
			this._updateCookie("no", this._noInputDom.val());
			this._updateCookie("nd", this._ndInputDom.val());
			this._updateCookie("nod", this._getBodOrNod(false));
			break;
		case "ns":
	/*		val = this._zcInputDom.val() + ":" + this._zkInputDom.val();
			this._updateCookie("nb", val);
		*/	
			this._updateCookie("zc", this._zcInputDom.val());
			val = $.trim(this._zkInputDom.val());
			
			//不允许推荐词存入cookie
			var tipHas = false;
			for(var i = 0; i < this._zkInputTip.length; i ++){
				if(this._zkInputTip[i] == val){	tipHas = true;	break;		}
			};
			if(tipHas){		break;		};
			
			this._updateCookie("zk", val);
			this._updateCookie("nnb", this._getCity("nnb") + ":" + val);
			break;
	}
};
/**
 * 查找相应的cookie
 * 
 * @param name
 *            cookie的名称
 * @returns Array
 */
KSearchbox.prototype._getCookie = function(name, lenLast) {
	var  cookie = KTools.getCookie(name), reArr = [];
	var tempArr = [];
	if (typeof cookie === "string") {
		tempArr = cookie.split(this._CSPLIT);
	}
	switch (name) {
		case "ls":
		case "bo":
		case "bd":
		case "bl":
		case "ba":
		case "no":
		case "nd":
				reArr = tempArr;
			break;
		case "nls":
		case "nbl":
		case "nba":
			for ( var i = 0; i < tempArr.length; i++) {
				var parsed = this._parseNblItem(tempArr[i]);
				if (parsed) {
					reArr.push(parsed);
				}
			}
			break;
		case "bod":
		case "nod":
			for ( var i = 0; i < tempArr.length; i++) {
				var parsed = this._parseBodOrNodItem(tempArr[i]);
				if (parsed) {
					reArr.push(parsed);
				}
			}
			break;
		case "nb":
		case "nnb":
			var hasCity = name === "nnb";
			for ( var i = 0; i < tempArr.length; i++) {
				var parsed = this._parseNbItem(tempArr[i], hasCity);
				if (parsed) {
					reArr.push(parsed);
				}
			}
			break;
	}
	while(reArr.length > lenLast){
		reArr.shift();
	}
	//reverse 
	var reverse = [];
	for(var i = reArr.length-1; i>=0; i=i-1){
		reverse.push(reArr[i]);
	}
	return reverse;
};

KSearchbox.prototype._updateDemos = function(tabKvalue) {
	var _this=this;
	if (this._opts.demolist && this._opts.customdemo !== true && this._tipContentHeader) {
		var html=[ this._demohint[1]], arr;
		var demoOpts=[];
		var _this=this;
		var matchvalue;
		var isNearBy = false;
		var isNew = true;
		var getShort = function(str,type) {
			var len = (_this._opts && _this._opts.txtlen && (typeof _this._opts.txtlen[type] === "number")) ? _this._opts.txtlen[type]
					: -1;
			return ((len > -1) && (str.length > len + 2)) ? str.substring(0, len) + ".." : str;
		};
		
		var getDefaultDemo = function(flag, len){
			var reArr=[];
			if(_this._opts.defaultdemo && _this._opts.defaultdemo[flag]){
				var tempArr = _this._opts.defaultdemo[flag].split(_this._CSPLIT);
				switch (flag) {
					case "nls":
					case "nbl":
					case "nba":
						for ( var i = 0; i < tempArr.length; i++) {
							var parsed = _this._parseNblItem(tempArr[i]);
							if (parsed) {
								reArr.push(parsed);
							}
						}
						break;
					case "bod":
					case "nod":
						for ( var i = 0; i < tempArr.length; i++) {
							var parsed = _this._parseBodOrNodItem(tempArr[i]);
							if (parsed) {
								reArr.push(parsed);
							}
						}
						break;
					case "nnb":
						for ( var i = 0; i < tempArr.length; i++) {
							var parsed = _this._parseNbItem(tempArr[i], true);
							if (parsed) {
								reArr.push(parsed);
							}
						}
						break;
				}
			}
			while(reArr.length>len){
				reArr.shift();
			}
			return reArr;
		};
		switch (tabKvalue) {
			default:
			case KWidgetFlag.localsearch:
				arr = this._getCookie("nls", this._demoSum["ls"]);
				if(!arr || !arr.length){
					arr = getDefaultDemo("nls", this._demoSum["ls"]);
					if(arr && arr.length){
						html=[ [ this._demohint[0]]];
					}
				}
				if(!arr || !arr.length){
					isNew = false;
					arr = this._getCookie("ls", this._demoSum["ls"]); 
				};
				matchvalue = KWidgetFlag.localsearch;
				$.each(arr, function(index, obj) {
					var lsObj = isNew ? {
						city : obj.city,
						name : obj.key
					} : {
						name : obj
					};
					html.push( "<a href='javascript:void(0)' title='"+lsObj.name+"'>" + getShort(lsObj.name, "ls") + "</a>");
					demoOpts.push({
						ls : lsObj,
						type : KWidgetFlag.localsearch
					});
				});
				break;
			case KWidgetFlag.busearch:
				matchvalue = KWidgetFlag.busearch;
				 var secondcat = _this.secondcat().kvalue;
				 switch (secondcat) {
					default:
					case KQueryType.busearch:
						arr = this._getCookie("bod", this._demoSum["bo"]);
						if(!arr || !arr.length){
							arr = getDefaultDemo("bod", this._demoSum["bo"]);
							if(arr && arr.length){
								html=[ [ this._demohint[0]]];
							}
						}
						$.each(arr, function(index, obj) {
							html.push("<a href='javascript:void(0)' title='" + obj.origkey + "到" + obj.destkey + "'>"
									+ getShort(obj.origkey, "bo") + "→" + getShort(obj.destkey,"bd") + "</a>");
							demoOpts.push( {
								busorig : {
									city : obj.origcity,
									name : obj.origkey
								},
								busdest : {
									city : obj.destcity,
									name : obj.destkey
								},
								mapcity:{
									city:obj.origcity
								},
								type : KWidgetFlag.busearch
							});
						});
						break;
					case KQueryType.busline:
						arr = this._getCookie("nbl", this._demoSum["bl"]);
						if(!arr || !arr.length){
							arr = getDefaultDemo("nbl", this._demoSum["bl"]);
							if(arr && arr.length){
								html=[ [ this._demohint[0]]];
							}
						}
						if(!arr || !arr.length){
							isNew = false;
							arr = this._getCookie("bl", this._demoSum["bl"]);
						}
						$.each(arr, function(index, obj) {
							var blObj = isNew ? {
								city : obj.city,
								name : obj.key
							} : {
								name : obj
							};
							html.push("<a href='javascript:void(0)' title='" + blObj.name + "'>"
									+ getShort(blObj.name, "bl") + "</a>");
							demoOpts.push( {
								busline : blObj,
								type : KQueryType.busline
							});
						});
						break;
					case KQueryType.bustation:
						arr = this._getCookie("nba", this._demoSum["bz"]);
						if(!arr || !arr.length){
							arr = getDefaultDemo("nba", this._demoSum["bz"]);
							if(arr && arr.length){
								html=[ [ this._demohint[0]]];
							}
						}
						if(!arr && !arr.length){
							isNew = false;
							arr = this._getCookie("ba", this._demoSum["bz"]);
						}
						$.each(arr, function(index, obj) {
							var baObj = isNew ? {
								city : obj.city,
								name : obj.key
							} : {
								name : obj
							};
							html.push("<a href='javascript:void(0)' title='"+baObj.name+"'>" + getShort(baObj.name,"bz") + "</a>");
							demoOpts.push( {
								bustation : baObj,
								type : KQueryType.bustation
							});
						});
						break;
				}
				break;
			case KWidgetFlag.navsearch:
				matchvalue = KWidgetFlag.navsearch;
				arr = this._getCookie("nod", this._demoSum["no"]);
				if(!arr || !arr.length){
					arr = getDefaultDemo("nod", this._demoSum["no"]);
					if(arr && arr.length){
						html=[ [ this._demohint[0]]];
					}
				}
				$.each(arr, function(index, obj) {
					html.push("<a href='javascript:void(0)' title='" + obj.origkey + "到" + obj.destkey + "'>"
							+ getShort(obj.origkey,"no") + "→" + getShort(obj.destkey,"nd") + "</a>");
					demoOpts.push( {
						navorig : {
							city : obj.origcity,
							name : obj.origkey
						},
						navdest : {
							city : obj.destcity,
							name : obj.destkey
						},
						mapcity:{
							city:obj.origcity
						},
						type:KWidgetFlag.navsearch
					});
				});
				break;
			case "ns":
				isNearBy=true;
				matchvalue = KWidgetFlag.localsearch;
				arr = this._getCookie("nnb", this._demoSum["zc"]);
				if(!arr || !arr.length){
					arr = getDefaultDemo("nnb", this._demoSum["zc"]);
					if(arr && arr.length){
						html=[ [ this._demohint[0]]];
					}
				}
				if(!arr || !arr.length){
					isNew = false;
					arr = this._getCookie("nb", this._demoSum["zc"]);
				}
				$.each(arr, function(index, obj) {
					html.push("<a href='javascript:void(0)' title='" + obj.center + "附近" + obj.key + "'>"
							+ getShort(obj.center, "zc") + "附近" + getShort(obj.key, "zk") + "</a>");
					var nsObj = {
						center : {
							name : obj.center
						},
						ls : {
							name : obj.key
						},
						type : KWidgetFlag.localsearch
					};
					if (isNew && obj.city) {
						nsObj.center.city = obj.city;
						nsObj.ls.city = obj.city;
					}
					demoOpts.push(nsObj);
				});
				break;
		}
		this._tipContentHeader.empty();
		if (html.length < 2) {
			return;
		}
		this._tipContentHeader.html(html.join(" ")).find("a").each(function(index){
			$(this).bind("click", function(event){
				event.preventDefault();
				var queryOpts={};
				$.extend(true, queryOpts, KQueryOptions, _this._queryOptions, demoOpts[index] );
				if(!isNearBy){
					delete queryOpts.center;
				}
				_this._queryOptions = queryOpts;
				//
				var grayClass = _this.options().theme + KSearchbox.conf.CLASSNAME.GRAY;
				var updateInput = function($input, val){
					$input.val(val).removeClass(grayClass);
				};
				var setCity = function(objKCityList, cityName){
					if(objKCityList && objKCityList.setCity){
						objKCityList.setCity(KTools.copyOptions( {
							name : cityName
						}, KCityInfo));
					}
				};
				
				switch(queryOpts.type){
					case KQueryType.localsearch:
						if (queryOpts.center) {
							updateInput(_this._zcInputDom, queryOpts.center.name);
							updateInput(_this._zkInputDom, queryOpts.ls.name);
							setCity(_this._nbCityList, queryOpts.ls.city ||queryOpts.center.city);
						} else {
							updateInput(_this._lsInputDom, queryOpts.ls.name);
							setCity(_this._lcCityList, queryOpts.ls.city);
						}
						break;
					case  KQueryType.busline:
						updateInput(_this._blInputDom, queryOpts.busline.name);
						setCity(_this._busLineCityList, queryOpts.busline.city);
						break;
					case  KQueryType.bustation:
						updateInput(_this._bzInputDom, queryOpts.bustation.name);
						setCity(_this._busStationCityList, queryOpts.bustation.city);
						break;
					case  KQueryType.busearch:
						updateInput(_this._boInputDom, queryOpts.busorig.name);
						updateInput(_this._bdInputDom, queryOpts.busdest.name);
						setCity(_this._busChangeCityList, queryOpts.busorig.city || queryOpts.busdest.city);
						break;
					case KQueryType.navsearch:
						updateInput(_this._noInputDom, queryOpts.navorig.name);
						updateInput(_this._ndInputDom, queryOpts.navdest.name);
						break;
				}
				KEvent.trigger(_this, "search", _this, _this.tab(), _this.secondcat(), _this._queryOptions);
				_this._setCookie();
				//
				var kqueryWidget = KManager.match(matchvalue, KQuery);
				if (kqueryWidget.length > 0) {
					if (_this._opts.preprocessFun) {
						var fun = _this._opts.preprocessFun.fun;
						var thisobj = _this._opts.preprocessFun.thisobj;
						kqueryWidget[0].query(fun.call(thisobj, _this._queryOptions));
					} else {
						kqueryWidget[0].query(_this._queryOptions);
					}
				}
				//
			});
		});
		
	}
};
/**
 * 
 * @param type  String 值可为 nls, nbl, nba, nnb 
 * @returns
 */
KSearchbox.prototype._getCity = function(type) {
	var city = "", opts = this._queryOptions;
	switch (type) {
		case "nnb":
		case "nls":
			if (opts.ls && opts.ls.city) {
				city = opts.ls.city;
			}
			if (!city) {
				if (type === "nnb" && opts.center && opts.center.city) {
					city = opts.center.city;
				}
			}
			break;
		case "nbl":
			if (opts.busline && opts.busline.city) {
				city = opts.busline.city;
			}
			break;
		case "nba":
			if (opts.bustation && opts.bustation.city) {
				city = opts.bustation.city;
			}
	}
	if (!city && opts.mapcity && opts.mapcity.name) {
		city = opts.mapcity.name;
	}
	return city;
};
/**
 * 
 * @param isBod
 *            Boolean 是否是bod
 * @returns String 格式为"起点城市a:起点名称a;终点城市a:终点名称a"
 */
KSearchbox.prototype._getBodOrNod = function(isBod) {
	var origKey = "", origCity = "", destKey = "", destCity = "", flag = "";
	if (isBod) {
		origKey = this._boInputDom.val();
		destKey = this._bdInputDom.val();
		flag = "bus";
	} else {
		origKey = this._noInputDom.val();
		destKey = this._ndInputDom.val();
		flag = "nav";
	}
	var opts = this._queryOptions;
	if (opts) {
		if (opts[flag + "orig"] && opts[flag + "orig"].city) {
			origCity = opts[flag + "orig"].city;
		} else if (opts.mapcity && opts.mapcity.name) {
			origCity = opts.mapcity.name;
		}
		if (opts[flag + "dest"] && opts[flag + "dest"].city) {
			destCity = opts[flag + "dest"].city;
		} else if (opts.mapcity && opts.mapcity.name) {
			destCity = opts.mapcity.name;
		}
	}
	return (origCity + ":" + origKey + ";" + destCity + ":" + destKey);
};
/**
 * 
 * @param str
 *            String
 * @returns Object
 */
KSearchbox.prototype._parseBodOrNodItem = function(str) {
	if (typeof str !=="string" || str.indexOf(":") === -1 || str.indexOf(";") === -1) {
		return;
	}
	var arr = str.split(";");
	var origArr = arr[0].split(":");
	var destArr = arr[1].split(":");
	return {
		origcity : origArr[0],//起点城市名称
		origkey : origArr[1],//起点查询关键字
		destcity : destArr[0],//终点城市名称
		destkey : destArr[1]//终点查询关键字
	};
};
/**
 * 
 * @param str
 *            String
 * @returns Object
 */
KSearchbox.prototype._parseNblItem = function(str) {
	if (typeof str !== "string" || str.indexOf(":") === -1) {
		return;
	}
	var arr = str.split(":");
	return {
		city:arr[0],//城市名称
		key:arr[1]//查询关键字
	};
};
/**
 * 分析周边搜cookie中的一项
 * @param str  String
 * @param hasCity Boolean 默认为false
 * @returns
 */
KSearchbox.prototype._parseNbItem = function(str, hasCity) {
	if (typeof str !== "string" || str.indexOf(":") === -1) {
		return;
	}
	var arr = str.split(":");
	return !hasCity ? {
		center : arr[0],// 中心点名称
		key : arr[1]// 关键字
	} : {
		city : arr[0],// 城市名称
		center : arr[1],// 中心点名称
		key : arr[2]//关键字
	};
};
/**
 * 更新preprocessfun sumbit提交事件。
 */
KSearchbox.prototype._updatePreprocessFun = function()
{
    var _this = this;
    if (this._opts.preprocessFun)
    {
        if (this._opts.autoquery)
        {
            var matchvalue = _this.tab().kvalue;
            switch (matchvalue)
            {
                case 'ls':
                    matchvalue = KWidgetFlag.localsearch;
                    break;
                case 'bs':
                    matchvalue = KWidgetFlag.busearch;
                    break;
                case 'navs':
                    matchvalue = KWidgetFlag.navsearch;
                    break;
                case 'ns':
                    matchvalue = KWidgetFlag.localsearch;
                    break;
                default :
            }
            var kqueryWidget = KManager.match(matchvalue, KQuery);
            if (kqueryWidget.length > 0)
            {
                var fun = _this._opts.preprocessFun.fun;
                var thisobj = _this._opts.preprocessFun.thisobj;
                kqueryWidget.query(fun.call(thisobj, _this.queryOptions()));
            }
        }
        else
        {

        }
    }
};
KSearchbox.prototype._initInputEvent = function()
{
    var _this = this;
    //和潘欣确认，得到查询条件为当输入框的内容改变后就动态的改变的查询条件。
    //代码在得到kcitylist城市信息的时候的会多次调用得到城市的方法。性能不怎么高，有待于优化。
    //这个地方用change事件，jquery的change事件  对intput触发该事件为失去焦点才触发，是否考虑用onkeydown事件。
    this._lsInputDom.change(function() {
        _this._initQueryOptions();
        if (_this._lcCityList != null)
        {
            _this._queryOptions.city = _this._lcCityList.city().name;
        }
        _this._queryOptions.keyword = $(this).val();
    });
    this._blInputDom.change(function() {

        if (_this._busLineCityList != null) {
            _this._queryOptions.city = _this._busLineCityList.city().name;
        }
        _this._queryOptions.keyword = $(this).val();
    });
    this._bzInputDom.change(function() {

        if (_this._busStationCityList != null) {
            _this._queryOptions.city = _this._busStationCityList.city().name;
        }
        _this._queryOptions.keyword = $(this).val();
    });
    this._boInputDom.change(function() {

        if (_this._busChangeCityList != null) {
            _this._queryOptions.city = _this._busChangeCityList.city().name;
        }
        _this._queryOptions.origname = $(this).val();
        _this._queryOptions.destname = this._bzInputDom.val().name;
    });
    this._bdInputDom.change(function() {
        _this._initQueryOptions();
        if (_this._busChangeCityList != null) {
            _this._queryOptions.city = _this._busChangeCityList.city();
        }
        _this._queryOptions.destname = $(this).val();
        _this._queryOptions.origname = this._boInputDom.val();
    });
    this._noInputDom.change(function() {
        _this._initQueryOptions();
        _this._queryOptions.origname = $(this).val();
        _this._queryOptions.destname = this._ndInputDom.val();
    });
    this._ndInputDom.change(function() {
        _this._initQueryOptions();
        _this._queryOptions.destname = $(this).val();
        _this._queryOptions.origname = this._noInputDom.val();
    });
    this._zcInputDom.change(function() {
        _this._initQueryOptions();
        if (_this._nbCityList != null) {
            _this._queryOptions.city = _this._nbCityList.city();
        }
        _this._queryOptions.centername = $(this).val();
        _this._queryOptions.centerlatlon = this._zkInputDom.val();
    });
    this._zkInputDom.change(function() {
        _this._initQueryOptions();
        if (_this._nbCityList != null) {
            _this._queryOptions.city = _this._nbCityList.city().name;
        }
        _this._queryOptions.centerlatlon = $(this).val();
        _this._queryOptions.centername = this._zcInputDom.val();
    });
};
/**
 * 搜索组件的初始化搜索条件，防止以前的搜索的条件污染。
 */
KSearchbox.prototype._initQueryOptions = function()
{
    this._queryOptions = KTools.copyOptions({}, KQueryOptions);
};
KSearchbox.prototype._submitQuery = function() {
	var _this = this;
	if($("#bkbtn")){
		$("#bkbtn").show();
	}
	var queryOpts = _this._getCurrQueryOpts();
	if(!queryOpts || !queryOpts.type){
		return ;
	}
	var optCheck = this.options().check;
	if (typeof optCheck !== "number") {
		optCheck = 0;
	}
	var $input;
	var isAutoSearch=false, isOnlyTrigger=false;
	var valify = function(str){
		str = $.trim(str);
		if(!str || $.inArray(str, _this._tipArray)>-1){
			return false;
		}
		return true;
	};
	var isValidA, isValidB;
	//to check 
	switch (queryOpts.type) {
		case KWidgetFlag.localsearch:
			if (queryOpts.center) {//周边查询
				_this._nsFlag = true;
				isValidA = valify(queryOpts.center.name);
				isValidB = valify(queryOpts.ls.name);
				if(!isValidA){
					delete queryOpts.center;
				}
				if(!isValidB){
					delete queryOpts.ls;
				}
				switch (optCheck) {
					default:
					case 0:
						if (isValidA) {
							if (isValidB) {
								isAutoSearch = true;
							} else {
								$input = this._zkInputDom;
							}
						} else {
							$input = this._zcInputDom;
						}
						break;
					case 1:
						if(isValidA){
							if(isValidB){
								isAutoSearch = true;
							}else{
								$input = this._zkInputDom;
							}
						}else{
							if(isValidB){
								$input =this._zcInputDom;
							}else{
								isOnlyTrigger = true;
							}
						}
						break;
					case 2:
						if(isValidA && isValidB){
							isAutoSearch = true;
						}else{
							isOnlyTrigger = true;
						}
						break;
				}
			} else {//地图查询
				_this._lsFlag = true;
				isValidA = valify(queryOpts.ls.name);
				if(!isValidA){
					delete queryOpts.ls;
				}
				$input = this._lsInputDom;
				switch (optCheck) {
					default:
					case 0:
						isAutoSearch = isValidA;
						break;
					case 1:
					case 2:
						isAutoSearch = true;
						break;
				}
			}
			break;
		case KQueryType.busearch:
			_this._bsFlag = true;
			isValidA = valify(queryOpts.busorig.name);
			isValidB = valify(queryOpts.busdest.name);
			if(!isValidA){
				delete queryOpts.busorig;
			}
			if(!isValidB){
				delete queryOpts.busdest;
			}
			switch (optCheck) {
				default:
				case 0:
					if (isValidA) {
						if (isValidB) {
							isAutoSearch = true;
						} else {
							$input = this._bdInputDom;
						}
					} else {
						$input = this._boInputDom;
					}
					break;
				case 1:
					if(isValidA){
						if(isValidB){
							isAutoSearch = true;
						}else{
							$input = this._bdInputDom;
						}
					}else{
						if(isValidB){
							$input =this._boInputDom;
						}else{
							isOnlyTrigger = true;
						}
					}
					break;
				case 2:
					if(isValidA && isValidB){
						isAutoSearch = true;
					}else{
						isOnlyTrigger = true;
					}
					break;
			}
			break;
		case KQueryType.busline:
		    _this._blFlag = true;
			$input = this._blInputDom;
			isValidA = valify(queryOpts.busline.name);
			if(!isValidA){
				delete queryOpts.busline;
			}
			switch (optCheck) {
				default:
				case 0:
					isAutoSearch = isValidA;
					break;
				case 1:
				case 2:
					isAutoSearch = true;
					break;
			}
			break;
		case KQueryType.bustation:
		    _this._bstFlag = true;
			$input = this._bzInputDom;
			isValidA = valify(queryOpts.bustation.name);
			if(!isValidA){
				delete  queryOpts.bustation;
			}
			switch (optCheck) {
				default:
				case 0:
					isAutoSearch = isValidA;
					break;
				case 1:
				case 2:
					isAutoSearch = true;
					break;
			}
			break;
		case KQueryType.navsearch:
			_this._navsFlag = true;
			isValidA = valify(queryOpts.navorig.name);
			isValidB = valify(queryOpts.navdest.name);
			if(!isValidA){
				delete queryOpts.navorig;
			}
			if(!isValidB){
				delete queryOpts.navdest;
			}
			
			switch (optCheck) {
				default:
				case 0:
					if (isValidA) {
						if (isValidB) {
							isAutoSearch = true;
						} else {
							$input = this._ndInputDom;
						}
					} else {
						$input = this._noInputDom;
					}
					break;
				case 1:
					if(isValidA){
						if(isValidB){
							isAutoSearch = true;
						}else{
							$input = this._ndInputDom;
						}
					}else{
						if(isValidB){
							$input =this._noInputDom;
						}else{
							isOnlyTrigger = true;
						}
					}
					break;
				case 2:
					if(isValidA && isValidB){
						isAutoSearch = true;
					}else{
						isOnlyTrigger = true;
					}
					break;
			}
			break;
		default:
			return;
	}
	//
	this._queryOptions = queryOpts;
	if (isAutoSearch) {
		_this._updateAutoquery();
		KEvent.trigger(_this, "search", _this, _this.tab(), _this.secondcat(), _this.queryOptions());
	}else{
		if (isOnlyTrigger) {
			KEvent.trigger(_this, "search", _this, _this.tab(), _this.secondcat(), _this.queryOptions());
		}else{
			var msgId = KTools.showMsg("请输入查询内容！", {
				outside : true,
				//autoclose : 5,
				node : $input.get(0)
			});
			//因为KTools.showMsg()会导致焦点(focus)移至msgbox中的关闭按钮上，所以要延迟
//			window.setTimeout(function() {
//				$input.one("keydown", function(){
//					KTools.hideMsg(msgId);
//				});
//				$input.focus();
//			}, 100);
		}
	}
};
KSearchbox.prototype._updateCookie = function(name, cookie) {
	
	// 如果是"自定义起点"或"自定义终点"， 不写入cookie;
	if (cookie.indexOf("自定义") > -1) {
		return;
	}
	for ( var i = 0; i < this._tipArray.length; i++) {
		if (cookie.indexOf(this._tipArray[i]) > -1) {
			return;
		}
	}
	var oldCookie = KTools.getCookie(name);
	if (oldCookie && oldCookie != null) {
		var arrCookie = oldCookie.split(this._CSPLIT);
		var length = arrCookie.length;
		//如果该项存在，删除该项,这样可以将cookie提至数组后面
		for ( var i = 0; i < length; i++) {
			if (arrCookie[i] == cookie) {
				arrCookie.splice(i,1);
			}
		}
		if(length > this._LCOOKIE){
			arrCookie.length = this._LCOOKIE;
		}
		if(length === this._LCOOKIE){
			arrCookie.splice(0,1);
		}
		arrCookie.push(cookie);
		KTools.setCookie(name, arrCookie.join(","), {expires:365});
	} else {
		KTools.setCookie(name, cookie, {expires:365});
	}
};


KSearchbox.prototype._mfgInputSelect = function()
{
    var _this = this;
    var length = this._mfgArray.length;
    var clickNum = 0;
    for (var i = 0; i < length; i++)
    {
        $("input[mfg='" + this._mfgArray[i] + "']", _this._domAll).focus(function() {
            var fg = $(this).attr("mfg");
            if (!_this._input[fg])
            {
                _this._input[fg] = fg;
                $(this).removeClass(_this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val("");
            }
            //##fix start 浏览器兼容，解决chorme下全选无法取消的问题 -- added by zwq
            var inputbox = $(this).get(0);
            var leg = inputbox.value.length ;
            if(inputbox.setSelectionRange){
            	inputbox = $(this).get(0);
            	inputbox.setSelectionRange(0,leg);
            }else if(inputbox.createTextRange){
            	var range = inputbox.createTextRange();
            	range.collapse(true);
            	range.moveStart("character",0);
            	range.moveEnd("character",leg);
            	range.select();
            }
            //## fix end
        }).blur(function(i)
        {
        	//失去焦点时，置空状态码  --added by zwq
        	clickNum = 0;
            if ($.trim($(this).val()) === "")
            {
                for (var j = 0; j < length; j++)
                {
                    if ($(this).attr("mfg") == _this._mfgArray[j])
                    {
                        $(this).addClass(_this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(_this._tipArray[j]);
                        _this._input[$(this).attr("mfg")] = undefined;
                        break;
                    }
                }
            }
        }).click(function(){//##fix start 浏览器兼容，解决chorme下全选无法取消的问题 -- added by zwq
        	clickNum++;
        	var Sys = {};
        	var ua = navigator.userAgent.toLowerCase();
	        if (window.ActiveXObject)
	            Sys.ie = ua.match(/msie ([\d.]+)/)[1];
	        else if (document.getBoxObjectFor)
	            Sys.firefox = ua.match(/firefox\/([\d.]+)/)[1];
	        else if (window.MessageEvent && !document.getBoxObjectFor)
	        	try{
	        		Sys.chrome = ua.match(/chrome\/([\d.]+)/)[1];
	        	}catch(e){}
	        else if (window.opera)
	            Sys.opera = ua.match(/opera.([\d.]+)/)[1];
	        else if (window.openDatabase)
	            Sys.safari = ua.match(/version\/([\d.]+)/)[1];
	        if(Sys.chrome){
	        	if(clickNum>1){
	        		var intext = $(this).get(0).value;
	        		$(this).removeClass(_this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val("");
	        		$(this).removeClass(_this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(intext);
	        		clickNum = 0;
	        	}
	        }
        });
        //##fix end
    }
};

KSearchbox.prototype._setnavbusValue = function()
{
    if (this.secondcat() && this.secondcat().kvalue == KQueryType.busearch)
    {
        if (this._input[this._noInputDom.attr("mfg")] && this._noInputDom.val() != ""
         && this._input[this._ndInputDom.attr("mfg")] && this._ndInputDom.val() != "" )
        {
        	if(!this._input[this._boInputDom.attr("mfg")]){
        		this._boInputDom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(this._noInputDom.val());
                this._input[this._boInputDom.attr("mfg")] = this._boInputDom.attr("mfg");
        	};
        	if(!this._input[this._bdInputDom.attr("mfg")]){
        		this._bdInputDom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(this._lsInputDom.val());
        		this._input[this._bdInputDom.attr("mfg")] = this._bdInputDom.attr("mfg");
        	};
        }else{
        	if(this._input[this._lsInputDom.attr("mfg")] && this._lsInputDom.val() != ""){
        		if(!this._bsFlag){
        			this._bdInputDom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(this._lsInputDom.val());
            		this._input[this._bdInputDom.attr("mfg")] = this._bdInputDom.attr("mfg");
        		};
        	};
        };
    }
    else if (this.tab() && this.tab().kvalue == KQueryType.navsearch)
    {
        if (this._input[this._boInputDom.attr("mfg")] && this._boInputDom.val() != ""
         && this._input[this._bdInputDom.attr("mfg")] && this._bdInputDom.val() != "")
        {
        	if(!this._input[this._noInputDom.attr("mfg")]){
        		this._noInputDom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(this._boInputDom.val());
                this._input[this._noInputDom.attr("mfg")] = this._noInputDom.attr("mfg");
        	};
            
        	if(!this._input[this._ndInputDom.attr("mfg")]){
        		this._ndInputDom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(this._bdInputDom.val());
        		this._input[this._ndInputDom.attr("mfg")] = this._ndInputDom.attr("mfg");
        	};
        }else{
        	if(this._input[this._lsInputDom.attr("mfg")] && this._lsInputDom.val() != ""){
        		if(!this._navsFlag){
        			this._ndInputDom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(this._lsInputDom.val());
            		this._input[this._ndInputDom.attr("mfg")] = this._ndInputDom.attr("mfg");
        		};
        	};
        };
    };
};
KSearchbox.prototype._setzkValue = function()
{
//	if(!this._input[this._zcInputDom.attr("mfg")]){
		if(this._input[this._lsInputDom.attr("mfg")] && this._lsInputDom.val() != "" ){
			this._zcInputDom.removeClass(this.options().theme + KSearchbox.conf.CLASSNAME.GRAY).val(this._lsInputDom.val());
		    this._input[this._zcInputDom.attr("mfg")] = this._zcInputDom.attr("mfg");
		}else{
			this._input[this._zcInputDom.attr("mfg")] = undefined;
		}
//	}
};

KSearchbox.prototype._setGrayImg = function(dom1)
{
    var dom = $(dom1);
    if (dom.attr("mfg") && !this._input[dom.attr("mfg")])  //灰显
    {
        var name = dom.attr("src");
        var imgname = name.lastIndexOf(".");
        var newName = name.substring(0, imgname) + "_d" + name.substring(imgname);
        dom.attr("src", newName);
        this._input[dom.attr("mfg")] = dom.attr("mfg");
    }
};
KSearchbox.prototype._setbackImg = function(dom1)
{    
    var dom = $(dom1);
    if (dom.attr("mfg") && this._input[dom.attr("mfg")]) //高亮的
    {
        var name = dom.attr("src");
        var imgname = name.lastIndexOf(".");
        var newName = name.substring(0, imgname - 2) + name.substring(imgname);
        dom.attr("src", newName);
        this._input[dom.attr("mfg")] = undefined;
    }
};

KSearchbox.prototype._getImgDom = function(type) {
	var _this = this;
	switch (type) {
		case KQueryType.localsearch:
			var domArray = [];
			if (this._imgArray[0].length > 0) {
				domArray.push(this._imgArray[0]);
			}
			if (this._imgArray[5].length > 0) {
				domArray.push(this._imgArray[5]);
			}
			return domArray;
			break;
		case KQueryType.busearch:
			if (this._imgArray[3].length > 0) {
				return this._imgArray[3];
			}
			return [];
			break;
		case KQueryType.busline:
			if (this._imgArray[1].length > 0) {
				return this._imgArray[1];
			}
			return [];
			break;
		case KQueryType.bustation:
			if (this._imgArray[2].length > 0) {
				return this._imgArray[2];
			}
			return [];
			break;
		case KQueryType.navsearch:
			if (this._imgArray[4].length > 0) {
				return this._imgArray[4];
			}
			return [];
			break;
		/*
		 * case "ns": if (this._imgArray[5].length > 0) { return this._imgArray[5]; } return []; break;
		 */
		default:
			return [];
	}
};
KSearchbox.prototype._checkGrayImg = function()
{
    var _this = this;
	switch (_this.tab().kvalue) {
		case KWidgetFlag.localsearch:
			if (this._imgArray[0].length > 0 && !this._input[this._imgArray[0].attr("mfg")]) {
				return true;
			}
			return false;
			break;
		case KWidgetFlag.busearch:
			var secondcat = _this.secondcat().kvalue;
			if (secondcat == KQueryType.busearch) {
				if (this._imgArray[3].length > 0 && !this._input[this._imgArray[3].attr("mfg")]) {
					return true;
				}
			} else if (secondcat == KQueryType.busline) {
				if (this._imgArray[1].length > 0 && !this._input[this._imgArray[1].attr("mfg")]) {
					return true;
				}
			} else if (secondcat == KQueryType.bustation) {
				if (this._imgArray[2].length > 0 && !this._input[this._imgArray[2].attr("mfg")]) {
					return true;
				}
			}
			return false;
			break;
		case KWidgetFlag.navsearch:
			if (this._imgArray[4].length > 0 && !this._input[this._imgArray[0].attr("mfg")]) {
				return true;
			}
			return false;
			break;
		case "ns":
			if (this._imgArray[5].length > 0 && !this._input[this._imgArray[5].attr("mfg")]) {
				return true;
			}
			return false;
			break;
		default:
			return false;
	}
};
KSearchbox.prototype._getRequestParam = function(name,value)
{
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
    var r = value.substr(value.indexOf("\?") + 1).match(reg);
    if (r != null) return r[2];
    return null;
};
KSearchbox.prototype._gethashvalue = function(url)
{
        var hash = new KUrlHash();
        hash.setKey("s","json");
        hash.setKey("t",this._getRequestParam("t",url));
        hash.setKey("c",this._getRequestParam("c",url));
        if (url.indexOf("?") != -1)
        {
            var num = url.indexOf("?");
            url = url.substring(0, num);
        }
        return url +"?"+ hash.toString();
};
/**
 * 增加对ksearchbox.defaultdemo的支持
 * 
 */
KSearchbox.prototype._supportDefaultDemo = function() {
	if (this._opts && this._opts.defaultdemo) {
		for ( var prop in this._opts.defaultdemo) {
			var cookie = KTools.getCookie(prop);
			if (!cookie) {
				KTools.setCookie(prop, this._opts.defaultdemo[prop]);
			}
		}
	}
};
KSearchbox.prototype._indexArray = function(arr, val) {
	for ( var i = 0; i < arr.length; i++) {
		if (arr[i] === val) {
			return i;
		}
	}
	return -1;
};

KSearchbox.prototype.setFirstTab = function() {
    //itab 0-ls,1-bs,2-navs,3-nb
    var _this = this;
    var hashurl = window.location.href + '';
    var nItab = hashurl.indexOf('#itab=');
    if(nItab < 0){
    	nItab = hashurl.indexOf('&itab=');
    }
    if(nItab >= 0){
    	nItab = nItab + 6;
    	var itabString = hashurl.substring(nItab);
        if(itabString.indexOf('&') == 1 || itabString.length == 1 ){
        	var itab = parseInt(hashurl.substring(nItab,(nItab + 1)));
        	if(itab < 4){
        		_this._firstTabs.select(itab);
        	}
        }
    }
};
/*
 起终点列表组件。
 作者：songyr
 版本：1.0
 创建时间：2010-03-22
 最后修改时间：2010-03-22 14:01
 ============================================
 『修改历史』
opt#1010081709
 增加对mwpf接口的支持
opt#1010251707
 更新finalize方法
opt#1010251759
更新_createKPOInfoObject，当为自定义点时，poi的name值为有意义的经纬度 
opt#1010251855
删除"opt#1010251759"的工作
opt#1010251454
增加对辅助名称的支持
bug#1012091448
修正主站在ie下公交换乘查询选择起终点时的布局
 */
var KStationList = KClass.create("KStationList", KQuery);
KStationList.conf = {
	CLASSNAME : {
		SL : "_sl"// 顶层容器（div）样式。
		,T : "_sl_t"// 起终点列表头部元素样式。
		,B : "_sl_b" // 默认提交按钮样式。
		,LST : "_lst"
		,EPT:"_sl_ept"
	}
};
/**
 * 组件构造方法。
 * 
 * @param container
 *            DOM对象，HTMLElement
 * @param opts
 *            KStationListOptions
 * @uncrunch
 */
KStationList.initialize = function(container, opts){
	var _this = this;
	//
	// opts参数设置
	this.setOptions(KStationListOptions);
	this.setOptions(opts);
	this.setTheme(this.options().theme);
	// add by zhangsq 避免参数cylopts参数不完整时可以正常运行
	this._opts.cylopts = KTools.copyOptions(this._opts.cylopts, KCityListOptions);
	this._cssClassName = this._initCssName(this.options().theme);
	this._parsedData = {
		"s": undefined,
		"e": undefined
	};
	// this._hashkeys = [ "ac,oc,on,dc,dn,st,mc,qnav",
	// "ac,on,dn,st,mc,qbus,oid,did", "ac,on,dn,st,mc,qbus,ol,dl",
	// "ac,on,dn,st,mc,qbus,oid,did,ol,dl" ];
	// add by fuyg: mwpf 标志符，用于改进_hashkeys方式
	_this._mwpf = KConfig.get("mwpf");
	_this._searchbox = opts.searchbox;
	//
	this._$dom = $(container);
	this._dom = this._$dom[0];
	var divs = this._$dom.children("div");
	this._listDiv = {
		"s": undefined,
		"e": undefined
	};
	this._msgBox = {
		"s": undefined,
		"e": undefined
	};
	_this._pageNumber = {
		"s": 1,
		"e": 1
	};
	_this._kCityListObjs = {
		"s": undefined,
		"e": undefined
	};
	_this._kCityListContainer = {
		"s": undefined,
		"e": undefined
	};
	_this._head = {
		"s": undefined,
		"e": undefined
	};
	//
	_this._selectedMarkers = {
		"s": undefined,
		"e": undefined,
		"currentSelected": undefined// 当前选中的marker, 值为"s"或"e",指向_this._selectedMarkers.s或e
	};
	//
	this._noResult={
		"s":false,
		"e":false
	}
	
	//是否是组件内部程序去设置KCityList对象的城市，默认为false
	_this._setCityFromInner = false;
	//
	this._selectedItemsInfo = {
		"orig": undefined,
		"dest": undefined
	};
	
	this._kCityListContainer["s"] = divs.eq(0);
	this._head["s"] = divs.eq(1).addClass(this._cssClassName.T);
	this._listDiv.s = divs.eq(2);
	this._msgBox.s = divs.eq(3).addClass(this._cssClassName.EPT);;
	//
	this._kCityListContainer["e"] = divs.eq(4);
	this._head["e"] = divs.eq(5).addClass(this._cssClassName.T);
	this._listDiv.e = divs.eq(6);
	this._msgBox.e = divs.eq(7).addClass(this._cssClassName.EPT);
	// init children's visiblity
	this._initChildVision();
	//
	this._isInnerSubmitBtn = false;
	this._submitBtn = this._opts.submitbtn;
	//
	if(!this._submitBtn){
		if (divs.eq(8).length) {
			this._submitBtn = divs.eq(8).addClass(this._cssClassName.B).find("input").eq(0);
			this._isInnerSubmitBtn = true;
		}
	}else{
		if (divs.eq(8).length) {
			divs.eq(8).hide();
		}
	}
	if (this._submitBtn) {
		KEvent.bind($(this._submitBtn), "click", function(){
			_this._triggerSelectDone();
		});
	}
	_this._kListObjs = {
		"s": undefined,
		"e": undefined
	};
	//是否支持地图
	_this._isSupportMap= !!_this._opts.mapcontainer;
	//地图是否初始化标志
	_this._mapInitedFlag = false;
	if (_this._isSupportMap) {
		KEvent.bind(KMap, "mapinit", function(){
			_this._mapInitedFlag = true;
		});
		if (_this.options().initmap !== false && KMap.isInitialized(_this._opts.mapcontainer)===false) {
			KMap.init($(_this._opts.mapcontainer).get(0),{});
		}
	}
	this.layout();
};
/*******************************************************************************
 * 实现KObject定义的接口
 ******************************************************************************/
/**
 * 释放当前对象的所有资源
 * 
 * @uncrunch
 */
KStationList.prototype.finalize = function() {
	KEvent.clear($(this._submitBtn), "click");
	this._clearAllMarkers("s");
	this._clearAllMarkers("e");
	if (this._$dom) {
		KEvent.clear(this._$dom);
		KEvent.clear(this._head["s"]);
		KEvent.clear(this._head["e"]);
		KEvent.clear(this._kCityListContainer["s"]);
		KEvent.clear(this._kCityListContainer["e"]);
		KEvent.clear(this._listDiv.s);
		KEvent.clear(this._listDiv.e);
		for ( var i in this._kListObjs) {
			if (this._kListObjs[i]) {
				KEvent.clear(this._kListObjs[i]);
				this._kListObjs[i].finalize();
				this._listDiv[i].removeClass().html("");
			}
		}
	}
	KQuery.prototype.finalize.apply(this);
};
/**
 * 清除结果
 * 
 * @uncrunch
 */
KStationList.prototype.clearResult = function() {
	var _this=this;
	this._clearAllMarkers("s");
	this._clearAllMarkers("e");
	this._result=undefined;
	this._parsedData = {
		"s": undefined,
		"e": undefined
	};
	for ( var i in this._listDiv) {
		KEvent.clear(this._listDiv[i]);
		if (this._listDiv[i]) {
			this._listDiv[i].removeClass().children().remove();
		}
		_this._kListObjs[i]=undefined;
	}
};
/*******************************************************************************
 * 实现KWidget接口
 ******************************************************************************/
/**
 * 返回版本信息。
 * 
 * @return String 版本号字符串。
 * @uncrunch
 */
KStationList.prototype.version = function() {
	return "1.1.1";
};
/**
 * 中文名称描述。
 * 
 * @return String
 * @uncrunch
 */
KStationList.prototype.cnname = function() {
	return "起终点列表组件";
};
/**
 * 返回依赖的其它组件。
 * 
 * @return KObject[]
 * @uncrunch
 */
KStationList.prototype.dependent = function(){
	return [KCityInfo, KCityList, KCityListOptions, KClass, KConfig, KEvent, KList, KListItem, KListener, KMap, KMarker, KNavsearch, KObject, KPOInfo, KPOInfoObject, KQuery, KQueryOptions, KQueryType, KStationListOptions, KTools, KUrlHash, KWidget, KWidgetFlag, jQuery];
};
/**
 * 设置组件配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 * 
 * @param obj
 * @uncrunch
 */
KStationList.prototype.setOptions = function(obj) {
	this._opts = KTools.copyOptions(obj, this.options());
};
/**
 * 设置组件的样式方案
 * 
 * @param scheme
 * @uncrunch
 */
KStationList.prototype.setTheme = function(scheme) {
	this._theme = scheme;
};
/**
 * @returns 返回FLAG字符串
 * @uncrunch
 */
KStationList.prototype.flag = function() {
	return KWidgetFlag.stationlist;
};
/**
 * 重新布局
 * 
 * @uncrunch
 */
KStationList.prototype.layout = function() {
	if (this.options().autoheight) {
		this._$dom.css("height", "");
		return;
	}
	var _bs = this.options().origarea;
	var _be = this.options().destarea;
	var allHeight = parseInt(this._$dom.css("height"));
	// var hr = ($(">hr", this._$dom).outerHeight() + 10) / 2 - 5;
	var hrHeight = ($(">hr", this._$dom).outerHeight(true) + 10) / 2 - 5;
	if (isNaN(allHeight)) {
		allHeight = this._$dom.height();
	}
	var sCityHeight = 0, eCityHeight = 0, sHeadHeight=0, eHeadHeight=0, sMargin=0, eMargin=0;
	if (_bs) {
		if (this._kCityListContainer["s"].is(":visible")) {
			sCityHeight = this._kCityListContainer["s"].outerHeight(true);
		}
		sHeadHeight = this._head["s"].outerHeight(true);
		sMargin = this._listDiv.s.outerHeight(true) - this._listDiv.s.height();
	}
	if (_be) {
		if (this._kCityListContainer["e"].is(":visible")) {
			eCityHeight = this._kCityListContainer["e"].outerHeight(true);
		}
		eHeadHeight = this._head["e"].outerHeight(true);
		eMargin = this._listDiv.e.outerHeight(true) - this._listDiv.e.height();
	}
	var btnHeight = 0;
	if (this._isInnerSubmitBtn) {
		btnHeight = this._submitBtn.parent().outerHeight(true);
	}
	if (_bs && _be) {
		var extraHeight = hrHeight + btnHeight;
		/**针对主站开始**/
		var reduced = 4;
		if ($.browser.msie) {
			if (eCityHeight==0) {
				if (this._ieEngineVersion() < 8) {
					reduced = 10;
				}else{
					reduced=2;
				}
			} else {
				if (this._ieEngineVersion() < 8) {
					 reduced = 12;
				} else {
					reduced = 0;
				}
			}
		}
		/**针对主站结束**/
		var valHeight = 0;
		if (this._msgBox.s.is(":hidden") && this._msgBox.e.is(":hidden")) {
			extraHeight += sMargin + eMargin + reduced;
			valHeight = allHeight - extraHeight - (sHeadHeight + sCityHeight + eHeadHeight + eCityHeight);
			valHeight = valHeight / 2 ;
			if(eCityHeight!=0&&sCityHeight!=0){
				if($.browser.msie){
					valHeight += 25;
				}else{
					valHeight += 30;
				}
			}
			this._listDiv.s.height(valHeight);
			this._listDiv.e.height(valHeight);
		} else if (this._msgBox.s.is(":visible") && this._msgBox.e.is(":hidden")) {
			extraHeight += (this._msgBox.s.outerHeight(true) - this._msgBox.s.height()) + eMargin + reduced;
			valHeight = allHeight - extraHeight - this._msgBox.s.outerHeight(true)
					- (sHeadHeight + sCityHeight + eHeadHeight + eCityHeight);
			this._listDiv.e.height(valHeight);
		} else if (this._msgBox.e.is(":visible") && this._msgBox.s.is(":hidden")) {
			extraHeight += (this._msgBox.e.outerHeight(true) - this._msgBox.e.height()) + sMargin + reduced;
			valHeight = allHeight - extraHeight - (sHeadHeight + sCityHeight + eHeadHeight + eCityHeight);
			valHeight = valHeight / 2;
			this._listDiv.s.height(valHeight);
		}
	} else {
		if (_bs) {
			this._listDiv.s.height(allHeight - sHeadHeight - sCityHeight - btnHeight - sMargin);
		}
		if (_be) {
			this._listDiv.e.height(allHeight - eHeadHeight - eCityHeight - btnHeight - eMargin);
		}
	}
	if (this._kCityListObjs["s"]) {
		this._kCityListObjs["s"].layout();
	}
	if (this._kCityListObjs["e"]) {
		this._kCityListObjs["e"].layout();
	}
};
/*******************************************************************************
 * 实现KQuery定义的接口
 ******************************************************************************/
/**
 * 根据指定选项进行查询。忽略opts时将对当前结果重新查询
 * 
 * @param opts
 *            KQueryOptions 类型
 * @uncrunch
 */
KStationList.prototype.query = function(opts) {
	opts = $.extend(true, {}, opts);
	var _this = this;
	if (opts.type !== KQueryType.busearch && opts.type !== KQueryType.navsearch) {
		return;
	}
	//
	var orig, dest, st, mc;
	_this._selectedItemsInfo = {
		"orig" : undefined,
		"dest" : undefined
	};
	_this._pageNumber = {
		"s" : 1,
		"e" : 1
	};
	//
	if (opts.type === KQueryType.busearch) {
		origInfo = opts["busorig"];
		destInfo = opts["busdest"];
		mc = (typeof opts.city == "undefined") ? origInfo.city : opts.city;
	} else {
		origInfo = opts["navorig"];
		destInfo = opts["navdest"];
		mc = (typeof opts.mapcity == "undefined") ? destInfo.city : opts.mapcity.name;
	}
	//
	_this._queryopts = opts;
	//最后应该调用基类的同名方法(设计文档) 
	KQuery.prototype.query.call(_this, _this._queryopts);
	this._updateSearchbox();
	var urlHash= _this._createUrlHashByQueryOpts(_this._queryopts);
	_this._requestData(urlHash);
};
/**
 * 根据指定的Hash值进行查询
 * 
 * @param hash
 *            KUrlHash 类型
 * @uncrunch
 */
KStationList.prototype.queryByHash = function(hash) {
	var hash = hash.clone();
	var opts = KTools.copyOptions( {}, KQueryOptions);
	opts.type = this.options().querytype;
	var orig, dest;
	if (opts.type === KQueryType.busearch) {
		orig = "busorig";
		dest = "busdest";
	} else if (opts.type === KQueryType.navsearch) {
		orig = "navorig";
		dest = "navdest";
	} else {
		KTools.showMsg("querytype参数有误，请检查");
		return;
	}
	opts[orig] = KTools.copyOptions( {}, KPOInfo);
	opts[dest] = KTools.copyOptions( {}, KPOInfo);
	opts[orig].city = hash.value("oc");
	opts[orig].name = hash.value("on");
	opts[orig].pid = hash.value("oid");
	opts[orig].latlon = hash.value("ol");
	opts[dest].city = hash.value("dc");
	opts[dest].name = hash.value("dn");
	opts[dest].pid = hash.value("did");
	opts[dest].latlon = hash.value("dl");
	opts.city = hash.value("mc");
	this.query(opts);
};
/*******************************************************************************
 * 组件的公开方法
 ******************************************************************************/
/**
 * @uncrunch
 */
KStationList.prototype.showNoResultTip = function(arrDom){
    if (!arrDom || !arrDom.length) {//不合法参数， 返回
        return;
    }
    if (!(this._noResult.s || this._noResult.e)) {//有结果，返回
        return;
    }
    var i,  s = this._noResult.s, e = this._noResult.e, len = arrDom.length;
    if (s && e) {
        for ( i = 0; i < len; i++) {
            this._showMsgTip(arrDom[i]);
        }
    } else if (s) {
        this._showMsgTip(arrDom[0])
    } else if (e) {
        this._showMsgTip(arrDom[1] || arrDom[0]);
    }
	
};


/*******************************************************************************
 * 组件的私有方法
 ******************************************************************************/
/**
 * @param opts
 * @returns {KUrlHash}
 */
KStationList.prototype._createUrlHashByQueryOpts = function(opts) {
	var _this = this, mc;
	var urlHash = new KUrlHash();
	if (opts.type === KQueryType.busearch) {
		origInfo = opts["busorig"];
		destInfo = opts["busdest"];
		urlHash.setKey("ac", "bus");
		urlHash.setKey("st", "b");
		urlHash.setKey("qbus", "1");
		mc = (!opts.city) ? origInfo.city : opts.city;
	} else if(opts.type === KQueryType.navsearch){
		origInfo = opts["navorig"];
		destInfo = opts["navdest"];
		urlHash.setKey("ac", "nav");
		urlHash.setKey("st", "n");
		urlHash.setKey("qnav", "1");
		urlHash.setKey("oc", origInfo.city);
		urlHash.setKey("dc", destInfo.city);
		mc = (!opts.mapcity || !opts.mapcity.name) ? destInfo.city : opts.mapcity.name;
	}
	urlHash.setKey("mc", mc);
	var onValue =_this._latlonPidName(origInfo);
	var dnValue =_this._latlonPidName(destInfo);
	urlHash.setKey("on", onValue);
	urlHash.setKey("dn", dnValue);
	//增加对辅助名称的支持
	if (origInfo.name && (origInfo.name !== onValue)) {
		urlHash.setKey("os", origInfo.name);
	}
	if(destInfo.name && (destInfo.name !== dnValue)){
		urlHash.setKey("ds", destInfo.name);
	}
	urlHash.setKey(_this._mwpf, _this.flag());
	return urlHash;
};

/**
 * 创建ajax request 请求，
 * 
 * @param hash
 *            KUrlHash
 * @param soe
 *            "s"或"e", 表示创建起点或终点的请求，如果不为"s"、"e"之一, 表示创建起点和终点请求
 * @param pageNumber
 *            {Integer} 请求的结果页码
 * @returns {String} Url地址
 */
KStationList.prototype._createRequestUrl = function(hash, soe, pageNumber) {
	var _this = this;
	hash = hash.clone();
	var bs = "true", be = "true";
	if (soe === "s") {
		be = "false";
	} else if (soe === "e") {
		bs = "false";
	}
	var rn = _this.options().pagesize;
	var mapc = $(_this.options().mapcontainer);
	var w, h;
	if (mapc) {
		w = mapc.width();
		h = mapc.height();
	}
	hash.setKey("bs", bs);
	hash.setKey("be", be);
	hash.setKey("pn", pageNumber + "");
	hash.setKey("rn", rn + "");
	hash.setKey("w", w + "");
	hash.setKey("h", h + "");
	return _this.options().url + "&" + hash.toString();
};
/**
 * 触发显示结果
 * @param {Boolean} isAutoSelect
 */
KStationList.prototype._triggerResultShown = function(isAutoSelect) {
	var _this = this;
	KEvent.trigger(_this, "resultshown", _this, "query", _this._result, (this._noResult.s || this._noResult.e));
	//
	var isVisible = false;
	if (isAutoSelect) {
		isVisible = false;
	} else {
		var sd_l = 0, ed_l = 0;
		if (_this._kListObjs.s)
			sd_l = _this._kListObjs.s.items().length;
		if (_this._kListObjs.e)
			ed_l = _this._kListObjs.e.items().length;
		if (_this.options().origarea && _this.options().destarea) {
			isVisible = (sd_l > 0 && ed_l > 0);
		} else if (_this.options().origarea) {
			isVisible = sd_l > 0;
		} else if (_this.options().destarea) {
			isVisible = ed_l > 0;
		}
	}
	//
	KEvent.trigger(_this, "submitbtn", _this, isVisible);
};
/**
 * 供query()方法调用，向后台发出请求
 * @param {KUrlHash} urlHash
 */
KStationList.prototype._requestData = function(urlHash) {
	var _this = this;
	KEvent.trigger(_this, "searchbefore", _this, _this._queryopts);
	$.ajax( {
		type : "GET",
		url : _this._createRequestUrl(urlHash, false, 1),
		success : function(data) {
			if (!data || !data.m) {
				return;
			}
			//
			KEvent.trigger(_this, "resultloaded", _this, "query", data);
			//
			var isAutoSelect = false;
			if (_this.options().autoselect !== false && data && data.as) {
				isAutoSelect = (parseInt(data["as"], 10) === 1) ? true : false;
				var isEqual = false;// 根据经纬度判断起点终点是否相同
				try {
					isEqual = (data.s.d[0].c === data.e.d[0].c);
				} catch (ex) {
					isEqual = false;
				}
				if (isEqual) {
					isAutoSelect = false;
				}
				if(!!_this.options().samecity){
					var isSameCity=false;
					try {
						isSameCity = (data.s.e === data.e.e);
					} catch (ex) {
						isSameCity = false;
					}
					if (isSameCity !== true) {
						isAutoSelect = false;
					}
				}
			}
			//清除map上的标注，HTML,数据
			_this.clearResult();
			_this._result = data;
			_this._dataToDom(data, isAutoSelect);
		},
		error : function() {
			if (!_this._isMapInitialized()) {
				KEvent.trigger(_this, "mapready", _this, undefined, undefined);
			}
		},
		dataType : "json"
	});
};
/**
 * 当城市更改后，向后台请求数据
 * @param {KUrlHash} urlHash
 * @param {String} soe
 */
KStationList.prototype._requestDataForCityChanged = function(urlHash, soe) {
	var _this = this;
	$.ajax( {
		type : "GET",
		url : _this._createRequestUrl(urlHash, soe, 1),
		success : function(data) {
			if (!data || !data.m) {
				return;
			}
			var dataArr = data[soe].d;
			//更新数据
			var listItems = _this._handleData(dataArr, 0);
			_this._parsedData[soe] = listItems;
			_this._result[soe]= data[soe];
			//是否影响urlhash
			_this._changeHashAction();
			//更新KList对象
			var j, node, obj;
			var objKList = _this._kListObjs[soe];
			objKList.clearResult();
			for (j = 0; j < listItems.length; j++) {
				obj = listItems[j];
				obj.deletable = false;
				obj.editable = false;
				obj.selected = false;
				node = $(obj.node);
				obj.text = node.children("label").html();
				obj.iconClass = node.children("span").eq(1).attr("class");
				objKList.insert(obj);
			}
			//更新marker
			var $soeInput=_this._head[soe].find("input:checkbox");
			if($soeInput.is(":checked")){
				if (objKList.items().length == 0) {
					$soeInput.attr("checked", false);
					return;
				}
				_this._clearAllMarkers(soe);
				_this._addMarkersByCheckBox(soe);
			}
			objKList.select(0);	
			//更新KCityList对象
			_this._setCityName(soe, data[soe].e);
		},
		error : function() {
			if (!_this._isMapInitialized()) {
				KEvent.trigger(_this, "mapready", _this, undefined, undefined);
			}
		},
		dataType : "json"
	});
};
/**
 * 当拖拽Maker后，向后台请求数据
 * @param {KUrlHash} urlHash
 * @param {String} soe
 */
KStationList.prototype._requestDataForDrag = function(urlHash, soe) {
	var _this = this;
	$.ajax( {
		type : "GET",
		url : _this._createRequestUrl(urlHash, soe, 1),
		success : function(data) {
			if (!data || !data[soe] ||data[soe].d.length<1) {
				return;
			}
			var firstItem = data[soe].d[0];
			_this._updateLabelContent(_this._selectedMarkers[soe], firstItem.n);
			//
			var dataArr = data[soe].d;
			var latlon = dataArr[0].c;
			//更新Marker的位置，以后台的经纬度为准
			_this._selectedMarkers[soe].setLatlon(latlon);
			// event "locationchanged" event
			var poinfo = _this._createKPOInfoObject(dataArr[0].n, dataArr[0].c, dataArr[0].d, data[soe].e, dataArr[0].t);
			var which = (soe === "s") ? "orig" : "dest";
			KEvent.trigger(_this, "locationchanged", _this, which, poinfo);
			// 
			if (_this._queryopts.type === KQueryType.busearch) {
				_this._queryopts[(soe === "s") ? "busorig" : "busdest"].name = dataArr[0].n;
			} else if (_this._queryopts.type === KQueryType.navsearch) {
				_this._queryopts[(soe ==="s" ) ? "navorig" : "navdest"].name = dataArr[0].n;
			}
			_this._changeHashAction();
			//更新KList对象	
			var listItems = _this._handleData(dataArr, 0);
			_this._parsedData[soe] = listItems;
			_this._result[soe] =  data[soe];
			var j, node, obj;
			var objKList = _this._kListObjs[soe];
			$(objKList.dom()).find("ul>div").hide();
			objKList.clearResult();
			for (j = 0; j < listItems.length; j++) {
				obj = listItems[j];
				obj.deletable = false;
				obj.editable = false;
				obj.selected = false;
				node = $(obj.node);
				obj.text = node.children("label").html();
				obj.iconClass = node.children("span").eq(1).attr("class");
				objKList.insert(obj);
			}
			_this._isDragEnd = true;
			objKList.select(0);
			// update KCityList Object
			_this._setCityName(soe, data[soe].e);
		},
		error : function() {
			if (!_this._isMapInitialized()) {
				KEvent.trigger(_this, "mapready", _this, undefined, undefined);
			}
		},
		dataType : "json"
	});
};
/**
 * 将后台的结果集数组分析成KListItem[]
 * @param {Array} data
 * @param {Number} index
 * @return {KListItem[]}
 */
KStationList.prototype._handleData = function(data, index) {
	var listItems = [], item, temp;
	for ( var i = 0, j = data.length + index; index < j; index++, i++) {
		item = KTools.copyOptions( {}, KListItem);
		item.index = index;
		temp = data[i];
		item.name = temp.n;
		item.kvalue = temp.c;
		item.node = temp.e;
		item.type = temp.t;
		item.pid = temp.d;
		listItems.push(item);
	}
	return listItems;
};

/**
 * 解析数据 初始化的操作
 * 
 * @param data
 *            接口返回的JSON数据
 * @param isAutoSelect
 *            {Boolean}是否自动选择第一个结果
 */
KStationList.prototype._dataToDom = function(data, isAutoSelect){
	var _this = this;
	var latlon = data["m"].a;
	var zoomLevel = data["m"].b;
	//
	this._noResult.s=false;
	this._noResult.e=false;
	var conf = this.options();
    if (conf.origarea && (!data.s || !data.s.d || !data.s.d.length)) {
        this._noResult.s=true;
    }
    if (conf.destarea && (!data.e || !data.e.d || !data.e.d.length)) {
        this._noResult.e=true;
    }
	//noresults event
//	if(this._noResult.s || this._noResult.e){
//		KEvent.trigger(this, "noresults", this);
//	}
    if (conf.simplenoresult === true && (this._noResult.s || this._noResult.e)) {
   // if (true && (this._noResult.s || this._noResult.e)) {
        this._simpleNoResult();
        return;
    }
	
	if (isAutoSelect === false) {
		if (_this.options().origarea) {
			_this._updateDomBySoeData(data, "s");
			if (_this._isSupportMap) {
				_this._bindCheckBoxBySoe("s");
			}
		}
		if (_this.options().destarea) {
			_this._updateDomBySoeData(data, "e");
			if (_this._isSupportMap) {
				_this._bindCheckBoxBySoe("e");
			}
		}
		if (_this._isSupportMap) {//如果支持map
			if (!_this._isMapInitialized()) {//地图没有初始化
				KEvent.bind(KMap, "mapinit", function(){
					KEvent.unbind(KMap, "mapinit", arguments.callee);
					for (var i in _this._kListObjs) {
						if (_this._kListObjs[i] && _this._kListObjs[i].select) {
							_this._kListObjs[i].select(0);
						}
					}
				});
				KEvent.trigger(_this, "mapready", _this, new MPoint(latlon || "北京市"), zoomLevel || 8);
			} else {
				KMap.setCenter(latlon, zoomLevel);
				for (var i in _this._kListObjs) {
					if (_this._kListObjs[i] && _this._kListObjs[i].select) {
						_this._kListObjs[i].select(0);
					}
				}
			}
		} else {//不支持map
			for (var i in _this._kListObjs) {
				if (_this._kListObjs[i] && _this._kListObjs[i].select) {
					_this._kListObjs[i].select(0);
				}
			}
		}
		if (!(this._noResult.s || this._noResult.e)) {//当有结果时，才执行
			_this._initChildVision();
		}
		_this.layout();
		//
		_this._changeHashAction();
		//
		_this._triggerResultShown(isAutoSelect);
	} else {
		var item;
		if (_this.options().origarea) {
			item = data.s.d[0];
			_this._selectedItemsInfo["orig"] = _this._createKPOInfoObject(item.n, item.c, item.d, data.s.e, item.t);
		}
		if (_this.options().destarea) {
			item = data.e.d[0];
			_this._selectedItemsInfo["dest"] = _this._createKPOInfoObject(item.n, item.c, item.d, data.e.e, item.t);
		}
		_this._triggerSelectDone();
	}
};

KStationList.prototype._simpleNoResult=function(){
	/**更新UI界面**/
	var errorMsg, place, city;
	var s = this._noResult.s, e = this._noResult.e, opts = this._queryopts;
    if (s && e) {
        place = "起点和终点";
    } else if (s) {
        place = "起点";
    } else if (e) {
        place = "终点";
    }
    if (opts.type === KQueryType.busearch) {
        city = (opts.mapcity && opts.mapcity.name) || (opts.busorig && opts.busorig.city) || (opts.busdest && opts.busdest.city) || opts.city || "";
        errorMsg = "<p style='font-size:14px;'>在<strong>" + city + "</strong>找不到相关" + place + "</p><p style='color:#454545'>请更换新地点，或检查地图中城市选择是否正确，再尝试搜索。</p>";
    } else if (opts.type === KQueryType.navsearch) {
        errorMsg = "<p style='font-size:14px;'>找不到相关" + place + "</p><p style='color:#454545'>请更换新地点，再尝试搜索。</p>";
    } else {
        return;
    }
	this._msgBox.e.html(errorMsg).prevAll().hide().end().show();
	/**更新url**/
	this._changeHashAction()
	/**触发相关事件**/
	KEvent.trigger(this, "resultshown", this, "query", this._result, (this._noResult.s || this._noResult.e));
	/**为showNoResultTip()方法设置标志位**/
	
}
/**
 * 处理起点和终点结果
 * 
 * @param data
 * @param soe
 */
KStationList.prototype._updateDomBySoeData = function(data, soe) {
	var _this = this;
	var counter = data[soe].a;
	counter = parseInt(counter, 10);
	var arrData = data[soe].d;
	//
	_this._head[soe].find("input:checkbox").attr("checked", false);
	_this._updateObjKCityList(data, soe);
	_this._updateObjKList(arrData, soe, counter);
	_this._kListObjs[soe].select(0);
};
/**
 * 使用query()方法请求后台完毕，同步KCityList对象
 * @param {Object} data
 * @param {String} soe
 */
KStationList.prototype._updateObjKCityList = function(data, soe) {
	var _this = this;
	var reSoe = (soe === "s") ? "e" : "s";
	var areaFlag = (soe === "s") ? "origarea" : "destarea";
	var navFlag = (soe === "s") ? "navorig" : "navdest";
	var busFlag = (soe === "s") ? "busorig" : "busdest";
	//
	if (this._opts.citylist && (!!_this.options()[areaFlag])) {
		this._cityIndex = 10;
		var city = data[soe].e;
		if (!city) {
			city = "全国";
		}
		if (!this._kCityListObjs[soe]) {
			this._opts.cylopts.defcity.name=city;
			this._kCityListObjs[soe] = new KCityList(this._kCityListContainer[soe], this._opts.cylopts);
			KEvent.bind(this._kCityListObjs[soe], "beforeopenhotcity", function(evt, widget) {
				widget.dom().css( {
					"z-index" : _this._cityIndex++
				});
				if (_this._kCityListObjs[reSoe]) {
					_this._kCityListObjs[reSoe].hideHotCity();
				}
			});
			KEvent.bind(this._kCityListObjs[soe], "citychanged", function(data, obj, curCityInfo, oldCityInfo) {
				if (_this._setCityFromInner === true) {
					_this._setCityFromInner = false;
					return;
				}
				var cityName = curCityInfo.name;
				if (oldCityInfo.name === cityName) {
					return;
				}
				//
				if (_this._queryopts.type == KQueryType.navsearch) {
					_this._queryopts[navFlag].city = cityName;
				} else if (_this._queryopts.type == KQueryType.busearch) {
					_this._queryopts[busFlag].city = cityName;
				}
				//
				var urlHash = _this._createUrlHashByQueryOpts(_this._queryopts);
				_this._pageNumber[soe]=1;
				_this._requestDataForCityChanged(urlHash, soe);
			});
		} else {
			_this._setCityName(soe, city);
		}
	}
};
/**
 * 使用query()方法请求后台完毕，同步KList对象
 * @param {Array} arr
 * @param {String} soe
 * @param {Number} sum
 */
KStationList.prototype._updateObjKList = function(arr, soe, sum) {
	var _this = this;
	_this._parsedData[soe] = _this._handleData(arr, 0);
	
	if (!_this._kListObjs[soe]) {
		var $listDiv = _this._listDiv[soe];
		$listDiv.html("").addClass(_this._cssClassName.LST);
		$("<ul/>").appendTo($listDiv).html(_this._parseDataToNode(_this._parsedData[soe]));
		$listDiv.children().append(
				"<div class=\"mwp_sl_m\"><a href=\"javascript:void(0);\">更多<span>&gt;&gt;</span></a></div>");
		var $origMoreBtn = $listDiv.find("ul>div>a").eq(0);
		KEvent.bind($origMoreBtn, "click", _this._clickMoreHandler, {
			soe : soe,
			obj : this
		});
		var objKList = new KList($listDiv.get(0), {
			sortable : false,
			multiple : false,
			deselect : false,
			scroll2view : false
		});
		_this._kListObjs[soe] = objKList;
		_this._bindSelect(objKList, soe);
	} else {
		var j, node, obj;
		_this._kListObjs[soe].clearResult();
		for (j = 0; j < _this._parsedData[soe].length; j++) {
			obj = _this._parsedData[soe][j];
			obj.deletable = false;
			obj.editable = false;
			obj.selected = false;
			node = $(obj.node);
			obj.text = node.children("label").html();
			obj.iconClass = node.children("span").eq(1).attr("class");
			_this._kListObjs[soe].insert(obj);
		}
	}
	if (arr.length < 1) {
		_this._listDiv[soe].hide();
		_this._msgBox[soe].show();
	} else {
		_this._listDiv[soe].show();
		_this._msgBox[soe].hide();
	}
	if (sum <= _this.options().pagesize) {// don't show more button
		$(_this._kListObjs[soe].dom()).find("ul>div").hide();
	} else {
		$(_this._kListObjs[soe].dom()).find("ul>div").show();
	}
};

/**
 * 根据soe为chechbox绑定事件，
 * @param {String} soe
 */
KStationList.prototype._bindCheckBoxBySoe = function(soe){
	var _this = this;
	var reSoe = (soe === "s") ? "e" : "s";
	var $soeInput = _this._head[soe].find("input");
	var $reSoeInput = false;
	if (_this._head[reSoe]) {
		$reSoeInput = _this._head[reSoe].find("input");
	}
	KEvent.clear($soeInput, "click");
	KEvent.bind($soeInput, "click", function(){
		if ($reSoeInput && $reSoeInput.length && $reSoeInput.is(":checked")) {
			$reSoeInput.attr("checked", false);
			_this._clearNormalMarkers(reSoe);
		}
		if (!$soeInput.is(":checked")) {
			_this._clearNormalMarkers(soe);
		} else {
			if (_this._kListObjs[soe].items().length == 0) {
				$soeInput.attr("checked", false);
				return;
			}
			_this._clearAllMarkers(soe);
			_this._addMarkersByCheckBox(soe);
		}
	});
};
/**
 * 点击checkbox后，重建地图上所有的marker
 * @param {String} soe
 */
KStationList.prototype._addMarkersByCheckBox = function(soe) {
	var _this = this;
	//
	var selectedItem = _this._kListObjs[soe].selected()[0];
	var selectedItemIndex = (selectedItem ? selectedItem.index : 0);
	//
	var tempMarkers = [];
	var markerData = _this._parsedData[soe];
	var markerDataLength = markerData.length;
	//
	var marker, latlon, markerDataItem;
	for (index=0; index < markerDataLength; index++) {
		markerDataItem = markerData[index];
		latlon = markerDataItem.kvalue || "北京市";
		if (markerDataItem.index === selectedItemIndex) {
			_this._clearSoeMarkers(soe);
			marker = _this._createSoeMarker(soe, latlon, markerDataItem.name, index);
			_this._selectedMarkers[soe] = marker;
		} else {
			marker = _this._createNormalMarker(soe, latlon, index);
		}
		markerDataItem.marker = marker;
		tempMarkers.push(marker);
	}
	// to create soe markers
	KMap.addMarkers(tempMarkers);
	_this._selectedMarkers[soe].hilite();
	for (index = 0; index < tempMarkers.length; index++) {
		KEvent.bind(tempMarkers[index], "click", _this._markerClickHandler, {
			mk : tempMarkers[index],
			t : soe
		}, _this);
	}
	KEvent.trigger(_this._kListObjs[soe], "selectchanged");
};
/**
 * 根据soe返回一般的marker的应该所在的group
 * @param {String} soe
 * @return {String} 
 */
KStationList.prototype._normalMarkerGroup = function(soe) {
	return (this.flag() + "_" + soe + "_sel");
};
/**
 * 根据soe返回创建一般的marker的KMarkerOptions 
 * @param {String} soe
 * @return {KMarkerOptions} 
 */
KStationList.prototype._normalMarkerOpts = function(soe) {
	var markerOpts = KConfig.get("mk_mo_sd", {
		t : soe
	});
	markerOpts.label = null;
	markerOpts.icon.shadow="";
	markerOpts.group = this._normalMarkerGroup(soe);
	return markerOpts;
};
/**
 * 创建一般的marker
 * @param {String} soe
 * @param {String} latlon
 * @param {Integer} index
 * @return {KMarker}
 */
KStationList.prototype._createNormalMarker = function(soe, latlon, index) {
	var _this = this;
	var marker = new KMarker(latlon, _this._normalMarkerOpts(soe));
	marker._liIndex = index;
	return marker;
};
/**
 * 根据soe返回当前选择的Marker应该所在的group
 * @param {String} soe
 * @return {String} 
 */
KStationList.prototype._soeMarkerGroup = function(soe) {
	return (this.flag() + "_" + soe);
};
/**
 * 根据soe返回创建当前选择的Marker的KMarkerOptions 
 * @param {String} soe
 * @param {String} name
 * @return {KMarkerOptions} 
 */
KStationList.prototype._soeMarkerOpts = function(soe, name) {
	name = (typeof name === "undefined") ? "" : name;
	var markerOpts = KConfig.get("mk_mo_sdt", {
		n : name,
		t : soe
	});
	markerOpts.group = this._soeMarkerGroup(soe);
	return markerOpts;
};
/**
 * 根据soe创建当前选择的Marker
 * @param {String} soe
 * @param {String} latlon
 * @param {String} name
 * @param {Integer} listItemIndex
 * @return {KMarker}
 */
KStationList.prototype._createSoeMarker = function(soe, latlon, name, listItemIndex) {
	var _this = this;
	var marker = new KMarker(latlon, _this._soeMarkerOpts(soe, name));
	marker._liIndex = listItemIndex;
	_this._selectedMarkers[soe] = marker;
	_this._selectedMarkers.currentSelected = soe;
	return marker;
};
/**
 * 地图上所有的marker被点击后进行的处理
 * @param {Object} eventinfo
 */
KStationList.prototype._markerClickHandler = function(eventinfo){
	var _this = this;
	var marker = eventinfo.data.mk;
	var soe = eventinfo.data.t;
	if (marker.group() === _this._normalMarkerGroup(soe)) {
		_this._kListObjs[soe].select(marker._liIndex);
	}
};
/**
 * 
 * @param data
 *            {KListItem[]}
 * @return {String} HTML文本
 */
KStationList.prototype._parseDataToNode = function(data) {
	var nodes = [];
	for ( var j = 0; j < data.length; j++) {
		nodes.push(data[j].node);
	}
	return nodes.join("");
};

/**
 *  为KList对象绑定事件
 * @param {KList} objKList
 * @param {String} soe
 */
KStationList.prototype._bindSelect = function(objKList, soe) {
	var _this = this;
	var changedHandler = function(event, list, item) {
		var soe = event.data;
		if (!item) {// 使用KEvent.trigger主动触发"selectchanged"时，item可能不存在
			item = _this._kListObjs[soe].selected()[0];
			if (!item) {//如果没有选中项，使用第一个
				item = _this._kListObjs[soe].item(0);
			}
		}
		var marker, latlon = item.kvalue || "北京市";
		var index = item.index;
		var name = _this._result[soe].d[index].n;
		var listItem = _this._parsedData[soe][index];
		if (_this._isSupportMap&&_this._isMapInitialized()) {//支持地图且初始化了
			if (_this._head[soe].find("input:checkbox").is(":checked")) {
				if (_this._isDragEnd !== true) {
					var oldMarker = _this._selectedMarkers[soe];
					oldMarker.setEditable(false);
					oldMarker.setOptions(_this._normalMarkerOpts(soe));
					var selectedMarker = listItem.marker;
					selectedMarker.setOptions(_this._soeMarkerOpts(soe, name));
					selectedMarker.hilite();
					_this._bindDragForMarker(selectedMarker, soe);
					selectedMarker.setEditable(true);
					_this._selectedMarkers[soe] = selectedMarker;
					_this._mapFitZoom();
					var $liDom = $(item.node);
					KTools.scrollIntoView($liDom, $liDom.parent().parent(), "fast");
				} else {
					_this._isDragEnd = false;
				}
			} else {
				if (_this._isDragEnd !== true) {
					_this._clearSoeMarkers(soe);
					marker = _this._createSoeMarker(soe, latlon, name, index);
					KMap.addMarker(marker);
					marker.hilite();
					_this._bindDragForMarker(marker, soe);
					marker.setEditable(true);
					_this._mapFitZoom();
				} else {
					_this._isDragEnd = false;
				}
			}
		}
		var _key = (soe === "s") ? "orig" : "dest";
		var dataItem = _this._parsedData[soe][index];
		var info = _this._createKPOInfoObject(dataItem.name, dataItem.kvalue, dataItem.pid, _this._result[soe].e,
				dataItem.type);
		_this._selectedItemsInfo[_key] = info;
		/**-----start---兼容用KNavsearch KBusearch 1.0版本，若使用1.0以上版本，可以去掉**/
		//KEvent.trigger(_this, "selectchanged", _this, info);
		KEvent.trigger(_this, "selectchanged", _this);
		/**-----end---兼容用KNavsearch KBusearch 1.0版本，若使用1.0以上版本，可以去掉**/
	};
	if (_this._kListObjs && _this._kListObjs[soe]) {
		KEvent.unbind(_this._kListObjs[soe], "selectchanged");
	}
	KEvent.bind(objKList, "selectchanged", changedHandler, soe);
	this._kListObjs[soe] = objKList;
};
/**
 * 创建KPOInfo对象
 * @param {String} name
 * @param {String} latlon
 * @param {String} pid
 * @param {String} city
 * @param {String} type
 * @return {KPOInfo}
 */
KStationList.prototype._createKPOInfoObject = function(name, latlon, pid, city, type) {
	var info = KTools.copyOptions( {}, KPOInfo);
	info.name = name;
	info.latlon = latlon;
	info.pid = pid;
	info.city = city;
	if (typeof type !== "number") {
		type = parseInt(type, 10);
		type = isNaN(type) ? KPOInfo.type : type;
	}
	info.type = type;
	return info;
};
/**
 * 为Marker绑定拖动事件
 * @param {KMarker} marker
 * @param {String} soe
 */
KStationList.prototype._bindDragForMarker = function(marker, soe) {
	var _this = this;
	if (!marker._sl_bind_drag) {//如果没有绑定事件
		marker._sl_bind_drag=true;
		KEvent.bind(marker, "dragstart", _this._dragStartMarker, soe, _this);
		KEvent.bind(marker, "dragend", _this._dragEndMarker, soe, _this);
	}
};
/**
 * dragstart事件监听器
 * @param {Object} eventInfo
 * @param {KMarker} marker
 */
KStationList.prototype._dragStartMarker = function(eventInfo, marker) {
	var _this = this;
	var soe = eventInfo.data;
	_this._selectedMarkers[soe] = marker;
	_this._selectedMarkers["currentSelected"] = soe;
	KMap.clearMarker(_this._normalMarkerGroup(soe));
	_this._head[soe].find("input:checkbox").attr("checked", false);
};
/**
 * dragend事件监听器
 * @param {Object} eventInfo
 * @param {KMarker} marker
 * @param  {MPoint} point
 * @param  {String} name
 */
KStationList.prototype._dragEndMarker = function(eventInfo, marker, point, name) {
	var _this = this;
	var soe = eventInfo.data;
	var latlon = point.getPid();
    if(!name){
        KMap.getGeo(latlon,function(city,name){
            //更新_queryopts
            if (_this._queryopts.type == KQueryType.navsearch) {
                if (soe === "s") {
                    _this._queryopts.navorig={"latlon":latlon,"name":name};
                } else {
                    _this._queryopts.navdest={"latlon":latlon,"name":name};
                }
            } else if (_this._queryopts.type == KQueryType.busearch) {
                if (soe === "s") {
                    _this._queryopts.busorig={"latlon":latlon,"name":name};
                } else {
                    _this._queryopts.busdest={"latlon":latlon,"name":name};
                }
            }
            //
            var urlHash = _this._createUrlHashByQueryOpts(_this._queryopts);
            _this._requestDataForDrag(urlHash, soe);
        });
    }else{
        //更新_queryopts
        if (_this._queryopts.type == KQueryType.navsearch) {
            if (soe === "s") {
                _this._queryopts.navorig={"latlon":latlon,"name":name};
            } else {
                _this._queryopts.navdest={"latlon":latlon,"name":name};
            }
        } else if (_this._queryopts.type == KQueryType.busearch) {
            if (soe === "s") {
                _this._queryopts.busorig={"latlon":latlon,"name":name};
            } else {
                _this._queryopts.busdest={"latlon":latlon,"name":name};
            }
        }
        //
        var urlHash = _this._createUrlHashByQueryOpts(_this._queryopts);
        _this._requestDataForDrag(urlHash, soe);
    }
};
/**
 * 触发"selectdone"事件
 */
KStationList.prototype._triggerSelectDone = function(){
	var info = this._selectedItemsInfo;
	if (!info.orig && !info.dest) {//如果没有起点和终点结果
		 return; 
	}
	if (info.orig && info.dest) {//如果起终点都有结果
		if (info.orig.latlon == info.dest.latlon) {
			KTools.showMsg("请选择不同的起点终点", {
				node: this._submitBtn
			});
			return;
		}
		if (!!this.options().samecity && (info.orig.city !== info.dest.city)) {
			KTools.showMsg("请重新选择，起终点必须在同一个城市", {
				node: this._submitBtn
			});
			return;
		}
	}
	KEvent.trigger(this, "selectdone", this, info.orig, info.dest);
	//KEvent.trigger(this, "submitbtn", this, false);
};
/**
 * 用于“更多”按钮被点击时的处理
 * 
 * @param eventinfo
 */
KStationList.prototype._clickMoreHandler = function(eventinfo) {
	var _this = eventinfo.data.obj;
	var soe = eventinfo.data.soe;
	if (_this._pageNumber[soe] >= _this.options().pagecount) {
		return;
	}
	_this._pageNumber[soe]++;
	var urlHash = _this._createUrlHashByQueryOpts(_this._queryopts);
	$.ajax({
		type : "GET",
		url : _this._createRequestUrl(urlHash, soe, _this._pageNumber[soe]),
		success : function(data) {
			if (!data || !data.m) {
				return;
			}
			var city = data[soe].e;
			var dataArr = data[soe].d;
			// 更新 _this._result
			_this._result[soe].d = _this._result[soe].d.concat(dataArr);
			// 更新结果列表
			var j, node, obj;
			var objKList = _this._kListObjs[soe];
			var listItems = _this._handleData(dataArr, _this._parsedData[soe].length);
			for (j = 0; j < listItems.length; j++) {
				obj = listItems[j];
				obj.deletable = false;
				obj.editable = false;
				obj.selected = false;
				node = $(obj.node);
				obj.text = node.children("label").html();
				obj.iconClass = node.children("span").eq(1).attr("class");
				objKList.insert(obj);
			}
			// 如果checkbox选中,更新地图上的标注
			if (_this._head[soe].find("input:checkbox").is(":checked")) {
				_this._addMoreMarkers(listItems, soe, _this._parsedData[soe].length);
			}
			//更新_this._parsedData
			_this._parsedData[soe] = _this._parsedData[soe].concat(listItems);
			// 是否显示“更多”按钮
			var sum = parseInt(data[soe].a, 10);
			var configOpts = _this.options();
			if (sum <= configOpts.pagesize || _this._pageNumber[soe] >= _this.options().pagecount) {
				$(_this._kListObjs[soe].dom()).find("ul>div").hide();
			}
			// KEvent.clear(objKList, "selectchanged");
			// _this._bindSelect(objKList, soe);
		},
		error : function() {
			if (!KMap.isInitialized(_this._opts.mapcontainer)) {
				KEvent.trigger(_this, "mapready", _this, undefined, undefined);
			}
		},
		dataType : "json"
	});
};
/**
 * 当用户点击“更多”按钮时，如果checkbox选中了， 需要增加新的marker
 * @param {Object} arr
 * @param {Object} soe
 * @param {Object} base
 */
KStationList.prototype._addMoreMarkers = function(arr, soe, base) {
	var _this = this;
	var index, item, temp, markers = [];
	for (index = 0; index < arr.length; index++) {
		item = arr[index];
		latlon = item.kvalue;
		temp = _this._createNormalMarker(soe, latlon, (base + index));
		item.marker = temp;
		markers.push(temp);
	}
	KMap.addMarkers(markers);
	_this._selectedMarkers[soe].hilite();
	for (index = 0; index < markers.length; index++) {
		KEvent.bind(markers[index], "click", _this._markerClickHandler, {
			mk : markers[index],
			t : soe
		}, _this);
	}
};
/**
 * 更新KMarker的label
 * @param {KMarker} marker
 * @param {String} content
 */
KStationList.prototype._updateLabelContent = function(marker, content) {
    if(!marker || !marker.labelDom) return ;
	var labelDom = marker.labelDom();
	if (!content) {
		content = "自定义";
	}
	$("[mfg='lbl']", labelDom).eq(0).html(content);
};
/**
 * 根据删除地图上唯一的起(终)点Marker
 * 
 * @param soe
 *            值为"s"或"e",表示起点或终点
 */
KStationList.prototype._clearSoeMarkers = function(soe) {
	var _this = this;
	KMap.clearMarker(_this._soeMarkerGroup(soe));// 自动移除绑定的事件等等
	_this._selectedMarkers[soe] = undefined;
	var reSoe = (soe === "s") ? "e" : "s";
	if (!!_this._selectedMarkers[reSoe]) {
		_this._selectedMarkers.currentSelected = reSoe;
	} else {
		_this._selectedMarkers.currentSelected = undefined;
	}
};
/**
 * 根据soe删除地图上起(终)点群，为一般的marker
 * 
 * @param soe
 *            值为"s"或"e",表示起点或终点
 */
KStationList.prototype._clearNormalMarkers = function(soe) {
	var _this = this;
	KMap.clearMarker(_this._normalMarkerGroup(soe));
};
/**
 * 根据soe删除地图上起(终)点群和起(终)marker
 * 
 * @param soe
 *            值为"s"或"e",表示起点或终点
 */
KStationList.prototype._clearAllMarkers = function(soe) {
	var _this = this;
	_this._clearNormalMarkers(soe);
	_this._clearSoeMarkers(soe);
};
/**
 * 用于判断查询条件是经纬度还是Pid还是name优先，返回值用于设置on或dn参数
 * 
 * @param obj
 * @returns latlon, pid, name 值之一，或者""
 */
KStationList.prototype._latlonPidName = function(obj) {
	var tempVal = "";
	if (!obj) {
		return "";
	}
	if (!!obj.latlon) {
		tempVal = obj.latlon;
	} else if (!!obj.pid) {
		tempVal = obj.pid;
	} else if (!!obj.name) {
		tempVal = obj.name;
	} else {
		tempVal = "";
	}
	return tempVal;
};
/**
 * 组件内部统一的fitzoom方法
 */
KStationList.prototype._mapFitZoom = function(){
	var sMarkers = KMap.getMarkers(this._soeMarkerGroup("s"));
	var eMarkers = KMap.getMarkers(this._soeMarkerGroup("e"));
	var sNormalMarkers = KMap.getMarkers(this._normalMarkerGroup("s"));
	var eNormalMarkers = KMap.getMarkers(this._normalMarkerGroup("e"));
	var allMarkers=sMarkers.concat(sMarkers, eMarkers,sNormalMarkers,eNormalMarkers);
	var points=[];
	for(var index=0; index<allMarkers.length; index++){
		if(allMarkers[index] && allMarkers[index].latlon){
			points.push(allMarkers[index].latlon());
		}
	}
	KMap.fitzoom(points);
};
/**
 * 根据theme创建css的类
 * @param {String} theme
 * @returns  {Object}
 */
KStationList.prototype._initCssName = function(theme) {
	var initCss = {};
	for ( var i in KStationList.conf.CLASSNAME) {
		initCss[i] = theme + KStationList.conf.CLASSNAME[i];
	}
	return initCss;
};
/**
 * 
 * @param {String} soe
 * @param {String} name
 */
KStationList.prototype._setCityName = function(soe, name){
	var _this=this;
	if (_this._kCityListObjs && _this._kCityListObjs[soe]&&_this._kCityListObjs[soe].setCity) {
		var cityInfo = KTools.copyOptions({}, KCityInfo);
		cityInfo.name = (!name) ? "全国" : name;
		_this._setCityFromInner = true;
		_this._kCityListObjs[soe].setCity(cityInfo);
	}
};
/**
 * 如果map初始化成功了(_this._maplet将会有值)， 返回true, 否则false
 * 
 * @returns Boolean
 */
KStationList.prototype._isMapInitialized = function(){
	var _this = this;
	if (_this._isSupportMap === false) { return false; }
	if (_this._mapInitedFlag) { return true; }
	if (KMap.isInitialized(_this._opts.mapcontainer)) {
		_this._mapInitedFlag = true;
	}else{
		if (KMap.isInitialized()) {
			_this._mapInitedFlag = true;
		}
	}
	return _this._mapInitedFlag;
};
/**
 * 处理影响urlHash的工作
 * @param opst {Object}
 */
KStationList.prototype._changeHashAction = function(opts) {
	var _this = this;
	var queryOpts;
	if (opts) {
		queryOpts = opts;
	} else {
		queryOpts = $.extend(true, {}, _this._queryopts);
	}
	var urlHash = _this._createUrlHashByQueryOpts(queryOpts);
	KEvent.trigger(_this, "changehash", _this, queryOpts, urlHash);
	if (_this.options().changehash !== false) {
		KListener.setHash(urlHash, true);
	}
};
/**
 * 判断和同步KSearchbox对象，依赖组件内部的this._queryopts的及时更新
 */
KStationList.prototype._updateSearchbox = function(){
	if(this._searchbox&&this._searchbox.query){
		this._searchbox.query($.extend(true,{},this._queryopts), true);
	}
};
/**
 * to get engine version of ie
 * @returns Number
 */
KStationList.prototype._ieEngineVersion = function() {
	if ($.browser.msie) {
		var engine = document.documentMode ? document.documentMode : 5;
		engine = document.compactMode == "CSS1Compact" ? 7 : engine;
		return engine;
	}
};
KStationList.prototype._initChildVision = function() {
	this._msgBox.e.prevAll().show();
	//
	this._msgBox.s.hide()
	if (!this.options().origarea) {
		this._kCityListContainer["s"].hide();
		this._head["s"].hide();
		this._listDiv.s.hide();
		this._$dom.children("hr").hide();
	}else{
		if (this.options().citylist) {
			this._kCityListContainer["s"].show();
		} else {
			this._kCityListContainer["s"].hide();
		}
	}
	//
	this._msgBox.e.hide();
	if (!this.options().destarea) {
		this._kCityListContainer["e"].hide();
		this._head["e"].hide();
		this._listDiv.e.hide();
		this._$dom.children("hr").hide();
	}else{
		if (this.options().citylist) {
			this._kCityListContainer["e"].show();
		} else {
			this._kCityListContainer["e"].hide();
		}
	}
};

KStationList.prototype._showMsgTip = function(elem){
	if(!elem){
		return;
	}
    var hint = "找不到，请更换新地点";
    var msgId = KTools.showMsg(hint, {
        node: elem,
		autoclose:5,
		buboptions:{
			outside:false
		}
    });
    $(elem).one("click keydown focus", function(){
        KTools.hideMsg(msgId);
    });
};
/*******************************************************************************
 * 非文档定义的接口，但被其他组件使用了
 ******************************************************************************/
/**
 * 为兼容1.0版本的KNavsearch
 */
KStationList.prototype.clearMarkers = function(){
	this._clearAllMarkers("s");
	this._clearAllMarkers("e");
};


/* *
标准登录组件。
 作者：fuyg
 版本：2.0.0
 创建时间：2010-07-19
 最后修改时间：2010-07-19 23:07
 ============================================
 『修改历史』
 */

var KStdAccount = KClass.create("KStdAccount", KAccount);

KStdAccount.conf = {
	CLASSNAME : {
		// 组件顶层容器（div）样式。
		A : "_acc"
		// 关闭按钮容器（div）样式。
		,AT : "_acc_t"
		// 关闭按钮容器（a）样式。
		,ACB : "_acc_cb"
		// 内容区（div）样式。
		,AC : "_acc_c"
	
	}
};
/**
 * 构造方法
 * @param container 
 * @param options
 * 
 */
KStdAccount.initialize = function(container, options) 
{
	var _this = this;
	// html层
	// 顶级容器,默认隐藏
	_this._$dom = $(container).eq(0).hide();
	_this._dom = _this._$dom.get(0);
	// 关闭按钮区域
	_this._$clsDiv = $(">div:first", _this._$dom);
	_this._$clsA = $(">a:first", _this._$clsDiv);
	// 内容区域
	_this._$ac = $(">div:eq(1)", _this._$dom);
	_this._$iframe = $("iframe", _this._$dom);
	_this._origSrc = _this._$iframe.attr("src");

	// 表现及样式层
	_this._opts = {};
	_this.setOptions(options);
	// private info
	//实时用户信息
	_this._userInfomation = {
			"signin" : false
		};
	//状态
	_this._state = {
		_isBindResizeWgt : false,
		_msgBoxId : null
	};

	_this._$clsA.bind("click", function() {
		_this.hide();
	});

	//延时是为了能够在自动登录情况下能够触发"signin"事件
	window.setTimeout(function() {
		_this._signinHandler();
	}, 100);
	//登录成功后被iframe调用的函数
	var fnName = this._getRandomName();
	this._callbackName = fnName;
	//this._setCallBack(fnName);
	window[fnName] = function(){
		_this._signinHandler();
	};
};
/** ****************继承自KObject************** */
/**
 * 释放当前对象的所有资源
 * @uncrunch
 */
KStdAccount.prototype.finalize = function() 
{
	var _this = this;

	_this._$clsA.unbind();

	window[this._callbackName] = null;
	 KAccount.prototype.finalize.apply(_this);
};

/** ****************继承自KWidget************** */
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KStdAccount.prototype.version = function() 
{
	return "2.0.0";
};
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KStdAccount.prototype.cnname = function() 
{
	return "标准登录组件";
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KStdAccount.prototype.dependent = function() 
{
	return [ KAccount, KAccountInfo, KClass, KEvent, KObject, KPosition, KSigninOptions, KSignoutOptions,
			KStdAccountOptions, KTools, KWidget, jQuery ];
};
/**
 * 设置组件的配置选项
 * @param options
 * @uncrunch
 */
KStdAccount.prototype.setOptions = function(obj) 
{
	var _this = this;
	obj = KTools.copyOptions(obj, _this._opts, KStdAccountOptions);
	_this._setUserStyle(obj.userstyle);
	_this.setTheme(obj.theme);
	_this._setOpt4(obj);
};

/***
 * 设置主题(theme)
 * @param thm  String 主题名称  
 * @return 设置成功返回true;否则false;
 * @uncrunch
 */
KStdAccount.prototype.setTheme = function(scheme) 
{
	var _this = this;
	// 不是字符串及trim后为空，不设置
	if (_this._opts.userstyle ===true  || typeof scheme !== "string" || $.trim(scheme).length < 1) {
		return false;
	}
	scheme = $.trim(scheme);
	// 如果相同，没有必要再次设置
	if (_this._opts.theme === scheme) {
		return true;
	}
	//
	var oldTheme = _this._opts.theme || "mwp";
	var cn = KStdAccount.conf.CLASSNAME;
	// 顶级容器
	_this._$dom.removeClass(oldTheme + cn.A).addClass(scheme + cn.A);

	// 关闭按钮区域
	_this._$clsDiv.removeClass(oldTheme + cn.AT).addClass(scheme + cn.AT);
	_this._$clsA.removeClass(oldTheme + cn.ACB).addClass(scheme + cn.ACB);
	// 内容区域
	_this._$ac.removeClass(oldTheme + cn.AC).addClass(scheme + cn.AC);

	_this._opts.theme = scheme;
	return true;
};
/** ****************继承自KAccount所有方法与事件************** */

/**
 * signin方法什么也不做
 * @uncrunch
 */
KStdAccount.prototype.signin = function(){
	
	
};
/**
 * 注销当前用户
 * @param opts KSignoutOptions 类型
 * @return KAccountInfo 类型
 * @uncrunch
 */
KStdAccount.prototype.signout = function(){
    var _this = this;
    // 若已注销，返回
    if (!_this._userInfomation || _this._userInfomation.signin === false) {
        return _this.account();
    }
    _this._userInfomation.signin = false;
    //
    var obj = _this.account();
    //
	$("body").append("<script type='text/javascript' src='http://passport.mapbar.com/index.php?m=user&a=setcookieout' reload='1'>");
	_this._$iframe.attr("src", _this._origSrc);
	KEvent.trigger(_this, "signout", _this, obj);
//    $.ajax({
//        type: "GET",
//        url: "http://ucport.mapbar.com/index.php?m=port&a=synlogout&mode=2&encode=1",
//        dataType: "jsonp",
//        success: function(data){
//            if (data && data.loginoutscript) {
//                //$(data.loginoutscript).appendTo(document.body);
//
//            } else {
//                //
//            }
//        }
//    })
    //
    return obj;
};
/**
 * 返回当前登录用户信息，可通过返回值的 signin 属性判断登录状态。
 * @return KAccountInfo 类型
 * @uncrunch
 */
KStdAccount.prototype.account = function() 
{
	var ui = this._userInfomation;
	var obj = {};
	if (ui) {
		obj = {
			"signin" : ui.signin,
			"uid" : ui.uid,
			"uidc" : ui.uidc,
			"user" : ui.user,
			"email" : ui.email,
			"lastime" : ui.lastime,
			"token" : ui.token
		};
	}
	return obj;
};

/** ****************KStdAccount************** */
/**
 * 显示组件
 * @uncrunch
 */
KStdAccount.prototype.show = function() 
{
	var _this = this;
	//_$dom不存在或处于可见状态，返回
	if(!_this._$dom||_this._$dom.is(":visible")===true){
		return;
	}
	this._setCallBack(this._callbackName);

	KTools.lightbox( {
		element : _this._dom,
		visible : true
	});
	_this._reposition();
	_this._$dom.show();
	//_this._$usr.trigger("focus");
	if (_this._state._isBindResizeWgt === false) {
		var resizeHanler = function() {
			//_reposition是function类型，说明组件未被销毁
			if (typeof _this._reposition === "function") {
				_this._reposition();
			} else {//_reposition不是function类型，说明组件已被销毁， 自动解除绑定的事件
				$(window).unbind("resize", resizeHanler);
			}
		};
		//整个组件只绑定一次，并非每次show的时候都绑定
		$(window).bind("resize", resizeHanler);
		_this._state._isBindResizeWgt = true;
	}
	
};
/**
 * 隐藏组件
 * 
 * @uncrunch
 */
KStdAccount.prototype.hide = function() 
{
	var _this = this;
	if (!_this._$dom || _this._$dom.is(":visible") === false) {
		return;
	}
	KTools.lightbox( {});
	_this._$dom.hide();
};
/** ****************私有方法************** */




/***
 * 改变组件的位置，使其居中；若不能居中，紧挨左上角
 * 
 */
KStdAccount.prototype._reposition = function() 
{
	var _this = this;
	var wgtW = $(window).width() - _this._$dom.width();
	var wgtH = $(window).height() - _this._$dom.height();

	wgtW = (wgtW > 0) ? wgtW : 0;
	wgtH = (wgtH > 0) ? wgtH : 0;
	//
	_this._$dom.css( {
		left : wgtW / 2,
		top : wgtH / 2
	});
};


/***
 * 从cookie读取用户信息
 * @return 若用户信息存在，返回包含用户相关信息的Object；否则返回null
 */
KStdAccount.prototype._getCookies = function(){
    var getCookie = function(name){
        var value = document.cookie.match(new RegExp("(^| )" + name + "=([^;]*)(;|$)"));
        if (value != null) return decodeURI(decodeURIComponent(value[2]));
        return null;
    };
    var userId = getCookie("userId");
    var userIdc = getCookie("userIdc");
    var userName = getCookie("userName");
	var token = getCookie("ucenter_token");
	var auth = getCookie("ucenter_auth");
    if (!userId || !userIdc || !userName || !token || !auth) {
        return null;
    }
    return {
        "userId": userId,
        "userIdc": userIdc,
        "userName": userName,
		"token":token
    };
};

/***
 * 从cookie中获取用户信息，登录句柄 
 */
KStdAccount.prototype._signinHandler = function() 
{
	var _this = this;
	var cookies = _this._getCookies();
	//window.alert(cookies);
	if (!cookies) {
		return;
	}
	//KAccountInfo类型
	_this._userInfomation = {
		"user" : cookies.userName,
		"uid" : cookies.userId,
		"uidc" : cookies.userIdc,
		"token" : cookies.token,
		"signin" : true,
		"lastime" : new Date()
	};
	//
	KEvent.trigger(_this, "signin", _this, _this.account());
	_this.hide();
};
/***
 * 判断用户是否已经登录
 * @param opts KSigninOptions类型
 * @return 若已经登录，返回true;否则，返回false;
 */

KStdAccount.prototype._isSignined = function(opts) 
{
	var _this=this;
	var ui = _this._userInfomation;

	// _userInfomation中 user不存在，没有登录
	if (ui.user === undefined ) {
		return false;
	}
	// 要登录的帐号信息不存在，没有登录
	if (opts.user === undefined || opts.pwd === undefined) {
		return false;
	}
	// 已经登录的帐号与要登录的帐号信息不同，没有登录
	if (ui.user !== opts.user) {
		return false;
	}
	// 若帐号已登录（前提已经是：已经登录的帐号与要登录的帐号信息相同）
	if (ui.signin === true) {
		return true;
	}
	return false;
};

/**
 * 设置是否使用用户样式
 * 
 * @param bStyle
 *            Boolean 是否使用用户样式
 */
KStdAccount.prototype._setUserStyle = function(bStyle) {
	var _this = this;
	if (typeof _this._opts.userstyle !== "boolean") {
		_this._opts.userstyle = false;
	}
	bStyle = !!bStyle;
	if (bStyle === true) {
		var cn = KStdAccount.conf.CLASSNAME;
		var curTheme = _this._opts.theme||"mwp";
		// 顶级容器
		_this._$dom.removeClass(curTheme + cn.A);

		// 关闭按钮区域
		_this._$clsDiv.removeClass(curTheme + cn.AT);
		_this._$clsA.removeClass(curTheme + cn.ACB);
		// 内容区域
		_this._$ac.removeClass(curTheme + cn.AC);

		//
		_this._opts.theme=null;
	}
	_this._opts.userstyle = bStyle;
};

KStdAccount.prototype._setOpt4 = function(obj) {
	var _this = this;
	var arr = [ "url", "pwdurl", "regurl", "timelen" ];
	$.each(arr, function(index, val) {
		if (!_this._opts[val] || _this._opts[val] !== obj[val]) {
			_this._opts[val] = obj[val];
		}
	});
};

KStdAccount.prototype._getRandomName = function(){
	//return "oniframelogin";
    return "acount_" + (new Date()).getTime();
};

KStdAccount.prototype._setCallBack = function(name){
    var src = this._$iframe.attr("loginurl");
    var pattern = /backfunction=([^&]*)/ig;
    var match = pattern.exec(src);
    //如果没有backfunction
    if (match === null) {
        src = src + "&backfunction=" + name;
    } else {
        if (match[1] && match[1] === name) {
            srcChanged = false;
        } else {
            src = src.replace(pattern, "backfunction=" + name);
        }
    }
    this._$iframe.attr("loginurl", src);
	this._$iframe.attr("src", src);
};

/* *
纠错反馈组件。
 作者：fuyg
 版本：1.0
 创建时间：2010-07-27
 最后修改时间：2010-07-27 10:40
 ============================================
 『修改历史』
 */

var KStdFeedback = KClass.create("KStdFeedback", KFeedback);
KStdFeedback.conf = {
	CLASSNAME : {
		// 组件容器(div)默认样式
		FDB : "_fdb"
		// 组件浮动时容器样式（与mwp_fdb一起使用）
		,FDBF : "_fdb_f"
		// 错误类型列表(ul)样式
		,ETL : "_fdb_etl"
		// 信息区域(div)样式
		,FIF : "_fdb_if"
		// 描述区域(div)样式
		,DES : "_fdb_des"
		// 操作区域(div)样式
		,ACT : "_fdb_act"
		// 说明区域(div)样式
		,FEX : "_fdb_ex"
		// 关闭按钮(a)样式
		,FCB : "_fdb_cb"
		// 有提示内容的文本框(input)未获取焦点时的样式
		,EMP : "_fdb_emp"
	}
};
/**
 * 构造方法
 * 
 * @param container
 *            Node 类型，组件顶级容器。
 * @param opts
 *            KStdFeedbackOptions 类型。
 * @return KStdFeedback 对象。
 * 
 */
KStdFeedback.initialize = function(container, opts) {
	var _this = this;
	_this._opts = KTools.copyOptions( {}, opts, KStdFeedbackOptions);
	_this._maplet = null;	
	_this._setMaplet();
	//
	if (typeof _this._opts.userstyle !== "boolean") {
		_this._opts.userstyle = false;
	}
	_this.setTheme(_this._opts.theme);
	// HTMLElement
	// 顶级容器
	_this._$dom = $(container).eq(0);
	_this._dom = _this._$dom.get(0);
	// 选项卡组件区域
	// 选项卡组件顶级容器
	_this._$tabsDom = $(">div", _this._$dom);
	// 选项卡内容
	_this._$forms = $(">div>form", _this._$tabsDom);
	_this._$decInputs = $("input[mfg='dec']", _this._$tabsDom);
	_this._$dedTextAreas = $("textarea[mfg='ded']", _this._$tabsDom);
	// 组件关闭按钮
	_this._$closeBtn = $(">a", _this._$dom);
	// 动作层
	_this._objKStdTabs = new KStdTabs(_this._$tabsDom.get(0));
	_this._inputHint(_this._$decInputs);
	_this._textAreaPop(_this._$dedTextAreas);
	_this._textAreaHint();
	_this._$forms.bind("submit", function() {
		return false;
	});
	$("input:submit", _this._$tabsDom).bind("click", function(event) {
		var index = $("input:submit", _this._$tabsDom).index($(event.target));
		_this._checkAndSubmit(index);
		return false;
	});
	(_this._opts.closebtn === true) ? _this._$closeBtn.show() : _this._$closeBtn.hide();
	_this._$closeBtn.bind("click", function() {
		_this.hide();
	});
	$("form>div>a", _this._$dom).bind("click", function() {
		KEvent.trigger(_this, "cancel");
		_this.hide();
	});
	$("input:checkbox", _this._$forms.eq(0)).eq(1).bind("change", function() {
		if ($(this).attr("checked")) {
			_this._setPoiMarkerAction();
		}
	});
	KEvent.bind(_this._objKStdTabs, "selected", function(event, wgt, prev, curr) {
		_this._tabSwitch(curr.index);

	});
	// private variables
	_this._msgBoxId = null;
	_this._errorType = null;
	// 处于第0个选项卡时，反馈类型是否为POI_ERROR
	_this._isPoiFd = true;
//	var obj = KConfig.get("mk_mo_mm", {
//		row : 8,
//		col : 5
//	});
//	_this._iconImg = obj.icon.img;
	_this._errorPoiInfo = null;
	_this._errorPoiMarker = null;
	_this._errorPoiEditable = null;
	_this._errorPoiOriLatlon = null;
	_this._errorRouteInfo = null;
	_this._userMarker = null;
	_this._decInputHintText = "请输入您的电子邮箱或联系电话";
	_this._taHintText = "";
	_this._taHTMemo = "";
	// 当setErrorPOI时，_errorPoiMarker最初的可见状态
	_this._oriVisible = null;
	//setErrorPoi方法中记录url和notes信息
	_this._poiUN={};
	//setErrorRoute方法中记录url
	_this._routeUrl=null;
	//
	_this._resetForms();
	//
	_this._preLoad();

};
/*******************************************************************************
 * 继承自KObject
 */
/**
 * 释放当前对象的所有资源
 * 
 * @uncrunch
 */
KStdFeedback.prototype.finalize = function() {
	var _this = this;
	_this._resetInitState();
	_this._$decInputs.unbind();
	_this._$dedTextAreas.unbind();
	KEvent.clear(_this._objKStdTabs);
	_this._objKStdTabs.finalize();
	//
	KFeedback.prototype.finalize.apply(_this);

};

/*******************************************************************************
 * 继承自KWidget
 */
/**
 * 返回版本信息。
 * 
 * @return String 版本号字符串。
 * @uncrunch
 */
KStdFeedback.prototype.version = function() {
	return "1.0";
};
/**
 * 中文名称描述。
 * 
 * @return String
 * @uncrunch
 */
KStdFeedback.prototype.cnname = function() {
	return "纠错反馈组件";
};
/**
 * 返回依赖的其它组件。
 * 
 * @return KObject[]
 * @uncrunch
 */
KStdFeedback.prototype.dependent = function() {
	return [ KClass, KConfig, KEvent, KFBErrorType, KFeedback, KFeedbackInfo, KFeedbackType, KIconOptions, KMap,
			KMarker, KMarkerOptions, KObject, KPOInfo, KPosition, KRouteInfo, KStdFeedbackOptions, KStdTabs, KTools,
			KWidget, KWidgetFlag, jQuery ];
};
/**
 * 设置组件的配置选项
 * 
 * @param options
 * @uncrunch
 */
KStdFeedback.prototype.setOptions = function(options) {
	if (!options) {
		return;
	}
	
	var _this = this;
	//console.log(_this._opts);
	if (typeof options.url === "string") {
		var url = $.trim(options.url);
		if (url.length < 1) {
			return;
		}
		_this._opts.url = url;
	}
	if (typeof options.closebtn === "boolean") {
		(options.closebtn === true) ? _this._$closeBtn.show() : _this._$closeBtn.hide();
		_this._opts.closebtn = options.closebtn;
	}
	if (typeof options.userstyle === "boolean") {
		_this._setUserStyle(options.userstyle);
	}
	if (typeof options.theme === "string") {
		_this.setTheme(options.theme);
	}

};
/**
 * 设置组件的主题
 * 
 * @param scheme
 *            String 主题名称
 * @uncrunch
 */
KStdFeedback.prototype.setTheme = function(scheme) {
	var _this = this;
	if (_this._opts.userstyle !== false || !scheme || typeof scheme !== "string" || scheme === _this._theme) {
		return;
	}
	
	var old = _this._theme;
	_this._objKStdTabs.setTheme(scheme);
	var klass = KStdFeedback.conf.CLASSNAME;
	_this._$dom.addClass(scheme + klass.FDB).removeClass(old + klass.FDB);
	if(_this._$dom.hasClass(old + klass.FDBF)){
		_this._$dom.addClass(scheme + klass.FDBF).removeClass(old + klass.FDBF);
	}
	_this._$decInputs.each(function() {
		$(this).removeClass(old + klass.EMP);
		var curVal = $(this).val();
		if (!curVal || /^\s*$/.test(curVal) || curVal === _this._decInputHintText) {
			$(this).addClass(scheme + klass.EMP).val(_this._decInputHintText);
		}
	});
	_this._$closeBtn.addClass(scheme + klass.FCB).removeClass(old + klass.FCB);
	//TAB 0 content
	var $form = _this._$forms.eq(0);
	$(">ul", $form).addClass(scheme + klass.ETL).removeClass(old + klass.ETL);
	$(">div[mfg='bi']", $form).addClass(scheme + klass.FIF).removeClass(old + klass.FIF);
	$(">div:eq(1)", $form).addClass(scheme + klass.DES).removeClass(old + klass.DES);
	$(">div:eq(2)", $form).addClass(scheme + klass.ACT).removeClass(old + klass.ACT);
	//Tab 1 content
	$form = _this._$forms.eq(1);
	$(">div[mfg='bi']", $form).addClass(scheme + klass.FIF).removeClass(old + klass.FIF);
	$(">div:eq(1)", $form).addClass(scheme + klass.DES).removeClass(old + klass.DES);
	$(">div:eq(2)", $form).addClass(scheme + klass.ACT).removeClass(old + klass.ACT);
	//Tab 2 content
	$form = _this._$forms.eq(2);
	$(">div:eq(0)", $form).addClass(scheme + klass.FEX).removeClass(old + klass.FEX);
	$(">div:eq(1)", $form).addClass(scheme + klass.DES).removeClass(old + klass.DES);
	$(">div:eq(2)", $form).addClass(scheme + klass.ACT).removeClass(old + klass.ACT);
	//
	_this._theme = scheme;
	_this._opts.theme = scheme;
};
/**
 * 隐藏组件，并将组件设置为初始状态
 * @uncrunch
 */
KStdFeedback.prototype.hide = function() {
	var _this = this;
	KFeedback.prototype.hide.apply(_this);
	_this._resetInitState();
};
/**
 * 显示组件
 * @uncrunch
 */
KStdFeedback.prototype.show = function() {
	var _this = this;
	if (_this._objKStdTabs.current().index === 1) {
		_this._tabUserCur();
	}
	KFeedback.prototype.show.apply(_this);
};
/*******************************************************************************
 * 继承自KFeedback
 */
/**
 * 提交反馈信息到后台管理系统。
 * 
 * @param info
 *            KFeedbackInfo 类型，包含了反馈的详细信息
 * @uncrunch
 */
KStdFeedback.prototype.feedback = function(info) {
	var _this = this;
	var $submit = null;
	var tabIndex = null;
	switch (info.type) {
		case KFeedbackType.POI_ERROR:
		case KFeedbackType.ROUTE_ERROR:
			$submit = $("input:submit", _this._$forms.eq(0));
			tabIndex = 0;
			break;
		case KFeedbackType.USERPOI:
			$submit = $("input:submit", _this._$forms.eq(1));
			tabIndex = 1;
			break;
		case KFeedbackType.SUGGEST:
			$submit = $("input:submit", _this._$forms.eq(2));
			tabIndex = 2;
			break;
		default:
			return;
	}
	$submit.attr("disabled", true);
	var timeoutId = window.setTimeout(function() {
		_this._showOnlyOneMsg("提交中...", {
			autoclose : 0,
			node : $submit.get(0),
			buboptions : {
				pos : KPosition.TOP,
				closebtn : false
			}
		});
	}, 150);
	var postData = _this._asPostData(info);
	var errorHandler = function() {
		KEvent.trigger(_this, "resultstate", _this, false);
		window.clearTimeout(timeoutId);
		$submit.attr("disabled", false);
		_this._showOnlyOneMsg("提交失败！", {
			autoclose : 5,
			node : $submit.get(0),
			buboptions : {
				pos : KPosition.TOP,
				closebtn : true
			}
		});
		_this._resetMapOverlay(tabIndex);
		_this._resetForms(tabIndex);
	};
	$.ajax( {
		"type" : "POST",
		"dataType" : "json",
		"timeout" : 30000,
		"url" : _this._opts.url,
		"data" : postData,
		"success" : function(response) {
			var isSuccess = false;
			if (response && response.a && response.a === "1") {
				isSuccess = true;
			} 
			if (isSuccess === false) {
				errorHandler();
			} else {
				window.clearTimeout(timeoutId);
				KEvent.trigger(_this, "resultstate", _this, true);
				if (_this._msgBoxId !== null) {
					KTools.hideMsg(_this._msgBoxId);
				}
				_this._showOnlyOneMsg("提交成功！", {
					autoclose : 5,
					node : $submit.get(0),
					buboptions : {
						pos : KPosition.TOP,
						closebtn : true
					}
				});
				_this._resetMapOverlay(tabIndex);
				_this._resetForms(tabIndex);
			}

		},
		"error" : function() {
			errorHandler();
		}
	});

};
/*******************************************************************************
 * KStdFeedback公有方法
 */
/**
 * 显示指定的反馈类型选项卡。
 * 
 * @param type
 *            KFeedbackType 类型。
 * 
 * @uncrunch
 */
KStdFeedback.prototype.showTab = function(type) {
	var _this = this;
	switch (type) {
		case KFeedbackType.POI_ERROR:
			_this._showTabPoi();
			break;
		case KFeedbackType.ROUTE_ERROR:
			_this._showTabRoute();
			break;
		case KFeedbackType.USERPOI:
			_this._showTabUser();
			break;
		case KFeedbackType.SUGGEST:
			_this._showTabSuggest();
			break;
	}
};

/**
 * 返回当前的反馈选项卡类型。
 * 
 * @return KFeedbackType 类型。
 * @uncrunch
 */
KStdFeedback.prototype.tab = function() {
	var _this = this;
	var index = _this._objKStdTabs.current().index;
	switch (index) {
		case 0:
			if (_this._isPoiFd !== false) {
				return KFeedbackType.POI_ERROR;
			} else {
				return KFeedbackType.ROUTE_ERROR;
			}
			break;
		case 1:
			return KFeedbackType.USERPOI;
			break;
		case 2:
			return KFeedbackType.SUGGEST;
			break;
	}
};
/**
 * 设置“我要纠错”中的错误类型。
 * 
 * @param type
 *            KFBErrorType 类型。
 * @return
 * @uncrunch
 */
KStdFeedback.prototype.setErrorType = function(type) {
	if (typeof type !== "number") {
		return;
	}
	var _this = this;
	var $boxes = $("ul li input:checkbox", _this._$forms.eq(0));
	var arr = [ "INFO", "LOCATION", "INEXISTENT", "OTHER" ];
	$.each(arr, function(index, val) {
		if (type & KFBErrorType[val]) {
			if (_this._isPoiFd !== false) {
				$boxes.eq(_this._ERRORTYPELIORDER[val]).attr("checked", true);
			} else {
				if (val === "INFO" || val === "OTHER") {
					$boxes.eq(_this._ERRORTYPELIORDER[val]).attr("checked", true);
				} else {
					$boxes.eq(_this._ERRORTYPELIORDER[val]).attr("checked", false);
				}
			}
		} else {
			$boxes.eq(_this._ERRORTYPELIORDER[val]).attr("checked", false);
		}
	});
};
/**
 * 返回“我要纠错”中的错误类型。
 * 
 * @return KFBErrorType 类型。
 * @uncrunch
 */
KStdFeedback.prototype.errorType = function() {
	var _this = this;
	var eType = 0;
	var $boxes = $("ul li input:checkbox", _this._$forms.eq(0));
	var arr = [ "INFO", "LOCATION", "INEXISTENT", "OTHER" ];

	$boxes.each(function(index, dom) {
		if ($(dom).attr("checked")) {
			if (_this._isPoiFd !== false) {
				eType = eType | KFBErrorType[arr[index]];
			} else {
				if (arr[index] === "INFO" || arr[index] === "OTHER") {
					eType = eType | KFBErrorType[arr[index]];
				}
			}
		}
	});
	return eType;
};
/**
 * 设置纠错的标注信息以及对应的地图标注叠加物，此方法将覆盖上一次调用此方法时设置的参数，即使为 undefined 。
 * 
 * @param info
 *            KPOInfo 类型
 * @param marker
 *            KMarker 类型，默认为 undefined。
 * @param url
 *            String 类型，重现问题的页面地址，默认为 undefined。
 * @param notes
 *            String 类型，问题描述，默认为 undefined。
 * @return
 * @uncrunch
 */
KStdFeedback.prototype.setErrorPOI = function(info, marker, url, notes) {
	var _this = this;
	//
	if(_this._setMaplet()!==true){
		return;
	}
	//
	var index = _this._objKStdTabs.current().index;
	//if (index !== 0 || _this._isPoiFd !== true) {
	_this.showTab(KFeedbackType.POI_ERROR);
	//}
	//
	_this._poiUN = {
		"url" : url,
		"notes" : notes
	};
	_this._errorPoiInfo = info;
	if (!info) {
		info = {};
	}
	var $form = _this._$forms.eq(0);
	if (info.name) {
		$("input[mfg='bin']", $form).val(info.name);
	}
	if (info.address) {
		$("input[mfg='bia']", $form).val(info.address);
	}
	if (info.phone) {
		$("input[mfg='bip']", $form).val(info.phone);
	}
	if(notes){
		$("textarea[mfg='ded']", $form).val(notes).removeClass(_this._getThemeClass("EMP"));
	}
	if (_this._errorPoiMarker) {
		if (typeof _this._errorPoiMarker.setEditable === "function") {
			_this._errorPoiMarker.setEditable(_this._errorPoiEditable);
		}
		if (_this._oriVisible && _this._errorPoiMarker.showLabel
				&& typeof _this._errorPoiMarker.showLabel === "function") {
			_this._errorPoiMarker.showLabel();
		}
		//设置初始位置
		if (_this._errorPoiOriLatlon && _this._errorPoiMarker.setLatlon
				&& typeof _this._errorPoiMarker.setLatlon === "function") {
			_this._errorPoiMarker.setLatlon(_this._errorPoiOriLatlon);
		}
	}
	// 指向新的Marker
	_this._errorPoiMarker = marker;
	if (!marker) {
		$("input:checkbox", $form).eq(1).attr( {
			"checked" : false,
			"disabled" : true
		});
		return;
	}
	try {
		_this._errorPoiOriLatlon = marker.latlon().getPid();
	} catch (ex) {
		_this._errorPoiOriLatlon = null;
	}
	_this._errorPoiEditable = marker.editable();
	//
	$("input:checkbox", $form).eq(1).attr( {
		"disabled" : false
	});
	KMap.setCenter(marker.latlon());
	_this._setPoiMarkerAction();
};
/**
 * 返回最后一次设置的纠错的标注信息。
 * 
 * @return KPOInfo 类型。
 * @uncrunch
 */
KStdFeedback.prototype.errorPOInfo = function() {
	return this._errorPoiInfo;
};
/**
 * 返回最后一次设置的纠错地图标注叠加物。
 * 
 * @return KMarker 类型。
 * @uncrunch
 */
KStdFeedback.prototype.errorMarker = function() {
	return this._errorPoiMarker;
};
/**
 * 设置纠错的线路信息以及对应的地图线路叠加物，此方法将覆盖上一次调用此方法时设置的参数，即使为 undefined 。
 * 
 * @param info
 *            KRouteInfo 类型。
 * @param url
 *            String 类型，重现问题的页面地址，默认为 undefined。
 * @return
 * @uncrunch
 */
KStdFeedback.prototype.setErrorRoute = function(info, url) {
	var _this = this;
	//
	if(_this._setMaplet()!==true){
		return;
	}
	//
	var index = _this._objKStdTabs.current();
	//if (index !== 0 || _this._isPoiFd === true) {
	_this.showTab(KFeedbackType.ROUTE_ERROR);
	//}
	_this._routeUrl=url;
	_this._errorRouteInfo = info;
	if (!info) {
		info = {};
	}
	_this._errorRouteInfo = info;
	var $form = _this._$forms.eq(0);
	if (info.name) {
		$("textarea[mfg='ded']", _this._$forms.eq(0)).addClass(_this._getThemeClass("EMP")).val(info.name);
		_this._taHintText = info.name;
	}
	KMap.fitzoom();
};
/**
 * 返回最后一次设置的纠错的线路信息。
 * 
 * @return KRouteInfo 类型。
 * @uncrunch
 */
KStdFeedback.prototype.errorRouteInfo = function() {
	return this._errorRouteInfo;
};
/*******************************************************************************
 * KStdFeedback私有方法
 */
/**
 * 清除由组件增加的叠加物，并清除输入框中的信息
 */
KStdFeedback.prototype._resetInitState = function() {
	var _this = this;
	_this._resetMapOverlay();
	_this._resetForms();
	_this._errorType = 1;
	//
};
/**
 * 重设与组件相关的叠加物
 * 
 * @param tabIndex
 *            Number 若忽略，重设所有与组件相关的叠加物
 */
KStdFeedback.prototype._resetMapOverlay = function(tabIndex) {
	var _this = this;
	//
	if(_this._setMaplet()!==true){
		return;
	}
	//
	var flagPoi = false;
	var flagUser = false;
	if (typeof tabIndex !== "number") {
		flagPoi = true;
		flagUser = true;
	} else if (tabIndex === 0) {
		flagPoi = true;
	} else if (tabIndex === 1) {
		flagUser = true;
	}
	if (flagPoi && _this._errorPoiMarker) {
		(typeof _this._errorPoiMarker.setEditable === "function")
				&& (_this._errorPoiMarker.setEditable(_this._errorPoiEditable));
		if (typeof _this._errorPoiMarker.labelDom === "function" && _this._errorPoiMarker.labelDom()
				&& typeof _this._errorPoiMarker.showLabel === "function") {
			_this._errorPoiMarker.showLabel();
		}
		//设置初始位置
		if (_this._errorPoiOriLatlon && _this._errorPoiMarker.setLatlon
				&& typeof _this._errorPoiMarker.setLatlon === "function") {
			_this._errorPoiMarker.setLatlon(_this._errorPoiOriLatlon);
		}
	}
	if (flagUser && _this._userMarker) {
		KMap.removeMarker(_this._userMarker);
		_this._userMarker = null;
	}
};
/**
 * 将表单设置为初始状态
 * 
 * @param tabIndex
 *            Number 若忽略，重设所有表单
 * 
 * 
 */

KStdFeedback.prototype._resetForms = function(tabIndex) {
	var _this = this;
	var $forms = _this._$forms;
	if (typeof tabIndex === "number") {
		$forms = $forms.eq(tabIndex);
	}
	_this._$forms.each(function(index, form) {
		if (index === 0) {
			$("input:checkbox", form).attr( {
				"checked" : false,
				"disabled" : false
			}).eq(0).attr("checked", true);
		}
		$("input:text", form).val("").filter("[mfg=dec]").addClass(_this._getThemeClass("EMP")).val(
				_this._decInputHintText);
		$("textarea", form).val("");
		$("input:submit", form).attr("disabled", false);
	});
	_this._taHintText = "";
	_this._taHTMemo = "";
};
/**
 * 将输入的input:text 元素设置为自动提示
 * 
 * @param $inputs
 *            jQuery包裹的input[type="text"]的对象
 * @param hintClass
 *            String 处于提示状态的css class名称
 * 
 * @return
 */
KStdFeedback.prototype._inputHint = function($inputs) {
	if (!$inputs) {
		return;
	}
	var _this = this;
	$inputs.bind( {
		"focus" : function() {
			var $input = $(this);
			var hintClass = _this._getThemeClass("EMP");
			if ($input.hasClass(hintClass)) {
				$input.removeClass(hintClass).val("");
			} else {
				$input.removeClass(hintClass).select();
			}
		},
		"blur" : function() {
			var $input = $(this);
			var hintClass = _this._getThemeClass("EMP");
			var curVal = $input.val();
			if (!curVal || /^\s*$/.test(curVal) || curVal === _this._decInputHintText) {
				$input.addClass(hintClass).val(_this._decInputHintText);
			}
		}
	});
};
/**
 * 当textarea键入字符时检查长度是否符合要求
 * 
 * @param $areas
 *            jQuery包裹的textarea对象
 * @return
 */
KStdFeedback.prototype._textAreaPop = function($areas) {
	var _this = this;
	if (!$areas) {
		return;
	}
	$areas.bind("keydown change focus", function(event) {
		var $area = $(this);
		var len = $area.val().length;
		var msg = false;
		var isShowMsg = false;
		var isCutOff = false;
		var isReFalse = false;
		
		switch(event.type){
			case "keydown":
				if(len >2000){
					isShowMsg = true;
					isCutOff =true;
					isReFalse = true;
				} else if (len === 2000) {
					isShowMsg = true;
					isReFalse = true;
					// 若是功能键(ctrl+A, ctrl+C)或删除(<-[8],
					// Delete[46])或pageUp(33),pageDown(34),home(36),end(35)或方向键(37-40)
					// console.log(event.keyCode);
					var keys = ",8,46,33,34,35,36,37,38,39,40,";
					if (event.ctrlKey === true || keys.indexOf("," + event.keyCode + ",") > -1) {
						isShowMsg = false;
						isReFalse = false;
					}
				}
				break;
			case "change":
				if(len>2000){
					isShowMsg = true;
					isCutOff =true;
				}else if(len===2000){
					isShowMsg = true;
				}
				break;
			case "focus":
				if(len>2000){
					isShowMsg = true;
					isCutOff =true;
				}
				break;
		}
		
		if(isShowMsg){
			msg = KTools.getMsg(_this._msgBoxId);
			if (!msg) {
				_this._showOnlyOneMsg("您输入的内容不能超过2000字。", {
					autoclose : 0,
					node : $area.get(0),
					buboptions : {
						pos : KPosition.TOP,
						closebtn : false
					}
				});
			}
		}else{
			_this._hideOnlyOneMsg();
		}
		
		if(isCutOff){
			$area.val($area.val().substr(0, 2000));
		}
		
		if(isReFalse){
			return false;
		}
	});
};

/**
 * 反馈类型为KFeedbackType.ROUTE_ERROR时，textarea的提示
 * 
 * @return
 */
KStdFeedback.prototype._textAreaHint = function() {
	var _this = this;
	var $area = $("textarea[mfg='ded']", _this._$forms.eq(0));
	$area.bind( {
		"focus" : function() {
			var hintClass = _this._getThemeClass("EMP");
			if ($area.hasClass(hintClass)) {
				$area.removeClass(hintClass).val("");
			} else {
				$area.removeClass(hintClass).select();
			}
		},
		"blur" : function() {
			var hintClass = _this._getThemeClass("EMP");
			var curVal = $area.val();
			if (!curVal || /^\s*$/.test(curVal) || curVal === _this._taHintText) {
				$area.addClass(hintClass).val(_this._taHintText);
			}
		}
	});

};
/**
 * 检查input元素的内容是否为电子邮箱或联系电话
 * 
 * @param input
 *            jQuery包裹的Input HTMLElement对象
 * @return Boolean 如果是，返回true;否则给出提示，返回false;
 */
KStdFeedback.prototype._checkContact = function($input) {
	var _this = this;
	var msg = "请填写电子邮箱或电话！";
	var val = $input.val();
	if (_this._isEmail(val) || _this._isPhoneNumber(val)) {
		return true;
	}
	if (val === _this._decInputHintText) {
		msg = "此项信息不能忽略，请输入。";
	}
	_this._showOnlyOneMsg(msg, {
		autoclose : 5,
		node : $input.get(0),
		buboptions : {
			pos : KPosition.TOP,
			closebtn : true
		}
	});
	return false;
};
/**
 * 检查字符串是否为email地址
 * 
 * @param str
 *            String 需要检查的字符串
 * @return Boolean 如果是，返回true;否则false;
 */
KStdFeedback.prototype._isEmail = function(str) {
	if (typeof str !== "string") {
		str = str.toString();
	}
	var pattern = /^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$/;
	return pattern.test(str);
};
/**
 * 检查字符串是否为电话号码(包括固定电话号码和手机号码)
 * 
 * @param str
 *            String 需要检查的字符串
 * @return Boolean 如果是，返回true;否则false;
 */
KStdFeedback.prototype._isPhoneNumber = function(str) {
	if (typeof str !== "string") {
		str = str.toString();
	}
	// 分隔符可为“-_—”之一，
	var pattern = /^\d*[-_—]?\d+$/;
	return pattern.test(str);
};
/**
 * 返回 theme+KStdFeedback.conf.CLASSNAME[str];
 * 
 * @param str
 *            KStdFeedback.conf.CLASSNAME子成员名称
 * @return
 */
KStdFeedback.prototype._getThemeClass = function(str) {
	var _this = this;
	str = KStdFeedback.conf.CLASSNAME[str.toUpperCase()];
	return !_this._theme ? undefined : (_this._theme + str);
};

/**
 * 显示KFeedbackType.POI_ERROR类型选项卡
 * 
 * @return
 */
KStdFeedback.prototype._showTabPoi = function() {
	var _this = this;
	var $form = _this._$forms.eq(0);
	var $lis = $(">ul>li", $form);
	var order = _this._ERRORTYPELIORDER;
	// 显示全部错误类型列表里的项目，并显示基本信息区域
	$lis.show();
	$("div[mfg='bi']", $form).show();
	_this._taHTMemo = _this._taHintText;
	_this._taHintText = "";
	$("textarea[mfg='ded']", $form).val("");
	_this._objKStdTabs.select(0);
	_this._isPoiFd = true;
	_this.show();
};
/**
 * 显示KFeedbackType.ROUTE_ERROR类型选项卡
 * 
 * @return
 */
KStdFeedback.prototype._showTabRoute = function() {
	var _this = this;
	var $form = _this._$forms.eq(0);
	var $lis = $(">ul>li", $form);
	var order = _this._ERRORTYPELIORDER;
	// 只显示“信息错误”和“其它”错误类型
	$lis.each(function(index, dom) {
		if (!(index === order.INFO || index === order.OTHER)) {
			$(dom).hide();
		}
	});
	// 隐藏显示基本信息区域
	$("div[mfg='bi']", $form).hide();
	// 描述信息的文本域默认显示线路摘要
	// ？？？？
	_this._taHintText = _this._taHTMemo;
	_this._taHTMemo = "";
	$("textarea[mfg='ded']", $form).val(_this._taHintText);
	//
	_this._objKStdTabs.select(0);
	_this._isPoiFd = false;
	_this.show();
};
/**
 * 显示KFeedbackType.USERPOI类型选项卡
 * 
 * @return
 */
KStdFeedback.prototype._showTabUser = function() {
	var _this = this;
	_this._objKStdTabs.select(1);
	_this.show();
};
/**
 * 显示KFeedbackType.SUGGEST类型选项卡
 * 
 * @return
 */
KStdFeedback.prototype._showTabSuggest = function() {
	var _this = this;
	_this._objKStdTabs.select(2);
	_this.show();
	$("textarea[mfg=ded]", _this._$forms.eq(2)).focus();
};
/**
 * 纠错选项卡的内容中，li在ul中的顺序,_ERRORTYPELIORDER成员的命名与KFBErrorType一致
 */
KStdFeedback.prototype._ERRORTYPELIORDER = {
	"INFO" : 0,
	"LOCATION" : 1,
	"INEXISTENT" : 2,
	"OTHER" : 3
};

/**
 * 使得该组件内部同一时刻只显示一个提示框，
 * 
 * @param msg
 *            与KTools.showMsg方法第一个参数一致
 * @param opts
 *            与KTools.showMsg方法第二个参数一致
 */
KStdFeedback.prototype._showOnlyOneMsg = function(msg, opts) {
	var _this = this;
	// 若组件不可见，任何提示都不会出现(没必要消耗cpu),返回
	if (_this._$dom.is(":visible") === false) {
		return;
	}
	if (_this._msgBoxId !== null) {
		KTools.hideMsg(_this._msgBoxId);
	}
	_this._msgBoxId = KTools.showMsg(msg, opts);

};
/**
 * 使得该组件内部同一时刻只显示一个提示框，隐藏提示
 */
KStdFeedback.prototype._hideOnlyOneMsg = function() {
	var _this = this;
	if (_this._msgBoxId !== null) {
		KTools.hideMsg(_this._msgBoxId);
		_this._msgBoxId = null;
	}
};
/**
 * 提交前检查，若符合条件就提交
 * 
 * @param index
 *            Number 提交按钮的序号，可为0,1,2
 * @return
 */
KStdFeedback.prototype._checkAndSubmit = function(index) {
	var _this = this;
	switch (index) {
		case 0:
			if (_this._isPoiFd !== false) {
				_this._checkAndSubmitPoi();
			} else {
				_this._checkAndSubmitRoute();
			}
			break;
		case 1:
			_this._checkAndSubmitUser();
			break;
		case 2:
			_this._checkAndSubmitSuggest();
			break;
		default:
			return;
	}
};
/**
 * _feedbackType为KFeedbackType.POI_ERROR时，检查提交
 * 
 * @return
 */
KStdFeedback.prototype._checkAndSubmitPoi = function() {
	var _this = this;
	var tIndex = 0;
	var $form = _this._$forms.eq(tIndex);
	var $boxes = $("ul li input:checkbox", $form);
	var msgTarget = null;
	// 需要检查的项目
	var eType = 0;
	var name = false;
	var description = false;
	var contact = false;
	var arr=["INFO","LOCATION","INEXISTENT","OTHER"];
	// 检查是否至少选中一个复选框
	eType=_this.errorType();
	// 一个复选框也未选中， 给出提示信息，返回
	if (eType === 0) {
		msgTarget = $form.find("ul li:first").get(0);
		_this._showOnlyOneMsg("至少要选中一个复选框！", {
			autoclose : 3,
			node : msgTarget,
			buboptions : {
				pos : KPosition.TOP,
				closebtn : true
			}
		});
		// $li_first.find("input").attr("checked", true);
		return;
	}
	// 检查 地标点名称是否填写
	msgTarget = $("input[mfg='bin']", $form);
	name = msgTarget.val();
	if (!name || $.trim(name).length === 0) {
		_this._showOnlyOneMsg("此项信息不能忽略，请输入。", {
			autoclose : 5,
			node : msgTarget.get(0),
			buboptions : {
				pos : KPosition.TOP,
				closebtn : true
			}
		});
		return;
	}
	// 检查是否有描述文本，描述文本是否过长；出错，给出提示，返回；
	description = _this._checkTextArea($("textarea[mfg='ded']", $form));
	if (description !== true) {
		return;
	}
	// 检查联系方式
	contact = _this._checkContact($("input[mfg='dec']", $form));
	if (contact !== true) {
		return;
	}
	// 满足提交的条件,准备提交
	_this._errorType = eType;
	description = $.trim(KTools.text($("textarea[mfg='ded']", $form).val()));
	contact = $.trim($("input[mfg='dec']", $form).val());
	var poinfo = {
		"name" : $.trim(name),
		"address" : $.trim($("input[mfg='bia']", $form).val()),
		"phone" : $.trim($("input[mfg='bip']", $form).val())
	};
	if(_this._errorPoiMarker){
		var mp = _this._errorPoiMarker.latlon();
		if(mp){
			poinfo.latlon = mp.getPid();
		}
		//设置初始位置
		if (_this._errorPoiOriLatlon && _this._errorPoiMarker.setLatlon
				&& typeof _this._errorPoiMarker.setLatlon === "function") {
			_this._errorPoiMarker.setLatlon(_this._errorPoiOriLatlon);
		}
	}
	if (_this._errorPoiInfo) {
		poinfo = KTools.copyOptions(poinfo, _this._errorPoiInfo);
	}
	_this.feedback({
		"url": _this._poiUN.url || window.location.href,
		"type": KFeedbackType.POI_ERROR,
		"errortype": eType,
		"poinfo": poinfo,
		"notes": description,
		"contact": contact
	});

};
/**
 * _feedbackType为KFeedbackType.ROUTE_ERROR时，检查提交
 * 
 * @return
 */
KStdFeedback.prototype._checkAndSubmitRoute = function() {
	var _this = this;
	var order = _this._ERRORTYPELIORDER;
	var tIndex = 0;
	var $form = _this._$forms.eq(tIndex);
	var $boxes = $("ul li input:checkbox", $form);
	var msgTarget = null;
	// 需要检查的项目
	var eType = 0;
	var description = false;
	var contact = false;
	// 检查是否至少选中一个复选框
	eType=_this.errorType();
	// 一个复选框也未选中， 给出提示信息，返回
	if (eType === 0) {
		msgTarget = $form.find("ul li:first").get(0);
		_this._showOnlyOneMsg("至少要选中一个复选框！", {
			autoclose : 3,
			node : msgTarget,
			buboptions : {
				pos : KPosition.TOP,
				closebtn : true
			}
		});
		return;
	}

	// 检查是否有描述文本，描述文本是否过长；出错，给出提示，返回；
	description = _this._checkTextArea($("textarea[mfg='ded']", $form));
	if (description !== true) {
		return;
	}
	// 检查联系方式
	contact = _this._checkContact($("input[mfg='dec']", $form));
	if (contact !== true) {
		return;
	}
	// 满足提交的条件,准备提交
	_this._errorType = eType;
	description = $.trim(KTools.text($("textarea[mfg='ded']", $form).val()));
	if (_this._taHintText) {
		description = "[" + _this._taHintText + "]" + description;
	}
	contact = $.trim($("input[mfg='dec']", $form).val());
	//
	var city = null;
	if (_this._errorRouteInfo && _this._errorRouteInfo.type) {
		if (_this._errorRouteInfo.type === KRouteType.BUS) {
			try {
				city = _this._errorRouteInfo.queryopts.city;
			} catch (ex) {
				try {
					city = _this._errorRouteInfo.queryopts.busline.city;
				} catch (ex) {
					try {
						city = _this._errorRouteInfo.queryopts.bustation.city;
					} catch (ex) {
					}
				}
			}
		} else if (_this._errorRouteInfo.type === KRouteType.NAVIGATION) {
			//do something here
		}
	}

	//console.log(city);
	var poinfo = {};
	if (city !== null) {
		poinfo.city = city;
	}

	_this.feedback( {
		"url" : _this._routeUrl || window.location.href,
		"type" : KFeedbackType.ROUTE_ERROR,
		"errortype" : eType,
		"notes" : description,
		"contact" : contact,
		"poinfo" : poinfo
	});
};
/**
 * _feedbackType为KFeedbackType.USERPOI时，检查提交
 * 
 * @return
 */
KStdFeedback.prototype._checkAndSubmitUser = function() {
	var _this = this;
	var tIndex = 1;
	var $form = _this._$forms.eq(tIndex);
	var msgTarget = null;
	// 需要检查的项目
	var name = false;
	var description = false;
	var contact = false;
	// 检查 地标点名称是否填写
	msgTarget = $("input[mfg='bin']", $form);
	name = msgTarget.val();
	if (!name || $.trim(name).length === 0) {
		_this._showOnlyOneMsg("此项信息不能忽略，请输入。", {
			autoclose : 5,
			node : msgTarget.get(0),
			buboptions : {
				pos : KPosition.TOP,
				closebtn : true
			}
		});
		return;
	}
	// 检查是否有描述文本，描述文本是否过长；出错，给出提示，返回；
	description = _this._checkTextArea($("textarea[mfg='ded']", $form));
	if (description !== true) {
		return;
	}
	// 检查联系方式
	contact = _this._checkContact($("input[mfg='dec']", $form));
	if (contact !== true) {
		return;
	}
	// 满足提交的条件,准备提交
	description = $.trim(KTools.text($("textarea[mfg='ded']", $form).val()));
	contact = $.trim($("input[mfg='dec']", $form).val());
	//
	var poinfo = {
		"name" : $.trim(name),
		"address" : $.trim($("input[mfg='bia']", $form).val()),
		"phone" : $.trim($("input[mfg='bip']", $form).val())
	};
	if(_this._userMarker){
		var mp = _this._userMarker.latlon();
		if(mp){
			poinfo.latlon = mp.getPid();
		}		
	}
	_this.feedback( {
		"url":window.location.href,
		"type" : KFeedbackType.USERPOI,
		"poinfo" : poinfo,
		"notes" : description,
		"contact" : contact
	});
};
/**
 * _feedbackType为KFeedbackType.SUGGEST时，检查提交
 * 
 * @return
 */
KStdFeedback.prototype._checkAndSubmitSuggest = function() {
	var _this = this;
	var tIndex = 2;
	var $form = _this._$forms.eq(tIndex);
	// 需要检查的项目
	var description = false;
	var contact = false;
	// 检查是否有描述文本，描述文本是否过长；出错，给出提示，返回；
	description = _this._checkTextArea($("textarea[mfg='ded']", $form));
	if (description !== true) {
		return;
	}
	// 检查联系方式
	contact = _this._checkContact($("input[mfg='dec']", $form));
	if (contact !== true) {
		return;
	}
	// 满足提交的条件,准备提交
	description = $.trim(KTools.text($("textarea[mfg='ded']", $form).val()));
	contact = $.trim($("input[mfg='dec']", $form).val());
	//
	_this.feedback( {
		"url":window.location.href,
		"type" : KFeedbackType.SUGGEST,
		"notes" : description,
		"contact" : contact
	});
};
/**
 * 
 * @param $area
 *            jQuery包裹的textarea对象
 * @return 如果textarea中的文本符合条件，返回true; 否则给出提示，返回false;
 */
KStdFeedback.prototype._checkTextArea = function($area) {
	var _this = this;
	// 获取描述文本长度
	var len = $area.val();
	if (!len || $.trim(len).length === 0) {
		len = 0;
	} else {
		len = len.length;
	}
	// 检查是否有描述文本，描述文本是否过长；出错，给出提示，返回；
	if (len === 0 || len > 2000) {
		_this._showOnlyOneMsg((len > 2000) ? "您输入的内容不能超过2000字，请修改。" : "此项信息不能忽略，请输入。", {
			autoclose : 0,
			node : $area.get(0),
			buboptions : {
				pos : KPosition.TOP,
				closebtn : true
			}
		});
		return false;
	}
	return true;
};
/**
 * 选项卡切换时的处理
 * 
 * @param index
 *            Number，tab的序号,可为 0,1,2
 * @return
 */
KStdFeedback.prototype._tabSwitch = function(index) {
	var _this=this;
	_this._hideOnlyOneMsg();
	switch (index) {
		case 0:
			_this._tabErrorCur();
			break;
		case 1:
			_this._tabUserCur();
			break;
		case 2:
			$("textarea[mfg=ded]", _this._$forms.eq(2)).focus();
			break;
	}
};

/**
 * 选项卡切换时的处理,当前选项卡是“我要纠错”选项卡的处理
 * 
 * @return
 */
KStdFeedback.prototype._tabErrorCur = function() {
	var _this = this;
	if(_this._setMaplet()!==true){
		return;
	}
	if (_this._isPoiFd) {
		if (_this._errorPoiMarker && typeof _this._errorPoiMarker === "function") {
			KMap.setCenter(_this._errorPoiMarker.latlon());
			if(_this._userMarker){
				_this._userMarker.resume();
			}
			_this._bindMarkerPop(_this._errorPoiMarker);
		}
	} else {
		if (_this._errorRouteInfo) {
			KMap.fitzoom();
		}
	}
};

/**
 * 选项卡切换时的处理,当前选项卡是“添加标注”选项卡的处理
 * 
 * @return
 */
KStdFeedback.prototype._tabUserCur = function() {
	var _this = this;
	if(_this._setMaplet()!==true){
		return;
	}
	if (_this._userMarker) {
		KMap.setCenter(_this._userMarker.latlon());
		_this._userMarker.hilite();
		_this._bindMarkerPop(_this._userMarker);
		return;
	}
	var center = KMap.center();
	//var icon = {
//		img : _this._iconImg
//	};
	//icon = KTools.copyOptions(icon, KIconOptions);
	var markerOpts = KConfig.get("mk_mo_mm", {
		row : 8,
		col : 5
	});
	markerOpts.editable=true;
	markerOpts.group=KWidgetFlag.feedback;	
	var marker = new KMarker(center, markerOpts);
	marker = KTools.copyOptions(marker, KMarkerOptions);
	_this._userMarker = marker;
	KMap.addMarker(marker);
	_this._userMarker.hilite();
	_this._bindMarkerPop(marker);
};

/**
 * 当反馈类型为KFeedbackType.POI_ERROR时，对KMarker进行处理
 * 
 * @return
 */
KStdFeedback.prototype._setPoiMarkerAction = function() {
	var _this = this;
	if (!_this._errorPoiMarker) {
		return;
	}
	if(_this._setMaplet()!==true){
		return;
	}
	var $box = $("input:checkbox", _this._$forms.eq(0)).eq(1);
	var isChecked = $box.attr("checked");
	if (isChecked) {
		_this._errorPoiMarker.setEditable(true);
	}
	if (_this._errorPoiMarker.editable()) {
		var label = _this._errorPoiMarker.labelDom();
		if (label) {
			_this._oriVisible = $(label).is(":visible");
			if (_this._oriVisible) {
				_this._errorPoiMarker.hideLabel();
			}
		}
		KMap.setCenter(_this._errorPoiMarker.latlon());
		_this._bindMarkerPop(_this._errorPoiMarker);
	}else{
		_this._hideOnlyOneMsg();
	}
};
/**
 * 为KMarker类型叠加物（若editable）绑定提示弹出，当KMarker移动时，提示消失，取消绑定
 * 
 * @param marker
 *            KMarker类型叠加物
 * @return
 */
KStdFeedback.prototype._bindMarkerPop = function(marker) {
	var _this = this;
	if (marker && marker.editable()) {
		_this._showOnlyOneMsg("拖拽此图标到达正确位置", {
			autoclose : 0,
			node : marker.iconDom(),
			buboptions : {
				pos : KPosition.RIGHT,
				closebtn : true
			}
		});
		KEvent.bind(marker, "dragstart", function(event, mapNode, point) {
			_this._hideOnlyOneMsg();
			KEvent.unbind(marker, "dragstart");
		});
	}
};

/**
 * 
 * @param info
 *            KFeedbackInfo 类型，包含了反馈的详细信息
 * @return
 */
KStdFeedback.prototype._asPostData = function(info) {
	// info = KTools.copyOptions(info, KFeedbackInfo);
	var out = new KUrlHash();
	var obj;
	out.setKey("t", "f");
	// out.push("fu="+encodeURI(window.location.href));
	for ( var pro in info) {
		if (info.hasOwnProperty(pro)) {
			switch (pro) {
				case "type":
					out.setKey("ft", info[pro]);
					break;
				case "errortype":
					out.setKey("fet", info[pro]);
					break;
				case "notes":
					out.setKey("fd", info[pro]);
					break;
				case "contact":
					out.setKey("fc", info[pro]);
					break;
				case "url":
					out.setKey("fu", info[pro]);
					break;
				case "poinfo":
					obj = info[pro];
					// console.log(obj);
					if (obj) {
						(!!obj.name) && out.setKey("fn", obj.name);
						(!!obj.address) && out.setKey("fa", obj.address);
						(!!obj.phone) && out.setKey("fp", obj.phone);
						(!!obj.latlon) && out.setKey("fl", obj.latlon);
						(!!obj.city) && out.setKey("c", obj.city);
					}
					break;
			}

		}
	}
	return out.toString();
};
/**
 * to set the userstyle option
 * 
 * @param bStyle
 *            Boolean
 * 
 * @return
 */
KStdFeedback.prototype._setUserStyle = function(bStyle) {
	var _this = this;
	if (typeof bStyle !== "boolean" || _this._opts.userstyle === bStyle) {
		return;
	}
	if (bStyle === true) {
		//
		var old = _this._theme;
		var klass = KStdFeedback.conf.CLASSNAME;
		_this._$dom.removeClass(old + klass.FDB).removeClass(old + klass.FDBF);
		_this._$decInputs.removeClass(old + klass.EMP);
		_this._$closeBtn.removeClass(old + klass.FCB);
		//TAB 0 content
		var $form = _this._$forms.eq(0);
		$(">ul", $form).removeClass(old + klass.ETL);
		$(">div[mfg='bi']", $form).removeClass(old + klass.FIF);
		$(">div:eq(1)", $form).removeClass(old + klass.DES);
		$(">div:eq(2)", $form).removeClass(old + klass.ACT);
		//Tab 1 content
		$form = _this._$forms.eq(1);
		$(">div[mfg='bi']", $form).removeClass(old + klass.FIF);
		$(">div:eq(1)", $form).removeClass(old + klass.DES);
		$(">div:eq(2)", $form).removeClass(old + klass.ACT);
		//Tab 2 content
		$form = _this._$forms.eq(2);
		$(">div:eq(0)", $form).removeClass(old + klass.FEX);
		$(">div:eq(1)", $form).removeClass(old + klass.DES);
		$(">div:eq(2)", $form).removeClass(old + klass.ACT);
	}
	//
	_this._objKStdTabs.setOptions( {
		"userstyle" : bStyle
	});
	//console.log(bStyle);
	_this._opts.userstyle = bStyle;
	_this._theme=null;
};
/**
 * 如果map初始化成功了(_this._maplet将会有值)， 返回true, 否则false
 * 
 * @returns Boolean
 */
KStdFeedback.prototype._setMaplet = function() {
	var _this = this;
	if (_this._maplet) {
		return true;
	} else {
		if (!!_this._opts.mapcontainer) {
			if (KMap.isInitialized(_this._opts.mapcontainer)) {
				_this._maplet = KMap.maplet(_this._opts.mapcontainer);
				KMap.setCurrentMap(_this._opts.mapcontainer);
			}
		} else {
			if (!!KMap.isInitialized()) {
				_this._maplet = KMap.maplet();
			}
		}
		if (_this._maplet) {
			return true;
		}
	}
	return false;
};
/**
 * 
 * 预加载资源
 * 
 * @returns
 */
KStdFeedback.prototype._preLoad = function() {
	if (document.images) {
		var img = new Image();
		img.onload = function() {
			img = null;
		};
		img.src = "http://img.mapbar.com/web/3in1/imgs/iconm.gif";
	}
};
/*
 逆地理组件 。
 作者：gongyong
 版本：1.0.1
 创建时间：2010-03-03
 最后修改时间：2010-03-03 12:43
 ============================================
 『修改历史』
 1.增加getPoiByLatlon()方法和poicomplete事件
 */
var KStdGeocoder = KClass.create("KStdGeocoder", KGeocoder);
KStdGeocoder.conf = {
    classNamePrefix : "_geo_"
    ,classNameArr : "lst,st".split(",")
    ,CLASSNAME  : {}
    ,type : {city : 'c',district : 'dl', dlist : 'd',map :'m',init:"i"}
};
$.each(KStdGeocoder.conf.classNameArr,
        function(i, val)
        {
            KStdGeocoder.conf.CLASSNAME[val.toUpperCase()] = KStdGeocoder.conf.classNamePrefix + val;
        }
        );
KStdGeocoder.conf.CLASSNAME['PARENT'] = "_geo";
/**
 * 构造方法。
 * @param container Node
 * @param opts KStdGeocoderOptions
 * @uncrunch
 */
KStdGeocoder.initialize = function(container, opts)
{
    this._opts = KTools.copyOptions(opts, KStdGeocoderOptions);
    //设置主题
    this.setTheme(this._opts.theme);
    //构建组件Dom
    this._dom = $(container)[0];
    this._geocoderInfo = KTools.copyOptions({}, KGeocoderInfo);
    this._init_container(this._opts.mapcontainer);

};

KStdGeocoder.prototype._init_container = function(container){
    if(container){
        var _this = this;

        if(KMap.isInitialized(container))
        {
            this._map = KMap.maplet(container);
            this._buildDom();
            this._registerMapEventListener();
            this._parseData(this._map.getCenter(),this._map.getZoomLevel(),KStdGeocoder.conf.type.init);
        }
        else
        {
            KEvent.bind(KMap, 'mapinit', function(){
                _this._map = KMap.maplet(container);
                _this._buildDom();
                _this._registerMapEventListener();
                _this._parseData(_this._map.getCenter(),_this._map.getZoomLevel(),KStdGeocoder.conf.type.init);
            });
        }
    }
}


/**
 * 释放对象资源
 * @uncrunch
 */
KStdGeocoder.prototype.finalize = function()
{
    KTools.removeNode(this._cityListDom);
    KTools.removeNode(this._dropListDom);
    if(this._cityList)
    {
        this._cityList.finalize();
    }
    if(this._dropList)
    {
        this._dropList.finalize();
    }
    KWidget.prototype.finalize.apply(this);
};
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KStdGeocoder.prototype.version = function()
{
    return "1.0.1";
};
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KStdGeocoder.prototype.cnname = function()
{
    return "逆地理组件";
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KStdGeocoder.prototype.dependent = function()
{
    //return [KCityList, KCityListOptions, KClass, KDropList, KEvent, KGeocoder, KGeocoderInfo, KManager, KMap, KObject, KSize, KStdGeocoderOptions, KTools, KUrlHash,KWidget,jQuery];
    return [KGeocoder, KCityList, KDropList, KEvent, KManager, KMap, jQuery, KStdGeocoderOptions, KCityListOptions, KGeocoderInfo];
};
/**
 * 设置选项
 * @param opts KStdGeocoderOptions
 * @uncrunch
 */
KStdGeocoder.prototype.setOptions = function(opts)
{
    var oldTheme = this._theme;
    var diffOpts = KTools.compareOptions(this._opts, opts);
    this._opts = KTools.copyOptions(opts, this._opts);
    var _this = this;
    $.each(diffOpts, function(name, value) {
        if (name == "theme") {
            _this._changeTheme(value, oldTheme);
        }
        else if (name == "citylist") {
            _this._displayDom(_this._cityListDom, value);
        }
        else if (name == "district") {
            _this._displayDom(_this._dropListDom, value);
        }
        else if (name == "street") {
            _this._displayDom(_this._streetDom, value);
        }
        else if (name == "cylopts") {
            if (_this._opts.citylist) {
                _this._cityList.setOptions(value);
            }
        }
        else if(name == 'container'){
            _this._init_container(opts.mapcontainer);
        }
    });
};
/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KStdGeocoder.prototype.setTheme = function(scheme)
{
    var oldTheme = this._theme;
    this._changeTheme(scheme, oldTheme);
};
/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KStdGeocoder.prototype._changeTheme = function(newTheme, oldTheme)
{
    this._theme = newTheme;
    this._updateClass(this._dom, oldTheme, KStdGeocoder.conf.CLASSNAME.PARENT);
    this._updateClass(this._contentDom, oldTheme, KStdGeocoder.conf.CLASSNAME.LST);
    this._updateClass(this._streetDom, oldTheme, KStdGeocoder.conf.CLASSNAME.ST);
};
/**
 * @param dom jQuery
 * @param oldTheme  String
 * @param className     String
 */
KStdGeocoder.prototype._updateClass = function(dom, oldTheme, className)
{
    if (dom) {
        dom.removeClass(this._getClassName(className, oldTheme)).addClass(this._getClassName(className));
    }
};
/**
 * 解析指定的经纬度，更改区域信息和地图中心点。
 * @param latlon String 类型，经纬度字符串
 * @param zoom String 缩放级别
 * @uncrunch
 */
KStdGeocoder.prototype.parse = function(latlon, zoom)
{
    this._parseData(latlon, zoom);
};
/**
 * 返回省份信息
 * @return String
 * @uncrunch
 */
KStdGeocoder.prototype.province = function()
{
    return this._geocoderInfo.province;
};
/**
 * 返回城市信息
 * @return String
 * @uncrunch
 */
KStdGeocoder.prototype.city = function()
{
    return this._geocoderInfo.city;
};
/**
 * 返回市级行政区域信息
 * @return String
 * @uncrunch
 */
KStdGeocoder.prototype.district = function()
{
    return this._geocoderInfo.district;
};
/**
 * 返回街道信息
 * @return String
 * @uncrunch
 */
KStdGeocoder.prototype.street = function()
{
    return this._geocoderInfo.street;
};
/**
 * 返回经纬度
 * @return String
 * @uncrunch
 */
KStdGeocoder.prototype.latlon = function()
{
    return this._geocoderInfo.latlon;
};
/**
 * 返回缩放级别
 * @return String
 * @uncrunch
 */
KStdGeocoder.prototype.zoom = function()
{
    return this._geocoderInfo.zoom;
};
/**
 * 返回缩放级别
 * @return KCityList
 * @uncrunch
 */
KStdGeocoder.prototype.cityWidget = function()
{
    if (this._opts.citylist) {
        return this._cityList;
    }
    else {
        return undefined;
    }
};
/**
 * 改变布局
 * @uncrunch
 */
KStdGeocoder.prototype.layout = function()
{
    if (this._cityList) {
        return this._cityList.layout();
    }
};
/**
 * 构建组件Dom结构
 */
KStdGeocoder.prototype._buildDom = function()
{
    var _this = this;
    //下拉列表
    this._contentDom = $(">ul", this._dom).eq(0);
    this._streetDom = $(">li:eq(2) > span", this._contentDom).eq(0);
    //创建KCityList组件对象
    this._cityListDom = $(">li:eq(0) >div:eq(0)", this._contentDom).eq(0);
    this._cityList = new KCityList(this._cityListDom, this._opts.cylopts ? this._opts.cylopts : KCityListOptions);
    KEvent.bind(this._cityList, "citychanged", function(evt, widget, cityInfo, oldCityInfo) {
        KEvent.trigger(_this,"cyl_citychanged",_this,oldCityInfo,cityInfo);
        if (!_this._nocitychanged && cityInfo && cityInfo.latlon && _this._isLatlonZoomChanged(cityInfo.latlon, cityInfo.level)) {
            _this._parseData(cityInfo.latlon, cityInfo.level, KStdGeocoder.conf.type.city);
        }
        else {
            _this._nocitychanged = false;
        }
    });
    //创建KDropList组件对象
    this._dropListDom = $(">li:eq(1) >div:eq(0)", this._contentDom).eq(0);
    this._dropList = new KDropList(this._dropListDom.get(0), {deselect : false,select2text:true,multiple:false,closebtn:false,sortable : false});//{select2text:true, closebtn:true, size:new KSize(200, 300)});
    //隐藏input
    KEvent.bind(this._dropList, "opened", function(evt, widget) {
    	var ua = navigator.userAgent.toLowerCase();
    	var _isie = false;
    	if (ua.match(new RegExp("msie")) && _this._dropList.items().length > 1 && _this._dropList.items()[0].text == _this._dropList.items()[1].text){
    		_isie = true;
    	}
    	 _this._cityList.hideHotCity();
        if (_this._dropList.items().length == 1 || _isie) {
            var a = _this._dropList.item(0).kvalue.split("#");
            _this._dropList.clearResult();
            if(!a || !jQuery.trim(a[0])){
                a[0] = _this._geocoderInfo.latlon;
                a[1] = _this._geocoderInfo.zoom;
            }
            _this._parseData(a[0], a[1], KStdGeocoder.conf.type.dlist);
        }
    });
    //selectchanged
    KEvent.bind(this._dropList, "itemclick", function(evt, widget, item) {
        widget.close();
        //调用接口，传递城市和
        if (item.kvalue && !_this._noselectchanged) {
            var a = item.kvalue.split("#");
            if (_this._isLatlonZoomChanged(a[0], a[1])) {
                _this._parseData(a[0], a[1], KStdGeocoder.conf.type.district);
            }
        }
        else {
            _this._noselectchanged = false;
        }
    });
    this._displayAllDom(true, true, true);
};
/**
 * 获取某个样式的名称
 * @param className String
 */
KStdGeocoder.prototype._getClassName = function(className, theme)
{
    if (!theme) {
        theme = this.theme();
    }
    return theme + className;
};
/**
 * 返回this._dom的jQuery包装对象
 * @return jQuery
 */
KStdGeocoder.prototype._jdom = function()
{
    return this._dom ? $(this._dom) : undefined;
};

/**
 * 传递经纬度和缩放级别，获取数据
 * @param latlon String
 * @param zoom Integer
 */
KStdGeocoder.prototype._parseData = function(latlon, zoom, type)
{
    var _this = this;
    //用户调用parse传递经纬度
    if (latlon) {
        if (this._map && type != KStdGeocoder.conf.type.init) {
            if (type == KStdGeocoder.conf.type.city || type == KStdGeocoder.conf.type.district) {
                this._nocenterchanged = true;
                this._map.centerAndZoom(latlon, zoom);
            }
            else if (!type) {
                this._map.centerAndZoom(latlon, zoom);
                return ;
            }
        }
        $.ajax({
            url : _this._genUrl(latlon, zoom, type)
            ,type:'GET'
            ,dataType : 'json'
            ,success : function(data) {
                if (data) {
                    if(type == KStdGeocoder.conf.type.init){
                        _this._nocitychanged = true;
                        _this._setGeocoderInfo({province :data.p ,city : data.c,latlon : data.cc,zoom : data.cz,district : data.d,street : data.a});
                        _this._cityList.setCity({name:data.c ? data.c : (data.p ? data.p : "全国"),latlon : data.cc,level:data.cz,province:data.p,bus: parseInt(data.ib) == 1});
                        _this._streetDom.text(data.a);
                        _this._dropList.clearResult();
                        _this._dropList.insert({text : data.d,kvalue : data.dc + "#" + data.dz,deletable : false,editable : false,selected : true});
                        _this._displayAllDom(true,data.d,data.a);
                        return ;
                    }

                    if (!data.c && type != KStdGeocoder.conf.type.dlist) {
                         _this._nocitychanged = true;
                         _this._setGeocoderInfo({province :data.p ,city : data.c,latlon : data.cc,zoom : data.cz,district : data.d,street : data.a});
						 _this._cityList.setCity({name:data.c ? data.c : (data.p ? data.p : "全国"),latlon : data.cc,level:data.cz,province:data.p,bus: parseInt(data.ib) == 1});
                        _this._displayAllDom(true);
                        return;
                    }
                    if (!type) {
                        //用户调用parse
                        if (!_this._map) {
                            $.extend(data, {latlon : latlon,zoom : zoom});
                            _this._handleMap(data);
                        }
                    }
                    else if (type == KStdGeocoder.conf.type.city) {
                        //城市改变，获取数据，重置中心点
                        var oldcity = _this._geocoderInfo.city;
                        _this._setGeocoderInfo({province :data.p ,city : data.c,latlon : data.cc,zoom : data.cz,district : data.d,street : data.a});
                        if (data.d) {
                            _this._noselectchanged = false;
                            _this._displayDom(_this._dropListDom, _this._opts.district);
                            if (data.c == oldcity && _this._dropList.items().length == data.dn) {
                                _this._dropList.select(parseInt(data.di));
                            }
                            else {
                                _this._dropList.clearResult();
                                _this._dropList.insert({text : data.d,kvalue : data.dc + "#" + data.dz,deletable : false,editable : false,selected : true});
                            }
                            _this._handleStreet(data.a);
                        }
                        else {
                            _this._displayAllDom(true);
                        }
                        KEvent.trigger(_this, "changed", _this, _this._geocoderInfo);
                    }
                    else if (type == KStdGeocoder.conf.type.district) {
                        _this._setGeocoderInfo({province : data.p,city : data.c,latlon : data.dc,zoom : data.dz,district : data.d,street : data.a});
                        _this._handleStreet(data.a);
                        KEvent.trigger(_this, "changed", _this, _this._geocoderInfo);
                    }
                    else if (type == KStdGeocoder.conf.type.dlist) {
                        _this._noselectchanged = false;
                        _this._insertItems(data.z[0].p[0].c[0].d);
                    }
                    else if (type == KStdGeocoder.conf.type.map) {
                        $.extend(data, {latlon : latlon,zoom : zoom});
                        _this._handleMap(data);
                    }
                }
            }
        });
    }
};
/**
 * 注册kmap事件，一个是经纬度改变，一个是缩放级别改变的事件
 *
 */
KStdGeocoder.prototype._registerMapEventListener = function()
{
    var _this = this;
    if (this._map) {
        KEvent.bind(this._map, "geocode", function(evt, container, level, center, bounds) {
            //经纬度
            if (!_this._nocenterchanged) {
                _this._parseData(center.pid, level, KStdGeocoder.conf.type.map);
            }
            else {
                _this._nocenterchanged = false;
            }
        });
    }
}
KStdGeocoder.prototype._insertItems = function(items) {
    var _this = this;
    $.each(items, function(i, n) {
        var selected = n.n == _this._geocoderInfo.district ? true : false;
        _this._dropList.insert({text : n.n,kvalue : n.l + "#" + n.z,deletable : false,editable : false,selected : selected});
    });
}
KStdGeocoder.prototype._setGeocoderInfo = function(item) {
    var _this = this;
    $.each(item, function(k, v) {
        _this._geocoderInfo[k] = v;
    });
}
KStdGeocoder.prototype._genUrl = function(latlon, zoom, type) {
    var param = new KUrlHash();
    var _u = {t : type == KStdGeocoder.conf.type.dlist ? "cln" : "ig",l : latlon,z : "" + zoom,ct : type};
    $.each(_u, function(k, v) {
         param.setKey(k,v);
    });
    return this._opts.url + "?" + param.toString();
}
KStdGeocoder.prototype._handleMap = function(data) {
    var _this = this;
    var oldcity = this._geocoderInfo.city;
    this._setGeocoderInfo({province : data.p,city : data.c,latlon : data.latlon,zoom : data.zoom,district : data.d,street : data.a});
    if (data.c != oldcity) {
        this._nocitychanged = true;
        this._cityList.setCity({name : data.c,latlon : data.cc,level : data.cz,province:data.p,bus:parseInt(data.ib) == 1});
    }
    if (data.d) {
        this._noselectchanged =  false;
        this._displayDom(this._dropListDom, this._opts.district);
        if (data.c == oldcity && this._dropList.items().length == data.dn) {
            this._dropList.select(parseInt(data.di));
        }
        else {
            this._dropList.clearResult();
            this._dropList.insert({text : data.d,kvalue : data.dc + "#" + data.dz,deletable : false,editable : false,selected : true});
        }
        this._handleStreet(data.a);
    }
    else {
        window.setTimeout(function(){_this._dropList.clearResult();_this._displayAllDom(true, false, false)},0);
    }
    KEvent.trigger(this, "changed", this, this._geocoderInfo);
}
KStdGeocoder.prototype._displayAllDom = function(city, district, street) {
    this._displayDom(this._cityListDom, this._opts.citylist && city);
    this._displayDom(this._dropListDom, this._opts.district && district);
    this._displayDom(this._streetDom, this._opts.street && street);
}
KStdGeocoder.prototype._displayDom = function(dom, isshow) {
    dom && isshow ? dom.show() : dom ? dom.hide() : "";
}
KStdGeocoder.prototype._handleStreet = function(street) {
    street ? this._streetDom.text(street) : "";
    this._displayDom(this._streetDom, street && this._opts.street);
}
KStdGeocoder.prototype._isLatlonZoomChanged = function(latlon, zoom) {
    return latlon != this._geocoderInfo.latlon || zoom != this._geocoderInfo.zoom;
}



/**
 * 触发poicomplete事件
 * @param latlon 经纬度字符串
 * @returns 无
 * @uncrunch
 */
KStdGeocoder.prototype.getPoiByLatlon = function(latlon) {
	var _this=this;
	if (typeof latlon !== "string") {
		if (typeof latlon.getPid === "function") {
			latlon = latlon.getPid();
		} else {
			throw new Error("getPoiByLatlon() needs a string of latlon");
			return;
		}
	}
	var zoom = 13;
	var hash = new KUrlHash();
	hash.setKey("t", "ig");
	hash.setKey("l", latlon);
	hash.setKey("z", zoom);
	 $.ajax( {
		url : this._opts.url + "?" + hash.toString(),
		type : 'GET',
		dataType : 'json',
		success : function(data) {
		 	var poi = KTools.copyOptions( {
				"latlon" : latlon
			}, KPOInfo);
		 	if(data && data.c){
		 		poi.city = data.c;
		 	}
		 	KEvent.trigger(_this, "poicomplete", _this, poi, data);
		},
		error:function(){
			throw new Error("接口或参数错误");
		}
	});
};

/*
标准标记组件 KStdMapMarkers
作者：张世琦
版本：2.0
创建时间：2011-1-12
最后修改时间：2011-3-2 15:40
==============================================================================
[修改历史]
*/

var KStdMapMarkers = KClass.create('KStdMapMarkers', KMapMarkers);

KStdMapMarkers.conf =
{
    CLASSNAME :
    {
        SMM : ''             //组件容器
        ,TLST : '_tlst'     //工具条（ul）样式
        ,TM : '_tm'         //标点按钮（a）样式
        ,TMS : '_tms'       //标点按钮（a）选中状态样式
        ,TL : '_tl'         //折线按钮（a）样式
        ,TLS : '_tls'       //折线按钮（a）选中状态样式
        ,TC : '_tc'         //沿路画线按钮（a）样式
        ,TCS : '_tcs'       //沿路画线按钮（a）选中状态样式
        ,TF : '_tf'         //画面按钮（a）样式
        ,TFS : '_tfs'       //画面按钮（a）选中状态样式
        ,RST : '_rst'       //结果容器（ul）样式
        ,S : '_s'           //结果记录(li)选中样式
        ,H : '_h'           //结果记录（li）鼠标移入样式
        ,IM : '_im'         //结果记录标图标（span）样式
        ,IL : '_il'         //结果记录折线记录图标（span）样式
        ,IC : '_ic'         //结果记录沿路画线记录图标（span）样式
        ,IF : '_if'         //结果记录画面记录图标（span）样式
    }
    ,CONST :
    {
        bkIcon : 'http://img.mapbar.com/web/3in1/icons/mm11.gif'   //默认标注图标
        ,titlelen : 18
        ,colors : ['#ffffff','#dddddd','#cccccc','#999999','#666666','#333333','#000000','#ffcccc','#ff6666','#ff0000','#cc0000','#990000','#660000','#330000','#ffcc99','#ff9966','#ff9900','#ff6600','#cc6600','#993300','#663300','#ffff99','#ffff66','#ffcc66','#ffcc33','#cc9933','#996633','#663333','#ffffcc','#ffff33','#ffff00','#ffcc00','#999900','#666600','#333300','#99ff99','#66ff99','#33ff33','#33cc00','#009900','#006600','#003300','#99ffff','#33ffff','#66cccc','#00cccc','#339999','#336666','#003333','#ccffff','#66ffff','#33ccff','#3366ff','#3333ff','#000099','#000066','#ccccff','#9999ff','#6666cc','#6633ff','#6600cc','#333399','#330099','#ffccff','#ff99ff','#cc66cc','#cc33cc','#993399','#663366','#330033']
        ,wname : '_smm' //组件简写
        ,txtDes : '说明：' //描述字符串
        ,txtDist : '距离：' //距离字符串
        ,txtArea : '面积：' //面积字符串
        ,txtNoDes : '我的说明' //无描述字符串
        ,aunit : '平方米'  //面积单位
        ,baunit : '平方公里'    //大面积单位
        ,dunit : '米'    //距离单位
        ,bdunit : '公里'  //大距离单位
        ,opanel : '<a href="javascript:void(0);" onfocus="this.blur();" mfg="edt">编辑</a><a href="javascript:void(0);" onfocus="this.blur();" mfg="del">删除</a>'    //操作面板内容
        //<a href="javascript:void(0);" onfocus="this.blur();" mfg="swb">分享到微博</a><a href="javascript:void(0);" onfocus="this.blur();" mfg="fav">收藏</a>
        //记录结构
        ,recordStruct :
        {
            info :      //将提交到服务器的信息
            {
                at : '1'    //操作代码 新增 1 修改 2 查询 4 删除 8
                ,did : ''   //服务器记录编号
                ,mt : ''    //标注类型 IM 图标  IL 直线  IC 沿路  IF 面
                ,l : ''     //标注经纬度字符串
                ,t : ''     //记录标题
                ,d : ''     //记录描述
                ,i : ''     //图片
                ,s :        //标注样式
                {
                    c : {x : 1, y : 1}  //图标行列信息
                    ,l :                //线样式
                    {
                        c : '#F00'      //线颜色
                        ,w : 5          //线宽度
                        ,a : 60         //线透明度
                    }
                    ,f :                //面样式
                    {
                        c : '#F00'      //面颜色
                        ,a : 30         //面透明度
                    }
                }
            }
            ,overlays :             //标注包含对象
            {
                m : []              //marker
                ,l : []             //line
                ,a : []             //area
            }
            ,latlon :               //标注经纬度结构
            {
                m : []              //标注经纬度字符串
                ,l : []             //线经纬度字符串
                ,a : []             //面经纬度字符串
            }
        }
    },
    FLASHCONF:
    {
    	file_size_limit : "512",
		file_types : "*.jpg;*.jpeg;*.png",
		file_types_description : "All images",
		file_upload_limit : "0",
		flash_url : "http://img.mapbar.com/web/3in1/flash/swfupload.swf",
		button_image_url : 'http://img.mapbar.com/web/3in1/imgs/swfuploadbutton.png',
		button_width : 65,
		button_height : 26
    }
};

/**
 * 构造方法
 * @param container Node 组件容器
 * @param opts KStdMapMarkersOptions 组件配置选项
 * @uncrunch
 */
KStdMapMarkers.initialize = function(container, opts)
{
    var _this = this;
    this._isHasFlash = this._flashChecker()?true:false;
    this._initVariable();    //初始化私有变量
    this._setOptions(opts, true); //设置组件配置
    this._getDom(container); //取得组件结构
    this._applyTheme();     //应用样式
    if(this.options().mapcontainer && KMap.isInitialized(this.options().mapcontainer))
    {
        this._bindEvent();      //绑定事件
    }
    else
    {
        KEvent.bind(KMap, 'mapinit', this._mapInit, {}, this);    //延迟绑定事件
    }
    this._clearList();
    //将复制链接的方法放到window对象下
    window.mmGetShardUrl = function() {
        return _this._getShardUrl.apply(_this, arguments);
    };
    window.mmCopyShardUrl = function() {
        return _this._copyShardUrl.apply(_this, arguments);
    };
};

/*======================== 实现KObject接口 =======================*/
/**
 * 释放当前组件所有资源
 * @uncrunch
 */
KStdMapMarkers.prototype.finalize = function()
{
    this._tools.unbind();   //解除工具按钮事件
    this.options().clearbtn && $(this.options().clearbtn).unbind();
    this.options().sharebtn && $(this.options().sharebtn).unbind();
    KEvent.unbind(KMap, 'modechanged', this._mapModeChanged);  //解除地图modechanged处理方法
    KEvent.unbind(KMap, 'mapinit', this._mapInit);   //解除地图初始化处理方
    KEvent.unbind(KMap, 'modechanged', this._mapModeChanged);
    KEvent.unbind(KMap, 'bookmark', this._bookmark);
    KEvent.unbind(KMap, 'drawline', this._drawline);
    KEvent.unbind(KMap, 'roadline', this._roadline);
    KEvent.unbind(KMap, 'drawarea', this._drawarea);
    KEvent.unbind(KMap, 'iw_hide', this._iw_hide);
    KEvent.unbind(KMap, 'afteropeninfowindow', this._afterOpenInfoWindow);

    this._toolbar.appendTo(this._$dom);
    this._$dom.hide();
};

/*======================== 实现KWidget接口 ========================*/
/**
 * 获取版本信息
 * @uncrunch
 */
KStdMapMarkers.prototype.version = function()
{
    return '2.0.3';
};
/**
 * 获取中文名称
 * @uncrunch
 */
KStdMapMarkers.prototype.cnname = function()
{
    return '标准标记组件';
};
/**
 * 返回依赖的其它组件
 * @uncrunch
 */
KStdMapMarkers.prototype.dependent = function()
{
    return [jQuery, KArea, KConfig, KMap, KMapMarkerInfo, KMapMarkers, KStdMapMarkersOptions, KQueryOptions,
        KQueryType, KUrlHash];
};
/**
 * 设置组件配置选项
 * @param opts KStdMapMarkersOptions 组件配置选项
 * @uncrunch
 */
KStdMapMarkers.prototype.setOptions = function(opts)
{
    this._setOptions(opts, false);
};
/**
 * 设置并应用组件的样式方案
 * @param scheme String 样式名称
 * @return Boolean 样式是否设置成功
 * @uncrunch
 */
KStdMapMarkers.prototype.setTheme = function(scheme)
{
    this._setTheme(scheme);
};
/**
 * 显示组件
 * @uncrunch
 */
KStdMapMarkers.prototype.show = function()
{
    this._show(true, true);
};
/**
 * 隐藏组件
 * @uncrunch
 */
KStdMapMarkers.prototype.hide = function()
{
    //this._clearMarkers();   //清除地图上的标记
    this._$dom.hide();      //隐藏组件
    KEvent.trigger(this, 'hide');
    this.hideToolbar();   //隐藏工具条
    this._setMarkMode();    //恢复地图模式
};
/**
 * 返回组件是否可见
 * @return Boolean 组件是否可见
 * @uncrunch
 */
KStdMapMarkers.prototype.visible = function()
{
    return KWidget.prototype.visible.apply(this);
};
/**
 * 通知组件重新布局
 * @uncrunch
 */
KStdMapMarkers.prototype.layout = function()
{
    var _offset = this.options().markbtn ? $(this.options().markbtn).offset() : {left : 0, top : 0};
    this._toolbar.css({
        top : (_offset.top + (this.options().offset ? this.options().offset.top : 0)) + 'px'
        ,left : (_offset.left + (this.options().offset ? this.options().offset.left : 0)) + 'px'
    });
};

/*====================== 实现KQuery接口 =====================*/
/**
 * 组件地址栏特征字符串集合
 * @uncrunch
 */
KStdMapMarkers.prototype.hashKeys = function()
{
    return ['mmid'];
};
/**
 * 根据指定的Hash值进行查询
 * @param hash KUrlHash
 * @uncrunch
 */
KStdMapMarkers.prototype.queryByHash = function(hash)
{
    var _this = this;
    if(hash.value('mmid'))
    {
        if(!this.visible())
        {
            this._show(false);
        }
        //取得记录编号
        this._mmid = hash.value('mmid');
        //将记录设置为查询状态
        this._at = 4;
        //取得记录数据
        if(KMap.isInitialized(this.options().mapcontainer))
        {
            this._load();
        } else {
            KEvent.bind(KMap, 'mapinit', function(){
                _this._load();
                KEvent.unbind(KMap, 'mapinit', arguments.callee)
            });
        }
    }
};

/*==================== 实现KMapMarkers接口 ====================*/
/**
 * 获取指定的标记数据
 * @return KMapMarkerInfo[]
 * @uncrunch
 */
KStdMapMarkers.prototype.markers = function()
{
    var m = [];
    for(var i = 0; i < this._recorder.records.length; i++)
    {
        var r = this._recorder.records[i];
        m.push(KTools.copyOptions({
            nid : r.info.did
            ,order : i
            ,title : r.info.t
            ,content : r.info.d
            ,img : r.info.i
            ,type : r.info.mt
            ,latlons : r.info.l
            ,style : $.extend(true, {}, r.info.s)
        }, KMapMarkerInfo));
    }
    return m;
};
/**
 * 增加标记
 * @param marker KMapMarkerInfo
 * @return Boolean 是否添加成功
 * @uncrunch
 */
KStdMapMarkers.prototype.add = function(marker)
{
    var _this = this;
    var _r = KTools.copyOptions({
        info : {
            t : marker.title
            ,d : marker.content
            ,i : marker.img
            ,l : marker.latlons
            ,mt : marker.type
            ,s : eval('(' + marker.style + ')')
        }
    }, KStdMapMarkers.conf.CONST.recordStruct);
    switch(marker.type)
    {
        case KOverlayType.MARKER:
        {
            _r.info.mt = 'IM';
            break;
        }
        case KOverlayType.POLYLINE:
        {
            _r.info.mt = 'IL';
            break;
        }
        case KOverlayType.ROADLINE:
        {
            _r.info.mt = 'IC';
            break;
        }
        case KOverlayType.AREA:
        {
            _r.info.mt = 'IF';
            break;
        }
    }
    //var _val = this._markerInfo2Note(marker);
    //var _d = eval('(' + marker.data + ')');
    var _ls = marker.latlons.split(',');
    var _l = [];
    for(var i in _ls)
    {
        _l.push(new MPoint(_ls[i]));
    }

    //添加标记
    if(marker.type == KOverlayType.MARKER)
    {
        this._addMarkerRecord(this._addMarker(_l[0], false, eval('(' + marker.style + ')')), false, _r.info);
    }
    //添加折线
    if(marker.type == KOverlayType.POLYLINE)
    {
        this._addLineRecord(this._addLine(_l, false, eval('(' + marker.style + ')')), false, _r.info);
    }
    //添加沿路画线
    if(marker.type == KOverlayType.ROADLINE)
    {
        if(this.options().roadurl)
        {
            var _lines = [];
            for(var i = 1; i < _ls.length; i++)
            {
                var _url = this.options().roadurl + '&nh=' + _ls[i-1] + ',' + _ls[i];
                $.ajax({
                    async : false
                    ,type : 'GET'
                    ,url : _url
                    ,success : function(data){
                        if(data)
                        {
                            eval(data);
                            var _line = KLine.fromEncoded(_map_rlm.a[0].a, _map_rlm.a[0].b);
                            //var _lls = _line.latlons();
                            _lines = _lines.concat(_line.latlons());
                            /*for(var n in _lls)
                            {
                                _lines.push(_lls[n]);
                            }*/
                        }
                    }
                });
            }
            var result = this._addRoadLine(_l, _lines, false, eval('(' + marker.style + ')'));
            this._addRoadLineRecord(result.markers, result.lines, false, _r.info);
        }

    }
    //添加面
    if(marker.type == KOverlayType.AREA)
    {
        this._addAreaRecord(this._addArea(_l, false, eval('(' + marker.style + ')')), false, _r.info);
    }
};
/**
 * 将标记信息更新到数据源
 * @param marker KMapMarkerInfo
 * @return Boolean 是否更新成功
 * @uncrunch
 */
KStdMapMarkers.prototype.update = function(marker)
{
    this.add(marker);
    this._update(1, false);
    return true;
};
/**
 * 删除标记
 * @param mapmarker KMarker
 * @return Boolean 是否删除成功
 * @uncrunch
 */
KStdMapMarkers.prototype.remove = function(mapmarker)
{
    var _idx = this._getMarkerIndex(mapmarker);
    this._removeList(_idx);
    this._removeRecord(_idx);
    return true;
};

/*=========================== 公共方法 ==========================*/
/**
 * 显示工具条
 * @uncrunch
 */
KStdMapMarkers.prototype.showToolbar = function()
{
    var _offset = this.options().markbtn ? $(this.options().markbtn).offset() : {left : 0, top : 0};
    this._toolbar.css({
        top : (_offset.top + (this.options().offset ? this.options().offset.top : 0)) + 'px'
        ,left : (_offset.left + (this.options().offset ? this.options().offset.left : 0)) + 'px'
    });
    this._toolbar.show();
    KEvent.trigger(this, 'toolshow');
};
/**
 * 隐藏工具条
 * @uncrunch
 */
KStdMapMarkers.prototype.hideToolbar = function()
{
    this._toolbar.hide();
    KEvent.trigger(this, 'toolhide');
};
/**
 * 清空所有标记
 * @uncrunch
 */
KStdMapMarkers.prototype.clear = function()
{
    this._clearList();
    this._clearMarkers();
    this._clearRecord();
};
/**
 * 工具是否显示
 * @return Boolean
 * @uncrunch
 */
KStdMapMarkers.prototype.toolVisible = function()
{
    return this._toolbar.is(':visible');
};
/**
 * 根据“分享连接”的数据源记录ID加载标记列表和图标
 * @param id Integer记录ID
 * @uncrunch
 */
KStdMapMarkers.prototype.loadByLink = function(id)
{
    var _this = this;
    //取得记录编号
    this._mmid = id;
    //将记录设置为查询状态
    this._at = 4;
    //取得记录数据
    if(KMap.isInitialized(this.options().mapcontainer))
    {
        this._load();
    } else {
        KEvent.bind(KMap, 'mapinit', function(){
            _this._load();
            KEvent.unbind(KMap, 'mapinit', arguments.callee)
        });
    }
};
/**
 * 组件支持的地图模式
 * @return KMapMode[] 地图模式
 * @uncrunch
 */
KStdMapMarkers.prototype.supportMapModels = function()
{
    return [KMapMode.BOOKMARK, KMapMode.DRAWLINE, KMapMode.DRAWAREA, KMapMode.ROADLINE];
};


/*=========================== 私有方法 ===========================*/
/**
 * 初始化私有变量
 */
KStdMapMarkers.prototype._initVariable = function()
{
    this._$dom = undefined; //组件容器 jQuery对象
    this._toolbar = undefined;  //组件工具栏 jQuery对象
    this._rstcontainer = undefined; //组件结果容器 jQuery对象
    this._tools = undefined;    //所有工具按钮
    /*this._tmb = undefined;   //标注工具按钮
    this._tlb = undefined;   //直线工具按钮
    this._tcb = undefined;   //沿路划线工具按钮
    this._tfb = undefined;  //画面工具按钮*/
    this._recorder =    //信息记录器
    {
        sno :        //记录序号
        {
            m : 1   //标注序号
            ,l : 1  //折线序号
            ,r : 1  //沿路画线序号
            ,a : 1  //面序号
        }
        ,records : []   //标记记录数组
    };
    this._idx = undefined;  //当前打开气泡的标注序号
    this._overlay = undefined;  //当前打开气泡的标注对象
    this._infowin = undefined;  //当前打开的气泡Dom
    this._iwEdit = undefined;   //当前打开气泡编辑界面Dom
    this._iwNormal = undefined; //当前打开气泡默认界面Dom
    this._iwStyle = undefined;  //当前打开气泡样式选择界面Dom
    this._uploadFrm = undefined;    //图片上传接收Iframe
    this._dTitle = undefined;   //保存当前页面的标题
    this._at = 1;                   //记录操作状态，默认为添加状态
    this._mmid = undefined;     //当前记录编号
    this._alertmsg = function(dom){
      KTools.showMsg('<div style="padding:5px 10px 5px 10px;font-size:13px;">请输入查询内容！</div>', {title:"提示",lightbox:true,closedcbk:function(){dom.focus();},buboptions:{outside:false,closebtn:true}});
    };
    this._tmpInfo = {t : undefined, d : undefined}; //临时信息
};
/**
 * 取得DOM结构
 * @param container
 */
KStdMapMarkers.prototype._getDom = function(container)
{
    this._dom = container;
    this._$dom = $(container).hide();
    this._toolbar = $('ul', this._$dom).eq(0); //取得工具栏容器
    this._rstcontainer = $('ul', this._$dom).eq(1); //取得结果容器
    this._tools = $('>li>a', this._toolbar);    //取得所有工具按钮
    /*this._tmb = $('>li>a[mfg="bk"]', this._toolbar).eq(0);  //取得标注工具按钮
    this._tlb = $('>li>a[mfg="pl"]', this._toolbar).eq(0);    //取得直线工具按钮
    this._tcb = $('>li>a[mfg="rl"]', this._toolbar).eq(0);    //取得沿路画线工具按钮
    this._tfb = $('>li>a[mfg="pg"]', this._toolbar).eq(0);    //取得画面工具按钮*/

    //将工具栏结构移至body下
    this._toolbar.appendTo($('body')).hide().css({'z-index' : this.options().zindex});
};
/**
 * 取得样式名称
 * @param sign String 标志
 * @param theme String 样式名称
 */
KStdMapMarkers.prototype._class = function(sign, theme)
{
    theme = theme || this._theme;
    return theme + KStdMapMarkers.conf.CONST.wname + KStdMapMarkers.conf.CLASSNAME[sign];
};
/**
 * 设置组件样式
 * @param scheme
 * @param init Boolean 当前操作是否为组件初始化
 */
KStdMapMarkers.prototype._setTheme = function(scheme, init)
{
    this._theme = scheme;
    if(!init) this._applyTheme();
};
/**
 * 设置组件配置选项
 * @param opts
 * @param init Boolean 当前操作是否为组件初始化
 */
KStdMapMarkers.prototype._setOptions = function(opts, init)
{
    var _opts = KTools.copyOptions(opts, KStdMapMarkersOptions);
    var _diff = KTools.compareOptions(this._opts, _opts);   //取得配置差异
    this._opts = _opts;
    for(var p in _diff)
    {
        if(p == 'theme') this._setTheme(_diff[p], init);
        if(p == 'zindex' && !init && this._toolbar)  this._toolbar.css({'z-index' : _diff[p]});
    }
};
/**
 * 应用样式
 */
KStdMapMarkers.prototype._applyTheme = function()
{
    var _this = this;
    this._$dom.removeClass().addClass(this._class('SMM'));  //组件容器
    this._toolbar.removeClass().addClass(this._class('TLST'));  //工具栏容器
    this._rstcontainer.removeClass().addClass(this._class('RST'));  //结果容器
    this._tools.each(function(){
        var _cla = '';
        switch($(this).attr('mfg'))
        {
            case 'bk':
            {
                _cla = _this._class('TM');
                break;
            }
            case 'pl':
            {
                _cla = _this._class('TL');
                break;
            }
            case 'rl':
            {
                _cla = _this._class('TC');
                break;
            }
            case 'pg':
            {
                _cla = _this._class('TF');
                break;
            }
        }
        $(this).removeClass().addClass(_cla);
    });
    /*this._tmb.removeClass().addClass(this._class('TM'));  //标注工具按钮
    this._tlb.removeClass().addClass(this._class('TL'));    //直线工具按钮
    this._tcb.removeClass().addClass(this._class('TC'));    //沿路画线工具按钮
    this._tfb.removeClass().addClass(this._class('TF'));    //画面工具按钮*/
};
/**
 * 恢复工具按钮状态
 * @param mfg String 标记模式标识
 */
KStdMapMarkers.prototype._resumeTools = function(mfg)
{
    this._tools.each(function(){
        var _cla = this.className;
        if(mfg && ($(this).attr('mfg') == mfg))
        {
            $(this).removeClass().addClass(_cla.replace(/s$/, '') + 's');
        }
        else
        {
            $(this).removeClass().addClass(_cla.replace(/s$/, ''));
        }
    });
};
/**
 * 绑定事件
 */
KStdMapMarkers.prototype._bindEvent = function()
{
    var _this = this;
    //绑定工具按钮事件
    this._tools.unbind().bind('click', function(){
        var reg = new RegExp('.*s$');
        var _cla = this.className;
        if(!reg.test(_cla))
        {
            _this._setMarkMode($(this).attr('mfg'));
        }
        else
        {
            _this._setMarkMode();
        }
    });
    //为清空按钮绑定事件
    if(this.options().clearbtn)
    {
        $(this.options().clearbtn).unbind().bind('click', function(){
            KTools.showMsg('清空后将无法恢复，您是否确定清空列表？', {title : '提示', buttons : KMsgBoxButtons.YesNo, node : this,
                closedcbk : function(action, button){
                if(action == 'button' && button.name == 'yes')
                {
                    KMap.closeInfoWindow();
                    _this.clear();
                }
            }});
        });
    }
    //绑定分享链接按钮事件
    if(this.options().sharebtn)
    {
        $(this.options().sharebtn).unbind().bind('click', function(){
            _this._shardLink();
        });
    }
    //绑定地图modechanged事件
    KEvent.bind(KMap, 'modechanged', this._mapModeChanged, {}, this);
    //绑定地图bookmark事件
    KEvent.bind(KMap, 'bookmark', this._bookmark, {}, this);
    //绑定地图drawline事件
    KEvent.bind(KMap, 'drawline', this._drawline, {}, this);
    //绑定地图roadline事件
    KEvent.bind(KMap, 'roadline', this._roadline, {}, this);
    //绑定地图drawarea事件
    KEvent.bind(KMap, 'drawarea', this._drawarea, {}, this);
    //绑定地图的iw_hide事件
    KEvent.bind(KMap, 'iw_hide', this._iw_hide, {}, this);
    //绑定地图的afteropeninfowindow
    KEvent.bind(KMap, 'afteropeninfowindow', this._afterOpenInfoWindow, {}, this);
};
/**
 * 初始化气泡
 * @param overlay KOverlay
 */
KStdMapMarkers.prototype._initInfoWindow = function(overlay)
{
    //取得标注顺序
    this._idx = this._getMarkerIndex(overlay);
    this._overlay = overlay;

    this._infowin = overlay.iwcDom();
    this._iwNormal = $('div[mfg="df"]', this._infowin); //取得默认界面
    this._iwEdit = $('div[mfg="ep"]', this._infowin);   //取得编辑界面
    this._iwStyle = $('div[mfg="se"]', this._infowin);  //取得样式界面
    //设置气泡默认值
    this._setInfoWindowDefaultValue();
    //判断是否为第一次打开气泡
    if(this._idx > -1)
    {
        //不是首次打开气泡则转到默认界面
        this._showInterface('df', this._recorder.records[this._idx] ? this._recorder.records[this._idx].info.t : '');
        //设置气泡功能
        this._bindInfoWindowFun();
    }
    else
    {
        //首次打开气泡
        //转到编辑页面
        this._showInterface('ep', '请填写标记信息');
        //设置气泡功能
        this._bindInfoWindowFun();

    }
};
/**
 * 绑定标记气泡的功能
 */
KStdMapMarkers.prototype._bindInfoWindowFun = function()
{
    var _this = this;
    var _n = this._recorder.records[this._idx];

    //---------- 编辑界面 ----------
    //取消按钮
    $('a[mfg="ep_c"]', this._iwEdit).unbind().bind('click', function(){
        KMap.closeInfoWindow();
    });
    //更换样式按钮
    $('a[mfg="ep_l"]', this._iwEdit).unbind().bind('click', function(){
        _this._showInterface('se', _this._overlay.options().extdata['mark'] == 'bk' ? '更改图标' : '编辑样式');
    });
    //上传图片
    if(!_this._isHasFlash){
    	//$('input[mfg="ep_frm_f"]', this._iwEdit).unbind().bind('change', {owner : this, obj : $('input[mfg="ep_frm_f"]', this._iwEdit)}, this._uploadFile);
    }
    //图片删除按钮
    $('div[mfg="ep_p"] a', this._iwEdit).unbind().bind('click', {owner : this}, _this._isHasFlash?_this._removeSwfImage:_this._removeImage);
    //$('div[mfg="ep_p"] a', this._iwEdit).unbind().bind('click', {owner : this}, this._removeImage);
    //保存按钮
    $('input[mfg="ep_s"]', this._iwEdit).unbind().bind('click', function(){
        _this._saveInfo();
        KMap.closeInfoWindow();
    });

    //---------- 默认界面 ----------
    //编辑按钮
    $('a[mfg="df_e"]', this._iwNormal).unbind().bind('click', function(){
        _this._showInterface('ep', '请填写标注信息');
    });
    //删除按钮
    $('a[mfg="df_d"]', this._iwNormal).unbind().bind('click', function(){
        KTools.showMsg('删除后将无法恢复，您是否确定删除？', {title : '提示', buttons : KMsgBoxButtons.YesNo, node : $(this).get(0), closedcbk : function(action, button){
            if(action == 'button' && button.name == 'yes')
            {
                KMap.closeInfoWindow();
                _this._removeRecord(_this._idx);
                _this._removeList(_this._idx);
            }
        }});
    });
    this._initSearchbox();

    //---------- 样式选择界面 ----------
    //面边框拾色器
    var _bcolor = $('div[mfg="se_bc"]', this._iwStyle);
    //面边框颜色列表
    var _bcl = $('div[mfg="se_bcp"]', this._iwStyle);
    //线边框拾色器
    var _lcolor = $('div[mfg="se_c"]', this._iwStyle);
    //线边框颜色列表
    var _lcl = $('div[mfg="se_cp"]', this._iwStyle);
    //边框宽度
    var _bwidth = $('input[mfg="se_st"]', this._iwStyle);
    //边框透明度
    var _balpha = $('input[mfg="se_t"]', this._iwStyle);
    //填充拾色器
    var _fcolor = $('div[mfg="se_fc"]', this._iwStyle);
    //填充颜色列表
    var _fcl = $('div[mfg="se_fcp"]', this._iwStyle);
    //填充透明度
    var _falpha = $('input[mfg="se_ft"]', this._iwStyle);


    //返回按钮
    $('a[mfg="se_b"]', this._iwStyle).unbind().bind('click', function(){
        _this._showInterface('ep', '请填写标注信息');
    });
    if(this._overlay.options().extdata['mark'] == 'bk')
    {
        //图标列表
        $('ul[mfg="se_c"] li a', this._iwStyle).unbind().bind('click', function(){
            $('a[mfg="ep_l"] div', _this._iwEdit).attr('class', $('div', $(this)).attr('class'));
            _this._showInterface('ep', '请填写标注信息');
        });
    }
    else
    {
        //取消按钮
        $('a[mfg="se_c"]', this._iwStyle).unbind().bind('click', function(){
            _this._showInterface('ep', '请填写标注信息');
        });
        //确定按钮
        $('input[mfg="se_s"]', this._iwStyle).unbind().bind('click', function(){
            var _l = $('a[mfg="ep_l"]', this._iwEdit);
            var _s = {};
            var _bs = {};

            if(!_fcolor.get(0))
            {
                _s.backgroundColor = _this._Rgb2HexColor(_lcolor.css('background-color'));
                _s.opacity = parseFloat(_balpha.val()) / 100;

                $('span', _l).css(_s);
            }
            else
            {
                _s.backgroundColor = _this._Rgb2HexColor(_fcolor.css('background-color'));
                _s.opacity = parseFloat(_falpha.val()) / 100;

                $('span', _l).css(_s);
            }

            _this._showInterface('ep', '请填写标注信息');
        });


        //线边框颜色选择按钮
        _lcolor.unbind().bind('click', function(){
            _lcl.css('display', _lcl.css('display') == 'none' ? 'block' : 'none');
        });
        _lcl.colorPicker({
            columns : 18
            ,color : KStdMapMarkers.conf.CONST.colors
            ,defaultColor : _this._Rgb2HexColor(_n ? _n.info.s.l.c : '#ff0000')
            ,click : function(color){
                color = _this._Rgb2HexColor(color);
                _lcolor.css('background-color', color);
                _lcl.css('display','none');
                _this._setSampleStyle({color : color});
            }
        });
        _lcolor.css({'background-color' : _this._Rgb2HexColor(_n ? _n.info.s.l.c : '#ff0000')});
        //面边框颜色选择按钮
        _bcolor.unbind().bind('click', function(){
            _bcl.css('display', _bcl.css('display') == 'none' ? 'block' : 'none');
        });
        _bcl.colorPicker({
            columns : 18
            ,color : KStdMapMarkers.conf.CONST.colors
            ,defaultColor : _this._Rgb2HexColor(_n ? _n.info.s.l.c : '#ff0000')
            ,click : function(color){color = _this._Rgb2HexColor(color);_bcolor.css('background-color', color);_bcl.css('display','none');}
        });
        _bcolor.css({'background-color' : _this._Rgb2HexColor(_n ? _n.info.s.l.c : '#ff0000')});
        //面填充颜色选择按钮
        _fcolor.unbind().bind('click', function(){
            _fcl.css('display',  _fcl.css('display') == 'none' ? 'block' : 'none');
        });
        _fcl.colorPicker({
            columns : 18
            ,color : KStdMapMarkers.conf.CONST.colors
            ,defaultColor : _this._Rgb2HexColor(_n ? _n.info.s.f.c : '#ff0000')
            ,click : function(color){
                color = _this._Rgb2HexColor(color);
                _fcolor.css('background-color', color);
                _fcl.css('display','none');
                _this._setSampleStyle({color : color});
            }
        });
        _fcolor.css({'background-color' : _this._Rgb2HexColor(_n ? _n.info.s.f.c : '#ff0000')});
        var _oval = '';

        //线宽度
        _bwidth.unbind().bind('keydown', function(e){
            _oval = $(this).val();
            var _kc = e.keyCode;
            if((_kc == 8) || (_kc >= 96 && _kc <= 105) || (_kc >= 48 && _kc <= 57))
            {
            }
            else
            {
                return false;
            }
        }).bind('keyup', function(e){
            if(isNaN($(this).val()) || parseInt($(this).val()) == 0) {
                $(this).val(_oval == '' ? '5' : _oval);
            }
        }).bind('blur', function(){
            if($(this).val() == ''){
                $(this).val(_oval == '' ? '5' : _oval);
            }
        });
        //线透明度
        _balpha.unbind().bind('keydown', function(e){
            _oval = $(this).val();
            var _kc = e.keyCode;
            if((_kc == 8) || (_kc >= 96 && _kc <= 105) || (_kc >= 48 && _kc <= 57))
            {
            }
            else
            {
                return false;
            }
        }).bind('keyup', function(e){
            if(isNaN($(this).val()) || parseInt($(this).val()) == 0){
                $(this).val(_oval == '' ? '60' : _oval);
            }
            if(!_falpha.get(0))
            {
                _this._setSampleStyle({alpha : $(this).val()});
            }
        }).bind('blur', function(){
            if($(this).val() == ''){
                $(this).val(_oval == '' ? '5' : _oval);
            }
        });
        //面填充透明度
        _falpha.unbind().bind('keydown', function(e){
            _oval = $(this).val();
            var _kc = e.keyCode;
            if((_kc == 8) || (_kc >= 96 && _kc <= 105) || (_kc >= 48 && _kc <= 57))
            {
            }
            else
            {
                return false;
            }
        }).bind('keyup', function(e){
            if(isNaN($(this).val()) || parseInt($(this).val()) == 0){
                $(this).val(_oval == '' ? '30' : _oval);
            }
            _this._setSampleStyle({alpha : $(this).val()});
        }).bind('blur', function(){
            if($(this).val() == ''){
                $(this).val(_oval == '' ? '5' : _oval);
            }
        });
    }
};
/**
 * 设置标注示例的样式
 * @param opt Object  color 背景色  alpha 背景透明度
 */
KStdMapMarkers.prototype._setSampleStyle = function(opt)
{
    var _s = $('span[mfg="se_cs"]', this._iwStyle);
    if(opt.color)
    {
        _s.css('background-color', opt.color);
    }
    if(opt.alpha)
    {
        opt.alpha = isNaN(opt.alpha) ? 99 : opt.alpha;
        opt.alpha = (parseInt(opt.alpha) > 99 || parseInt(opt.alpha) < 1) ? 99 : opt.alpha;
        opt.alpha = parseFloat(opt.alpha) / 100;
        _s.css({opacity : opt.alpha});
    }
};
/**
 * 将RGB颜色值转换为Hex颜色值
 * @param color String 待转换的RGB颜色值
 * @return String 转换后的Hex颜色值
 */
KStdMapMarkers.prototype._Rgb2HexColor = function(color)
{
    //如果已经是Hex颜色值则直接返回
    if(color.indexOf('#') >= 0) return color;
    var _pattern = new RegExp('2[0-4]\\d|25[0-5]|[01]?\\d\\d?','ig');
    var _va = color.match(_pattern);
    //如果不是RGB颜色值则将源字符串直接返回
    if(_va.length != 3) return color;
    var _result = '#';
    for(var i = 0; i < 3; i++)
    {
        var _num  = parseInt(_va[i]);
        _result += _num < 16 ? '0' + _num.toString(16) : _num.toString(16);
    }
    return _result;
};
/**
 * 保存标记的信息
 */
KStdMapMarkers.prototype._saveInfo = function()
{
    var _idx = this._getMarkerIndex(this._overlay);
    var _n = this._recorder.records[_idx];
    //保存简介
    _n.info.d = this._escapeHtml($('textarea[mfg="ep_i"]', this._iwEdit).val());
    //保存标题
    var _t = this._escapeHtml($('input[mfg="ep_t"]', this._iwEdit).val().substring(0, KStdMapMarkers.conf.CONST.titlelen));
    if($.trim(_t) != '')
    {
        _n.info.t = _t;
        //this._changeNameOnList(_n.info.t);
    }
    //保存图片
    _n.info.i = $('div[mfg="ep_p"] img', this._iwEdit).attr('src');
    //更改标记样式
    switch(_n.info.mt)
    {
        //标注
        case 'IM':
            var _c = $('a[mfg="ep_l"] div', this._iwEdit).attr('class');
            //保存样式
            _n.info.s.c.x = parseInt(_c.substr(_c.length - 2, 1));
            _n.info.s.c.y = parseInt(_c.substr(_c.length - 1, 1));
            //更改标注样式
            this._overlay.setIconClass(_c);
            break;
        //沿路划线
        case 'IC':
        //折线
        case 'IL':
            var _a = $('input[mfg="se_t"]', this._iwStyle).val();
            var _w = $('input[mfg="se_st"]', this._iwStyle).val();
            var _c = $('div[mfg="se_c"]', this._iwStyle).css('background-color');
            //保存样式
            _n.info.s.l.a = isNaN(_a) ? 60 : parseInt(_a);
            _n.info.s.l.w = isNaN(_w) ? 5 : parseInt(_w);
            _n.info.s.l.c = _c == '' ? '#FF0000' : _c;
            this._overlay.setBrush({color : _n.info.s.l.c, width : _n.info.s.l.w, transparency : _n.info.s.l.a});
            break;
        //区域
        case 'IF':
            var _lc = $('div[mfg="se_bc"]', this._iwStyle).css('background-color');
            var _lw = $('input[mfg="se_st"]', this._iwStyle).val();
            var _la = $('input[mfg="se_t"]', this._iwStyle).val();
            var _fc = $('div[mfg="se_fc"]', this._iwStyle).css('background-color');
            var _fa = $('input[mfg="se_ft"]', this._iwStyle).val();
            //保存样式
            _n.info.s.l.c = _lc == '' ? '#FF0000' : _lc;
            _n.info.s.l.w = isNaN(_lw) ? 5 : parseInt(_lw);
            _n.info.s.l.a = isNaN(_la) ? 60 : parseInt(_la);
            _n.info.s.f.c = _fc == '' ? '#FF0000' : _fc;
            _n.info.s.f.a = isNaN(_fa) ? 30 : parseInt(_fa);
            //更改标注样式
            this._overlay.setBrush({color : _n.info.s.l.c, width : _n.info.s.l.w, transparency : _n.info.s.l.a, bgcolor : _n.info.s.f.c, bgtransparency : _n.info.s.f.a});
            break;
    }
    //更新列表内容
    this._updateList(_idx);
    //将记录设置为修改
    this._recorder.records[_idx].at = 1;
};
/**
 * 将指定的字符串进行html转义
 * @param str String 等转义字符串
 * @return String 转义后的字符串
 */
KStdMapMarkers.prototype._escapeHtml = function(str)
{
    return str ? str.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';
};

/**
 * 指定的字符器进行html反转义
 * @param str String 待转义字符串
 * @return String 转义后的字符串
 */
KStdMapMarkers.prototype._unescapeHtml = function(str)
{
    return str ? str.replace(/(\&lt;)/g, '<').replace(/(\&gt;)/g, '>') : '';
};
/**
 * 上传文件
 * @param Event Object
 */
KStdMapMarkers.prototype._uploadFile = function(event)
{
    var _this = event.data && event.data.owner ? event.data.owner : this;
    var _this_ = event.data && event.data.obj ? event.data.obj : this;
    if($(_this_).val() != '')
    {
        if(!_this.options().uploadUrl)
        {
            KTools.showMsg('无法上传图片', {node : _this_, title : '错误', autoclose : 5})
        }
        else
        {
            var _reg = /.+\.(jpg|jpeg|png)/;
            var _fileName = $(_this_).val().toLowerCase();
            //检测文件合法性
            if(_reg.test(_fileName))
            {
                if(!_this._uploadFrm)
                {
                    //IE下的IFrame必须在createElement下直接带上name属性，否则无法附加name属性
                    if($.browser.msie) {
                        //IE下必须以下面的方式在生成IFrame时加上name属性
                        iframe = document.createElement("<IFRAME name='uf" + Math.floor(Math.random() * 99) + "'>");
                    } else {
                        iframe = document.createElement("IFRAME");
                        iframe.name = 'uf' + Math.floor(Math.random() * 99);
                    }
                    iframe.frameBorder = "0";
                    iframe.style.width = "0px";
                    iframe.style.height = "0px";
                    iframe.style.zIndex = -1;
                    document.body.appendChild(iframe);
                    _this._uploadFrm = $(iframe);
                    _this._uploadFrm.unbind().bind('load', function(){
                        var _ifrm = _this._uploadFrm.get(0);
                        var _r;
                        if (_ifrm.contentDocument) {
                            _r = _ifrm.contentDocument.body.innerHTML;
                        }
                        else if (_ifrm.contentWindow) {
                            _r = _ifrm.contentWindow.document.body.innerHTML;
                        }
                        _this._imgUploaded(eval('(' + _r + ')'));
                    });
                }
                var _frm = $('form[mfg="ep_frm"]', _this._iwEdit).attr({action : _this.options().uploadUrl, target : _this._uploadFrm.attr('name')}).submit();
            }
            else
            {
                $('input[mfg="ep_frm_f"]', this._iwEdit).val('');
                if(!$('input[mfg="ep_frm_f"]', this._iwEdit).get(0).files)
                {
                    $('input[mfg="ep_frm_f"]', this._iwEdit).unbind();
                    var _html = $('form[mfg="ep_frm"]', this._iwEdit).html();
                    $('form[mfg="ep_frm"]', this._iwEdit).html(_html);
                    $('input[mfg="ep_frm_f"]', this._iwEdit).bind('change', {owner : _this, obj : $('input[mfg="ep_frm_f"]', this._iwEdit)},_this._uploadFile);
                }
                KTools.showMsg('文件类型不允许上传，请重新选择', {title : '错误', autoclose : 5, node : $('input[mfg="ep_frm_f"]', _this._iwEdit).get(0)});
            }
        }
    }
};
/**
 * 图片上传完成后的处理
 * @param obj
 */
KStdMapMarkers.prototype._imgUploaded = function(obj)
{
    var _this = this;
    if(obj.e)
    {
        //提示错误
        KTools.showMsg(obj.e, {node : $('input[mfg="ep_frm_f"]', this._iwEdit).get(0), title : '错误', autoclose : 5})
    }
    else
    {
        if(obj.a.length > 0)
        {
            //取得图片容器
            var _ic = $('div[mfg="ep_p"]', this._iwEdit);
            //设置图片地址
            $('img', _ic).attr('src', obj.a[0].a);
            //隐藏上传表单
            $('form[mfg="ep_frm"]', this._iwEdit).css('display', 'none');
            //显示图片
            _ic.css('display', 'block');

            //删除上传用Iframe  暂时不用删除
            /*KTools.removeNode(this._uploadFrm.get(0));
            this._uploadFrm = undefined;*/
        }
    }
    $('input[mfg="ep_frm_f"]', this._iwEdit).val('');
    if(!$('input[mfg="ep_frm_f"]', this._iwEdit).get(0).files)
    {
        $('input[mfg="ep_frm_f"]', this._iwEdit).unbind();
        var _html = $('form[mfg="ep_frm"]', this._iwEdit).html();
        $('form[mfg="ep_frm"]', this._iwEdit).html(_html);
        $('input[mfg="ep_frm_f"]', this._iwEdit).bind('change', {owner : _this, obj : $('input[mfg="ep_frm_f"]', this._iwEdit)}, _this._uploadFile);
        KTools.removeNode(this._uploadFrm.get(0));
        this._uploadFrm = undefined;
    }
};
/**
 * 图片上传完成后的处理
 * @param obj
 */
KStdMapMarkers.prototype._imgSwfUploaded = function(obj)
{
    var _this = this;
    if(obj.e)
    {
        //提示错误
        KTools.showMsg(obj.e, {node : $('input[mfg="ep_frm_f"]', this._iwEdit).get(0), title : '错误', autoclose : 5})
    }
    else
    {
        if(obj.a.length > 0)
        {
            //取得图片容器
            var _ic = $('div[mfg="ep_p"]', this._iwEdit);
            var img = $('img', _ic).get(0);
            img.src = obj.a[0].a;
            var count = 0;
            img.onerror = function () {
                setTimeout(function() {
                    count++;
                    if(count < 8) {
                        img.src = obj.a[0].a+ "?" + count;
                    }
                },2000);
            };
            img.onload = function () {
                $('span[mfg="ep_frm"]', this._iwEdit).css('display', 'none');
                _ic.css('display', 'block');
                $('span[mfg="ep_frm_fname"]', this._infowin).html("");
            };
            //change by tanzh;
            /*setTimeout(function(){
            	//设置图片地址
//                $('img', _ic).attr('src', obj.a[0].a.replace("www.mapbar.com/search/","img.mapbar.com/web/3in1/"));
                $('img', _ic).attr('src', obj.a[0].a);
                //隐藏上传表单
                $('span[mfg="ep_frm"]', this._iwEdit).css('display', 'none');
                //显示图片
                _ic.css('display', 'block');
                *//*$('span[mfg="ep_frm_fname"]', infoDom).html("");
                *change by tanzh*//*
                $('span[mfg="ep_frm_fname"]', this._infowin).html("");
            },1000);*/
            //删除上传用Iframe  暂时不用删除
            /*KTools.removeNode(this._uploadFrm.get(0));
            this._uploadFrm = undefined;*/
        }
    }
};
/**
 * 移除图片
 */
KStdMapMarkers.prototype._removeImage = function(event)
{
    var _this = event.data.owner;
    KTools.showMsg('此图片将被删除且无法恢复，您是否确定删除？', {title : '提示', buttons : KMsgBoxButtons.YesNo, node : $('div[mfg="ep_p"] img', _this._iwEdit).get(0), closedcbk : function(action, button){
        if(action == 'button' && button.name == 'yes')
        {
            var _ic = $('div[mfg="ep_p"]', _this._iwEdit);
            //设置图片地址
            $('img', _ic).attr('src', '');
            //显示上传表单
            $('form[mfg="ep_frm"]', _this._iwEdit).css('display', 'block');
            //隐藏图片
            _ic.css('display', 'none');
            //删除记录中的图片路径
            _this._recorder.records[_this._idx < 0 ? _this._recorder.records.length - 1 : _this._idx].info.i = '';
        }
    }});
};
/**
 * 移除图片
 */
KStdMapMarkers.prototype._removeSwfImage = function(event)
{
    var _this = event.data.owner;
    KTools.showMsg('此图片将被删除且无法恢复，您是否确定删除？', {title : '提示', buttons : KMsgBoxButtons.YesNo, node : $('div[mfg="ep_p"] img', _this._iwEdit).get(0), closedcbk : function(action, button){
        if(action == 'button' && button.name == 'yes')
        {
            var _ic = $('div[mfg="ep_p"]', _this._iwEdit);
            //设置图片地址
            $('img', _ic).attr('src', '');
            //显示上传表单
            $('span[mfg="ep_frm"]', _this._iwEdit).show();
            //隐藏图片
            _ic.css('display', 'none');
            //删除记录中的图片路径
            _this._recorder.records[_this._idx < 0 ? _this._recorder.records.length - 1 : _this._idx].info.i = '';
            KMap.moveMap(0,0);//处理chrome下出现滚动条
        }
    }});
};
/**
 * 显示infowWindow指定的界面
 * @param mfg String 界面的mfg值
 * @param title String 界面标题
 */
KStdMapMarkers.prototype._showInterface = function(mfg, title)
{
    title = title || '';;
    //隐藏所有界面

    this._iwNormal.css('display', 'none');
    this._iwEdit.css('display', 'none');
    this._iwStyle.css('display', 'none');
    //根据参数设置界面和标题
    switch(mfg)
    {
        case 'df':
            this._overlay.setOptions({'infowin' : {'title' : title}});
            this._iwNormal.css('display', '');
            break;
        case 'ep':
            this._overlay.setOptions({'infowin' : {'title' : title}});
            this._iwEdit.css('display', '');
            break;
        case 'se':
            this._overlay.setOptions({'infowin' : {'title' : title}});
            this._iwStyle.css('display', '');
            break;
    }
};
/**
 * 设置气泡默认值
 */
KStdMapMarkers.prototype._setInfoWindowDefaultValue = function()
{
    var record = this._recorder.records[this._idx];
    var _this = this;
    //---------- 样式编辑界面 ----------
    //设置画线气泡中当前样式显示器的样式
    $('span[mfg="se_cs"]', this._iwStyle).css({'background-color' : record ? record.info.s.l.c : '#FF0000', opacity : record ? record.info.s.l.a / 100 : 0.6});
    //设置画线气泡中线条宽度值
    $('input[mfg="se_st"]', this._iwStyle).val(record ? record.info.s.l.w : '5');
    //设置画线气泡中线条透明度值
    $('input[mfg="se_t"]', this._iwStyle).val(record ? record.info.s.l.a : '60');
    //设置画面气泡背景色透明度的值
    $('input[mfg="se_ft"]', this._iwStyle).val(record ? record.info.s.f.a : '30');
    //设置画面气泡中当前样式显示器的样式
    $('span[mfg="se_cs"]', this._iwStyle).css({'background-color' : record ? record.info.s.f.c : '#FF0000', opacity : record ? record.info.s.f.a / 100 : 0.6});
    //---------- 信息编辑界面 ----------
    //设置标题值
    var _title = $('input[mfg="ep_t"]', this._iwEdit).attr('maxlength', KStdMapMarkers.conf.CONST.titlelen);
    if(record)
    {
        _title.val(this._unescapeHtml(record.info.t));
    }
    else
    {
        setTimeout(function(){
            _title.val(_this._tmpInfo.t);
        }, 10);
    }
    //设置简介内容
    $('textarea[mfg="ep_i"]', this._iwEdit).val(record ? this._unescapeHtml(record.info.d) : KStdMapMarkers.conf.CONST.txtNoDes);
    //设置图片
    var _ic = $('div[mfg="ep_p"]', this._iwEdit);
    var _frm = _this._isHasFlash?$('span[mfg="ep_frm"]', this._iwEdit):$('form[mfg="ep_frm"]', this._iwEdit);
    if(record && record.info.i && record.info.i != '')
    {
        $('img', _ic).attr('src', record.info.i);
        _ic.css('display', 'block');
        _frm.css('display', 'none');
    }
    else
    {
        _ic.css('display', 'none');
        _frm.css('display', 'block');
    }
    //设置标记样式编辑按钮
    var _msb = $('a[mfg="ep_l"]>div', this._iwEdit);
    if(_msb.get(0))
    {
        var _cla = _msb.attr('class');
        _msb.removeClass(_cla).addClass(_cla.replace(/(\d\d)$/, ((record ? record.info.s.c.x : 1).toString()) + (
                (record ? record.info.s.c.y : 1).toString())));
    }
    //设置线或面样式编辑按钮
    var _lsb = $('a[mfg="ep_l"]>span', this._iwEdit);
    if(_lsb.get(0))
    {
        //设置线样式编辑按钮
        if(record && (record.info.mt == 'IL' || record.info.mt == 'IC'))
        {
            _lsb.css({
                'background-color' : record ? record.info.s.l.c : '#FF0000'
                ,'opacity' : parseFloat(record ? record.info.s.l.a : 60) / 100
            });
        }
        //设置面样式编辑按钮
        if(record && record.info.mt == 'IF')
        {
            _lsb.css({
                'background-color' : record ? record.info.s.f.c : '#FF0000'
                ,'opacity' : parseFloat(record ? record.info.s.f.a : 60) / 100
            });
        }
    }
    //---------- 默认界面 ----------
    //设置图片
    var _img = $('img[mfg="df_f"]', this._iwNormal);
    if(record && record.info.i != '')
    {
        _img.attr('src', record.info.i);
        _img.parent().css('display', 'block');
    }
    else
    {
        _img.parent().css('display', 'none');
    }
    //设置简介
    $('p[mfg="df_i"]').html(record && record.info.d != '' ? record.info.d : KStdMapMarkers.conf.CONST.txtNoDes);

    var _latlons = [];
    var _r = 0;
    var _aunit = '平方米';
    var _lunit = '米';
    //设置面积信息
    if(record && record.info.mt == 'IF')
    {
        for(i in record.latlon.a)
        {
            _latlons.push(new MPoint(record.latlon.a[i]));
        }
        $('strong[mfg="df_ds"]', this._iwNormal).html(this._convertData('a', KMap.area(_latlons)));
    }
    //设置距离信息
    if(record && (record.info.mt == 'IL' || record.info.mt == 'IC'))
    {
        for(i in record.latlon.l)
        {
            _latlons.push(new MPoint(record.latlon.l[i]));
        }
        $('strong[mfg="df_ds"]', this._iwNormal).html(this._convertData('d', KMap.distance(_latlons)));
    }
};
/**
 * 转化指定的数据
 * @param type String  a 面积   d 距离
 * @param value Integer 数值
 */
KStdMapMarkers.prototype._convertData = function(type, value)
{
    var result = value;
    var unit = (type == 'a' ? KStdMapMarkers.conf.CONST.aunit : KStdMapMarkers.conf.CONST.dunit);
    if(value > (type == 'a' ? 1000000 : 1000))
    {
        result = type == 'a' ? this._formatFloat((parseFloat(value) / 1000000), 1) : this._formatFloat((parseFloat(value) / 1000), 1);
        unit = type == 'a' ? KStdMapMarkers.conf.CONST.baunit : KStdMapMarkers.conf.CONST.bdunit;
    }
    return result + unit;
};
/**
 * 将数字精确到指定的位数
 * @param src Float 数字
 * @param pos int 位数
 */
KStdMapMarkers.prototype._formatFloat = function(src,pos)
{
    return Math.round(src * Math.pow(10, pos)) / Math.pow(10, pos);
};
/**
 * 设置标记模式
 * @param mfg String 标记模式标识
 */
KStdMapMarkers.prototype._setMarkMode = function(mfg)
{
    this._resumeTools(mfg); //将工具条工具选择改为指定状态
    this._setMapMarkMode(mfg);   //设置地图标记模式
};
/**
 * 设置标记模式(右键菜单调用)
 * @param mfg String 标记模式标识
 * */
KStdMapMarkers.prototype.setMenuMarkMode = function(latlon)
{
	 this._addMarkerRecord(this._addMarker(latlon, true), true);
};

/**
 * 设置地图标记模式
 * @param mfg String 标记模式标识
 */
KStdMapMarkers.prototype._setMapMarkMode = function(mfg)
{
    var _mode = KMapMode.PAN; //默认平移模式
    if(mfg)
    {
        //设置地图模式
        switch(mfg)
        {
            case 'bk':
            {
                _mode = KMapMode.BOOKMARK;  //标注模式
                break;
            }
            case 'pl':
            {
                _mode = KMapMode.DRAWLINE;  //画线模式
                break;
            }
            case 'rl':
            {
                _mode = KMapMode.ROADLINE;  //沿路画线模式
                break;
            }
            case 'pg':
            {
                _mode = KMapMode.DRAWAREA;  //画面模式
                break;
            }
        }
    }
    KMap.setMode(_mode);    //设置地图模式
};
/**
 * 显示组件
 * @param toolbar Boolean 是否显示工具栏
 * @param deftool Boolean 是否默认选择工具
 */
KStdMapMarkers.prototype._show = function(toolbar, deftool)
{
    this._$dom.show();  //显示组件
    KEvent.trigger(this, 'shown');
    toolbar && this.showToolbar(); //显示工具条
    deftool && this._setMarkMode('bk');    //默认启用标注模式
    //this._resumeMarkers();  //恢复标记
};
/**
 * 添加结果到列表
 * @param info Object 记录内容，示例：{ico : '图标样式', title : '标题', des : '说明', supp : '补充说明'}
 * @param select Boolean 是否选中新加项目
 * @return Node 新添加节点
 */
KStdMapMarkers.prototype._addList = function(info, select)
{
    var _this = this;
    var node = $('<li/>');
    if(select)
    {
        this._resumeList();
        node.addClass(this._class('S'));
    }
    node.append($('<span/>').addClass(info.ico))
            .append($('<h4/>').html(info.title))
            .append($('<p/>').html(info.des))
            .append($('<p/>').html(info.supp))
            .append($('<p/>').html(KStdMapMarkers.conf.CONST.opanel))
            .appendTo(this._rstcontainer);
    //为节点绑定事件
    node.unbind().bind('click', function(){
        _this._resumeList();
        $(this).removeClass().addClass(_this._class('S'));
        var _idx = _this._getListIndex(this);
        var _overlays = _this._recorder.records[_idx].overlays;
        var _overlay = undefined;
        switch($('>span', this).attr('class').replace(/^mwp_smm_/, ''))
        {
            case 'im':  //标注记录
            {
                _overlay = _overlays.m[0];
                break;
            }
            case 'il':  //折线记录
            {
                _overlay = _overlays.l[0];
                break;
            }
            case 'ic':  //线路记录
            {
                _overlay = _overlays.l[0];
                break;
            }
            case 'if':  //面记录
            {
                _overlay = _overlays.a[0];
                break;
            }
        }
        /*console.log(_overlay.latlon);
        console.log(_overlay.latlon());*/
        if(_overlay.latlon)
        {
            KMap.setCenter(_overlay.latlon().getPid());
        }
        KMap.openInfoWindow(_overlay);
    }).hover(function(){
        //var _idx = _this._getListIndex(this);
        $(this).addClass(_this._class('H'));
        //_this._hiliteMarker(_idx, true);
    }, function(){
        //var _idx = _this._getListIndex(this);
        $(this).removeClass(_this._class('H'));
        //_this._hiliteMarker(_idx, false);
    });
    //绑定删除按钮click事件
    $('a[mfg="del"]', $('>p', node).eq(2)).unbind().bind('click', function(e){
        e.stopPropagation();
        var _li = $(this).parent().parent();
        var _idx = _this._getListIndex(_li.get(0));
        _this._selectList(_idx);
        KTools.showMsg('删除后将无法恢复，您是否确定删除？', {title : '提示', buttons : KMsgBoxButtons.YesNo, node : $(this).get(0), closedcbk : function(action, button){
            if(action == 'button' && button.name == 'yes')
            {
                KMap.closeInfoWindow();
                _this._removeRecord(_idx);
                _this._removeList(_idx);
            }
            else
            {
                _this._resumeList();
            }
        }});
    });
    //绑定编辑按钮click事件
    $('a[mfg="edt"]', $('>p', node).eq(2)).unbind().bind('click', function(e){
        e.stopPropagation();
        var _p = $(this).parent().parent();
        var _overlays = _this._recorder.records[_this._getListIndex(_p.get(0))].overlays;
        var _overlay = undefined;
        switch($('>span', _p).attr('class').replace(/^mwp_smm_/, ''))
        {
            case 'im':  //标注记录
            {
                _overlay = _overlays.m[0];
                break;
            }
            case 'il':  //折线记录
            {
                _overlay = _overlays.l[0];
                break;
            }
            case 'ic':  //线路记录
            {
                _overlay = _overlays.l[0];
                break;
            }
            case 'if':  //面记录
            {
                _overlay = _overlays.a[0];
                break;
            }
        }
        KMap.openInfoWindow(_overlay);
        _this._showInterface('ep', '填写标记信息');
    });
    return node.get(0);
};
/**
 * 删除指定列表项
 * @param idx Integer 序号
 */
KStdMapMarkers.prototype._removeList = function(idx)
{
    $('>li', this._rstcontainer).eq(idx).remove();
};
/**
 * 清空结果列表
 */
KStdMapMarkers.prototype._clearList = function()
{
    for(; this._listCount() > 0;)
    {
        this._removeList(0);
    }
};
/**
 * 取得指定结果列表项的顺序
 * @param item 结果列表项
 */
KStdMapMarkers.prototype._getListIndex = function(item)
{
    var _items = $('>li', this._rstcontainer).toArray();
    for(var i = 0; i < _items.length; i++)
    {
        if(item === _items[i]) return i;
    }
};
/**
 * 恢复列表状态，并可将指定的项目设置为选中状态
 * @param idx Integer 选中状态的序号
 */
KStdMapMarkers.prototype._resumeList = function(idx)
{
    var _this = this;
    /*var _items = $('>li', this._rstcontainer).toArray();
    for(var i = 0; i < _items.length; i++)
    {
        $(_items[i]).removeClass();
        if(idx == i) $(_items[i]).addClass(this._class('S'));
    }*/
    $('>li', this._rstcontainer).each(function(i){
        $(this).removeClass();
        if(idx == i) $(this).addClass(_this._class('S'));
    });
};
/**
 * 取得结果列表条目数量
 * @return Integer 条目数量
 */
KStdMapMarkers.prototype._listCount = function()
{
    return $('>li', this._rstcontainer).length;
};
/**
 * 更新指定的列表条目
 * @param idx Integer 序号
 */
KStdMapMarkers.prototype._updateList = function(idx)
{
    var _item = $('>li', this._rstcontainer).eq(idx);
    var _info = this._recorder.records[idx].info;
    var _p = $('>p', _item);
    if(_item)
    {
        $('>h4', _item).html(_info.t);  //更新标题
        _p.eq(0).html('<em>说明：</em>' + ($.trim(_info.d) == '' ? KStdMapMarkers.conf.CONST.txtNoDes : _info.d));    //更新描述
    }
};
/**
 * 更新指定列表条目扩展信息
 * @param idx Integer 序号
 * @param val Sring 扩展信息
 */
KStdMapMarkers.prototype._updateListExt = function(idx, val)
{
    var _item = $('>li', this._rstcontainer).eq(idx);
    if(_item)
    {
        $('>p', _item).eq(1).html(val);
    }
};
/**
 * 选中指定的
 * @param idx
 */
KStdMapMarkers.prototype._selectList = function(idx)
{
    if(this._listItemSelected(idx) == 0) this._resumeList(idx);
};
/**
 * 指定的列表项目是否被选中
 * @param idx Integer 序号
 * @return Integer 1 已选中   0 未选中   -1 不存在
 */
KStdMapMarkers.prototype._listItemSelected = function(idx)
{
    var item = $('>li', this._rstcontainer).eq(idx).get(0);
    if(!item) return -1;
    if(item.className == this._class('S'))
    {
        return 1;
    }
    return 0;
};
/**
 * 添加标记记录
 * @param record Object 记录信息
 */
KStdMapMarkers.prototype._addRecord = function(record)
{
    this._recorder.records.push(record);
};
/**
 * 删除标记记录
 * @param idx Integer 序号
 */
KStdMapMarkers.prototype._removeRecord = function(idx)
{
    var _record = this._recorder.records[idx];
    if(_record.overlays.m.length > 0)
    {
        for(var m in _record.overlays.m)
        {
            KMap.removeMarker(_record.overlays.m[m]);
        }
    }
    if(_record.overlays.l.length > 0)
    {
        for(var l in _record.overlays.l)
        {
            KMap.removeLine(_record.overlays.l[l]);
        }
    }
    if(_record.overlays.a.length > 0)
    {
        for(var a in _record.overlays.a)
        {
            KMap.removeArea(_record.overlays.a[a]);
        }
    }
    delete this._recorder.records[idx];
    this._removeArrayItem(this._recorder.records, idx);
};
/**
 * 清空记录
 */
KStdMapMarkers.prototype._clearRecord = function()
{
    this._recorder.records.length = 0;
    this._recorder.sno = {
        m : 1
        ,l : 1
        ,r : 1
        ,a : 1
    };
};
/**
 * 添加标注
 * @param latlon MPoint 标注经纬度
 * @param openinfowin Boolean 是否自动打开infowindow
 * @param opts Object 标注样式
 */
KStdMapMarkers.prototype._addMarker = function(latlon, openinfowin, opts)
{
	var _this = this;
    //取得标注设置
    var _mopt = KTools.copyOptions(
    		{
		        editable : true
		        ,group : 'smm'
		        ,extdata : {
		            flag : KWidgetFlag.mapmarkers
		            ,mark : 'bk'
		        }
		        ,infowin : KConfig.get(_this._isHasFlash?'iw_iwo_mmp_swf':'iw_iwo_mmp', 
		        			{
		        				ep_frm_fn : 'photo', 
		        				df_fs : ''
		        			}
		        		)
		    }, 
		    KConfig.get('mk_mo_mm', 
	    		{
	    			row : opts ? opts.c.x : 1, 
	    			col : opts ? opts.c.y : 1
	    		}
		    )
    );
    //初始化标注
    var _marker = new KMarker(latlon, _mopt);
    //绑定标记的dragend事件
    KEvent.bind(_marker, 'dragend', this._markerDragend, {type : 'IM'}, this);
    //在地图上添加标注
    KMap.addMarker(_marker, false, openinfowin ? openinfowin : false);
    //改变地图为平移模式
    if(KMap.mode() != KMapMode.PAN)
    {
        KMap.setMode(KMapMode.PAN);
    }
    return _marker;
};
/**
 * 添加折线
 * @param latlons MPoint[]
 * @param openinfowin Boolean 是否自动打开infowindow
 * @param opts Object
 */
KStdMapMarkers.prototype._addLine = function(latlons, openinfowin, opts)
{
	var _this = this;
    //取得折线设置
    var _lopt = {
        brush :
        {
            color : opts && opts.l && opts.l.c ? opts.l.c : '#FF0000'
            ,width : opts && opts.l && opts.l.w ? parseInt(opts.l.w) : 5
            ,transparency : opts && opts.l && opts.l.a ? parseInt(opts.l.a) : 60
        }
        ,editable : true
        ,group : 'smm'
        ,extdata :
        {
            flag : KWidgetFlag.mapmarkers
            ,mark : 'pl'
        }
        ,infowin : KConfig.get(_this._isHasFlash?'iw_iwo_mml_swf':'iw_iwo_mml', {ep_frm_fn : 'photo', df_fs : ''})
    };
    //初始化折线
    var _line = new KLine(latlons, _lopt);
    //绑定KLine的modified事件
    KEvent.bind(_line, 'modified', this._modified, {type : 'IL'}, this);
    //在地图上画线
    KMap.addLine(_line, false);
    //打开infowindow
    openinfowin && KMap.openInfoWindow(_line);
    //改变地图为平移模式
    if(KMap.mode() != KMapMode.PAN)
    {
        KMap.setMode(KMapMode.PAN);
    }
    //返回折线对象
    return _line;
};
/**
 * 添加沿路画线
 * @param nodes MPoint[] 路线途经点经纬度集合（包括起终点）
 * @param latlons MPoint[] 表示节点间的折线经纬度集合
 * @param openinfowin Boolean 是否自动打开infowindow
 * @param opts Object
 */
KStdMapMarkers.prototype._addRoadLine = function(nodes, latlons, openinfowin, opts)
{
	var _this = this;
    var result = {markers : [], lines : []};
    //取得线路设置
    var _ropt = {
        brush : {
            color : opts && opts.l && opts.l.c ? opts.l.c : '#FF0000'
            ,width : opts && opts.l && opts.l.w ? parseInt(opts.l.w) : 5
            ,transparency : opts && opts.l && opts.a ? parseInt(opts.l.a) : 60
        }
        ,group : 'smm'
        ,extdata : {
            flag : KWidgetFlag.mapmarkers
            ,mark : 'rl'
        }
        ,infowin : KConfig.get(_this._isHasFlash?'iw_iwo_mmr_swf':'iw_iwo_mmr', {ep_frm_fn : 'photo', df_fs : ''})
    };
    //初始化线路
    var _line = new KLine(latlons, _ropt);
    result.lines.push(_line);
    //取得marker设置
    var _mopt = $.extend(true, {
        extdata : {
            flag : KWidgetFlag.mapmarkers
            ,mark : 'rl'
        }
        ,group : 'smm'
        ,editable : true
    }, KConfig.get('mk_mo_m'));
    delete(_mopt.label);
    //初始化marker
    for(var i = 0; i < nodes.length; i++)
    {
        var _marker = new KMarker(nodes[i], _mopt);
        result.markers.push(_marker);
        //绑定dargend事件
        KEvent.bind(_marker, 'dragend', this._markerDragend, {type : 'IC'}, this);
    }
    //在地图上添加标注
    KMap.addMarkers(result.markers, false);
    //在地图上画线
    KMap.addLine(_line, false);
    //打开infowindow
    openinfowin && KMap.openInfoWindow(_line);
    //返回结果
    return result;
};
/**
 * 添加区域
 * @param pts KMPoint[]
 * @param openinfowin Boolean 是否自动打开气泡
 * @param opts Object
 */
KStdMapMarkers.prototype._addArea = function(pts, openinfowin, opts)
{
	var _this = this;
    //取得区域设置
    var _aopt = {
        brush : {
            color : opts && opts.l && opts.l.c ? opts.l.c : '#FF0000'
            ,width : opts && opts.l && opts.l.w ? parseInt(opts.l.w) : 5
            ,transparency : opts && opts.l && opts.l.a ? parseInt(opts.l.a) : 60
            ,bgcolor : opts && opts.f && opts.f.c ? opts.f.c : '#FF0000'
            ,bgtransparency : opts && opts.f && opts.f.a ? parseInt(opts.f.a) : 30
        }
        ,editable : true
        ,group : 'smm'
        ,extdata : {
            flag : KWidgetFlag.mapmarkers
            ,mark : 'pg'
        }
        ,infowin : KConfig.get(_this._isHasFlash?'iw_iwo_mma_swf':'iw_iwo_mma', {ep_frm_fn : 'photo', df_fs : ''})
        ,hiliteBrush : KTools.copyOptions({}, KBrushOptions)
    };
    //初始化区域
    var _area = new KArea(pts, _aopt);
    //绑定KArea的modified事件
    KEvent.bind(_area, 'modified', this._modified, {type : 'IF'}, this);
    //在地图上绘制区域
    KMap.addArea(_area, false);
    //打开气泡
    openinfowin && KMap.openInfoWindow(_area);
    //返回区域对象
    return _area;
};
/**
 * 添加标注记录
 * @param marker KMarker 标注
 * @param bookmark Boolean 是否为bookmark事件
 * @param opts Object
 */
KStdMapMarkers.prototype._addMarkerRecord = function(marker, bookmark, opts)
{
    this._tmpInfo.t = opts && opts.t ? opts.t : '标记' + this._getSerialNumber('m');
    this._tmpInfo.d = opts && opts.d ? opts.d : KStdMapMarkers.conf.CONST.txtNoDes;
    //组织列表内容
    var _info = {
        ico : this._class('IM')
        ,title : this._tmpInfo.t
        ,des : '<em>' + KStdMapMarkers.conf.CONST.txtDes + '</em>' + this._tmpInfo.d
        ,supp : ''
    };
    //组织记录内容
    var _record = $.extend(true, {}, KStdMapMarkers.conf.CONST.recordStruct);
    var _latlon = marker.latlon().getPid();
    _record.info.mt = 'IM';
    _record.info.l = _latlon;
    _record.info.t = _info.title;
    _record.info.d = opts && opts.d ? opts.d : '';
    _record.info.i = opts && opts.i ? opts.i : '';
    _record.overlays.m.push(marker);
    _record.latlon.m.push(marker.latlon().getPid());
    opts && opts.s && $.extend(true, _record.info.s, opts.s);
    //添加列表条目
    this._addList(_info, bookmark);
    //添加记录
    this._addRecord(_record);
};
/**
 * 添加折线记录
 * @param line KLine 折线
 * @param drawline Boolean 是否为drawline事件
 * @param opts Object
 */
KStdMapMarkers.prototype._addLineRecord = function(line, drawline, opts)
{
    this._tmpInfo.t = opts && opts.t ? opts.t : '折线' + this._getSerialNumber('l');
    this._tmpInfo.d = opts && opts.d ? opts.d : KStdMapMarkers.conf.CONST.txtNoDes;
    //组织列表内容
    var _info = {
        ico : this._class('IL')
        ,title : this._tmpInfo.t
        ,des : '<em>' + KStdMapMarkers.conf.CONST.txtDes + '</em>' + this._tmpInfo.d
        ,supp : '<em>' + KStdMapMarkers.conf.CONST.txtDist + '</em>' + this._convertData('l', KMap.distance(line.latlons()))
    };
    //组织记录内容
    var _record = $.extend(true, {}, KStdMapMarkers.conf.CONST.recordStruct);
    _record.info.mt = 'IL';
    _record.info.t = _info.title;
    _record.info.d = opts && opts.d ? opts.d : '';
    _record.info.i = opts && opts.i ? opts.i : '';
    _record.overlays.l.push(line);
    var _latlons = line.latlons();
    for(var l in _latlons)
    {
        _record.latlon.l.push(_latlons[l].getPid());
    }
    _record.info.l = _record.latlon.l.join(',');
    opts && opts.s && $.extend(true, _record.info.s, opts.s);
    //添加列表项目
    this._addList(_info, drawline);
    //添加记录
    this._addRecord(_record);
};
/**
 * 添加沿路画线记录
 * @param markers KMarker[]
 * @param lines KLine[]
 * @param roadline Boolean 是否为roadline事件
 * @param opts Object
 */
KStdMapMarkers.prototype._addRoadLineRecord = function(markers, lines, roadline, opts)
{
    this._tmpInfo.t = opts && opts.t ? opts.t : '线路' + this._getSerialNumber('r');
    this._tmpInfo.d = opts && opts.d ? opts.d : KStdMapMarkers.conf.CONST.txtNoDes;
    var latlons = [];
    for(var j = 0; j < lines.length; j++)
    {
        latlons = latlons.concat(lines[j].latlons());
    }
    //组织列表内容
    var _info = {
        ico : this._class('IC')
        ,title : this._tmpInfo.t
        ,des : '<em>' + KStdMapMarkers.conf.CONST.txtDes + '</em>' + this._tmpInfo.d
        ,supp : '<em>' + KStdMapMarkers.conf.CONST.txtDist + '</em>' + this._convertData('l', KMap.distance(latlons))
    };
    //组织记录内容
    var _record =$.extend(true, {}, KStdMapMarkers.conf.CONST.recordStruct);
    _record.info.mt = 'IC';
    _record.info.t = _info.title;
    _record.info.d = opts && opts.d ? opts.d : '';
    _record.info.i = opts && opts.i ? opts.i : '';
    for(var i = 0; i < markers.length; i++)
    {
        _record.overlays.m.push(markers[i]);
        _record.latlon.m.push(markers[i].latlon().getPid());
    }
    _record.info.l = _record.latlon.m.join(',');
    for(var j = 0; j < lines.length; j ++)
    {
        var _latlons = lines[j].latlons();
        for(var k = 0; k < _latlons.length; k++)
        {
            _record.latlon.l.push(_latlons[k].getPid());
        }
        _record.overlays.l.push(lines[j]);
    }
    opts && opts.s && $.extend(true, _record.info.s, opts.s);
    //添加列表项目
    this._addList(_info, roadline);
    //添加记录
    this._addRecord(_record);
};
/**
 * 添加区域记录
 * @param area KArea
 * @param drawarea Boolean 是否为drawarea事件
 * @param opts Object
 */
KStdMapMarkers.prototype._addAreaRecord = function(area, drawarea, opts)
{
    this._tmpInfo.t = opts && opts.t ? opts.t : '面' + this._getSerialNumber('a');
    this._tmpInfo.d = opts && opts.d ? opts.d : KStdMapMarkers.conf.CONST.txtNoDes;
    //组织列表内容
    var _info = {
        ico : this._class('IF')
        ,title : this._tmpInfo.t
        ,des : '<em>' + KStdMapMarkers.conf.CONST.txtDes + '</em>' + this._tmpInfo.d
        ,supp : '<em>' + KStdMapMarkers.conf.CONST.txtArea + '</em>' + this._convertData('a', KMap.area(area.latlons()))
    };
    //组织记录内容
    var _record = $.extend(true, {}, KStdMapMarkers.conf.CONST.recordStruct);
    _record.info.mt = 'IF';
    _record.info.t = _info.title;
    _record.info.d = opts && opts.d ? opts.d : '';
    _record.info.i = opts && opts.i ? opts.i : '';
    _record.overlays.a.push(area);
    var _latlons = area.latlons();
    for(var i = 0; i < _latlons.length; i++)
    {
        _record.latlon.a.push(_latlons[i].getPid());
    }
    _record.info.l = _record.latlon.a.join(',');
    opts && opts.s && $.extend(true, _record.info.s, opts.s);
    //添加项目列表
    this._addList(_info, drawarea);
    //添加记录
    this._addRecord(_record);
};
/**
 * 删除数组指定的元素
 * @param arr Array 数组
 * @param idx Int 数组元素index
 */
KStdMapMarkers.prototype._removeArrayItem = function(arr, idx)
{
    if(isNaN(idx) || idx > arr.length) return false;
    for(var i = 0, n = 0; i < arr.length; i++)
    {
        if(arr[i] != arr[idx])
        {
            arr[n++] = arr[i];
        }
    }
    arr.length -= 1;
};
/**
 * 取得指定标记类型的序号
 * @param type String 标记类型  m 标注  l 折线  r 沿路画线  a 面
 * @return Integer 新序号
 */
KStdMapMarkers.prototype._getSerialNumber = function(type)
{
    var _no = 0;
    switch(type)
    {
        case 'm':   //标注
        {
            _no = this._recorder.sno.m++;
            break;
        }
        case 'l':   //折线
        {
            _no = this._recorder.sno.l++;
            break;
        }
        case 'r':   //沿路画线
        {
            _no = this._recorder.sno.r++;
            break;
        }
        case 'a':   //面
        {
            _no = this._recorder.sno.a++;
            break;
        }
    }
    return _no;
};
/**
 * 取得指定标注的顺序
 * @param marker KOverlay
 */
KStdMapMarkers.prototype._getMarkerIndex = function(marker)
{
    for(var i = 0; i < this._recorder.records.length; i++)
    {
        var rd = this._recorder.records[i].overlays;
        var _i = i;
        //查找面
        for(var _a = 0; _a < rd.a.length; _a++)
        {
            if(marker === rd.a[_a])
            {
                return _i;
            }
        }
        //查找线
        for(var _l = 0; _l < rd.l.length; _l++)
        {
            if(marker === rd.l[_l])
            {
                return _i;
            }
        }
        //查找点
        for(var _m = 0; _m < rd.m.length; _m++)
        {
            if(marker === rd.m[_m])
            {
                return _i;
            }
        }
    }
    return -1;
};
/**
 * 清除地图上的标记
 */
KStdMapMarkers.prototype._clearMarkers = function()
{
    for(i in this._recorder.records)
    {
        var r = this._recorder.records[i];
        r.overlays.m.length = 1;
        r.overlays.l.length = 1;
        r.overlays.a.length = 1;
    }
    KMap.clearMarker('smm');
    KMap.clearLine('smm');
    KMap.clearArea('smm');
};
/**
 * 恢复地图上的图标
 */
KStdMapMarkers.prototype._resumeMarkers = function()
{
    for(i in this._recorder.records)
    {
        var r = this._recorder.records[i];
        switch(r.info.mt)
        {
            case 'IM':  //标注
            {
                var _marker = this._addMarker(r.latlon.m[0], false, r.info.s);
                r.overlays.m.length = 0;
                r.overlays.m.push(_marker);
                break;
            }
            case 'IL':  //折线
            {
                var latlons = [];
                for(var l in r.latlon.l)
                {
                    latlons.push(new MPoint(r.latlon.l[l]));
                }
                var _line = this._addLine(latlons, false, r.info.s);
                r.overlays.l.length = 0;
                r.overlays.l.push(_line);
                break;
            }
            case 'IC':
            {
                var markers = [], lines = [];
                for(var m in r.latlon.m)
                {
                    markers.push(new MPoint(r.latlon.m[m]));
                }
                for(var ls in r.latlon.l)
                {
                    lines.push(new MPoint(r.latlon.l[ls]));
                }
                var _result = this._addRoadLine(markers, lines, false, r.info.s);
                r.overlays.l.length = 0;
                r.overlays.m.length = 0;
                for(var l in _result.lines)
                {
                    r.overlays.l.push(_result.lines[l]);
                }
                for(var m in _result.markers)
                {
                    r.overlays.m.push(_result.markers[m]);
                }
                break;
            }
            case 'IF':
            {
                var area = [];
                for(var a in r.latlon.a)
                {
                    area.push(new MPoint(r.latlon.a[a]));
                }
                var _area = this._addArea(area, false, r.info.s);
                r.overlays.a.length = 0;
                r.overlays.a.push(_area);
                break;
            }
        }
    }
    KMap.fitzoom();
};
/**
 * 地图模式改变事件处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图对象对应的Dom对象
 * @param prevmode KMapMode 改变前的地图模式
 * @param currmode KMapMode 当前地图模式
 */
KStdMapMarkers.prototype._mapModeChanged = function(eventinfo, container, prevmode, currmode)
{
    if(currmode == KMapMode.PAN) this._resumeTools();
    if(currmode == KMapMode.BOOKMARK) KMap.setCursorIcon(KStdMapMarkers.conf.CONST.bkIcon);
};
/**
 * 地图初始化事件处理方法
 */
KStdMapMarkers.prototype._mapInit = function()
{
    KEvent.unbind(KMap, 'mapinit', arguments.callee);
    this._bindEvent();
};
/**
 * 地图添加标注处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图对象对应的Dom对象
 * @param latlon MPoint 鼠标点击坐标对应的经纬度
 */
KStdMapMarkers.prototype._bookmark = function(eventinfo, container, latlon)
{
    this._addMarkerRecord(this._addMarker(latlon, true), true);
};
/**
 * 地图添加折线处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图对象对应Dom对象
 * @param latlons MPoint[]
 */
KStdMapMarkers.prototype._drawline = function(eventinfo, container, latlons)
{
    this._addLineRecord(this._addLine(latlons, true), true);
};
/**
 * 地图沿路画线处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图对象对应Dom对象
 * @param nodes MPoint[] 路线途经点经纬度集合（包括起终点）
 * @param lines MPoint[] 表示节点间的折线经纬度集合
 */
KStdMapMarkers.prototype._roadline = function(eventinfo, container, nodes, lines)
{
    var result = this._addRoadLine(nodes, lines, true);
    this._addRoadLineRecord(result.markers, result.lines, true);
};
/**
 * 地图绘制区域事件处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图对象对应的Dom对象
 * @param pts MPoint[] 测距折线经纬度集合
 */
KStdMapMarkers.prototype._drawarea = function(eventinfo, container, pts)
{
    this._addAreaRecord(this._addArea(pts, true), true);
};
/**
 * 关闭气泡处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图对应Dom对象
 * @param overlay KOverlay 所属叠加物对象
 */
KStdMapMarkers.prototype._iw_hide = function(eventinfo, container, overlay)
{
    this._resumeList();
};
/**
 * 打开气泡处理方法
 * @param eventinfo KEventInfo
 * @param container Node 地图对应Dom对象
 * @param overlay KOverlay 所属叠加物对象
 */
KStdMapMarkers.prototype._afterOpenInfoWindow = function(eventinfo, container, overlay)
{
    _this = this;
    if(overlay.group() == 'smm')
    {
    	if(!overlay._isInitUpload && _this._isHasFlash){
    		var infoDom = overlay.iwcDom();
    		var baseUrl = 'http://' + window.location.host + window.location.pathname;
        	$('span[mfg="ep_frm"]', infoDom)
        	.show()
        	.swfupload({
        		upload_url: baseUrl + _this.options().uploadUrl,
        		file_size_limit : KStdMapMarkers.conf.FLASHCONF.file_size_limit,
        		file_types : KStdMapMarkers.conf.FLASHCONF.file_types,
        		file_types_description : KStdMapMarkers.conf.FLASHCONF.file_types_description,
        		file_upload_limit : KStdMapMarkers.conf.FLASHCONF.file_upload_limit,
        		flash_url : KStdMapMarkers.conf.FLASHCONF.flash_url,
        		button_image_url : KStdMapMarkers.conf.FLASHCONF.button_image_url,
        		button_width : KStdMapMarkers.conf.FLASHCONF.button_width,
        		button_height : KStdMapMarkers.conf.FLASHCONF.button_height,
        		button_placeholder : $('input[mfg="ep_frm_f"]', infoDom)[0]
        	})
        	.bind('fileQueued', function(event, file){
        		$(this).swfupload('startUpload');
        	})
        	.bind('fileQueueError', function(event, file, errorCode, message){
        		(errorCode=='-110' || errorCode=='-120')&&KTools.showMsg('文件的大小超过了512k', {title : '错误', autoclose : 5, node : $('input[mfg="ep_frm_f"]', infoDom).get(0)});
        		(errorCode=='-130')&&KTools.showMsg('此类型不允许上传', {title : '错误', autoclose : 5, node : $('input[mfg="ep_frm_f"]', infoDom).get(0)});
        	})
        	.bind('uploadProgress', function(event, file, bytesLoaded){
        		$('span[mfg="ep_frm_fname"]', infoDom).html(file.name + "&nbsp;" + parseInt(bytesLoaded/file.size*100) + "%");
        	})
        	.bind('uploadSuccess', function(event, file, serverData){
        		$('span[mfg="ep_frm_fname"]', infoDom).html("上传成功");
        		_this._imgSwfUploaded(eval('(' + serverData + ')'));
        	})
        	.bind('uploadError', function(event, file, errorCode, message){
        		(errorCode)&&KTools.showMsg('上传错误', {title : '错误', autoclose : 5, node : $('input[mfg="ep_frm_f"]', infoDom).get(0)});
        	});
    		overlay._isInitUpload = true;
    	}
    	
    	
        var _idx = this._getMarkerIndex(overlay);
        this._selectList(_idx);
    }
    //Overlay是否为地图标记类型
    if(overlay.options().extdata && overlay.options().extdata['flag'] == KWidgetFlag.mapmarkers)
    {
        this._initInfoWindow(overlay);
    }
};

/**
 * 标记拖动事件处理方法
 * @param eventinfo KEventInfo
 * @param marker KMarker
 * @param point MPoint
 */
KStdMapMarkers.prototype._markerDragend = function(eventinfo, marker, point)
{
    KMap.closeInfoWindow();
    var idx = this._getMarkerIndex(marker);
    var record = undefined;
    var latlon = point.getPid();
    switch(eventinfo.data.type)
    {
        case 'IM':
        {
            record = {
                info : {
                    l : latlon
                }
                ,latlon : {
                    m : [latlon]
                }
            };
            this._updateRecord(idx, record);
            break;
        }
        case 'IC':
        {
            record = $.extend(true, {}, this._recorder.records[idx]);
            var _i = this._getRoadLineMarkerIndex(idx, marker);
            record.latlon.m[_i] = latlon;
            record.info.l = record.latlon.m.join(',');
            this._updateRecord(idx, record);
            this._redrawRoadline(idx);
            break;
        }
    }
};
/**
 * 重绘线路
 * @param idx
 */
KStdMapMarkers.prototype._redrawRoadline = function(idx)
{
    var record = this._recorder.records[idx];
    var _latlons = this._getRoadLine(record.latlon.m);
    //删除原线路
    for(var i = 0; i < record.overlays.l.length; i++)
    {
        KMap.removeLine(record.overlays.l[i]);
    }
    //清空记录
    record.overlays.l.length = 0;
    record.latlon.l.length = 0;
    //组织线路设置
    var _lopt = {
        brush :
        {
            color : record.info.s.l.c
            ,width : record.info.s.l.w
            ,transparency : record.info.s.l.a
        }
        ,group : 'smm'
        ,extdata : {
            flag : KWidgetFlag.mapmarkers
            ,mark : 'rl'
        }
        ,infowin : KConfig.get('iw_iwo_mmr')
    };
    //初始化线路
    var _line = new KLine(_latlons, _lopt);
    //更新记录
    record.overlays.l.push(_line);
    for(var j = 0; j < _latlons.length; j++)
    {
        record.latlon.l.push(_latlons[j].getPid());
    }
    //在地图上绘制线路
    KMap.addLine(_line, false);
    //更新扩展信息
    this._updateListExt(idx, '<em>距离：</em>' + this._convertData('l', KMap.distance(_latlons)));
};
/**
 * 折线或区域编辑处理方法
 * @param eventinfo
 * @param line
 */
KStdMapMarkers.prototype._modified = function(eventinfo, line)
{
    var idx = this._getMarkerIndex(line);
    var record = undefined;
    if(eventinfo.data.type == 'IL')
    {
        record = {
            info : {
                l : ''
            }
            ,latlon : {
                l : []
            }
        };
    }
    else if(eventinfo.data.type == 'IF')
    {
        record = {
            info: {
                l : ''
            }
            ,latlon : {
                a : []
            }
        };
    }
    var latlons = line.latlons();
    //更新扩展信息
    this._updateListExt(idx, '<em>' + (eventinfo.data.type == 'IL' ? '距离：' : '面积：') + '</em>' + this._convertData(eventinfo.data.type == 'IL' ? 'l' : 'a', eventinfo.data.type == 'IL' ? KMap.distance(latlons) : KMap.area(latlons)));
    for(var i = 0; i < latlons.length; i++)
    {
        if(eventinfo.data.type == 'IL')
        {
            record.latlon.l.push(latlons[i].getPid());
        }
        else if(eventinfo.data.type == 'IF')
        {
            record.latlon.a.push(latlons[i].getPid());
        }
    }
    if(eventinfo.data.type == 'IL')
    {
        record.info.l = record.latlon.l.join(',');
    }
    else if(eventinfo.data.type == 'IF')
    {
        record.info.l = record.latlon.a.join(',');
    }
    this._updateRecord(idx, record);
};
/**
 * 更新记录
 * @param idx Integer 序号
 * @param record Object 记录
 */
KStdMapMarkers.prototype._updateRecord = function(idx, record)
{
    var _record = this._recorder.records[idx];
    $.extend(true, _record, record);
};
/**
 * 取得指定在Marker在记录中顺序
 * @param idx Integer 记录序号
 * @param marker KMarker
 * @return Integer maker的顺序号
 */
KStdMapMarkers.prototype._getRoadLineMarkerIndex = function(idx, marker)
{
    var record = this._recorder.records[idx];
    if(record && record.info.mt == 'IC')
    {
        var markers = record.overlays.m;
        for(var i = 0; i < markers.length; i++)
        {
            if(markers[i] === marker) return i;
        }
    }
    return -1;
};
/**
 * 根据参数取得线路经纬度
 * @param pts String[] 节点经纬度数组
 * @return MPoint[]
 */
KStdMapMarkers.prototype._getRoadLine = function(pts)
{
    var _url = '';
    var _latlons = [];
    for(var i = 0; i < pts.length - 1; i++)
    {
        _url = this.options().roadurl + '&nh=' + pts[i] + ',' + pts[i + 1];
        $.ajax({
            async : false
            ,type : 'GET'
            ,url : _url
            ,success : function(data){
                if(data)
                {
                    eval(data);
                    var _line = KLine.fromEncoded(_map_rlm.a[0].a, _map_rlm.a[0].b);
                    var latlon = _line.latlons();
                    for(var j = 0; j < latlon.length; j++)
                    {
                        _latlons.push(latlon[j]);
                    }
                }
            }
        });
    }
    return _latlons;
};
/**
 * 高亮指定的标注
 * @param idx Integer 序号
 * @param hilite Boolean 是否高亮
 */
/*KStdMapMarkers.prototype._hiliteMarker = function(idx, hilite)
{
    var record = this._recorder.records[idx];
    if(record)
    {
        var overlay = undefined;
        switch(record.info.mt)
        {
            case 'IM':
            {
                overlay = record.overlays.m[0];
                break;
            }
            case 'IL':
            case 'IC':
            {
                overlay = record.overlays.l[0];
                break;
            }
            case 'IF':
            {
                overlay = record.overlays.a[0];
                break;
            }
        }
        overlay && (hilite ? overlay.hilite() : overlay.resume());
    }
};*/
/**
 * 分享链接
 */
KStdMapMarkers.prototype._shardLink = function()
{
    this._dTitle = document.title;
    var _this = this;
    if(this._recorder.records.length > 0)
    {
        this._update(0, false, function(data){
            _this._setClipboard(_this._shardurl);
        });
        //this._update(1, false);
    }
    else
    {
        KTools.showMsg('不存在任何标记！', {autoclose : 5, node : this.options().sharebtn, buboptions : {closebtn : false}})
    }
};
/**
 * 设置客户端剪贴板
 * @param val
 */
KStdMapMarkers.prototype._setClipboard = function(val)
{
    var _this = this;
    var _h = [];
    _h.push('<div style="padding:5px 0 0 10px;">');
    _h.push('<input id="mmShardUrl" readonly="readonly" style="font-size:12px;width:240px;height:20px;border:1px solid #CCC" value="' + val + '" />');
    _h.push('<div style="text-align:right;padding:5px 0 0 0;">');
    _h.push('<embed width="65px" height="22px" flashvars="copyStrFun=mmGetShardUrl&amp;copyStrCallBak=mmCopyShardUrl&amp;btnCaption=复制链接" quality="high" bgcolor="#FFFFFF" allowscriptaccess="always" wmode="window" type="application/x-shockwave-flash" src="http://img.mapbar.com/web/3in1/js/cp.swf"></embed>');
    _h.push("</div></div>");
    this._tipBox = KTools.showMsg(_h.join(''), {node : this.options().sharebtn});
    setTimeout(function(){document.title = _this._dTitle;},50);
};
/**
 * 取得共享链接
 * @return String 共享链接
 */
KStdMapMarkers.prototype._getShardUrl = function()
{
    //alert(this._copyText.val());
    var _urlBox = $('#mmShardUrl').get(0);
    var _url = _urlBox ? _urlBox.value : '';
    _urlBox = null;
    return _url;
};

/**
 * 检测链接是否复制成功
 * @param str
 */
KStdMapMarkers.prototype._copyShardUrl = function(str)
{
    var _success = true;
    KTools.hideMsg(this._tipBox);
    if(!str)
    {
        str = this._getShardUrl();
        $('#mmShardUrl').remove();
        _success = (window.clipboardData.clearData() && window.clipboardData.setData("Text",str));
    }
    if(!_success)
    {
        KTools.showMsg('复制出错！请手动复制！', {node : this.options().sharebtn, autoclose : 5, buboptions : {closebtn : false}});
    }
    else
    {
        KTools.showMsg('复制成功！', {node : this.options().sharebtn, autoclose : 5, buboptions : {closebtn : false}});
    }
    document.title = this._dTitle;
};
/**
 * 将信息更新到服务器
 * @param at Integer 更新类型 1 增加  2 修改  4 查询  8 删除  0或留空时为更新所有类型
 * @param updatenote Boolean 是否更新本地记录
 * @param callback Function 回调方法
 */
KStdMapMarkers.prototype._update = function(at, updatenote, callback)
{
    var _this = this;
    if(!this.options().shareurl)
    {
        return false;
    }
    else
    {
        var _hash = new KUrlHash();
        _hash.setKey('d', this._buildMarkerInfo(at));
        $.ajax({
            type : 'POST'
            ,url : this.options().shareurl //KStdMapMarkers.conf.CONST.ajaxUrl
            ,data : _hash.toString()//encodeURIComponent(encodeURIComponent('d=' + this._buildNoteStr(at)))
            ,success : function(data, status){
                if($.trim(data) == '')
                {
                    KTools.showMsg('出现错误', {node : _this.options().sharebtn, title : '错误', autoclose : 5});
                }
                else
                {
                    var _d = eval('(' + data + ')');
                    if(_d.mu && _d.mmid)
                    {
                        //记录分享链接
                        _this._shardurl = _d.mu;
                        /*_this._mmid = _d.mmid;*/

                        if(callback)
                        {
                            callback(data)
                        }

                        /*if(updatenote)
                        {
                            _this._updateLocalNote(data);
                        }*/
                    }
                    else
                    {
                        KTools.showMsg('保存信息出错', {node : _this.options().sharebtn, autoclose : 5, buboptions : {closebtn : false}});
                    }
                }
            }
            ,error : function()
            {
                KTools.showMsg('出现错误', {node : _this.options().sharebtn, title : '错误', autoclose : 5});
            }
        });
    }
    return true;
};
/**
 * 组合标注信息字符串
 * @return String 组合后的字符串
 * @param at Integer 更新类型 1 增加  2 修改  4 查询  8 删除  0或留空时为更新所有类型
 */
KStdMapMarkers.prototype._buildMarkerInfo = function(at)
{
    var _str = [];
    _str.push('{at:' + this._at + ',mmid:"' + (this._mmid ? this._mmid : '') + '",mm:[');
    for(var i in this._recorder.records)
    {
        var _r = this._recorder.records[i];
        /*if(at && at != _r.at)
        {
            continue;
        }*/
        if(i > 0) _str.push(',');
        //_str.push('{at:' + _r.at);
        _str.push('{at:1');
        _str.push(',id:' + i);
        _str.push(',did:"' + _r.info.did + '"');
        _str.push(',t:"' + _r.info.t + '"');
        _str.push(',d:"' + _r.info.d + '"');
        _str.push(',i:"' + _r.info.i + '"');
        _str.push(',mt:"' + _r.info.mt + '"');
        //_str.push(',l:{a:"' + _r.latlon.a.toString() + '",l:"' + _r.latlon.l.toString() + '",m:"' + _r.latlon.m.toString() + '"}');
        _str.push(',l:"' + _r.info.l + '"');
        /*switch(_r.type)
        {
            case 'IC':
            case 'IM':
                _str.push(_r.latlon.m.toString());
                break;
            case 'IF':
                _str.push(_r.latlon.a.toString());
                break;
            case 'IL':
                _str.push(_r.latlon.l.toString());
                break;
        }
        _str.push('"');*/
        _str.push(',s:{c:{x:' + _r.info.s.c.x + ',y:' + _r.info.s.c.y + '},f:{a:' + _r.info.s.f.a + ',' +
                '' + 'c:"' + _r.info.s.f.c + '"},l:{a:' + _r.info.s.l.a + ',c:"' + _r.info.s.l.c + '",' + 'w:' + _r.info.s.l.w + '}}}');
    }
    _str.push(']}');
    return _str.join('');
};
/**
 * 加载标记
 */
KStdMapMarkers.prototype._load = function()
{
    var _this = this;
    //清空本地记录
    this._clearList();
    this._clearRecord();
    KMap.clear('smm');

    this._update(0, false, function(data){
        _this._batchAdd(eval('(' + data + ')'));
        KMap.fitzoom();
    });
    //触发resultloaded事件
    KEvent.trigger(this, 'resultloaded', this);
};
/**
 * 批量添加标注
 * @param obj Object
 */
KStdMapMarkers.prototype._batchAdd = function(obj)
{
    //添加标注
    for(var i in obj.mm)
    {
        this.add(this._result2MarkerInfo(obj.mm[i]));
    }
    //设置记录编号
    this._mmid = undefined;
    this._at = 1;
};
/**
 * 将接口返回对象转换为KMapInfo对象
 * @param r Object 接口返回对象
 * @result KMapInfo
 */
KStdMapMarkers.prototype._result2MarkerInfo = function(r)
{
    var _marker = KTools.copyOptions({}, KMapMarkerInfo);
    _marker.nid = r.did;
    _marker.title = r.t;
    _marker.content = r.d;
    _marker.img = r.i;
    switch(r.mt)
    {
    case 'IM':
        _marker.type = KOverlayType.MARKER;
        break;
    case 'IL':
        _marker.type = KOverlayType.POLYLINE;
        break;
    case 'IC':
        _marker.type = KOverlayType.ROADLINE;
        break;
    case 'IF':
        _marker.type = KOverlayType.AREA;
        break;
    }
    _marker.latlons = r.l;
    var _s = [];
    _s.push('{c:{x:' + (r.s.c ? r.s.c.x : 1) + ',y:' + (r.s.c ? r.s.c.y : 1) + '},f:{a:' + (r.s.f ? r.s.f.a : 30) + ',c:"' + (r.s.f ? r.s.f.c : '#FF0000') + '"},l:{a:' + (r.s.l ? r.s.l.a : 60) + ',c:"' + (r.s.l ? r.s.l.c : '#FF0000') + '",w:' + (r.s.l ? r.s.l.w : 5) + '}}');

    _marker.style = _s.join('');

    return _marker;
};
/**
 * 初始化搜索框
 */
KStdMapMarkers.prototype._initSearchbox = function()
{
    var _this = this;
    var shx = $('div[mfg="de_s"]', this._iwNormal);
    var tbs = $('>ul>li', shx);
    var contents = $('>div', shx);
    var forms = $('>form', contents);
    var buttons = $('>input[type="button"]', forms);
    var nsbtn = $('>input[type="submit"]', forms.eq(2));
    var getFormIndex = function(form)
    {
        var fs = forms.toArray();
        for(var k = 0; k < fs.length; k++)
        {
            if(fs[k] == form) return k;
        }
    };
    //初始化选项卡
    tbs.each(function(i){$(this).removeClass().addClass(i == 0 ? 'mwpg_mm_is' : '').attr('idx', i);});
    contents.each(function(j){$(this).css({display : j == 0 ? 'block' : 'none'}).attr('idx', j);});
    //实现选项卡功能
    tbs.unbind().bind('click', function(){
        var idx = parseInt($(this).attr('idx'));
        tbs.each(function(i){$(this).removeClass().addClass(i == idx ? 'mwpg_mm_is' : '');});
        contents.each(function(j){$(this).css({display : j == idx ? 'block' : 'none'});});
    });
    //屏蔽表单提交
    forms.each(function(){
        $(this).unbind().bind('submit', function(){return false;})
    });
    $('input[type="text"]', forms).val('');
    //实现周边查询
    nsbtn.unbind().click(function(){
        var kw = $(this).prev('input[type="text"]');
        if(kw.val() == '')
        {
            _this._alertmsg(kw.get(0));
        }
        else
        {
            var _opts = KTools.copyOptions({
                type : KQueryType.localsearch
                ,ls : {name : kw.val()}
                ,center : {
                    name : _this._recorder.records[_this._idx].info.t
                    ,latlon : _this._recorder.records[_this._idx].info.l
                }
            }, KQueryOptions);
            if(_this.options().latlonurl)
            {
                _this._localsearch(_opts);
            }
            //KEvent.trigger(_this, 'search', _this, _opts);
        }
    });
    //实现公交和驾车查询
    buttons.unbind().click(function(){
        var _type = undefined;  //查询类型
        var _kw = undefined;    //查询关键字
        var _dir = 1;           //查询方向 1 以当前点为起点  0 以当前点为终点
        if($(this).val() == '查驾车')
        {
            _type = KQueryType.navsearch;
        }
        else if($(this).val() == '查公交')
        {
            _type = KQueryType.busearch;
        }
        _kw = $(this).prevAll('input[type="text"]');
        _dir = getFormIndex($(this).parent().get(0));

        if(!_type) return;

        if(_kw.val() == '')
        {
            _this._alertmsg(_kw.get(0));
        }
        else
        {
            var _mkp = {
                name : _this._recorder.records[_this._idx].info.t
                ,latlon : _this._recorder.records[_this._idx].info.l
            };
            var _op = {name : _kw.val()};
            var _opts = KTools.copyOptions({type : _type}, KQueryOptions);
            if(_type == KQueryType.navsearch)
            {
                _opts.navorig = _dir == 0 ? _op : _mkp;
                _opts.navdest = _dir == 0 ? _mkp : _op;
            }
            else if(_type == KQueryType.busearch)
            {
                _opts.busorig = _dir == 0 ? _op : _mkp;
                _opts.busdest = _dir == 0 ? _mkp : _op;
            }
            if((_type == KQueryType.navsearch) && _this.options().latlonurl)
            {
                _this._navsearch(_opts);
                //KEvent.trigger(_this, 'search', _this, _opts);
            }
            else if((_type == KQueryType.busearch) && _this.options().latlonurl)
            {
                _this._busearch(_opts);
            }
        }
    });
};
/**
 * 通过经纬度字符串查询公交
 * @param opts Object 公交查询设置
 */
KStdMapMarkers.prototype._busearch = function(opts)
{
    if(this.options().latlonurl)
    {
        var _latlon = opts.busorig.latlon ? opts.busorig.latlon : opts.busdest.latlon;
        var _this = this;
        var hash = new KUrlHash();
        hash.setKey("t", "ig");
        hash.setKey("l", _latlon);
        hash.setKey("z", KMap.zoom());
        $.ajax( {
		    url : this.options().latlonurl + "?" + hash.toString(),
            type : 'GET',
            dataType : 'json',
            success : function(data) {
                opts.busdest.city = data.c;
                opts.busorig.city = data.c;
                KEvent.trigger(_this, 'search', _this, opts);
            },
            error:function(){
                throw new Error("接口或参数错误");
            }
        });
    }
    else
    {
        KEvent.trigger(_this, 'search', _this, opts);
    }
};
/**
 * 通过经纬度字符串驾车
 * @param opts Object 驾车查询设置
 */
KStdMapMarkers.prototype._navsearch = function(opts)
{
    if(this.options().latlonurl)
    {
        var _latlon = opts.navorig.latlon ? opts.navorig.latlon : opts.navdest.latlon;
        var _this = this;
        var hash = new KUrlHash();
        hash.setKey("t", "ig");
        hash.setKey("l", _latlon);
        hash.setKey("z", KMap.zoom());
        $.ajax( {
		    url : this.options().latlonurl + "?" + hash.toString(),
            type : 'GET',
            dataType : 'json',
            success : function(data) {
                opts.navdest.city = data.c;
                opts.navorig.city = data.c;
                KEvent.trigger(_this, 'search', _this, opts);
            },
            error:function(){
                throw new Error("接口或参数错误");
            }
        });
    }
    else
    {
        KEvent.trigger(_this, 'search', _this, opts);
    }
};
/**
 * 通过经纬度字符串本地搜
 * @param opts Object 本地搜查询设置
 */
KStdMapMarkers.prototype._localsearch = function(opts)
{
    if(this.options().latlonurl)
    {
        var _latlon = opts.center.latlon;
        var _this = this;
        var hash = new KUrlHash();
        hash.setKey("t", "ig");
        hash.setKey("l", _latlon);
        hash.setKey("z", KMap.zoom());
        $.ajax( {
		    url : this.options().latlonurl + "?" + hash.toString(),
            type : 'GET',
            dataType : 'json',
            success : function(data) {
                /*opts.navdest.city = data.c;
                opts.navorig.city = data.c;*/
                opts.center.city = data.c;
                opts.ls.city = data.c;
                KEvent.trigger(_this, 'search', _this, opts);
            },
            error:function(){
                throw new Error("接口或参数错误");
            }
        });
    }
    else
    {
        KEvent.trigger(_this, 'search', _this, opts);
    }
};
KStdMapMarkers.prototype._flashChecker = function()
{
	var hasFlash = false; // 是否安装了flash
	var flashVersion = 0; // flash版本

	if ($.browser.msie) {
		var swf = false;
		try{
			swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
		}catch(e){
			
		}
		if (swf) {
			hasFlash = true;
			VSwf = swf.GetVariable("$version");
			flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
		}
	} else {
		if (navigator.plugins && navigator.plugins.length > 0) {
			var swf = navigator.plugins["Shockwave Flash"];
			if (swf) {
				hasFlash = true;
				var words = swf.description.split(" ");
				for ( var i = 0; i < words.length; ++i) {
					if (isNaN(parseInt(words[i])))
						continue;
					flashVersion = parseInt(words[i]);
				}
			}
		}
	}
//	return {
//		f : hasFlash,
//		v : flashVersion
//	};
	return hasFlash;
}

/*
 标准打印组件。
 作者：zhaobo
 版本：1.0
 创建时间：2010-04-16
 ============================================
 『修改历史』
 */
var KStdPrinter = KClass.create("KStdPrinter", KPrinter);


/**
 * 构造方法。
 * @param opts KStdPrinterOptions
 * @uncrunch
 */
KStdPrinter.initialize = function(opts) {
    this._opts = KTools.copyOptions(opts, KStdPrinterOptions);

};
/**
 * 对指定类型的数据进行打印
 * @param opts KPrintOptions 类型
 */
KStdPrinter.prototype.print = function(opts)
{
    this._printOpts = KTools.copyOptions(opts, KPrintOptions);
    var url;
    switch (this._printOpts.queryopts.type) {
        case KQueryType.localsearch :
            url = this._opts.lsurl;
            break;
        case KQueryType.busearch :
            url = this._opts.bsurl;
            break;
        case KQueryType.busline :
            url = this._opts.blurl;
            break;
        case KQueryType.bustation :
            url = this._opts.bsturl;
            break;
        case KQueryType.navsearch :
            url = this._opts.navsurl;
            break;
    }
    if (url) this.openWin = window.open(url);
};


KStdPrinter.prototype.notify = function(data) {
    if (data == "print_page_loaded" && this.openWin && this.openWin.printDataReady){
        this.openWin.printDataReady(this._printOpts);
    }
};
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KStdPrinter.prototype.version = function()
{
    return "1.0.1";
};

/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KStdPrinter.prototype.cnname = function()
{
    return "标准打印组件";
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KStdPrinter.prototype.dependent = function()
{
    return [jQuery,KEvent,KTools,KPrinter,KStdPrinterOptions];
};

/**
 * 释放对象资源
 * @uncrunch
 */
KStdPrinter.prototype.finalize = function()
{
};
/*
 发送组件。
 作者：xionggq zhangsq
 版本：1.0
 创建时间：2010-05-05
 最后修改时间：2011-4-2 10:14
 ============================================
 『修改历史』
 opt# 1008261349
 修复IE6/7下显示问题

 opt# 1008261353
 修复IE下不按KSendType进行显示的问题

 opt# 1008311116
 修改发送信息过长的问题

 opt# 1008311132
 修正发送手机短信时窗口消失的问题

 opt# 1008311135
 修正发送邮件时提示信息不指向发送按钮的问题

 bug# 1011230914
 修正驾车组件和公交组件发送时出现的脚本错误

 bug# 1011241916
 修正IE下选项卡显示的问题

 [错误编号说明]
 E01 邮件发送接口错误
 E02 短信发送接口错误

 //#opt 1012281138
 增加对后机新号段的支持，新增中国移动147、187,188号段;中国电信180,189号段;中国联通185,186号段；
 opt# 201103312210
 修正发送到汽车问号提示不能打开的问题
 bug# 201104021006
 修改发送到汽车时重复绑定事件的问题
 */


var KStdSender = KClass.create("KStdSender", KSender);
KStdSender.conf =
{
    CLASSNAME :
    {
        //顶级容器（div）样式。
        SND:'snd'
        //关闭按钮
        ,CLB:'snd_clb'
        //短信容器->短信设备模拟区域（div）样式。
        ,V:'snd_v'
        //短信容器->功能操作区（div）样式。
        ,C:'snd_c'
        //短信容器->功能操作区->手机号码条目（li）样式。
        ,PNC:'snd_pnc'
        //短信容器->功能操作区->手机号码条目（li）鼠标悬停后样式。
        ,PNH:'snd_pnh'
        //短信容器->功能操作区->发送按钮（input）样式。
        ,SMSSND:'snd_smssnd'
        //短信容器->功能操作区->发送按钮（input）灰显样式。
        ,SSNDD:'snd_ssndd'  
        //短信容器->功能操作区->短信服务声明区域（div）样式。
        ,I:'snd_i'
        //邮件容器->邮件次级容器->邮件地址容器（div）样式。
        ,MC :'snd_mc'
        //邮件容器->邮件次级容器->邮件地址容器->地址输入元素（input）样式。
        ,M:'snd_m'
        //邮件容器->邮件次级容器->邮件地址容器->发送按钮（input）样式。
        ,MSND:'snd_msnd'
        //邮件容器->邮件次级容器->操作提示区（div）样式。
        ,TIP:'snd_tip'
        //邮件容器->邮件次级容器->预览区（div）样式。
        ,MCT:'snd_mct'
        //邮件容器->邮件次级容器->邮件地址容器->发送按钮（input）禁用样式。
        ,MSNDD:'snd_msndd'
        //GPS容器->功能操作区->控件区->下载按钮（a）样式。
        ,D:'snd_d'
        //GPS容器->功能操作区->控件区->下载按钮（a）禁用样式。
        ,DD:'snd_dd'
        //GPS容器->功能操作区->控件区->下载按钮（a）样式
        ,DL : 'snd_dl'
        //GPS容器->功能操作区->支持设备列表
        ,SUP : 'snd_sup'
        //汽车容器
        ,STC : 'snd_stc'
        //汽车容器->操作区
        ,CC : 'snd_cc'
        //汽车容器->信息编辑区
        ,CV : 'snd_cv'
        //汽车容器->帮助按钮
        ,H : 'snd_h'
        //汽车容器->车友ID输入框(input[type=text])
        ,CN : 'snd_cn'
    }
};


/**
 * 构造方法
 * @param container
 * @param opts
 */
KStdSender.initialize = function(container, opts)
{
    var _this = this;
    this._timer = undefined;    //控制发送提示显示的时间
    //add by zwq
    this.senderLog = false;     //是否记录日志
	this.senderState = 2;		//发送状态：0 发送中 1返回中 2完成
    this._opts = KTools.copyOptions(opts, KSenderOptions);
    this._initOption();
    this._oldOpts = this._opts.theme;
    this._domAll = $(container).removeClass().addClass(this._getClassName('SND')).hide();
    //取得Dom
    this._getDom();
    //创建选项卡
    if (!this._sendTab)
    {
        this._sendTab = new KStdTabs(this._sendTabDom);
    }
    //为Dom绑定事件
    this._bindEvent();
};

/*
==================================== 自定义方法 ============================================
 */
/**
 * 为Dom绑定事件
 */
KStdSender.prototype._bindEvent = function()
{
    var _this = this;
    //为选项卡的selected事件绑定事件
    KEvent.bind(this._sendTab, "selected", function(eventinfo, widget, oldItem, currentItem) {
        if (currentItem.index == 1)
        {
            _this._initEmailpic = true;
            _this._MAILSendContentDom.empty();
            KMap.snapshot({oncomplete:{fun:function() {
                //得到截图图片的地址。
                _this._emailImgUrl = arguments[1];
                _this._mailGaryOrlightBtn(false);
                _this._getMailPreview();
            }}});
        }
        else if (currentItem.index == 0)
        {
            _this._setSMSBtnGary();
        }
    });
    //为关闭按钮绑定事件
    this._colseBtn.click(function() {
        _this._closed();
    });
    //阻止Form的提交事件
    $("form", this._domAll).each(function() {
        $(this).submit(function(e) {
            e.stopPropagation();
            return false;
        });
    });
};
/**
 * 取得Dom
 */
KStdSender.prototype._getDom = function()
{
    this._dom =  this._domAll.get(0);
    this._colseBtn = $(">a", this._domAll).eq(0).removeClass().addClass(this._getClassName('CLB'));   //关闭按钮
    this._sendTabDom = $(">div", this._domAll).eq(0);   //选项卡
};
/**
 * 根据标记取得完整的CSS类名称
 * @param sign String 标记名称
 * @return String 完整的CSS类名
 */
KStdSender.prototype._getClassName = function(sign)
{
    return this.options().theme + '_' + KStdSender.conf.CLASSNAME[sign];
};
/**
 * 初始化options参数。
 */
KStdSender.prototype._initOption = function()
{
    if (!this._opts.smslimit)
    {
        this._opts.smslimit = 2000;
    }
    if (!this._opts.smsinterval)
    {
        this._opts.smsinterval = 0;
    }
};
/**
 * 初始化各个模块
 */
KStdSender.prototype._init = function()
{
    var _this = this;
    this._initEmailpic = false;
    this._changeFlag = 0;
    this._emailImgUrl = undefined;
    this._smsSelectshow = false;
    this._gpsSelectshow = false;
    //短消息发送    
	//add by zwq 增加登录判定  #### problem:loginKStdAccount 为前端index.js中定义的对象，此处引用不规范。
    var account = loginKStdAccount.account();
    if(!(account && account.signin) && (this._sendOpts.sendtype == KSendType.sms || this._sendOpts.sendtype == KSendType.email || this._sendOpts.sendtype == '52')){
    	loginKStdAccount.show();
		return;
	}else{
		this._initSendSMS();
	}
	
    //邮件发送
    this._initSendMail();
    //下载到移动设备
    this._initSendGPS();
    //下载到汽车
    this._initSendToCar();

    this._updateTabsOptions();

    this._initTabShow();

    if (this._sendTab && this._sendTab.current().index == 0)
    {
        this._setSMSBtnGary();
    }
    this._initselect();
    this._domAll.show();

    this._layout();
    
    KTools.lightbox({element:this._domAll,visible:true});

};
/**
 * 初始化发送到汽车的tabitem
 */
KStdSender.prototype._initSendToCar = function()
{
    //bug# 1011230914 fix begin
    //add by zhangsq 增加对car属性的判断
    if(this._sendOpts.car)
    {
        var _this = this;
        var MMSItemDom = this._sendTab.tab(3);
        $('>div', MMSItemDom.contentDom).eq(0).removeClass().addClass(this._getClassName('STC'));
        this._sendToCarForm = $('>div>form', MMSItemDom.contentDom).eq(0);
        $('>div', this._sendToCarForm).eq(0).removeClass().addClass(this._getClassName('CC'));
        $('>div', this._sendToCarForm).eq(1).removeClass().addClass(this._getClassName('CV'));
        this._sendToCarNum = $('>div>p>input[type="text"]', this._sendToCarForm).eq(0).removeClass().addClass(this._getClassName('CN'));
        this._sendToCarBtn = $('>div>p>input[type="submit"]', this._sendToCarForm).eq(0);
        this._sendToCarHelp = $('>div>label>a', this._sendToCarForm).eq(0).removeClass().addClass(this._getClassName('H'));
        this._sendToCarContent = $('>div>p>textarea', this._sendToCarForm).eq(0);
        //设置预览内容
        this._sendToCarContent.val(this._sendOpts.car[0].kvalue.preview);
        //清空车友ID
        this._sendToCarNum.val('');
        //bug# 201104021006 fix begin
        //显示帮助说明
        this._sendToCarHelp.unbind().bind( 'click', function(){
            //opt# 201103312210 fix begin
            //delete by zhangsq
            /*if(!_this._help)
            {
                _this._help = KTools.showMsg($(this).attr('_h'), {node:this, buboptions:{closebtn:true, pos:KPosition.BOTTOM}});
            }
            else
            {
                KTools.hideMsg(_this._help);
                _this._help = undefined;
            }*/
            //add by zhangsq
            KTools.showMsg($(this).attr('_h'), {node:this, buboptions:{closebtn:true, pos:KPosition.BOTTOM}});
            //opt# 201103312210 fix end
        });
        //发送信息
        this._sendToCarForm.unbind().bind('submit', function(){
        	//add by zwq #fix start#
        	_this.senderState = 0;
        	setTimeout(function(){
        		if(_this.senderState == 0){
        			_this.senderLog = true;//设置日志记录标识
        			_this._sendToCar.apply(_this, arguments);
        			_this.senderState == 2;
        		}else{
        			_this.senderState = 2;
        		}
            }, 6000);
        	//add by zwq #fix end#
        	_this._sendToCar.apply(_this, arguments);
            return false;
        });
        //bug# 201104021006 fix end
    }
    //bug# 1011230914 fix end
};
/**
 * 发送到汽车
 */
KStdSender.prototype._sendToCar = function()
{
    this._timer = new Date();
    var _this = this;
    var _id = undefined;
    //检查车友ID是否为空
    if($.trim(this._sendToCarNum.val()) == '')
    {
        _id = KTools.showMsg('此项信息不能忽略，请输入', {node:this._sendToCarNum.get(0), autoclose:5, buboptions:{closebtn:false, pos:KPosition.BOTTOM}});
        return;
    }
    //检查内容是否为空
    if($.trim(this._sendToCarContent.val()) == '')
    {
        _id = KTools.showMsg('编辑内容不能为空，请输入', {node:this._sendToCarContent.get(0), autoclose:5, buboptions:{closebtn:false, pos:KPosition.BOTTOM}});
        return;
    }
    //检查内容字符是否超过要求
    if($.trim(this._sendToCarContent.val()).length > 1000)
    {
        _id = KTools.showMsg('您输入的内容不能超过1000字，请修改', {node:this._sendToCarContent.get(0), autoclose:5, buboptions:{closebtn:false, pos:KPosition.BOTTOM}});
        return;
    }
    //禁用按钮
    _id = this._sendToCarBtn.attr('disabled', 'disabled');
    //显示正在发送信息
    this._killMsgTip(_id);
    _id = KTools.showMsg('发送中...', {node:this._sendToCarBtn.get(0), autoclose:0, buboptions:{closebtn:false, pos:KPosition.RIGHT}});

    //准备发送
    var ajaxUrl = this._opts.url;
    if (ajaxUrl.indexOf("?") != -1)
    {
        var num = ajaxUrl.indexOf("?");
        ajaxUrl = ajaxUrl.substring(0, num);
    }
    var _hash = new KUrlHash();
    /*//车友ID
    _hash.setKey('cid', this._sendToCarNum.val());
    //经纬度
    _hash.setKey('lat', this._sendOpts.car[0].value.latlon);
    //内容
    _hash.setKey('c', this._sendToCarContent.val());*/
    _hash.setKey('t', 'sdmc');
    _hash.setKey('sp', 'car');
    _hash.setKey('cai', this._sendToCarNum.val());    //车友ID
    _hash.setKey('mt', '');     //邮件标题
    _hash.setKey('mco', this._sendToCarContent.val());    //邮件内容
    _hash.setKey('pon', this._sendOpts.car[0].kvalue.name);    //POI名称
    _hash.setKey('poa', this._sendOpts.car[0].kvalue.address);    //POI地址
    _hash.setKey('pop', this._sendOpts.car[0].kvalue.phone);    //POI电话
    _hash.setKey('pol', this._sendOpts.car[0].kvalue.latlon);    //POI经纬度
    //设置需要日志记录的标识 fix by zwq
    if(_this.senderLog){
    	_hash.setKey('sl', "true");
    	_this.senderLog = false;
    }
    $.ajax({
        type: 'POST'
        ,url: ajaxUrl
        ,cache: false
        ,data: _hash.toString()
        ,dataType: 'json'
        ,error: function(){
            _this._killMsgTip(_id);
            _id = KTools.showMsg('系统错误，发送失败', {node:_this._sendToCarBtn.get(0), autoclose:5,buboptions:{pos:KPosition.RIGHT}});
            //启用按钮
            _this._sendToCarBtn.attr('disabled', '');
        }
        ,success: function(data) {
            if(data)
            {
            	//容错机制参数,设置为返回
            	_this.senderState = 1;
            	var _t = new Date();
                if(_t - _this._timer < 2000)
                {
                setTimeout(function(){
                    //提示成功
                    _this._killMsgTip(_id);
                    _id = KTools.showMsg('发送成功!', {node:_this._sendToCarBtn.get(0), autoclose:5,buboptions:{pos:KPosition.RIGHT}});
                    //启用按钮
                    _this._sendToCarBtn.attr('disabled', '');
                    }, 2000 - (_t - _this._timer));
                }
                else
                {
                   //提示成功
                    _this._killMsgTip(_id);
                    _id = KTools.showMsg('发送成功!', {node:_this._sendToCarBtn.get(0), autoclose:5,buboptions:{pos:KPosition.RIGHT}});
                    //启用按钮
                    _this._sendToCarBtn.attr('disabled', '');
                }
            }
            else
            {
                _this._killMsgTip(_id);
                _id = KTools.showMsg('系统错误，未返回数据', {node:_this._sendToCarBtn.get(0), autoclose:5,buboptions:{pos:KPosition.RIGHT}});
                //启用按钮
                _this._sendToCarBtn.attr('disabled', '');
            }
        }
    });
    return false;
};
/**
 * 初始化发送短消息的tabitem。
 */
KStdSender.prototype._initSendSMS = function()
{
    var _this = this;
    var MMSItemDom = this._sendTab.tab(0);
    this._SMScontentPhoneDom = $(">div", MMSItemDom.contentDom).eq(0);
    //add by zhangsq
    $('>div', MMSItemDom.contentDom).eq(0).removeClass().addClass(this._getClassName('V'));
    $('>div', MMSItemDom.contentDom).eq(1).removeClass().addClass(this._getClassName('C'));
    this._SMScontentDom = $(">div>dl>dd>p", MMSItemDom.contentDom).eq(0);
    var MMSContentDom = $(">div", MMSItemDom.contentDom).eq(1);
    // add by zhangsq
    this._SMSDropListDom = $(">div", MMSContentDom).get(0);
    if (!this._SMSDropList)
    {
        this._SMSDropList = new KDropList(this._SMSDropListDom, {
			deselect : false,
			select2text : true,
			multiple : false,
			closebtn : false,
			sortable : false,
			checkbox : false
		});
    }
    this._insertSMSItemFun();
    //KEvent.bind(this._SMSDropList, "opened", function(evt, widget) { });
    KEvent.bind(this._SMSDropList, "selectchanged", function(evt, widget, item) {

        var kvalue = eval(item.kvalue);
        _this._SMScontentDom.html(kvalue.content).data("paras", kvalue.paras || '').data('sendkey',kvalue.sendkey || '');
        _this._selectNum = item.index;
        if(_this._GPSDropList && _this._gpsSelectshow && !_this._changeFlag)
        {
            _this._changeFlag = "mms";
            _this._GPSDropList.select(item.index);

        }
        else
        {
           _this._changeFlag =undefined;
        }
    });
    this._SMSPhoneInputNum = 1;
    var MMSFromDom = $(">dl>dd>form", MMSContentDom).eq(0);
    this._SMSFormUlDom = $(">ul", MMSFromDom).eq(0);
    this._SMSAddPhoneInputBtn = $(">a", MMSFromDom).eq(0);
    $('<li><div class="' + (this._getClassName('PNC')) + '"><input type="text" /></div><a href="javascript:void(0);">移除此号码</a></li>').appendTo(this._SMSFormUlDom.empty());
    this._SMSAddPhoneInputBtn.unbind("click").click(function() {
        _this._AddPhoneNumFun();
    });
    this._SMSSendBtn = $("input[type='submit']", MMSFromDom).eq(0);
    this._SMSSendBtn.unbind("click").click(function()
    {
        _this._timer = new Date();
        _this._sendSMSFun();
    });

};
/**
 * 
 */
KStdSender.prototype._initselect = function()
{
	var isIE6 = ($.browser.msie && parseInt($.browser.version, 10) < 7);
    if(this._sendOpts && this._sendOpts.selected && this._sendTab)
    {
        var sendtype = this._sendOpts.selected;
        if(sendtype == KSendType.sms)
        {
            this._sendTab.select(0);
            if (isIE6) {
				this._sendTab.tab(0).contentDom.find("div.mwp_dpp").css("visibility", "visible");
			}
        }
        if(sendtype == KSendType.email)
        {
            this._sendTab.select(1);
            if (isIE6) {
				this._sendTab.tab(0).contentDom.find("div.mwp_dpp").css("visibility", "hidden");
			}
        }
        if(sendtype == KSendType.gps)
        {
            this._sendTab.select(2);
        }
        if(sendtype == KSendType.car)
        {
            this._sendTab.select(3);
        }
    }
};
/**
 * 关闭组件 
 */
KStdSender.prototype._closed = function()
{
    if (this._sendTab)
    {
        //this._sendTab.current().contentDom.hide();
        //opt# 1008261349 fix begin
        //add by zhangsq
        this._sendTab.hideTab(0);
        this._sendTab.hideTab(1);
        this._sendTab.hideTab(2);
        //bug# 1011241916 fix begin
        //add by zhangsq
        this._sendTab.hideTab(3);


        //add by zhangsq
        this._sendTab.showTab(3);
        //bug# 1011241916 fix end
        this._sendTab.showTab(1);
        this._sendTab.showTab(2);
        this._sendTab.showTab(0);
        //opt# 1008261349 fix end
        this._sendTab.select(0);
    }
    this._domAll.hide();
    KTools.lightbox({});
};
/**
 *  设置发送组件的样式方案
 * @uncrunch
 */
KStdSender.prototype._setTheme = function()
{
    var MMSItemDom = this._sendTab.tab(0);
    this._domAll.removeClass().addClass(this._getClassName('SND'));
    var MMSDivDoms = $(">div", MMSItemDom.contentDom);
    MMSDivDoms.eq(0).removeClass().addClass(this._getClassName('V'));
    MMSDivDoms.eq(1).removeClass().addClass(this._getClassName('C'));
    var length = $(">li", this._SMSFormUlDom).length;
    if (length > 1)
    {
        $(">li", this._SMSFormUlDom).each(function()
        {
            MMSDivDoms.eq(1).removeClass().addClass(this._getClassName('C'));
        });
    }
    else
    {
        $(">li", this._SMSFormUlDom).eq(0).removeClass().addClass(this._getClassName('PNC'));
    }
    //this._mailGaryOrlightBtn(this._GaryBtn);
    this._mailGaryOrlightBtn(false);
    this._SMSAddPhoneInputBtn.removeClass().addClass(this._getClassName('SMSSND'));
    $(">div", MMSDivDoms.eq(1)).eq(1).removeClass().addClass(this._getClassName('I'));
    var MAILItemDom = this._sendTab.tab(1);
    $("div", MAILItemDom).eq(0).removeClass().addClass(this._getClassName('C'));
    $("div", this._MAILSendForm).eq(0).removeClass().addClass(this._getClassName('MC'));
    this._MAILSendToInputDom.removeClass().addClass(this._getClassName('M'));
    this._MAILSendSubmitBtn.removeClass().addClass(this._getClassName('MSND'));
    $("div", this._MAILSendForm).eq(1).removeClass().addClass(this._getClassName('TIP'));
    $("div", this._MAILSendForm).eq(2).removeClass().addClass(this._getClassName('MCT'));
    $(this._GPSSendDownLandBtn).removeClass().addClass(this._getClassName('D'));
};
/**
 * 
 * @param opts
 */
KStdSender.prototype._setOption = function(opts)
{
    this._oldOpts = this._opts.theme;
    this._opts = KTools.copyOptions(opts, this._opts);
    this._initOption();
};
/**
 * 
 */
KStdSender.prototype._layout = function()
{
    //是否需要动画效果。xgq
    if (!this._domAll.is(":visible")) return;
    var h =$(window).height();
    var w =$(window).width();
    var domHeight = this._domAll.outerHeight();
    var width = this._domAll.outerWidth();
    var docsroll =$(document).scrollTop();
    var t = (h - domHeight) / 2 > 0 ? (h - domHeight) / 2 +docsroll: 0;
    var l = (w - width) / 2 > 0 ? (w - width) / 2 : 0;
    this._domAll.css({position:'relative',top:t,left:l});
    this._domAll.show();
    KTools.lightbox({element:this._domAll,visible:true});
};
/**
 * 初始化GPS的tabitem。
 */
KStdSender.prototype._initSendGPS = function()
{
    var _this = this;
    var GPSItemDom = this._sendTab.tab(2).contentDom;
    $('>div', GPSItemDom).eq(0).removeClass().addClass(this._getClassName('V'));
    this._GPSContentDom = $(">div>dl>dd", GPSItemDom).eq(0);
    var GPSSendSelectDom = $(">div", GPSItemDom).eq(1);
    GPSSendSelectDom.removeClass().addClass(this._getClassName('C'));
    $('>div', GPSSendSelectDom).eq(0).removeClass().addClass(this._getClassName('DL'));
    $('>div', GPSSendSelectDom).eq(1).removeClass().addClass(this._getClassName('SUP'));
    $('>div>a', GPSSendSelectDom).eq(0).removeClass().addClass(this._getClassName('D'));
    this._GPSDropListDom = $(">div>div", GPSSendSelectDom).eq(0);

    if (!this._GPSDropList)
    {
        this._GPSDropList = new KDropList(this._GPSDropListDom.get(0), {deselect : false,select2text:true,multiple:false,closebtn:false,sortable : false,checkbox : false});
        KEvent.bind(this._GPSDropList, "selectchanged", function(evt, widget, item) {
            _this._GPSContentDom.html(item.kvalue);
            _this._selectNum = item.index;
            if(_this._SMSDropList && _this._smsSelectshow && !_this._changeFlag)
        {
            _this._changeFlag = "gps";
			//added by zy,注释以下一行以消除KDropList的事件绑定错误
            //_this._SMSDropList.select(item.index);

        }
        else
           {
              _this._changeFlag =undefined;
            }
        });

    }
    this._insertGPSItemFun();
    this._GPSSendDesDom = $(">div>dl>dd", GPSItemDom).eq(0);

    this._GPSSendDownLandBtn = $(">div>a", GPSSendSelectDom).eq(0);
    this._GPSSendDownLandBtn.unbind("click").click(function() {
        _this._downloadMyLine();
    });
};
/**
 * 添加一个发送号码的输入框。
 */
KStdSender.prototype._AddPhoneNumFun = function()
{
    var _this = this;
    if (this._SMSPhoneInputNum == 5) return;
    this._SMSPhoneInputNum = this._SMSPhoneInputNum + 1;
    if (this._SMSPhoneInputNum > 4)
    {
        this._SMSAddPhoneInputBtn.hide();
    }
    $('<li><div class="' + (this._getClassName('PNC')) + '"><input type="text" /></div><a href="javascript:void(0);">移除此号码</a></li>').mouseenter(function() {
        $(this).addClass(_this._getClassName('PNH'));
    }).mouseleave(function() {
        $(this).removeClass();
    }).appendTo(this._SMSFormUlDom);
    if (this._SMSPhoneInputNum == 2)//判断是否是最后一个，如果是最后一个得添加事件。
    {
        $(">li", this._SMSFormUlDom).eq(0).mouseenter(function() {
            $(this).addClass(_this._getClassName('PNH'));
        }).mouseleave(function() {
            $(this).removeClass();
        });
    }
    $(">li", this._SMSFormUlDom).each(function()
    {
        $(">a", $(this)).eq(0).unbind("click").click(function()
        {
            $(this).parent().remove();
            _this._delPhoneNumFun();
        });
    });
};
/**
 * 删除一个发送号码的输入框。
 */
KStdSender.prototype._delPhoneNumFun = function()
{
    this._SMSPhoneInputNum = this._SMSPhoneInputNum - 1;
    this._SMSAddPhoneInputBtn.show();
    if (this._SMSPhoneInputNum == 1)
    {
        $(">li", this._SMSFormUlDom).unbind("mouseenter").unbind("mouseleave");
    }
};
/**
 * 初始化发送短消息选择框。
 */
KStdSender.prototype._insertSMSItemFun = function()
{
    if (this._sendOpts.sms && this._sendOpts.sms.length > 1 && this._SMSDropList) {
		this._smsSelectshow = true;
		var length = this._sendOpts.sms.length;
		$(this._SMSDropListDom).show().css('visibility', 'visible');
		this._SMSDropList.clearResult();
		this._SMScontentDom.html("").removeData("paras").removeData("sendkey");
		var listItem = "";
		var k = 0;
		for ( var i = 0; i < length; i++) {
			listItem = this._sendOpts.sms[i];
			if (listItem.kvalue.selected){
                this._selectNum = i;
                this._SMSDropList.insert( {
                    text : listItem.name,
                    kvalue : '({"content":"' + listItem.kvalue.content + '","paras":"' + listItem.kvalue.paras + '","sendkey":"' + listItem.kvalue.sendkey + '"})',
                    deletable : false,
                    editable : false,
                    selected : listItem.kvalue.selected,
                    iconClass : '',
                    itemClass : ''
                });
                k++;
                this._SMScontentDom.html(listItem.kvalue.content).data("paras", listItem.kvalue.paras || '').data("sendkey", listItem.kvalue.sendkey || '');
            }
		}
		//added by zy,修正点击地图顶栏短信发送无法正确得到选中选项卡，从而出错的问题
//		if($('#olResult>li').hasClass('mwp_ls_rls')){
//			this._selectNum = $('#olResult li.mwp_ls_rls').index();
//			if(this._sendOpts.bubbleIndex) this._selectNum = this._sendOpts.bubbleIndex;
//			listItem = this._sendOpts.sms[this._selectNum];
//			this._SMScontentDom.html(listItem.kvalue.content).data("paras", listItem.kvalue.paras);
//			this._SMSDropList.select(this._selectNum);
//		}
		if (k == 0) {
			this._SMSDropList.select(0, true);
			var kval = eval(this._sendOpts.sms[0].kvalue);
			this._SMScontentDom.html(kval.content).data("paras", kval.paras || '').data("sendkey", kval.sendkey || '');
		}
		// 是否设置第一条为默认选中项。
	} else {
		this._smsSelectshow = false;
		$(this._SMSDropListDom).hide().css('visibility', 'hidden');
		if (this._sendOpts.sms && this._sendOpts.sms.length == 1 && this._SMSDropList) {
			var kval = eval(this._sendOpts.sms[0].kvalue);
			this._SMScontentDom.html(kval.content).data("paras", kval.paras || '').data("sendkey", kval.sendkey || '');
		}
	}
};
/**
 * 
 */
KStdSender.prototype._insertGPSItemFun = function()
{
    if (this._sendOpts.gps && this._sendOpts.gps.length > 1 && this._GPSDropList)
    {
        this._gpsSelectshow = true;
        var length = this._sendOpts.gps.length;
        $(this._GPSDropListDom).show();
        this._GPSDropList.clearResult();
        $(this._GPSContentDom).html("");
        var listItem = "";
        var k = 0;
        for (var i = 0; i < length; i++)
        {
            listItem = this._sendOpts.gps[i];
            this._GPSDropList.insert( {
				text : listItem.name,
				kvalue : (this._getGPSContent(listItem.kvalue)),
				deletable : false,
				editable : false,
				selected : listItem.kvalue.selected,
				iconClass : '',
				itemClass : ''
			});
            if (listItem.kvalue.selected)
            {
                k++;
                $(this._GPSContentDom).html(this._getGPSContent(listItem.kvalue));
            }

        }
		//added by zy,修正点击地图顶栏GPS发送无法正确得到选中选项卡，从而出错的问题
//		if($('#olResult>li').hasClass('mwp_ls_rls')){
//			var selectNO = $('#olResult li.mwp_ls_rls').index();
//			listItem = this._sendOpts.sms[selectNO];
//			this._GPSContentDom.html(listItem.kvalue.content).data("paras", listItem.kvalue.paras);
//			this._GPSDropList.select(selectNO);
//		}
        if (k == 0)
            {
                this._GPSDropList.select(0, true);
                $(this._GPSContentDom).html(this._sendOpts.sms[0].kvalue.content);
            }
    }
    else
    {
        $(this._GPSDropListDom).hide();
        this._gpsSelectshow = false;
        if (this._sendOpts.gps && this._sendOpts.gps.length == 1 && this._GPSDropList)
        {
            $(this._GPSContentDom).html(this._getGPSContent(this._sendOpts.gps[0].kvalue));
        }
    }

};
/**
 * 初始化发送邮件界面
 */
KStdSender.prototype._initSendMail = function()
{
    var _this = this;
    var MAILItemDom = this._sendTab.tab(1);
    //add by zhangsq
    $('>div', MAILItemDom.contentDom).eq(0).removeClass().addClass(this._getClassName('C'));
    this._MAILSendForm = $(">div>form", MAILItemDom.contentDom).eq(0);
    // add by zhangsq
    $('>div', this._MAILSendForm).eq(0).removeClass().addClass(this._getClassName('MC'));
    // add by zhangsq
    $('>div', this._MAILSendForm).eq(1).removeClass().addClass(this._getClassName('TIP'));
    // add by zhangsq
    $('>div', this._MAILSendForm).eq(2).removeClass().addClass(this._getClassName('MCT'));
    this._MAILSendToInputDom = $(">div>input[type='text']", this._MAILSendForm).eq(0);
    //add by zhangsq
    this._MAILSendToInputDom.removeClass().addClass(this._getClassName('M'));
    this._MAILSendSubmitBtn = $(">div>input[type='submit']", this._MAILSendForm).eq(0);
    //add by zhangsq
    this._MAILSendSubmitBtn.removeClass().addClass(this._getClassName('MSND'));
    this._MAILSendContentDom = $(">div", this._MAILSendForm).eq(2);
    this._MAILSendSubmitBtn.unbind("click").click(function() {
            _this._timer = new Date();
            _this._sendMailfun();
    });
};
/**
 * 得到短消息输入的电话号码集合，输出格式为电话号码,电话号码的格式。
 */
KStdSender.prototype._getMMSPhoneNums = function()
{
    var _this = this;
    var phoneInputDom = $(">li>div>input", this._SMSFormUlDom);
    var length = phoneInputDom.length;
    var phoneNum = "",phoneStr = "";
    //#opt 1012281138 fix begin
    //delete by zhangsq
    //var re = /^(((13[0-9]{1})|159|(18[0-9]{1})+\d{8}|(15[0-9]{1}))+\d{8})|0\d{2,3}\d{7,8}$/;
    //add by zhangsq
    var re = /^[0-9]{11}$/;   //11位的纯数字
    var a = /^\d{11}$}/;
    //#opt 1012281138 fix end
    for (var i = 0; i < length; i++)
    {
        phoneNum = phoneInputDom.eq(i).val();
        if (!re.test(phoneNum))
        {
            var id = KTools.showMsg("号码不正确，请重新输入！", {outside:true,autoclose:5,node:phoneInputDom.eq(i).get(0), buboptions : {closebtn: false, pos :KPosition.BOTTOM}});
            phoneInputDom.eq(i).unbind('focus').bind('focus', function(){
                _this._killMsgTip(id);
            });
            return undefined;
        }
        else
        {
            phoneStr = (i == length - 1 ? phoneStr + phoneNum : phoneStr + phoneNum + ",");
        }
    }
    return phoneStr;
};
/**
 * 发送短消息的函数。
 */
KStdSender.prototype._sendSMSFun = function()
{
    if (this._GaryBtn) return;
    var phoneParam = this._getMMSPhoneNums();
    if (!phoneParam) return;
    if (!this._opts.url)  return;
    if($('#mwp_send_captcha').val() == ""){
        KTools.showMsg("请填写验证码", {autoclose:5,node : $('#mwp_send_captcha').get(0)});
        return ;
    }
    this._GaryBtn = true;
    this._SMSSendBtn.removeClass().addClass(
			this._getClassName('SMSSND') + " " + this._getClassName('SSNDD'));
    // opt# 1008311132 fix begin
    // delete by zhangsq
    //var id = KTools.showMsg("正在发送...", {node:this._SMSSendBtn,lightbox:true});
    //add by zhangsq
    var id = KTools.showMsg("正在发送...", {node:this._SMSSendBtn.get(0), buboptions : {closebtn : false, pos : KPosition.RIGHT}});
    // opt# 1008311132 fix end
    var ajaxUrl = this._opts.url;
    if (ajaxUrl.indexOf("?") != -1)
    {
        var num = ajaxUrl.indexOf("?");
        ajaxUrl = ajaxUrl.substring(0, num);
    }
    var _this = this;


    var hash = new KUrlHash();
    hash.setKey("pho", phoneParam);
    //不发送内容， 转而发送查询参数
    hash.setKey("sco", this._SMScontentDom.text());
    //hash.setKey("sco", this._SMScontentDom.data("paras"));
    hash.setKey("smk", this._SMScontentDom.data("sendkey"));
    hash.setKey("sp", "bus");
    hash.setKey("t", "sds");
    hash.setKey("ca", $('#mwp_send_captcha').val());

    $.ajax({
        type : "POST"
        ,url : ajaxUrl
        ,cache : false
        ,data :  hash.toString()
        ,error : function() {
            _this._killMsgTip(id);
            KTools.showMsg("系统错误，发送失败！<br/>请稍候再试(E02)", {autoclose:5,node:_this._SMSSendBtn.get(0)});
            _this._setSMSBtnGary();
        }
        ,success: function(data) {
            if(data)
            {
                var _t = new Date();
                if(_t - _this._timer < 2000)
                {
                    setTimeout(function(){
                        _this._sendSuccess('sms',id,data.result,phoneParam);
                    }, 2000 - (_t - _this._timer));
                }
                else
                {
                    _this._sendSuccess('sms',id,data.result,phoneParam);
                }
            }
            else
            {
                _this._killMsgTip(id);
                KTools.showMsg('错误！未返回数据', {autoclose : 5, node : _this._SMSSendBtn.get(0)});
                _this._setSMSBtnGary();
            }
            $('#mwp_send_captcha').val("");
            setTimeout(function(){
                $('#mwp_send_captcha_img').click();
            },5000);
        }
        ,dataType:"json"
    });
};
/**
 * 取得当前客户端发送短信的次数
 */
KStdSender.prototype._getSMSSendTime = function()
{};
/**
 * 触发complate(发送完成)事件
 */
KStdSender.prototype._trriggerComplete = function()
{
    KEvent.trigger(this, "complete", this);
};
KStdSender.prototype._getMAILUser = function()
{};
/**
 * 判断输入的邮件地址的格式是否正确，如果正确返回true。否则返回false。
 */
KStdSender.prototype._checkEmail = function()
{
    var mailUser = this._MAILSendToInputDom.val();
    if (mailUser.length != 0) {
        var arr = null;
        var num = mailUser.toLowerCase();
        num = num.replace(/ |;|；|，/g, ",");
        arr = num.split(",");
        for (var i = 0; i < arr.length; i++) {
            if (!(/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(arr[i])))
            {
                KTools.showMsg("请输入正确的邮件地址！", {outside:true,autoclose:5,node:this._MAILSendToInputDom.get(0),buboptions:{closebtn:false, pos : KPosition.TOP}});
                this._MAILSendToInputDom.select();
                this._MAILSendToInputDom.focus();
                return false;
            }
        }
        if(this._MAILSendContentDom.html().length == 0)
        {
            return false;
        }
        {
            return true;
        }
    } else {
        KTools.showMsg("请输入正确的邮件地址！", {outside:true,autoclose:5,node:this._MAILSendToInputDom.get(0), buboptions : {closebtn : false, pos : KPosition.TOP}});
        this._MAILSendToInputDom.select();
        this._MAILSendToInputDom.focus();
        return false;
    }
};
/**
 * 发送邮件的函数。
 */
KStdSender.prototype._sendMailfun = function()
{
    if (!this._checkEmail()) return;
    if (!this._opts.url) return;
    if (this._MAILGaryBtn) return;

    if($('#mwp_sendMail_captcha').val() == ""){
        KTools.showMsg("请填写验证码", {autoclose:5,node : $('#mwp_sendMail_captcha').get(0)});
        return ;
    }

    var ajaxUrl = this._opts.url;
    if (ajaxUrl.indexOf("?") != -1)
    {
        var num = ajaxUrl.indexOf("?");
        ajaxUrl = ajaxUrl.substring(0, num);
    }
    this._mailGaryOrlightBtn(false);
    var _this = this;
    $("img[mfg='mpm']", this._MAILSendContentDom).css({width : 'auto'});
    var hash = new KUrlHash();
    hash.setKey("em", this._MAILSendToInputDom.val().replace(/ |;|；|，/g, ","));
    hash.setKey("t", "sdm");
    hash.setKey("mt", $("span[mfg='mpt']", this._MAILSendContentDom).text());
    hash.setKey("mco", $("div[mfg='mpc']", this._MAILSendContentDom).html());
    hash.setKey("sp", "search");
    hash.setKey("ca", $('#mwp_sendMail_captcha').val());
	//added by zy,判断当前有无地铁选项，并传值
	if($('.mwp_bs_sopt:visible').get(0)){
		$('.mwp_bs_sopt:visible').eq(0).find('input').eq(0).is(":checked")?hash.setKey("isb", true):hash.setKey("isb", false);
	}
	//added over
    $("img[mfg='mpm']", this._MAILSendContentDom).css({width : '500px'});
    // opt# 1008311135 fix begin
    // delete by zhangsq
    //var id = KTools.showMsg("正在发送...", {node:this._MAILSendSubmitBtn});
    // add by zhangsq
    //var id = KTools.showMsg("正在发送...", {node:this._MAILSendSubmitBtn.get(0), buboptions : {closebtn : false, pos : KPosition.RIGHT}});//
    var id = KTools.showMsg('正在发送...', {node : this._MAILSendToInputDom.get(0), buboptions : {closebtn : false, pos : KPosition.TOP}});
    // opt# 1008311135 fix end
    $.ajax({
        type : "POST"
        ,url : ajaxUrl
        ,cache : false
        ,data : hash.toString()
        ,error : function() {
            _this._killMsgTip(id);
            KTools.showMsg("系统错误，未发送成功！<br/>请稍候再试！(E01)", {title : '提示', buttons : KMsgBoxButtons.OK});//{autoclose:5,node:_this._MAILSendSubmitBtn.get(0), buboptions : {closebtn : false, pos : KPosition.RIGHT}}
            _this._mailGaryOrlightBtn(true);
        }
        ,success: function(data) {
            var _t = new Date();
            if(_t - _this._timer < 2000)
            {
                setTimeout(function(){
                    _this._sendSuccess('mail', id, data.result);
                }, 2000 - (_t - _this._timer));
            }
            else
            {
                _this._sendSuccess('mail', id, data.result);
            }

        }
        ,dataType:"json"
    });

};
/**
 * 发送成功的处理
 * @param type String 发送类型
 * @param tip String 当前消息框id
 * @param data String 返回信息
 * @param phoneParam String
 */
KStdSender.prototype._sendSuccess = function(type, tip, data, phoneParam)
{
    var _this = this;
    if(type == 'mail')
    {
        _this._trriggerComplete();
        _this._killMsgTip(tip);
        _this._sendCallback(data,_this._MAILSendToInputDom.get(0));
        //KTools.showMsg("发送成功！", {autoclose:5,node:_this._MAILSendSubmitBtn});
        _this._initAllDom(KSendType.email);
        _this._mailGaryOrlightBtn(true);
    }
    if(type == 'sms')
    {
        _this._SMSAddPhoneInputBtn.show();
        _this._trriggerComplete();
        _this._killMsgTip(tip);
        _this._setMMSCookie();
         _this._sendCallback(data,_this._SMSSendBtn.get(0),phoneParam);
        _this._initAllDom(KSendType.sms);
        _this._setSMSBtnGary();
        /*
        _this._GaryBtn = false;*/
    }
};
/**
 * 得到邮件发送的内容的预览内容。
 */
KStdSender.prototype._getMailPreview = function()
{
    var _this = this;
    var querytype = this._sendOpts.querytype;
    var previewurl = this._opts.previewurl;

    if (this._opts.previewurl)
    {
        if (previewurl.indexOf("?") != -1)
        {
            var num = previewurl.indexOf("?");
            previewurl = previewurl.substring(0, num);
        }
        var hash = new KUrlHash();
        previewurl = previewurl+"?" + this._sendOpts.email[0].kvalue;

        if(this._sendOpts.querytype == KQueryType.localsearch && this._sendOpts.sendtype == KSendType.email)
        {
            if(previewurl.indexOf("&n=")!= -1)
        {
          previewurl = previewurl.replace(/&n=[^&]*/gi,"");
        }
        else
        {
        previewurl = previewurl.replace(/\?n=[^&]*/gi,"");
        }
        }
        else if(this._sendOpts.querytype == KQueryType.localsearch  && (this._selectNum|| this._selectNum == 0))
        {

         if(previewurl.indexOf("&n=")!= -1)
        {
          previewurl = previewurl.replace(/&n=[^&]*/gi,"&n="+this._selectNum);
        }
        else
        {
        previewurl = previewurl.replace(/\?n=[^&]*/gi,"\?n="+this._selectNum);
        }

        }

        this._MAILSendContentDom.empty().load(previewurl, function() {
            if (_this._MAILSendContentDom.html() != "")
            {
                var url = document.location.href;
                /*#fix start :邮件支持短链接 edit by liufang ##20111210*/
               	var lurl = escape(url).replace('#','23%').replace('/','%2F','g');
            	$.ajax({
                	type 	: "GET",
                    url 	: short_url,
                    cache	: false,
                    data 	: "url="+lurl,
                    success	: function(data) {
                    			if(data && data.surl){
                    				url = data.surl;
                    			}
                                $("a[mfg='mpu']", _this._MAILSendContentDom).attr("href", url).attr("target", "_blank").text(url);
                              },
                    error 	: function(){
                        		$("a[mfg='mpu']", _this._MAILSendContentDom).attr("href", url).attr("target", "_blank").text(url);
		                    },
                    dataType:"json"
                });  
                $("a[mfg='mpu']", _this._MAILSendContentDom).attr("href", url).attr("target", "_blank").text(url);
                $("a[mfg='mpmu']", _this._MAILSendContentDom).attr("href", url).attr("target", "_blank");
                /*#fix end*/
                $("img[mfg='mpm']", _this._MAILSendContentDom).attr("src", _this._emailImgUrl).css({width : '500px'});
                _this._emailImgUrl = undefined;
                _this._mailGaryOrlightBtn(true);
            }
        });
    }
};
/**
 * GPS导入activex，新建一个object到body中。
 */
KStdSender.prototype._loadActiveX = function()
{
    $("<object id=\"MYActiveX\" classid=\"clsid:F0C7099F-9FFF-406F-83A6-C0A0E088BF0A\" WIDTH=\"0px\" HEIGHT=\"0px\"></object>").appendTo(this._domAll);

};
/**
 *  如果没有加载active插件，则提示用户安装插件。
 */
KStdSender.prototype._isActiveX1 = function()
{
    if (window.confirm("您尚未安装图吧导航家园，现在下载？")) {
        window.open("http://mapbarhome.mapbar.com/map/down/download.html");
    }
};
/**
 * 判断系统是否安装图吧导航的插件。
 */
KStdSender.prototype._DetectActiveX = function()
{
    try {
        var comActiveX = new ActiveXObject('MAPBARHOMEASSIST.MapbarHomeAssistCtrl.1');
        this._loadActiveX();
        return true;
    } catch (e) {
        return false;
    }
};
/**
 * 下载轨迹点的时候进行的操作
 */
KStdSender.prototype._downloadMyLine = function()
{
    if (!this._DetectActiveX()) {
        this._isActiveX1();
        return;
    }

    var lines = [];
    lines.push("[");
    var pcontent = $(">p", this._GPSContentDom);
    var pos = pcontent.eq(0).html();
    var tit = pcontent.eq(1).html();
    var addr = pcontent.eq(2).html();
    var phone = pcontent.eq(3).html();
    lines.push("{\"type\":\"其它\",\"pos\":\""+pos+"\",\"name\":\""+tit+"\",\"address\":\""+addr+"\",\"phoneNumber\":\""+phone+"\",\"regionName\":\"\"}");
    lines.push("]");
    this._chk(lines.join(""));

};
/**
 * 整合actionX
 * @param retValue
 */
KStdSender.prototype._chk = function(retValue) {
    var obj = document.getElementById("MYActiveX");
    if (typeof obj != "undefined" && typeof obj.setDataCheckList != "undefined") {
        if (retValue) {
            //%POI名称% %POI电话% %POI地址% %经度% %纬度%
            ret = obj.setDataCheckList(1, retValue);
            this._trriggerComplete();
        } else {
            return;
        }
    }
};
/**
 * @overwrite
 * @uncrunch
 */
KStdSender.prototype._updateTabsOptions = function()
{
    if (this._sendOpts.sendtype)
    {
        (this._sendOpts.sendtype & KSendType.sms) == KSendType.sms ? this._sendTab.showTab(0) : this._sendTab.hideTab(0);
        (this._sendOpts.sendtype & KSendType.email) == KSendType.email ? this._sendTab.showTab(1) : this._sendTab.hideTab(1);
        (this._sendOpts.sendtype & KSendType.gps) == KSendType.gps ? this._sendTab.showTab(2) : this._sendTab.hideTab(2);
        (this._sendOpts.sendtype & KSendType.car) == KSendType.car ? this._sendTab.showTab(3) : this._sendTab.hideTab(3);
        this._initTabShow();
    }
    else
    {
        this._sendTab.hideTab(0);
        this._sendTab.hideTab(1);
        this._sendTab.hideTab(2);
        this._sendTab.hideTab(3);
    }
};
/**
 * 
 * @param type
 */
KStdSender.prototype._initAllDom = function(type)
{
    if(type | KSendType.sms == KSendType.sms)
    {
    //MESSAGE
    $('<li><div class="' + (this._getClassName('PNC')) + '"><input type="text" /></div><a href="javascript:void(0);">移除此号码</a></li>').appendTo(this._SMSFormUlDom.empty());
    this._SMScontentDom.html("").removeData("paras").removeData("sendkey");
    this._SMSPhoneInputNum = 1;
    this._insertSMSItemFun();
    }
    //EMAIL
    if(type | KSendType.email == KSendType.email)
    {
    this._MAILSendToInputDom.val("");
    //this._MAILSendContentDom.empty();
    this._emailImgUrl = undefined;
    }
    if(type | KSendType.gps == KSendType.gps)
    {

    }
    if(type | KSendType.mms == KSendType.mms)
    {

    }
};
KStdSender.prototype._setOption = function(opts)
{
    this._oldOpts = this._opts.theme;
    this._opts = KTools.copyOptions(opts, this._opts);
};
/**
 * 设置GPS下载内容
 * @param json
 */
KStdSender.prototype._getGPSContent = function(json)
{
    var contenthtml = [];
    if (json)
    {
        contenthtml.push("<p style='display:none;'>" + (json.pos ? json.pos : "") + "</p>");
        contenthtml.push("<p>" + (json.name ? json.name : "") + "</p>");
        contenthtml.push("<p>" + (json.address ? json.address : "") + "</p>");
        contenthtml.push("<p>" + (json.phoneNumber ? json.phoneNumber : "") + "</p>");
    }
    contenthtml.push("<p>-www.mapbar.com</p>");
    return contenthtml.join("");
};
/**
 * 根据Cookies设置短信发送按钮的可用状态
 */
KStdSender.prototype._setSMSBtnGary = function()
{
//    return;
    var signinfun = this._opts.signinfun;

    if (signinfun && signinfun.fun.apply(signinfun.thisobj, [signinfun.data]).signin)
    {
        //高亮图标
     //   return;
    }
    var sndcookie = KTools.getCookie("sndsmsl");
    //sndcookie = "20,2010-07-21 11:30:20";
    var date = new Date();
    if (sndcookie)
    {

        var arrCookie = sndcookie.split(",");
        var sendtime = arrCookie[0];
        var senddate = arrCookie[1];
        if (parseInt(this._getDistanceDate(date, this._stringToDate(senddate))) >= parseInt(this._opts.smsinterval))
        {
            KTools.setCookie("sndsmsl", "0," + date.toString());
            this._SMSSendBtn.removeClass().addClass(this._getClassName('SMSSND'));
            this._GaryBtn = false;
            //高亮发送按钮。
            return;
        }
        if (parseInt(sendtime) >= parseInt(this._opts.smslimit))
        {
            //灰显发送按钮
            this._SMSSendBtn.removeClass().addClass(this._getClassName('SMSSND') + " " + this._getClassName('SSNDD'));
            this._GaryBtn = true;
        }
        else
        {
            //高亮发送按钮
            this._SMSSendBtn.removeClass().addClass(this._getClassName('SMSSND'));
            this._GaryBtn = false;
        }
    }
    else
    {
        //高亮发送按钮
        KTools.setCookie("sndsmsl", "0," + this._dateToString(date));
        this._SMSSendBtn.removeClass().addClass(this._getClassName('SMSSND'));
        this._GaryBtn = false;
    }
};
/**
 * 将date类型转换成string类型
 * @param date Date
 * @return String
 */
KStdSender.prototype._dateToString = function(date)
{
    var strArray = [];
    strArray.push(date.getFullYear());
    strArray.push("-");
    strArray.push(date.getMonth() + 1);
    strArray.push("-");
    strArray.push(date.getDate());
    strArray.push(" ");
    strArray.push(date.getHours());
    strArray.push(":");
    strArray.push(date.getMinutes());
    strArray.push(":");
    strArray.push(date.getSeconds());
    return strArray.join("");

};
/**
 * 将string类型转换成date类型，因为是内部函数没有做容错处理，传递的数据自认为都是合法的。
 * @param str
 */
KStdSender.prototype._stringToDate = function(str)
{
    return(new Date(Date.parse(str.replace(/-/g, "/"))));
};
/**
 * 得到两个日期的之间相差的天数。返回的数字为天数。
 * @param date1
 * @param date2
 */
KStdSender.prototype._getDistanceDate = function(date1, date2)
{
    var distance = date1.valueOf() - date2.valueOf();

    return Math.floor(distance / 86400000);

};
/**
 * 切换邮件发送按钮可用状态
 * @param flag
 */
KStdSender.prototype._mailGaryOrlightBtn = function(flag)
{
    if (flag)
    {
        this._MAILGaryBtn = false;
        this._MAILSendSubmitBtn.removeClass().addClass(this._getClassName('MSND'));
    }
    else
    {
        this._MAILSendSubmitBtn.removeClass().addClass(this._getClassName('MSND') + " " + this._getClassName('MSNDD'));
        this._MAILGaryBtn = true;
    }
};
/**
 * 关闭信息提示
 * @param id
 */
KStdSender.prototype._killMsgTip = function(id)
{
    if (id)
    {
        KTools.hideMsg(id);
    }
};
/**
 * 发送成功将cookie值加一。
 */
KStdSender.prototype._setMMSCookie = function()
{
    if (!KTools.getCookie("sndsmsl")) return;
    var arrCookie = KTools.getCookie("sndsmsl").split(",");
    var sendtime = arrCookie[0];
    var senddate = arrCookie[1];
    KTools.setCookie("sndsmsl", (parseInt(sendtime) + 1) + "," + senddate);
};
/**
 * 发送回调方法
 * @param result
 * @param dom
 * @param str
 */
KStdSender.prototype._sendCallback = function(result,dom,str)
{
    var _this = this;
    if(!result || !result.result)
    {
        KTools.showMsg("系统错误，发送没有成功<br/>请稍候再试", {title : '提示', buttons : KMsgBoxButtons.OK});
        return ;
    }
    var  strresult =result.result;
    var length = strresult.length;
    var  falg = false;
    var message ="";
    for(var i=0;i<length;i++)
    {
        if(result.type=="mail")//发送邮件
        {
            if(strresult[i].send =="0")
            {
                message =  "发送失败！请检查目标邮箱是否输入正确";
                KTools.showMsg(message, {autoclose:5,node:_this._MAILSendToInputDom.get(0), buboptions : {closebtn : false, pos : KPosition.TOP}});
                falg =true;
                break;
            }
        }
        else if(result.type=="sms")//发送短信
        {
            if(strresult[i].send =="0")
            {
                if(parseInt(result.result[i].failcode) <= 50)
                {
                    message =  result.result[i].message;
                }
                else if(parseInt(result.result[i].failcode) >= 500 && parseInt(result.result[i].failcode) <= 600)
                {
                    message =  result.result[i].message;
                }
                else
                {
                    message = '信息发送失败！请检查号码是否正确！';
                }

                KTools.showMsg(message, {autoclose:5,node:dom, buboptions : {pos : KPosition.RIGHT, closebtn : false}});
                _this._setSMSBtnGary();
                falg =true;
            }
        }
    }
    // opt# 1008311116 fix begin
    //delete by zhangsq
    //message= str ? "成功发送至"+str+"，可以继续发送…":"发送成功！";
    //add by zhangsq
    message = "发送成功！可以继续发送";
    var sndcookie = KTools.getCookie("sndsmsl");
    var date = new Date();
    if (sndcookie)
    {
        var arrCookie = sndcookie.split(",");
        var sendtime = arrCookie[0];
        var senddate = arrCookie[1];
        if (parseInt(this._getDistanceDate(date, this._stringToDate(senddate))) >= parseInt(this._opts.smsinterval))
        {}
        else
        {
            if (parseInt(sendtime) >= parseInt(this._opts.smslimit))
            {
                message = "发送成功！一周内已免费发送满20条短信";
            }
        }
    }
    // opt# 1008311116 fix end
    if(!falg)
        KTools.showMsg(message, {autoclose:5,node : dom, buboptions : {closebtn : false, pos : dom == _this._MAILSendToInputDom.get(0) ? KPosition.TOP : KPosition.RIGHT}});
};
KStdSender.prototype._initTabShow = function()
{
    if (this._sendOpts.querytype == KQueryType.navsearch)
    {
        this._sendTab.hideTab(0);
    }
    if(this._sendOpts.querytype == KQueryType.navsearch || this._sendOpts.querytype == KQueryType.busearch)
    {
        this._sendTab.hideTab(3);
    }
    //opt# 1008261353 fix begin
    //delete by zhangsq
    /*if (this._sendOpts.querytype == KQueryType.localsearch && $.browser.msie)
    {
        this._sendTab.showTab(2);
    }
    else
    {
        this._sendTab.hideTab(2);
    }*/
    //add by zhangsq
    if((this._sendOpts.querytype == KQueryType.localsearch) && (!$.browser.msie))
    {
        this._sendTab.hideTab(2);
    }
    if(this._sendOpts.querytype == KQueryType.localsearch)
    {
        this._sendTab.showTab(3);
    }
    //opt# 1008261353 fix end
};
/**
 *  隐藏组件，并清空数据及相关 UI 资源。
 *  @overwrite
 *  @uncrunch
 */
KStdSender.prototype.close = function()
{
    this._domAll.hide();
    KTools.lightbox({});
    this._initAllDom(KSendType.email | KSendType.gps | KSendType.sms |KSendType.mms);
};

/*
==================================== 实现KObject接口 ===================================
 */
/**
 *  释放当前对象的所有资源。默认实现为：将所有的属性设置为null，如果有 this._dom时将其进行
 *  @overwrite
 *  @uncrunch
 */
KStdSender.prototype.finalize = function()
{
    this._initialized = undefined;
    if (this._SMSAddPhoneInputBtn)
    {
        KEvent.clear(this._SMSAddPhoneInputBtn);
    }
    if (this._SMSSendBtn)
    {
        KEvent.clear(this._SMSSendBtn);
    }
    if (this._GPSSendDownLandBtn)
    {
        KEvent.clear(this._GPSSendDownLandBtn);
    }
    if (this._MAILSendSubmitBtn)
    {
        KEvent.clear(this._MAILSendSubmitBtn);
    }
    if (this._sendTab)
    {
        this._sendTab.finalize();
    }
    if (this._SMSDropList)
    {
        this._SMSDropList.finalize();
    }
};

/*
====================================== 实现KWidget接口 ========================================
 */
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KStdSender.prototype.cnname = function()
{
    return "标准发送组件";
};
/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KStdSender.prototype.version = function()
{
    return "1.2.1";
};
/**
 * 页面重新布局的方法。
 * @uncrunch
 */
KStdSender.prototype.layout = function()
{
    this._layout();
};
/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KStdSender.prototype.setOptions = function(opts)
{
    this._oldOpts = this._opts.theme;
    var diffOpts = KTools.compareOptions(this._opts, opts);
    this._initOption();
    this._selectNum = undefined;
    $.each(diffOpts, function(name, value) {
        switch (name)
        {
            case 'theme':
                this._setOption({'theme':value});
                this._setTheme();
                break;
            case 'smslimit':
                this._setOption({'smslimit':value});
                break;
            case 'smsinterval':
                this._setOption({'smsinterval':value});
                break;
            case 'signinfun':
                this._setOption({'signinfun':value});
                break;
        }
    });
};
/**
 *  通过options设置改变各个组件的配置选项。
 *  @overwrite
 *  @uncrunch
 */
KStdSender.prototype.setOptions = function(opts)
{
    var _this = this;
    this._oldOpts = this._opts.theme;
    var diffOpts = KTools.compareOptions(this._opts, opts);
    $.each(diffOpts, function(name, value) {
        switch (name)
        {
            case 'theme':
                _this._setOption({'theme':value});
                _this._setTheme(this._opts.theme);
                break;
            default:
        }
    });
};
/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KStdSender.prototype.dependent = function()
{
    return [KQuery ,KEvent ,jQuery,KSender,KSendType,KDropList,KUrlHash,KStdTabs,KTools,KSendOptions,KMap];
};

/*
======================================= 实现KSender接口 ==========================================
 */
/**
 * 发送基类构造方法,将相关数据发送到指定目的地
 * @param opts
 */
KStdSender.prototype.send = function(opts)
{
    this._sendOpts = KTools.copyOptions(opts, KSendOptions);
    if (!opts.sendtype || (opts.sendtype && opts.sendtype == KSendType.all))
    {
        this._sendOpts.sendtype = (KSendType.sms | KSendType.email | KSendType.gps | KSendType.car);
    }
    this._GaryBtn = false;

    this._init();
};








/* *
 输入提示组件。
 作者：songyr
 版本：1.0
 创建时间：2010-02-03
 最后修改时间：2010-02-03 23:07
 ============================================
 『修改历史』
 bug# 1008190954
 datachanged事件的返回值不符合文档要求

 bug# 1009011003
 修正了当页面出现滚动条后提示框出现位置错误的问题
 */

var KStdSuggest = KClass.create("KStdSuggest", KSuggest);
KStdSuggest.conf =
{
    CLASSNAME :
    {
        A:"_sug_a"
        ,S:"_sug_s"
    }
};


/**
 *   根据缩写得到样式全名
 * @param arg  样式缩写
 */
KStdSuggest.prototype._setClassName = function(arg)
{
    if (arg && KStdSuggest.conf.CLASSNAME[arg])
    {
        return this.options().theme + KStdSuggest.conf.CLASSNAME[arg];
    }
    return undefined;
};

/**
 *清空缓存
 * @uncrunch
 */
KStdSuggest.prototype.clearCache = function()
{
    this.cache = {};
    this.cache.data = {};
    this.cache.length = 0;
    this.cacheKeyArr = [];
};


/**
 * 构造方法。
 * @param textbox Node
 * @param opts KSuggestOptions
 * @uncrunch
 */

KStdSuggest.initialize = function(textbox, opts)
{
    var _this = this;
    this.setOptions(KStdSuggestOptions);
    //opts参数设置
    this.setOptions(opts);
    this.setTheme(this.options().theme);
    //定义组件Dom对象。
    this._jTextbox = $(textbox);
    this._textbox = this._jTextbox[0];
    this._autorevert = this._jTextbox.val();
//    if (this._jTextbox.val())  this._jTextbox.val("");

    this._parentResults = this.options().node ? $(this.options().node) : $("body");
    this._results = $("<ul/>").hide().addClass(this._setClassName("A"));
    if($.browser.msie){
    	$(function(){
    		_this._results.appendTo(_this._parentResults);
    	});
    }else{
    	this._results.appendTo(this._parentResults);
    }

    if(this.options().minwidth != 0){
        this._results.css(KTools.isIE6 ? {width : this.options().minwidth + "px"} : {"min-width":this.options().minwidth + "px"});
    }

    this._dom = this._results[0];
    //设置当前的suggest是否可见
	this._visible = true;
    this.timeout = null;
    this.prev = "";
    this.active = -1;
    this.hasFocus = false;

    this.mouseDownOnSelect = false;
    //    this._keyEnter = false;
    this.hidingResults = false;

    this.lastKeyPressCode = null;
    this.requestId = 1;

    this.urlArray = [];
    //    this.urlArray.push(this.options().url, "&a=", this.options().listlimit, "&k=");
    //    this.urlString = encodeURI(this.urlArray.join(""));

    if (this.options().cache === true) {
        this.clearCache();
    }
    this._flag = false;
    this.tmpAjaxData = undefined;
    this._data = undefined;
    
    this._cookieSug = false;
    
    /*    this._jTextbox.bind("contextmenu",function(e){
     });*/
    this._jTextbox.keydown(function(e) {
	_this.setVisible(true);

//        if (!_this._flag && _this._jTextbox.is(":visible")) {
//        if (_this._jTextbox.is(":visible")) {
            /*_this._results.offset({
                top: _this._jTextbox.offset().top + _this._jTextbox.outerHeight(true),
                left: _this._jTextbox.offset().left
            });*/
//            _this._flag = true;
//        }

        _this.lastKeyPressCode = e.keyCode;
        switch (e.keyCode) {
            case 38: //上
                _this.bmove = true;
                e.preventDefault();
                if(_this._results.children().length == 0) break;
                _this._results.show();
                _this._moveSelect(-1);
//                    KTools.showMsg("up");
                break;
            case 40: //下
                _this.bmove = true;
                e.preventDefault();
                if(_this._results.children().length == 0) break;
                _this._results.show();
                _this._moveSelect(1);
//                    KTools.showMsg("down");
                break;
            case 9:  // tab
                _this._onBlur.apply(_this);
                break;
            case 13: // 回车
                if (_this.bmove && _this._selectCurrent()) {

                    //                    KEvent.trigger(_this, "datachanged", _this, {text:_this._jTextbox.val(),kvalue:_this._jTextbox.attr("kvalue") || ""});
                    //                    _this._keyEnter = true;
//                    _this._jTextbox.get(0).blur();
                    _this.bmove = false;
//                    e.preventDefault();
                } else {
                    _this._results.hide();
                }
//                _this._selectCurrent();
                _this._results.hide();
//                    KTools.showMsg("enter");
                break;
            case 16:  //shift
            case 17:  //ctrl
            case 18:  //alt
            case 37://左
            case 39://右
                break;
            case 229:
                if (!$.browser.msie) {
                    _this._jTextbox.bind("input", function() {
                        _this._inputChange(_this);
                    });
                    break;
                }
            default:
                _this._inputChange(_this);
                break;
        }
    }).focus(function() {
		_this._onFocus.apply(_this);
    }).blur(function(){
		_this._onBlur.apply(_this);
	});
	
	/*add by liufang 20131202
		修正问题，鼠标在地图上时，suggest不关闭
	*/
	KEvent.bind(KMap, "mousedown", function () {
		_this._textbox.blur();
	});
	/*add by liufang 20131202*/
};
/**
 * 处理得到交点
 */
KStdSuggest.prototype._onFocus = function () {
	var _this = this;
	/*_this._results.offset({
			top: _this._jTextbox.offset().top + _this._jTextbox.outerHeight(true),
			left: _this._jTextbox.offset().left
		});*/
	var bounds = KTools.getBounds(_this._jTextbox[0]);
	_this._results.css({
			top: "",
			left: ""
		});
	// bug# 1009011003 fix begin
	// delete by zhangsq
	/*_this._results.offset({
			top: bounds.max.y - ($.browser.msie ? 2 : 0),
			left: bounds.min.x - ($.browser.msie ? 2 : 0)
			*//*top: _this._jTextbox.offset().top + _this._jTextbox.outerHeight(true),
			left: _this._jTextbox.offset().left*//*
		});*/
	// add by zhangsq
	_this._results.css({
		top : (bounds.max.y - ($.browser.msie ? 2 : 0)) + 'px'
		,left : (bounds.min.x - ($.browser.msie ? 2 : 0)) + 'px'
	});
	// bug# 1009011003 fix end
	_this.hasFocus = true;
	if(_this.hasFocus){
		var v = _this._jTextbox.val();
		if(v.length <= 0){
			_this._onChange();
		}
	}
};
/**
 * 处理失去交点
 */
KStdSuggest.prototype._onBlur = function() {
        var _this = this;
        _this.hasFocus = false;
        if (!_this.mouseDownOnSelect) {
            _this.clearTimer();
        }
        if (_this.options().autocomplete === true && _this._jTextbox.val() !== "" && _this._results.is(":visible") && _this.prev === _this._jTextbox.val() && _this._results.children().length && !_this._results.children().hasClass(_this._setClassName("S"))) {
            //            _this._textbox.val(_this._results.find("li").eq(0).html());
            _this.active = 0;
            _this._selectItem(_this._results.find("li").eq(0)[0]);
            //            _this._keyEnter = false;
        } else if (_this.options().autorevert) {
            _this._jTextbox.val(_this._autorevert);
            return;
        }
        //_this.setData(_this.tmpAjaxData ? _this.tmpAjaxData.a[_this.active] : undefined);
        _this.setData((_this.tmpAjaxData && _this.tmpAjaxData.a) ? _this.tmpAjaxData.a[_this.active] : undefined);
        _this._hideResultsNow();
    };


//KObject
/**
 * 释放当前对象的所有资源
 * @uncrunch
 */
KStdSuggest.prototype.finalize = function()
{
    delete this.cache;
    delete this.cacheKeyArr;

    KTools.removeNode(this._results[0]);
    KEvent.clear(this._results);
    KEvent.clear(this._jTextbox);

    KTools.removeNode(this._results);

    //    this._results.remove();
    //    this._textbox.unbind();

};
//end KObject

//KWidget

/**
 * @return 组件Dom对象
 * @uncrunch
 */
KStdSuggest.prototype.dom = function()
{
    return this._dom;
};

/**
 * 返回版本信息。
 * @return String 版本号字符串。
 * @uncrunch
 */
KStdSuggest.prototype.version = function()
{
    return "1.0";
};

/**
 * 中文名称描述。
 * @return String
 *  @uncrunch
 */
KStdSuggest.prototype.cnname = function()
{
    return "输入提示组件";
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KStdSuggest.prototype.dependent = function()
{
    return [KSuggest,jQuery,KEvent,KStdSuggestOptions,KTools,KUrlHash];
};

/**
 * 清空显示结果
 * @uncrunch
 */
KStdSuggest.prototype.clearTimer = function ()
{
    //bug# 201005211150 fix begin
    //delete by zhaobo
    if (this.timeout) clearTimeout(this.timeout);
    var _this = this;
    this.timeout = setTimeout(function() {
        _this._hideResultsNow();
    }, 200);
    //add by zhaobo
    /*this._results.children().remove();
    this._hideResultsNow();*/
    //bug# 201005211150 fix end
};
KStdSuggest.prototype.clearResult = function ()
{
    this._results.children().remove();
    this._hideResultsNow();
};
/**
 * 设置组件配置选项。obj 参数一般为无构造函数对象，只需携带需更改的选项即可，其它选项会保留原值
 * @param obj
 * @uncrunch
 */
KStdSuggest.prototype.setOptions = function(obj)
{
    this._opts = KTools.copyOptions(obj, this.options());
};

/**
 * 设置组件的样式方案
 * @param scheme
 * @uncrunch
 */
KStdSuggest.prototype.setTheme = function(scheme)
{
    this._theme = scheme;
};

//end KWidget


/**
 * 获取指定文本框中的数据
 * @param textbox
 * 返回值：KSuggsetInfo 类型
 * @uncrunch
 */
/*KStdSuggest.prototype.data = function()
 {

 //widget：KSuggest 类型，事件源对象。
 //textbox：Node 类型，被监听的文本框。
 //data：KSuggsetInfo 类型，文本框数据。
 return this._data;

 };*/

/**
 * 设置指定文本框中的数据
 * @param data KSuggsetInfo 类型
 * @uncrunch
 */
KStdSuggest.prototype.setData = function(data)
{
	if (typeof data != "object")return;
    this._data = data;
    this._autorevert = this._data.text;
};

/**
 * 隐藏指定文本框的提示框。忽略textbox参数将隐藏所有被监听的文本框提示框
 * @uncrunch
 */
KStdSuggest.prototype.hideTip = function()
{
    //this._results.hide();
};

/**
 * 键盘上下键
 * @param step
 */
KStdSuggest.prototype._moveSelect = function (step)
{
    var lis = $("li", this._results);
    if (!lis.length) {
        return;
    }

    this.active += step;
    if (this.active < 0) {
        this.active = lis.size() - 1;
    } else if (this.active >= lis.size()) {
        this.active = 0;
    }

    lis.removeClass(this._setClassName("S"));

    $(lis[this.active]).addClass(this._setClassName("S"));

    //将值放入input
    this._jTextbox.val(this._extractData($(lis[this.active])));
    //    this.setData( this._textbox,{text:this._extractData($(lis[this.active]))})


};

/**
 * 回车选中列表
 */
KStdSuggest.prototype._selectCurrent = function()
{
    var li = $("li", this._results).filter("." + this._setClassName("S"))[0];
    //    if (!li) {
    //        var $li = $("li", this._results);
    //    }
    if (li) {
        this._selectItem(li);
        return true;
    } else {
        return false;
    }
};

/**
 * 选中SUGGEST的操作
 * @param li    选中的dom节点
 */
KStdSuggest.prototype._selectItem = function(li)
{
    //没有选中LI时
    if (!li)  return;
    //   this._extractHtml(li);
    this._autorevert = this._extractData(li);
    this._jTextbox.val(this._autorevert);
    this._jTextbox.attr("kvalue", $(li).attr("kvalue"));
    this._jTextbox.attr("zoom", $(li).attr("zoom"));
    this._jTextbox.attr("isbus", $(li).attr("isbus"));
    this._hideResultsNow();
    //bug# 1008190954 fix begin
    //delete by zhangsq
    //KEvent.trigger(this, "datachanged", this, {text:this._jTextbox.val(),kvalue:this._jTextbox.attr("kvalue") || "",zoom:this._jTextbox.attr("zoom"), isbus:this._jTextbox.attr("isbus")});
    //add by zhangsq
    KEvent.trigger(this, "datachanged", this, {text:this._jTextbox.val(), kvalue:this.tmpAjaxData.a[this.active].b});
    //bug# 1008190954 fix end

};

/**
 *       提取html
 * @param li   选中的dom节点
 * 返回值：KSuggsetInfo 类型
 */
KStdSuggest.prototype._extractData = function (li)
{
    var _li = $(li);
    var v = _li.html();
    var t = v.toLowerCase().indexOf("<span>");
    //  this._results.html("");
    var returnV = _li.text();// t === -1 ? v : v.slice(0, t);
    if(t !== -1){
        //myA.text().replace(myA.children("span").html(), "")
        var tstr = _li.children("span").html();
        returnV = _li.text().replace(tstr, "");
    }
    return  returnV;
//    return  t === -1 ? v : v.slice(0, t);

};

KStdSuggest.prototype._inputChange = function (_this_)
{
    _this_.active = -1;
    if (_this_.timeout) {
        clearTimeout(_this_.timeout);
    }
    _this_.timeout = setTimeout(function() {
        _this_._onChange();
    }, _this_.options().speed);
};

/**
 * 输入框发生变化时的处理
 */
KStdSuggest.prototype._onChange = function ()
{
    // 忽略del shift capslock等键
    if (this.lastKeyPressCode == 46 || (this.lastKeyPressCode > 8 && this.lastKeyPressCode < 32)) {
        //this._results.hide();
    }
    var v = this._jTextbox.val();
    //    if (this.lastKeyPressCode == 229) {
    //
    //    }
    //       var v = $.trim(this._textbox.val());

    //   this._textbox.change(function(){
    //   });

    //        if (v == this.prev) {
    //            return;
    //        }

    this.prev = v;
    this._requestData(v);
    
    /*
    if(v.length > 0){
        this.prev = v;
        if (v.length >= this.options().charcount) {
            //取得suggest数据
            this._requestData(v);
        }
    }else{
        var topTagStr = this._jTextbox.selector;
        var topTag = topTagStr.substring(topTagStr.indexOf('mfg=\'')+5,topTagStr.indexOf('\']'));
    	var cookie = KTools.getCookie(topTag);
    	if(cookie){
    		var cookieArr = cookie.split(',');
    		this.tmpAjaxData = {};
    		this.tmpAjaxData.a = new Array(); 
    	    var liArr = [];
    	    var _li = $("<li/>"),li;
    	    for (var i = 0; i < cookieArr.length; i++) {
    	    	this.tmpAjaxData.a[i] = {};
    	    	this.tmpAjaxData.a[i].b = '';
    	    	li = _li.clone();
    	    	li.html(cookieArr[i]);
    	    	liArr.push(li[0]);
    	    }
    	    this.active = 1;
    	    this._outParsedData(liArr);
    	}else{
    		this._hideResultsNow();
    	}
    }*/

};

/**
 * 根据用户的输入去请求suggest接口
 * @param q    用户的输入文字
 */
KStdSuggest.prototype._requestData = function (q)
{
    q = $.trim(q);
/*
    if (!q) {
        this._hideResultsNow();
        return;
    }
  */  
    var topTagStr = this._jTextbox.selector;
    var topTag = topTagStr.substring(topTagStr.indexOf('mfg=\'')+5,topTagStr.indexOf('\']'));
    if(topTag == 'bz'){
		topTag = 'ba';
	};
    if(!q){
    	var cookie = KTools.getCookie(topTag);
    	var cookieArr = {};
    	//周边搜--关键字记录超过三条，则只保留最新查询过的三条
		if(topTag == 'zk'){
			var zkInputTip = "酒店,餐厅,超市,KTV,加油站,银行,ATM";
			if(cookie){
				cookieArr = cookie.split(',');
				cookieArr = cookieArr.reverse();
				if(cookieArr.length > 3){	cookieArr.length = 3;	};
				cookie = cookieArr.join(",") + ",";
			}else{
				cookie = "";
			}
			cookie = cookie + zkInputTip;
		};
    	if(cookie){
    		cookieArr = cookie.split(',');
    		if(topTag != 'zk'){
    			cookieArr = cookieArr.reverse();
    		}
    		if(cookieArr.length > 0 ){
    			
    			var data = {};
        		data.a = new Array(); 
       		    var _this = this;
        	    for (var i = 0; i < cookieArr.length; i++) {
        	    	data.a[i] = {};
        	    	data.a[i].a = '';
        	    	data.a[i].b = '';
        	    	data.a[i].c = cookieArr[i] + '<span> </span>';
        	    };
        	    _this.tmpAjaxData = data;
        	    _this._handleData(q, data, this.requestId);
        	    this._cookieSug = true;
    		}else{
    			this._hideResultsNow();
    			this._cookieSug = false;
    		}
    	}else{
    		this._hideResultsNow();
    		this._cookieSug = false;
    	};
    	return;
    };
    if(topTag == 'zk'){return;};
    this._cookieSug = false;
    
    
    var cacheData = (this.options().cache === true) ? this._loadFromCache(q) : undefined;
//    var cacheData = this._loadFromCache(q);
    if (cacheData)
    {
        //直接输出
        //        this._outParsedData(cacheData);
        this._handleData(q, cacheData, this.requestId);
    }
    else if ((typeof this.options().url == "string") && (this.options().url.length > 0))
    {
        //确保是最近的请求
        this.requestId += 1;
        if (this.requestId > 5000) {
            this.requestId = 0;
        }
        var thisRequestId = this.requestId;
        // 请求suggest数据  ，需要做一些拼装处理，未完成 songyr

        //   $.get(makeUrl(q), function(data) {
        var _this = this;
        $.getJSON(this._getURL(q),
                function(data)
                {
        			_this.tmpAjaxData = data;
                    //   增加到cache
                    if (_this.options().cache === true) {
                        _this._addToCache(q, data);
                    }	
					if(_this._visible) {
						_this._handleData(q, data, thisRequestId);
					}
                });
    }

};
/**
 * @desc 禁止显示
 * @param {Boolean} visible true 可见
 * @uncrunch
 */
KStdSuggest.prototype.setVisible = function (visible){
	this._visible = typeof visible === 'boolean' ? visible : true;
};

/**
 * 根据参数拼URL
 * @param q
 */
KStdSuggest.prototype._getURL = function(q) {

    /*var tempArray = [];
    tempArray.push(this.options().url, "&a=", this.options().listlimit, "&k=", q);
    return encodeURI(tempArray.join(""));*/
    var hash = new KUrlHash();
    hash.setKey("a", this.options().listlimit);
    hash.setKey("k", q);
    return this.options().url + "&" + hash.toString();
    // return encodeURI(this.options().url + "&k=" + q) + "&a=" + this.options().listlimit /*+ "&s=" + this.options().ajaxmode*/;
};


KStdSuggest.prototype._hideResultsNow = function ()
{
    if (this.hidingResults) {
        return;
    }
    this.hidingResults = true;
    if (this.timeout) {
        clearTimeout(this.timeout);
    }
    if (this._results) {
        this._results.hide();
    }

    this.hidingResults = false;
};

/**
 * 处理SUGGEST接口返回的数据 并输出到页面
 * @param q   用户的输入文字
 * @param data    SUGGEST接口返回的数据
 * @param thisRequestId  请求接口的ID
 */
KStdSuggest.prototype._handleData = function (q, data, thisRequestId)
{
	//格式化数据
	if(this.tmpAjaxData.a && this.tmpAjaxData.a.length == 0){
		KEvent.trigger(this,"nodata",{"dcount" : "0"});
	}else{
		KEvent.trigger(this,"hasdata",{"dcount" :"1"});
	}
    if (thisRequestId == this.requestId && data) {
        /*  var d = jsond.r[6].k.slice(1).split("-")
         jsond.r[6].l.slice(d[0], d[1])*/
        //        var data = this._parseData(data);
        //parsedData 对象？    {text:"",value:""}
        var parsedData;
        if (this.options().preprocessDataFun) {
            parsedData = this.options().preprocessDataFun.fun.call(this.options().preprocessDataFun.thisobj, data);
        } else {
            parsedData = this._parseDataToDom(data);
        }
        //       var ObjData= this._dataToObj(parsedData);

        //将处理好的数据输出到页面
        
        this._outParsedData(parsedData);
    }
};

/**
 * 格式化返回的数据
 * @param data
 * 返回值：liArr数组
 */
KStdSuggest.prototype._parseDataToDom = function (data)
{
    if (!data || !data.a || !data.a.length) {
        return null;
    }
    //    if (this.options().ajaxmode == "html") return data;

    //输出数组
    //    var parsed = {},rows,row;
    var num = data.a.length,row;

    //rows = data.match(/\[.*\]/)[0].match(/\{.*?}/g);
    //    var parsed = [],rows

    /*    for (var i = 0; i < num; i++) {
     row = rows[i].l;
     if (row) {
     var aa = row.match(/'(.*?)'/g);
     parsed[parsed.length] = row.split(",");
     }
     }*/


    // var ul = $("<ul/>");
    /*    if ((this.options().listlimit > 0) && (this.options().listlimit < num))
     {
     num = this.options().listlimit;
     }*/
    //    var ul = document.createElement("ul");
    var liArr = [];
    var _li = $("<li/>"),li;
    for (var i = 0; i < num; i++) {
        row = data.a[i];
        if (!row) continue;
        li = _li.clone();
        //        var li = document.createElement("li");

        //    var a = document.createElement("a");

        //        li.appendChild(a);

        //        a.innerHTML = row.replace(/,/, "<span>").replace(/$/, "</span>");
        // li.selectValue = row[0];
        //        li.innerHTML = row;
        li.attr("kvalue", row.b.a);
        li.attr("zoom", row.b.b);
        li.attr("isbus", row.b.c);
        li.html(row.c);
        //        li.attr("text",row.k);
        liArr.push(li[0]);
        //        ul.appendChild(li);
    }
    return  liArr;
    /*.html() ? ul[0] : null;*/
};

/**
 * 将处理好的数据输出到页面
 * @param data
 */
KStdSuggest.prototype._outParsedData = function (data)
{
    var _this = this;
    if (data) {

        //$input.removeClass(options.loadingClass);
        //        this._results.html("");
        this._results.children().remove();
        // 没有数据或未选
      if (!this.hasFocus || data.length == 0) return this._hideResultsNow();

        //        if ($.browser.msie) {
        //            this._results.css("position", "static");
        //        }
        /*  if (this.options().ajaxmode == "html") {
         this._results.append(data);

         } else {
         this._results.append(this._dataToDom(data));
         }*/

        this._results.append(data);
        //if(KTools.isIE6) $("<li style=\"position:relative;width:0;padding:0;height:0px;font-size:0px;border-left:"+this.options().minwidth+"px solid #FFF;\"></li>").appendTo(this._results);

        var _lis = $("li", this._results);
        $("li", this._results).hover(
                function() {
                    _lis.removeClass(_this._setClassName("S"));
                    $(this).addClass(_this._setClassName("S"));
                    _lis.each(function(index, domEle) {
                        if ($(domEle).hasClass(_this._setClassName("S"))) {
                            _this.active = index;
                            return false;
                        }
                    })
                },
                function() {
                    $(this).removeClass(_this._setClassName("S"));
                }).click(function(e) {
            e.preventDefault();
            e.stopPropagation();
          //  var li = $("li", this._results).filter("." + this._setClassName("S"))[0];
            if(!_this._cookieSug){
            	_this._selectItem(this);
            }
        }).mousedown(function(e) {
        	_this._selectItem(this);
        });
        $(this._results).mousedown(function() {
            _this.mouseDownOnSelect = true;
        }).mouseup(function() {
            _this.mouseDownOnSelect = false;
        });
        this._results.show();
    } else {
        this._hideResultsNow();
    }
};

/**
 * useless by songyr
 *  数据封装为dom结构用以在网页上显示
 * @param data
 */
/*KStdSuggest.prototype._dataToDom = function (data) {

 //   var ul = document.createElement("ul");
 var _this = this;
 var ul = $("<ul/>");
 var num = data.length;
 if ((this.options().listlimit > 0) && (this.options().listlimit < num))
 {
 num = this.options().listlimit;
 }
 for (var i = 0; i < num; i++) {
 var row = data[i];
 if (!row) continue;
 var li = document.createElement("li");
 var a = document.createElement("a");

 li.appendChild(a);

 a.innerHTML = row.replace(/,/, "<span>").replace(/$/, "</span>");
 // li.selectValue = row[0];


 ul[0].appendChild(li);

 */
/* $(li).hover(
 function() {
 $("li", ul).removeClass(this._setClassName("S"));
 $(this).addClass(this._setClassName("S"));
 $("li", ul).each(function(index, domEle)
 {
 if ($(domEle).hasClass(this._setClassName("S")))
 {
 _this.active = index;
 return false;
 }
 })
 },
 function() {
 $(this).removeClass(this._setClassName("S"));
 }).click(function(e) {
 e.preventDefault();
 e.stopPropagation();
 _this._selectItem(this)
 });*/
/*

 }
 */
/*ul.mousedown(function() {
 _this.mouseDownOnSelect = true;
 }).mouseup(function() {
 _this.mouseDownOnSelect = false;
 });*/
/*
 return ul[0];
 };*/


/**
 * 根据q取cache
 * @param q
 */
KStdSuggest.prototype._loadFromCache = function (q)
{
    if (!q) {
        return null;
    }

    /*    if (this.cache.data[q]) {
     //        return $(this.cache.data[q]).removeClass(this._setClassName("S")).toArray();
     return this.cache.data[q];
     }
     return null;*/
    return  this.cache.data[q] ? this.cache.data[q] : null;

};

/**
 * 将数据缓存
 * @param q
 * @param data
 */
KStdSuggest.prototype._addToCache = function (q, data)
{

    if (!data || !q || ! this.options().cachelimit || this.cache[q]) return;
    if (!this.cache.length || this.cache.length < this.options().cachelimit) {
        //  this.clearCache();
        this.cache.length++;
    } else {
        delete  this.cache.data[this.cacheKeyArr[0]];
        this.cacheKeyArr = this.cacheKeyArr.slice(1);
    }

    this.cache.data[q] = data;
    this.cacheKeyArr.push(q);
};

/**
 * 为指定的文本框增加suggest功能
 * @param textbox    Node 类型
 * @param   opts KSuggestOptions 类型。
 */
KStdSuggest._bind = function(textbox, opts)
{

    //    new KStdSuggest(textbox, opts);
    //   var kss=new KStdSuggest(textbox, opts);
    return new KStdSuggest(textbox, opts);


};


/**
 * 为指定的多个文本框增加suggest功能。
 * @param textboxs   Node[] 类型  。
 * @param   opts KSuggestOptions 类型。
 * @uncrunch
 */
KStdSuggest.bind = function(textboxs, opts)
{
    var kssArr = [];
    //textboxs参数是数组
    if (textboxs && textboxs.constructor === window.Array)
    {
        for (var i = 0; i < textboxs.length; i++)
        {
            kssArr.push(KStdSuggest._bind(textboxs[i], opts));
        }

    }
    //textboxs参数是jquery对象
    else if (textboxs && textboxs.jquery)
    {
        textboxs.each(function(i) {
            kssArr.push(KStdSuggest._bind(textboxs.eq(i), opts));
        });
    }
    else
    {
        kssArr.push(KStdSuggest._bind(textboxs, opts));
    }
    return kssArr;

};
/*
 标准选项卡组件。
 作者：pengkun gongyong
 版本：1.0
 创建时间：2010-01-22
 最后修改时间：2010-02-22 16:37
 ============================================
 『修改历史』
 opt# 1010251433
 initlize方法中kvalue取值修改
 opt#1011021023
 完善初始化时对css样式className的支持
 opt#1012011744
 IE6下layout()方法特殊性支持
 */

var KStdTabs = KClass.create("KStdTabs", KTabs);
KStdTabs.conf =
{
    CLASSNAME :
    {
        //设置选项卡顶层容器（div）样式。
        A : "_stb_a"
        //设置非选中的选项卡样式，设置在 ul 标签上（后缀）
        ,US : "_stb_us"
        //设置被选中的选项卡样式，设置在 li 标签上。
        ,S : "_stb_s"
        //设置内容容器（div）样式。
        ,C : "_stb_c"
        //非选中选项卡样式，设置在 li 标签上。
        ,CF : "_stb_cf"
    }
};
/**
 * 构造方法。
 * @param container Node
 * @param opts KStdTabsOptions
 * @uncrunch
 */
KStdTabs.initialize = function(container, opts)
{
    var _this = this;
    //是否是ie6;对contentDom进行hide和show的时候要使用
    _this._isIE6 = ($.browser.msie && parseInt($.browser.version, 10) < 7);
    //定义组件Dom对象。
    this._dom = $(container).get(0);

    //this._opts = KTools.copyOptions(opts, KStdTabsOptions);
    //this.setTheme(this.options().theme);
    _this._opts = {};
	_this.setOptions(KTools.copyOptions(opts, KStdTabsOptions));
    //
    this._tabs = [];
    this._current = null;

    this.headContainer = $(">ul:eq(0)", this._jdom()).eq(0);

    this.contentContainer = this._jdom();
    if (!this.options().userstyle)
    {
        this.headContainer.addClass(this.theme() + KStdTabs.conf.CLASSNAME.US);
        this.contentContainer.addClass(this.theme() + KStdTabs.conf.CLASSNAME.A);
    }
    this.headContainer.children().each(function(i) {
		var jq_this = $(this);
		_this.insert( {
			index : null,
			text : jq_this.attr("text"),
			kvalue : jq_this.attr("kvalue"),
			url : jq_this.attr("url"),
			once : jq_this.attr("once") == "false" ? false : true,
			content : null,
			tabDom : jq_this,
			contentDom : null
		});
	});
  
	if (this.length() > 0) {
		this.select(this.tabs()[0]);
	}
};

/**
 * 返回版本信息。
 * 
 * @return String 版本号字符串。
 * @uncrunch
 */
KStdTabs.prototype.version = function()
{
    return "1.0.2";
};

/**
 * 中文名称描述。
 * @return String
 * @uncrunch
 */
KStdTabs.prototype.cnname = function()
{
    //\u6807\u51c6\u9009\u9879\u5361\u7ec4\u4ef6
    return "标准选项卡组件";
};

/**
 * 返回依赖的其它组件。
 * @return KObject[]
 * @uncrunch
 */
KStdTabs.prototype.dependent = function()
{
    return [KClass,KEvent,KObject,KStdTabsOptions,KTabItem,KTabs,KTools,KWidget,jQuery];
};

/**
 * 增加选项卡。如果设置了item.index属性，则将item增加到index指定的选项卡之前
 * @param item KTabItem
 * @uncrunch
 */
KStdTabs.prototype.insert = function(item)
{
    var _this = this;

    var index = typeof item.index == "number" ? item.index : this._tabs.length;
    index = Math.min(this._tabs.length, Math.max(0, index));
    item.index = index;

    if (index >= this.length())
    {
        this._tabs.push(item);
    }
    else
    {
        this._tabs = $.map(this._tabs, function(obj, i) {
            if (i == index)
            {
                return [item, obj];
            }
            else
            {
                return obj;
            }
        });
    }

    this._index();
    var tabDom = null;
    var contentDom = null;
    //    var isLoad = false;
    if (!item.tabDom)
    {
        tabDom = this.getHeadDom(item);
        contentDom = this.getContentDom(item);
    }
    else
    {
        tabDom = $(item.tabDom);
    }

    var url = item.url;
    if (url)
    {
        if (!this.isAjax(item))
        {
            contentDom = $(url);
        }
        else
        {
            contentDom = this.getContentDom(item);
        }
    }
    else
    {
        contentDom = this.getContentDom(item);
    }

    this._addContentDomStyle(contentDom);

    this._setItemExtend(item, {
        tabDom : tabDom
        ,contentDom : contentDom
        ,isLoad : false
    });

    if (this.headContainer.children().length == 0)
    {
        this.headContainer.append(tabDom);
        this.contentContainer.append(contentDom);
    }
    else
    {
        if (this.headContainer.children().eq(Math.max(index - 1, 0)).get(0) != tabDom.get(0))
        {
            if (index > 0)
            {
                this.headContainer.children().eq(Math.max(index - 1, 0)).after(tabDom);
            }
            else
            {
                this.headContainer.children().eq(Math.max(index - 1, 0)).before(tabDom);
            }
        }

        if (this.contentContainer.children("div").eq(Math.max(index - 1, 0)).get(0) != contentDom.get(0))
        {
            if (index > 0)
            {
                this.contentContainer.children("div").eq(Math.max(index - 1, 0)).after(contentDom);
            }
            else
            {
                this.contentContainer.children("div").eq(Math.max(index - 1, 0)).before(contentDom);
            }
        }
    }

    tabDom.bind("click", function(event) {
        _this.select(item);
    });

    if (item.selected) {
        this.select(item);
    }
};

/**
 * 删除选项卡，忽略index参数时，将清空所有项目
 * @param index Integer
 * @uncrunch
 */
KStdTabs.prototype.remove = function(index)
{
    if (typeof index == "undefined")
    {
        this.clear();
        return;
    }
    var item = this._getItemByParam(index);
    if (item)
    {
        this._tabs = $.grep(this._tabs, function(obj, i) {
            return obj == item;
        }, true);

        if (this.current() == item)
        {
            this._current = null;
        }

        this._delItemExtend(item);

        this._index();
    }
};


/**
 * 设置组件的样式方案
 * 
 * @param scheme
 * @uncrunch
 */
KStdTabs.prototype.setTheme = function(scheme) {
	var _this = this;
	var oldTheme = _this._theme;
	if (typeof _this._opts.userstyle !== "boolean") {
		_this._opts.userstyle = false;
	}
	if (_this._opts.userstyle === true || oldTheme === scheme) {
		return;
	}
	if (typeof _this._theme !== "string") {
		_this._theme = "mwp";
		_this._opts.theme = "mwp";
	}
	
	var klass = KStdTabs.conf.CLASSNAME;
	if (_this.headContainer) {
		_this.headContainer.removeClass(oldTheme + klass.US).addClass(scheme + klass.US).removeClass(
				oldTheme + klass.CF).addClass(scheme + klass.CF);
	}
	if (_this.contentContainer) {
		_this.contentContainer.removeClass(oldTheme + klass.A).addClass(scheme + klass.A);
	}
	var len = _this.length();
	var item = null;
	for ( var i = 0; i < len; i++) {
		item = _this._getItemByParam(i);
		if (_this._current && i == _this._current.index) {
			item.tabDom.removeClass(oldTheme + klass.S).addClass(scheme + klass.S);
		} else {
			item.tabDom.removeClass(oldTheme + klass.CF).addClass(scheme + klass.CF);
		}

		item.contentDom.removeClass(oldTheme + klass.C).addClass(scheme + klass.C);
	}
	_this._theme = scheme;
	_this._opts.theme = scheme;
};


/**
 * 隐藏选项卡
 * 
 * @param index
 *            Integer
 * @uncrunch
 */
KStdTabs.prototype.hideTab = function(index)
{
    var item = this._getItemByParam(index);
    if (item)
    {
        if (this._isHide(item)) {
            return;
        }

        var itemExtend = this._getItemExtend(item);
        itemExtend.tabDom.hide();
        this._hideContentDom(itemExtend.contentDom);

        if (this.current() == item) {
            for (var i = 0; i < this.length(); i++) {
                if (!this._isHide(i)) {
                    this.select(i);
                    break;
                }
            }
        }
    }
};

/**
 * 显示选项卡
 * @param index Integer
 * @uncrunch
 */
KStdTabs.prototype.showTab = function(index)
{
    var item = this._getItemByParam(index);
    if (item)
    {
        var itemExtend = this._getItemExtend(item);
        itemExtend.tabDom.show();
        if(this.current()===item){
        	this._showContentDom(itemExtend.contentDom);
        }
    }
};
/**
 * 设置选项卡状态为非选中状态
 * @param index Integer
 * @uncrunch
 */
KStdTabs.prototype.unselect = function(index)
{
    var item = this._getItemByParam(index);
    if (!item) return;
    var itemExtend = this._getItemExtend(item);
    this._hideContentDom(itemExtend.contentDom);
    if (this.current() == item)
    {
        this._current = null;
    }

    //样式处理（className） begin
    if (!this.options().userstyle)
    {
        itemExtend.tabDom.removeClass(this.theme() + KStdTabs.conf.CLASSNAME.S).removeClass(
				this.theme() + KStdTabs.conf.CLASSNAME.CF).addClass(this.theme() + KStdTabs.conf.CLASSNAME.CF);
    }
    // 样式处理（className） end
};

/**
 * 设置选项卡状态为非选中状态
 * 
 * @param index
 *            Integer
 * @uncrunch
 */
KStdTabs.prototype.select = function(index)
{
    var item = this._getItemByParam(index);
    if (!item) return;

    if (item.url == "fun") {
        KEvent.trigger(this, "funtab", this, item);
        return;
    }

    if (this._isHide(item)) {
        this.showTab(item);
    }

    if (item == this.current())
    {
        if (this.current() && this.options().collapse)
        {
            this.unselect(this.current());
        }
        return;
    }

    var oldItem = this.current();
    if (this.current())
    {
        this.unselect(this.current());
    }
    var itemExtend = this._getItemExtend(item);
    this._addContentDom(itemExtend);
    var len= this.length();
    if (typeof index !== "number") {
		index = index.index;
	}
    for ( var i = 0; i < len; i++) {
		if (i !== index) {
			this._hideContentDom(this._getItemByParam(i).contentDom);
		}
	}
	this._showContentDom(itemExtend.contentDom);

    this._current = item;
    //样式处理（className） begin
    if (!this.options().userstyle)
    {
        var className = this.theme() + KStdTabs.conf.CLASSNAME.S;
        itemExtend.tabDom.removeClass(this.theme() + KStdTabs.conf.CLASSNAME.CF).removeClass(className).addClass(
				className);
    }
    // 样式处理（className） end


    KEvent.trigger(this, "selected", this, oldItem, item);
};
/**
 * 获取默认headDom
 * @param item KTabItem
 * @return jQuery
 */
KStdTabs.prototype.getHeadDom = function(item)
{	
    //return $("<li/>").html(item.text);
	return $("<li/>").html('<a href="javascript:void(0)">'+item.text+'</a>');
};
/**
 * 获取默认contentDom
 * @param item KTabItem
 * @return jQuery
 */
KStdTabs.prototype.getContentDom = function(item)
{
    return $("<div/>").html(item.content || "").hide();
};
/**
 * 清空item
 */
KStdTabs.prototype.clear = function()
{
    for (var i = 0; i < this._tabs.length; i++)
    {
        this._delItemExtend(this._tabs[i]);
        this._tabs[i] = undefined;
    }
    this._current = null;
    this._tabs.length = 0;
};
/**
 * 判断是否为远程内容
 * @param item KTabItem
 * @return Boolean
 */
KStdTabs.prototype.isAjax = function(item)
{
    if (item.url)
    {
        return new RegExp("^[^#]", "g").test(item.url);
    }
    else
    {
        return false;
    }
};
/**
 * 根据item取item的index
 * @param item KTabItem
 * @return Boolean
 */
KStdTabs.prototype.getIndexByItem = function(item)
{
    for (var i = 0; i < this._tabs.length; i++)
    {
        if (item == this._tabs[i])
        {
            return i;
        }
    }
    return -1;
};
/**
 * 设置item的扩展object
 * @param item KTabItem
 * @param itemExtend Object
 */
KStdTabs.prototype._setItemExtend = function(item, itemExtend)
{
    $.extend(item, itemExtend);
};
/**
 * 获取item的扩展object
 * @param item KTabItem
 * @return KTabItem
 */
KStdTabs.prototype._getItemExtend = function(item)
{
    return item;
};
/**
 * 删除item的扩展object
 * @param item KTabItem
 */
KStdTabs.prototype._delItemExtend = function(item)
{
    var itemExtend = this._getItemExtend(item);
    if (itemExtend)
    {
        itemExtend.tabDom.remove();
        itemExtend.tabDom = undefined;
        itemExtend.contentDom.remove();
        itemExtend.contentDom = undefined;
    }
    itemExtend = undefined;
};
/**
 * 重新生成编号
 */
KStdTabs.prototype._index = function()
{
    //重新生成编号
    $.each(this._tabs, function(i, item) {
        item.index = i;
    });
};
/**
 * 获取下一个Item
 * @param item KTabItem
 * @return KTabItem
 */
KStdTabs.prototype.getNextItem = function(item)
{
    var index = this.getIndexByItem(item) + 1;
    if (index >= this.tabs().length)
    {
        index = 0;
    }
    return this.tabs()[index];
};
KStdTabs.prototype._getItemByParam = function(index)
{
    if (typeof index == "number")
    {
        return this.tabs()[index];
    }
    else if (typeof index == "object")
    {
        return index;
    }
    return null;
};

/**
 * 设置组件选项
 * @param opts KStdTabsOptions
 * @uncrunch
 */
KStdTabs.prototype.setOptions = function(opts)
{
    var _this = this;
	opts = KTools.copyOptions(opts, _this._opts);
	var diffOpts = KTools.compareOptions(this._opts, opts);
	$.each(diffOpts, function(name, value) {
		if (name === 'userstyle') {
			_this._setUserStyle(value);
		} else if (name === 'theme') {
			_this.setTheme(value);
		} else if (name === 'collapse') {
			(typeof value === "boolean") && (_this._opts.collapse = value);
		}
	});
};


KStdTabs.prototype._setUserStyle = function(bStyle) {
	var _this = this;
	if (typeof bStyle !== "boolean") {
		return;
	}
	if (bStyle === true) {
		var oldTheme = _this._theme || "mwp";
		var klass = KStdTabs.conf.CLASSNAME;
		var len = _this.length();
		var item = null;
		//
		if (_this.headContainer) {
			_this.headContainer.removeClass(oldTheme + klass.US).removeClass(oldTheme + klass.CF);
		}
		if (_this.contentContainer) {
			_this.contentContainer.removeClass(oldTheme + klass.A);
		}

		for ( var i = 0; i < _this.length(); i++) {
			item = _this._getItemByParam(i);
			if (_this._current && i == _this._current.index) {
				item.tabDom.removeClass(oldTheme + klass.S);
			} else {
				item.tabDom.removeClass(oldTheme + klass.CF);
			}
			item.contentDom.removeClass(oldTheme + klass.C);
		}

		_this._opts.theme = null;
		_this._theme = null;
	}
	_this._opts.userstyle = bStyle;
};

/**
 * 释放组件资源
 * 
 * @uncrunch
 */
KStdTabs.prototype.finalize = function()
{
    KWidget.prototype.finalize.apply(this);
};
/**
 *通知组件重新布局。比如，当窗口尺寸发生变化后需要进行此项操作。
 * 
 * @uncrunch
 */
KStdTabs.prototype.layout = function()
{
    var height = this._jdom().parent().outerHeight();
    /***勿删开始***/
    if(KTools.isIE6){
    	var temp  = parseInt(this._jdom().parent().css("height"), 10);
    	if(!isNaN(temp) || temp>0){
    		height = temp;
    	}
    }
    /***勿删结束***/
    var p_b = (this._jdom().outerHeight() - this._jdom().height());
    this._jdom().height(height - p_b);
    var j_b = (this._jdom().outerHeight() - this._jdom().height());
    var h = height - j_b - this.headContainer.outerHeight();
    var current = this.current();
    var border = (current.contentDom.outerHeight()-current.contentDom.height());
    var z_height = h - border;
    var tabs = this.tabs();
    for(var i = 0;i<tabs.length;i++){
        tabs[i].contentDom.height(z_height);
    }
    
};

KStdTabs.prototype._isHide = function(index)
{
    var item;
    if (typeof index == "number") {
        item = this._getItemByParam(index);
    }
    else if (typeof index == "object") {
        item = index;
    }
    else {
        return false;
    }

    if (item.tabDom.css("display") == "none" && item.contentDom.css("display") == "none") {
        return true;
    }
    return false;
};

KStdTabs.prototype._jdom = function()
{
    if (this._dom) {
        return $(this._dom);
    }
};

KStdTabs.prototype._addContentDom = function(item)
{
    var _this = this;
    if(this.isAjax(item)){
        //如果没有加载则加载之; 如果已经加载，但不是只加载一次，则重新加载之
        if(!item.isLoad||!item.once){
            $.ajax({
                url : item.url
                ,type : 'GET'
                ,cache:false
                ,dataType : 'html'
                ,success : function(data){
            		_this._addDataLoadedEvent(item,data);
                    item.contentDom.empty().append(data);
                    _this._addDataShownEvent(data, item.contentDom);
                }
            });
            //没有加载
            if(!item.isLoad){
            	item.isLoad = true;
            }
        }
        /*/如果已经加载，但不是只加载一次，则重新加载之
        else if(!item.once){
            $.ajax({
                url : item.url
                ,type : 'GET'
                ,cache:false
                ,dataType : 'html'
                ,success : function(data){
            		_this._addDataLoadedEvent(item,data);
                    item.contentDom.empty().append(data);
                    _this._addDataShownEvent(data, item.contentDom);
                }
            });
        }*/
    }
};

KStdTabs.prototype._addContentDomStyle = function(contentDom) {
    //增加样式（className） begin
    if (!this.options().userstyle)
    {
        contentDom.addClass(this.theme() + KStdTabs.conf.CLASSNAME.C);
    }
    //增加样式（className） end
};


KStdTabs.prototype._addDataShownEvent = function(data,contentDom) {
    KEvent.trigger(this, "datashown", this, data, contentDom[0]);
};
KStdTabs.prototype._addDataLoadedEvent=function(item, data){
	  KEvent.trigger(this, "dataloaded", this, item, data);
};
/**
 * 针对ie6的bug, 对hide进行封装, KStdTabs的ContentDom专用
 * 
 * @param $dom
 *            jQuery包裹的dom对象
 * @returns
 */
KStdTabs.prototype._hideContentDom = function($dom) {
	$dom.hide();
	if (this._isIE6) {
		$dom.css( {
			"visibility" : "hidden"
		});
	}
};
/**
 * 针对ie6的bug, 对show进行封装，KStdTabs的ContentDom专用
 * 
 * @param $dom
 *            jQuery包裹的dom对象
 * @returns
 */
KStdTabs.prototype._showContentDom = function($dom) {
	$dom.show();
	if (this._isIE6) {
		$dom.css( {
			"visibility" : "visible"
		});
	}
};
/* 
 初始化默认变量
 */
    /**
	 * 该文件完成部分options属性的相互使用 此不可删除
	 */
	//options_link_start
	KMapOptions.overview = KMapCtrlState.NORMAL;//KMapOptions KMapCtrlState
	KMapOptions.fishbone = KMapCtrlState.NORMAL;//KMapOptions KMapCtrlState
	KSearchboxOptions.demopos = KPosition.BOTTOM;//KSearchboxOptions KPosition
	if (typeof DEFAULT_MAX_ZOOM_LEVEL != 'undefined'){KDirMarkOptions.minlevel = DEFAULT_MAX_ZOOM_LEVEL - 2;KDirMarkOptions.maxlevel = DEFAULT_MAX_ZOOM_LEVEL;}//KDirMarkOptions
	KLabelOptions.pos = KPosition.RIGHT;//KLabelOptions KPosition
	if (typeof MPoint != 'undefined') KMapOptions.center = new MPoint("\u5317\u4eac\u5e02");//KMapOptions
	KSendOptions.sendtype = KSendType.all;//KSendOptions KSendType
	KDirMarkStyleOptions.size = KBrushOptions.width * 4;//KDirMarkStyleOptions KBrushOptions
	KDirMarkStyleOptions.transparency = KBrushOptions.transparency;//KDirMarkStyleOptions KBrushOptions
    KPOInfo.type = KPOIType.NORMAL;//KPOInfo KPOIType
	KLineOptions.brush = $.extend({}, KBrushOptions);//KLineOptions
	KLineOptions.hiliteBrush = $.extend({color:'#00ff00',bgcolor:'#00ff00'}, KBrushOptions);//KLineOptions //KBrushOptions
	KAreaOptions.brush = KLineOptions.brush;//KAreaOptions KLineOptions
	KAreaOptions.hiliteBrush = KLineOptions.hiliteBrush;//KAreaOptions KLineOptions
    KDialogOpenOptions.pos = KDialogOptions.dragrange;//KDialogOpenOptions KDialogOptions
	KFeedbackInfo.type = KFeedbackType.POI_ERROR;//KFeedbackType KFeedbackInfo
	KFeedbackInfo.errortype = KFBErrorType.INFO;//KFBErrorType KFeedbackInfo
    //options_link_end
	
	
	if(typeof KConfig != "undefined")
    {
		KConfig.set("PROXY", "");
		KConfig.set("DEFAULT_ICON", $.extend({}, KIconOptions));//KIconOptions
		KConfig.set("DEFAULT_LABEL", $.extend({}, KLabelOptions));//KLabelOptions
		KConfig.set("INFOWINDOW_SIZE", new KSize(100, 100));//KSize
		KConfig.set("LINE_BRUSH", KLineOptions.brush);//KLineOptions
		KConfig.set("LINE_HILITE_BRUSH", KLineOptions.hiliteBrush);//KLineOptions
		KConfig.set("COOKIE", $.extend({}, KCookieOptions));//KCookieOptions
		KConfig.set("LISTENER_INTERVAL", 200);

        //opt# 1009281140 fix begin
        //add by panx
        KConfig.set("mwpf", "wf");
        //opt# 1009281140 fix end

		//通用区
        KConfig.set("iw_cm", '<div class="mwpg_i" style="width:370px;"><div class="mwpg_ic"></div><div class="mwpg_iw" id = "infowin_cm"><div><ul><li><a href="javascript:void(0);">到达这里</a></li><li><a href="javascript:void(0);">从这里出发</a></li><li class="mwpg_iw_s"><a href="javascript:void(0);">查找周边</a></li></ul><div class="mwpg_iw_c"><form onsubmit="return false;"><em>起点</em><input class="mwpg_iw_kw mwpg_iw_kw_to" type="text" /><input class="mwpg_iw_sm" type="button" value="查公交" /><input class="mwpg_iw_sm" type="button" value="查驾车" /></form></div><div class="mwpg_iw_c"><form onsubmit="return false;"><em>终点</em><input class="mwpg_iw_kw mwpg_iw_kw_from" type="text" /> <input class="mwpg_iw_sm" type="button" value="查公交" /><input class="mwpg_iw_sm" type="button" value="查驾车" /></form></div><div class="mwpg_iw_c mwpg_iw_cs"><form><em>附近的</em><input class="mwpg_iw_kw mwpg_iw_kw_nb" type="text" /> <input class="mwpg_iw_sm" type="submit" value="搜索" /></form></div></div><div style="height:25px;"></div></div></div>');

        //标准POI气泡内容区模板
        KConfig.set("iw_iwo_poi", {
        	content:'<div class="mwpg_poiw_ca"><div class="mwpg_poiw_caI"><img mfg="pic"/></div><div class="mwpg_poiw_caW">[pr]<p>[c]</p><p>[d]</p>[e]<div class="mwpg_poiw_caV"><a href="javascript:void(0);"  mfg="fs">免费发送</a><span>\|</span><a href="javascript:void(0);" mfg="xlwb">分享到微博</a><span>\|</span><a href="javascript:void(0);" mfg="tbsc">收藏</a><span>\|</span><a href="javascript:void(0);" mfg="err">纠错</a></div><div id="google_ads" style="height:0px;"></div></div></div>'
//            content:'<div class="mwpg_poiw_ca"><div class="mwpg_poiw_caI"><img mfg="pic"/></div><div class="mwpg_poiw_caW">[pr]<p>[c]</p><p>[d]</p>[e]<div class="mwpg_poiw_caV"><a href="javascript:void(0);"  mfg="fs">免费发送</a><span>\|</span><a href="javascript:void(0);" mfg="xlwb">分享到微博</a><span>\|</span><a href="javascript:void(0);" mfg="tbsc">收藏</a><span>\|</span><a href="javascript:void(0);" mfg="err">纠错</a><a target="_blank" mfg="djd" href="[djdurl]" style="display:[djd]" class="mwp_iw_oh">订酒店</a><a target="_blank" mfg="djp" href="[djpurl]" style="display:[djp]" class="mwp_iw_ot">订机票</a><a target="_blank" mfg="shrl" href="http://s.mapbar.com/nMVDOax" class="mwp_iw_ot" >商户认领</a></div><div id="google_ads" style="height:0px;"></div><div class="mwp_ls_a_hotel_tip">预定周边酒店请拨打：<span>400-890-9817</span>（7X24小时）</div></div></div>'
        });
       //标准POI气泡内容区模板,有poi详情的
        KConfig.set("iw_iwo_poi_detail", {
        	content:'<div class="mwpg_poiw_ca"><div class="mwpg_poiw_caI"><img mfg="pic"/></div><div class="mwpg_poiw_caW">[pr]<p>[c]</p><p>[d]</p>[e]<div class="mwpg_poiw_caV"><a href="javascript:void(0);"  mfg="fs">免费发送</a><span>\|</span><a href="javascript:void(0);" mfg="xlwb">分享到微博</a><span>\|</span><a href="javascript:void(0);" mfg="tbsc">收藏</a><span>\|</span><a href="javascript:void(0);" mfg="err">纠错</a></div><div mfg="poid" style="height:170px;" class="mwp_subPop_box">[poi_detail]</div><div id="google_ads" style="height:0px;"></div></div></div>'
        });
		//酒店POI气泡内容区模板
		KConfig.set("iw_iwo_hotel", {
			content:'<div class="mwpg_poiw_ca"><div class="mwpg_poiw_caI" style="width:93px;height:70px;"><img mfg="pic" width="93" height="70" style="width:93px;height:70px;display:none;"/></div><div class="mwpg_poiw_caW"><p>[c]<br/>[d]</p><div class="mwpg_poiw_caV"><a href="javascript:void(0);"  mfg="fs">免费发送</a><span>\|</span><a href="javascript:void(0);" mfg="xlwb">分享到微博</a><span>\|</span><a href="javascript:void(0);" mfg="tbsc">收藏</a><span>\|</span><a href="javascript:void(0);" mfg="err">纠错</a></div></div></div><div mfg="hotel" class="mwpg_poiw_h">[hotel]</div><div style="display:[ad_v]" class="mwpg_poiw_h_AD"><b></b><span>[ad]</span></div>'
        });
		
		//加油站叠加层气泡内容区模板
		KConfig.set("iw_iwo_gasoline", {
			content:'<div class="mwpg_poiw_ca"><div class="mwpg_poiw_caI" style="width:93px;height:10px;"><img mfg="pic" width="93" height="70" style="width:93px;height:70px;display:none;"/></div><div class="mwpg_poiw_caW"><p>[c]<br/>[d]</p></div></div><div mfg="ylprice" class="mwpg_poiw_lyp">[hotel]</div>'
			
		});
		
		//步行或驾车步骤气泡内容区
        KConfig.set("iw_iwo_wk", {
            content:'<div class="mwpg_mkiw_ia" style="height:148px;"><img mfg="pic" style="height:148px;display:none;" /></div><div class="mwpg_mkiw_da"><p>[t]</p><div class="mwpg_mkiw_oa"><a class="mwpg_mkiw_pre" href="javascript:void(0);" mfg="prev">上一步</a><a class="mwpg_mkiw_nxt" href="javascript:void(0);" mfg="next">下一步</a></div></div>'
        });
		//公交站点内容区模板
        KConfig.set("iw_iwo_st", {
        	content:'<div class="mwpg_btiw_ca"><div class="mwpg_btiw_caI"><img mfg="pic" width="70" height="70" style="margin:0;padding:0;display:none"/></div><div class="mwpg_btiw_caW"><p style="display:[cd]">[c]<br/>[d]</p><dl><p><a mfg="bl" href="[h]" target="_blank" style="display:[v]">查看途经的公交车</a></p></dl><div class="mwpg_btiw_caO"><a href="javascript:void(0);" mfg="fs" style="display:[fs]"><b class="mwpg_ic_oS"><span></span></b>发送</a><a href="javascript:void(0);" mfg="err" style="display:[err]"><b class="mwpg_ic_oC"><span></span></b>纠错</a></div><div class="mwpg_btiw_c mwpg_btiw_cs" style="display:[nb]" mfg="nb"><form onsubmit="javascript:return false;">附近的<input class="mwpg_btiw_kw" style="width:188px;" type="text" /><input class="mwpg_btiw_sm" type="submit" value="搜索" /></form><p class="mwpg_btiw_sh"><span>热搜：</span><a href="javascript:void(0);">餐馆</a>&nbsp;<a href="javascript:void(0);">超市</a>&nbsp;<a href="javascript:void(0);">银行</a>&nbsp;<a href="javascript:void(0);">宾馆</a>&nbsp;<a href="javascript:void(0);">大厦</a>&nbsp;<a href="javascript:void(0);">公交站</a></p></div></div></div>'
        });

		//地图鼠标提示信息默认样式。 
        KConfig.set('map_s_ct', '<div class="mwpg_map_ct">[n]</div>');
 		//序号标注图标文件地址配置
        KConfig.set("mk_s_sns", 'http://img.mapbar.com/web/3in1/icons/[h]n[a].png');
		//序号标注，在标注上显示1-10数字。
        KConfig.set("mk_mo_sn", {
            icon : {img:'<div class="mwpg_sn mwpg_snnc[a]"><span></span></div>',shadow : '<div class="mwpg_sn_s"><span></span></div>',size : new KSize(27,36),anchor : new KPoint(12,38),shadowSize : new KSize(20,12), snapIcon:KConfig.get("mk_s_sns", {h:""})}
        });
		//序号标注正常状态样式名称
        KConfig.set("mk_s_snn", 'mwpg_sn mwpg_snnc[a]');
		//序号标注高亮状态样式名称，
        KConfig.set("mk_s_snh", 'mwpg_sn mwpg_snhc[a]');
        
        
        
        
       //认证序号标注图标文件地址配置
        KConfig.set("mk_s_snstg", 'http://img.mapbar.com/web/3in1/icons/[h]n[a].png');
        //认证序号标注，在标注上显示1-10数字。
        KConfig.set("mk_mo_sntg", {
            icon : {img:'<div class="mwpg_sntg mwpg_sntgnc[a]"><span></span></div>',shadow : '<div class="mwpg_sn_s"><span></span></div>',size : new KSize(27,36),anchor : new KPoint(12,38),shadowSize : new KSize(20,12), snapIcon:KConfig.get("mk_s_snstg", {h:""})}
        });
		//认证序号标注正常状态样式名称
        KConfig.set("mk_s_snntg", 'mwpg_sntg mwpg_sntgnc[a]');
		//认证序号标注高亮状态样式名称，
        KConfig.set("mk_s_snhtg", 'mwpg_sn mwpg_sntghc[a]');
        
        
        
		//中心点标注
        KConfig.set("mk_mo_ct", {
        	icon:{img:'<div class="mwpg_ct"><span></span></div>',size : new KSize(26,30),anchor : new KPoint(13,26),snapIcon:'http://img.mapbar.com/web/3in1/icons/cp.png'}
        });
        
      //右键菜单周边查标注
        KConfig.set("mk_mo_mnct", {
            icon:{img:'<div class="mwpg_ct"><span></span></div>',size : new KSize(26,30),anchor : new KPoint(13,26),snapIcon:'http://img.mapbar.com/web/3in1/icons/cp.png'}
        });
        
		//带名称的起点、终点、途经点标注,图标文件地址配置
        KConfig.set("mk_s_sdts", 'http://img.mapbar.com/web/3in1/icons/[t]p.png');
		//带名称的起点、终点、途经点标注(公交)
        KConfig.set("mk_mo_sdt", {
            icon : {img:'<div class="mwpg_std_[t]"><span></span></div>',shadow : '<div class="mwpg_std_sd"><span></span></div>',size : new KSize(25,33),anchor : new KPoint(12.5,33),shadowSize : new KSize(20,12),snapIcon:KConfig.get("mk_s_sdts")}
            ,label:{label:'<div class="mwpg_std_[t]l" mfg="lbl">[n]</div>',anchor : new KPoint(30,2)}
        });
		//带名称的起点、终点、途经点标注,样式名称模板
        KConfig.set("mk_s_sdtn", 'mwpg_std_[t]');
		//带名称的起点、终点、途经点标注，标签样式名称模板。
        KConfig.set("mk_s_sdtln", 'mwpg_std_[t]l');
		//不带名称的起终点标注(公交)
        KConfig.set("mk_mo_sd", {
            icon:{img:'<div class="mwpg_sd_[t]"><span></span></div>', size : new KSize(23,32),anchor : new KPoint(11.5,30),snapIcon:'http://img.mapbar.com/web/3in1/icons/[t]pl.png'}
        });
		//公交地铁站点标注
        KConfig.set("mk_mo_s", {
            icon:{img:'<div class="mwpg_s_w"></div>', size : new KSize(10,10),anchor : new KPoint(5,5),snapIcon:'http://img.mapbar.com/web/3in1/icons/swp.png'}
            ,label:{label:'<div class="mwpg_s_wl"><div class="mwpg_s"><div class="mwpg_s_i[t]"></div><div class="mwpg_s_s">[n]</div></div></div>', anchor : new KPoint(8, -26)}
        });
        
      //本地搜公交地铁站点标注
        KConfig.set("mk_mo_lss", {
            icon:{img:'<div class="mwpg_s_w"></div>', size : new KSize(10,10),anchor : new KPoint(5,5),snapIcon:'http://img.mapbar.com/web/3in1/icons/swp.png'}
        });
        
		//公交地铁站点标注，正常状态样式名称模板
        KConfig.set("mk_s_sw", 'mwpg_s_w');
		//公交地铁站点标注，高亮状态样式名称模板
        KConfig.set("mk_s_sh", 'mwpg_s_w mwpg_s_h');
		//公交换乘标注
        KConfig.set("mk_mo_bs", {
            icon:{img:'<div class="mwpg_bs_t"><span></span></div>', size : new KSize(20,20),anchor : new KPoint(10,10),snapIcon:'http://img.mapbar.com/web/3in1/icons/tp.png'}
        });
		//导航途经点标注
        KConfig.set("mk_mo_m", {
            icon:{img:'<div class="mwpg_m"><span></span></div>', size : new KSize(11,11),anchor : new KPoint(5.5,5.5),snapIcon:'http://img.mapbar.com/web/3in1/icons/nwp.png'}
            ,label:{label:'<div class="mwpg_m_l"><div class="mwpg_m_lc"><span mfg="lbl">[n]</span><a href="javascript:void(0);" title="撤消拖拽" mfg="ncc"></a></div></div>', anchor : new KPoint(9, -26)}
            ,bouncy : false
        });
		//20x20尺寸的图标标注
        KConfig.set("mk_mo_20", {
            icon:{img:'<div class="mwpg_20"><span class="mwpg_20_[t]"></span></div>',size : new KSize(20,20),anchor : new KPoint(10,10),snapIcon:'http://img.mapbar.com/web/3in1/icons/[t].png'}
            ,label:{label:'<div class="mwpg_20_l" mfg="lbl">[n]</div>', anchor : new KPoint(20, 1)}
            ,hoverLabel:true
        });

		//	公交换乘结果，折线笔刷配置。 
        KConfig.set("ln_lo_bss", {
            brush:{color:"#0000ff", overlap:true, width:5, transparency:80}
            ,hiliteBrush:{color:"#ff0000", overlap:true, width:6, transparency:80}
        });
		//公交线路结果，折线笔刷配置。 
        KConfig.set("ln_lo_bsl", {
            brush:{color:"#0000ff", overlap:true, width:5, transparency:80}
        });
		//公交站点结果，折线笔刷配置。 
        KConfig.set("ln_lo_bst", {
            brush:{color:"#0000ff", overlap:true, width:5, transparency:80}
        });
		//驾车换乘结果，折线笔刷配置。 
        KConfig.set("ln_lo_navs", {
            brush:{color:"#0000ff", overlap:true, width:6, transparency:80}
            ,hiliteBrush:{color:"#ff0000", overlap:true, width:6, transparency:80}
        });
		//驾车换乘结果沿路画线临时折线，笔刷配置。 
        KConfig.set("ln_lo_navd", {
            brush:{color:"#00FF00", overlap:true, width:5, transparency:80}
        });
		//公交步行折线，笔刷配置
		KConfig.set("ln_lo_wk", {
            brush:{color:"#cc00ff", overlap:true, width:5, transparency:80}
        });
		//公交预览折线，笔刷配置
		KConfig.set("ln_lo_gray", {
			brush:{color:"#969495", overlap:true, width:5, transparency:80}
		});
		//added by zy, 公交换乘地铁口出入虚直线，笔刷配置
		KConfig.set("ln_lo_subWalk", {
			brush:{color:"#cc00ff", overlap:true, width:6, dashed : true, transparency:80}
		});
		//地图标记系列小图标
		KConfig.set("mk_mo_mm", {
            icon:{img:'<div class="mwpg_mm_[row][col]"></div>', size : new KSize(18,25),anchor : new KPoint(10,26)}
        });
        
		/**地图标记组件 - 标注气泡**/
		//infowin
		KConfig.set("iw_iwo_mmp", {
			content:'<div class="mwpg_mm"><div mfg="ep"><div class="mwpg_mm_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_mm_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_mm_bss" href="javascript:void(0);" title="更改样式"><div class="mwpg_mm_11"></div></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_mm_ii"></textarea></td></tr><tr style="display:none"><th>图片</th><td colspan="2"><form mfg="ep_frm" enctype="multipart/form-data" method="post"><input name="[ep_frm_fn]" mfg="ep_frm_f" type="file"/><p>图片支持格式png,jpg,jpeg</p><input type="submit" style="display:none;"/></form><div class="mwpg_mm_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_mm_ea"><input mfg="ep_s" class="mwpg_mm_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_mm_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df" style="display:none;"><div class="mwpg_mm_i"><div class="mwpg_mm_ip"><img mfg="df_f" src="[df_fs]" /></div><p mfg="df_i"></p></div><div class="mwpg_mm_na"><a mfg="df_e" class="mwpg_mm_be" href="javascript:void(0);">编辑</a><a mfg="df_d" class="mwpg_mm_bd" href="javascript:void(0);">删除</a></div><div class="mwpg_mm_ims" mfg="de_s"><ul><li><a href="javascript:void(0);">到达这里</a></li><li><a href="javascript:void(0);">从这里出发</a></li><li class="mwpg_mm_is"><a href="javascript:void(0);">查找周边</a></li></ul><div class="mwpg_mm_imc"><form>从<input class="mwpg_mm_kw" style="width:100px;" type="text" />到这里 <input class="mwpg_mm_sm" type="button" value="查公交" /><input class="mwpg_mm_sm" type="button" value="查驾车" /></form></div><div class="mwpg_mm_imc"><form>终点<input class="mwpg_mm_kw" style="width:100px;" type="text" /><input class="mwpg_mm_sm" type="button" value="查公交" /><input class="mwpg_mm_sm" type="button" value="查驾车" /></form></div><div class="mwpg_mm_imc mwpg_mm_imcs"><form>附近的<input class="mwpg_mm_kw" style="width:173px;" type="text" /><input class="mwpg_mm_sm" type="submit" value="搜索" /></form></div></div></div><div mfg="se" style="display:none;"><ul mfg="se_c" class="mwpg_mm_sl"><li><a href="javascript:void(0);"><div class="mwpg_mm_11"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_12"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_13"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_14"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_15"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_16"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_21"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_22"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_23"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_24"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_25"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_26"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_31"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_32"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_33"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_34"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_35"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_36"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_41"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_42"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_43"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_44"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_45"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_46"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_51"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_52"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_53"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_54"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_55"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_56"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_61"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_62"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_63"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_64"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_65"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_66"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_71"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_72"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_73"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_74"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_75"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_76"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_81"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_82"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_83"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_84"></div></a></li></ul><div class="mwpg_mm_sa"><a class="mwpg_mm_br" mfg="se_b" href="javascript:void(0);">&lt;&lt;返回上一级</a></div></div></div>'
			,cmarea:false
        });
		/**地图标记组件 - 标注气泡  flash上传图片版本**/
		//infowin
		KConfig.set("iw_iwo_mmp_swf", {
			content:'<div class="mwpg_mm"><div mfg="ep"><div class="mwpg_mm_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_mm_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_mm_bss" href="javascript:void(0);" title="更改样式"><div class="mwpg_mm_11"></div></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_mm_ii"></textarea></td></tr><tr><th>图片</th><td colspan="2"><span mfg="ep_frm"><input mfg="ep_frm_f" type="button" value=""/><span mfg="ep_frm_fname"></span><p>图片支持格式png,jpg,jpeg</p><input type="submit" style="display:none;"/></span><div class="mwpg_mm_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_mm_ea"><input mfg="ep_s" class="mwpg_mm_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_mm_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df" style="display:none;"><div class="mwpg_mm_i"><div class="mwpg_mm_ip"><img mfg="df_f" src="[df_fs]" /></div><p mfg="df_i"></p></div><div class="mwpg_mm_na"><a mfg="df_e" class="mwpg_mm_be" href="javascript:void(0);">编辑</a><a mfg="df_d" class="mwpg_mm_bd" href="javascript:void(0);">删除</a></div><div class="mwpg_mm_ims" mfg="de_s"><ul><li><a href="javascript:void(0);">到达这里</a></li><li><a href="javascript:void(0);">从这里出发</a></li><li class="mwpg_mm_is"><a href="javascript:void(0);">查找周边</a></li></ul><div class="mwpg_mm_imc"><form>从<input class="mwpg_mm_kw" style="width:100px;" type="text" />到这里 <input class="mwpg_mm_sm" type="button" value="查公交" /><input class="mwpg_mm_sm" type="button" value="查驾车" /></form></div><div class="mwpg_mm_imc"><form>终点<input class="mwpg_mm_kw" style="width:100px;" type="text" /><input class="mwpg_mm_sm" type="button" value="查公交" /><input class="mwpg_mm_sm" type="button" value="查驾车" /></form></div><div class="mwpg_mm_imc mwpg_mm_imcs"><form>附近的<input class="mwpg_mm_kw" style="width:173px;" type="text" /><input class="mwpg_mm_sm" type="submit" value="搜索" /></form></div></div></div><div mfg="se" style="display:none;"><ul mfg="se_c" class="mwpg_mm_sl"><li><a href="javascript:void(0);"><div class="mwpg_mm_11"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_12"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_13"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_14"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_15"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_16"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_21"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_22"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_23"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_24"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_25"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_26"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_31"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_32"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_33"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_34"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_35"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_36"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_41"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_42"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_43"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_44"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_45"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_46"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_51"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_52"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_53"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_54"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_55"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_56"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_61"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_62"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_63"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_64"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_65"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_66"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_71"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_72"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_73"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_74"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_75"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_76"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_81"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_82"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_83"></div></a></li><li><a href="javascript:void(0);"><div class="mwpg_mm_84"></div></a></li></ul><div class="mwpg_mm_sa"><a class="mwpg_mm_br" mfg="se_b" href="javascript:void(0);">&lt;&lt;返回上一级</a></div></div></div>'
			,cmarea:false
        });

		/**地图标记组件 - 画线气泡**/
		//infowin
		KConfig.set("iw_iwo_mml", {
            content:'<div class="mwpg_ml"><div mfg="ep" style="display:none;"><div class="mwpg_ml_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_ml_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_ml_bss" href="javascript:void(0);" title="更改样式"><span style="background-color:#FF0000;opacity:0.6;"></span></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_ml_ii"></textarea></td></tr><tr style="display:none"><th>图片</th><td colspan="2"><form mfg="ep_frm" enctype="multipart/form-data" method="post"><input name="[ep_frm_fn]" mfg="ep_frm_f" type="file" /><p>图片支持格式png,jpg,jpeg</p><input type="submit" style="display:none;"/></form><div class="mwpg_ml_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_ml_ea"><input mfg="ep_s" class="mwpg_ml_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_ml_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df"><div class="mwpg_ml_i"><div class="mwpg_ml_ip"><img mfg="df_f" src="[df_fs]" src="" /></div><p mfg="df_i"></p></div><div class="mwpg_ml_na"><a class="mwpg_ml_be" mfg="df_e" href="javascript:void(0);">编辑</a><a class="mwpg_ml_bd" mfg="df_d" href="javascript:void(0);">删除</a></div><div class="mwpg_ml_l">总距离：<strong mfg="df_ds"></strong></div></div><div mfg="se" style="display:none;"><div class="mwpg_ml_sl"><table><tr><th>线条颜色</th><td style="width:215px;"><div class="mwpg_ml_sc"><div mfg="se_c" class="mwpg_ml_sdc"></div><div mfg="se_cp" class="mwpg_ml_cl"></div></div></td><td><div title="当前样式" class="mwpg_ml_cs"><span mfg="se_cs" style="background-color:#F00;opacity:0.1;"></span></div></td></tr><tr><th>线条粗细</th><td colspan="2"><input mfg="se_st" type="text" class="mwpg_ml_ilw" maxlength="2" /><span class="mwpg_ml_tip">1-99</span></td></tr><tr><th>线条透明度</th><td colspan="2"><input mfg="se_t" type="text" class="mwpg_ml_ila" maxlength="2" /><span class="mwpg_ml_tip">1-99</span></td></tr></table></div><div class="mwpg_ml_ea"><input mfg="se_s" class="mwpg_ml_bo" type="button" value="确定" /><a mfg="se_c" class="mwpg_ml_bc" href="javascript:void(0);">取消</a></div></div></div>'
			,cmarea:false
		});
		/**地图标记组件 - 画线气泡  flash上传图片版本**/
		//infowin
		KConfig.set("iw_iwo_mml_swf", {
            content:'<div class="mwpg_ml"><div mfg="ep" style="display:none;"><div class="mwpg_ml_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_ml_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_ml_bss" href="javascript:void(0);" title="更改样式"><span style="background-color:#FF0000;opacity:0.6;"></span></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_ml_ii"></textarea></td></tr><tr><th>图片</th><td colspan="2"><span mfg="ep_frm"><input mfg="ep_frm_f" type="button" value=""/><span mfg="ep_frm_fname"></span><p>图片支持格式png,jpg,jpeg</p><input type="submit" style="display:none;"/></span><div class="mwpg_ml_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_ml_ea"><input mfg="ep_s" class="mwpg_ml_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_ml_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df"><div class="mwpg_ml_i"><div class="mwpg_ml_ip"><img mfg="df_f" src="[df_fs]" src="" /></div><p mfg="df_i"></p></div><div class="mwpg_ml_na"><a class="mwpg_ml_be" mfg="df_e" href="javascript:void(0);">编辑</a><a class="mwpg_ml_bd" mfg="df_d" href="javascript:void(0);">删除</a></div><div class="mwpg_ml_l">总距离：<strong mfg="df_ds"></strong></div></div><div mfg="se" style="display:none;"><div class="mwpg_ml_sl"><table><tr><th>线条颜色</th><td style="width:215px;"><div class="mwpg_ml_sc"><div mfg="se_c" class="mwpg_ml_sdc"></div><div mfg="se_cp" class="mwpg_ml_cl"></div></div></td><td><div title="当前样式" class="mwpg_ml_cs"><span mfg="se_cs" style="background-color:#F00;opacity:0.1;"></span></div></td></tr><tr><th>线条粗细</th><td colspan="2"><input mfg="se_st" type="text" class="mwpg_ml_ilw" maxlength="2" /><span class="mwpg_ml_tip">1-99</span></td></tr><tr><th>线条透明度</th><td colspan="2"><input mfg="se_t" type="text" class="mwpg_ml_ila" maxlength="2" /><span class="mwpg_ml_tip">1-99</span></td></tr></table></div><div class="mwpg_ml_ea"><input mfg="se_s" class="mwpg_ml_bo" type="button" value="确定" /><a mfg="se_c" class="mwpg_ml_bc" href="javascript:void(0);">取消</a></div></div></div>'
			,cmarea:false
		});
		/**地图标记组件 - 沿路画线气泡**/
		//infowin
		KConfig.set("iw_iwo_mmr", {
			content:'<div class="mwpg_mc"><div mfg="ep" style="display:none;"><div class="mwpg_mc_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_mc_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_mc_bss" href="javascript:void(0);" title="更改样式"><span style="background-color:#FF0000;opacity:0.6;"></span></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_mc_ii"></textarea></td></tr><tr  style="display:none"><th>图片</th><td colspan="2"><form mfg="ep_frm" enctype="multipart/form-data" method="post"><input name="[ep_frm_fn]" mfg="ep_frm_f" type="file" /><p>图片支持格式png,jpg,jpeg</p><input type="submit" style="display:none;"/></form><div class="mwpg_mc_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_mc_ea"><input mfg="ep_s" class="mwpg_mc_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_mc_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df"><div class="mwpg_mc_i"><div class="mwpg_mc_ip"><img mfg="df_f" src="[df_fs]" /></div><p mfg="df_i"></p></div><div class="mwpg_mc_na"><a mfg="df_e" class="mwpg_mc_be" href="javascript:void(0);">编辑</a><a mfg="df_d" class="mwpg_mc_bd" href="javascript:void(0);">删除</a></div><div class="mwpg_mc_l">总距离：<strong mfg="df_ds"></strong></div></div><div mfg="se" style="display:none;"><div class="mwpg_mc_sl"><table><tr><th>线条颜色</th><td style="width:215px;"><div class="mwpg_mc_sc"><div mfg="se_c" class="mwpg_mc_sdc"></div><div mfg="se_cp" class="mwpg_mc_cl"></div></div></td><td><div title="当前样式" class="mwpg_mc_cs"><span mfg="se_cs" style="background-color:#F00;opacity:0.1;"></span></div></td></tr><tr><th>线条粗细</th><td colspan="2"><input mfg="se_st" type="text" class="mwpg_mc_ipt" maxlength="2" /><span class="mwpg_mc_tip">1-99</span></td></tr><tr><th>线条透明度</th><td colspan="2"><input mfg="se_t" type="text" class="mwpg_mc_ipt" maxlength="2" /><span class="mwpg_mc_tip">1-99</span></td></tr></table></div><div class="mwpg_ml_ea"><input mfg="se_s" class="mwpg_mc_bo" type="button" value="确定" /><a mfg="se_c" class="mwpg_mc_bc" href="javascript:void(0);">取消</a></div></div></div>'
			,cmarea:false
		});
		/**地图标记组件 - 沿路画线气泡  flash上传图片版本**/
		//infowin
		KConfig.set("iw_iwo_mmr_swf", {
			content:'<div class="mwpg_mc"><div mfg="ep" style="display:none;"><div class="mwpg_mc_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_mc_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_mc_bss" href="javascript:void(0);" title="更改样式"><span style="background-color:#FF0000;opacity:0.6;"></span></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_mc_ii"></textarea></td></tr><tr><th>图片</th><td colspan="2"><span mfg="ep_frm"><input mfg="ep_frm_f" type="button" value=""/><span mfg="ep_frm_fname"></span><p>图片支持格式png,jpg,jpeg</p><input type="submit" style="display:none;"/></span><div class="mwpg_mc_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_mc_ea"><input mfg="ep_s" class="mwpg_mc_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_mc_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df"><div class="mwpg_mc_i"><div class="mwpg_mc_ip"><img mfg="df_f" src="[df_fs]" /></div><p mfg="df_i"></p></div><div class="mwpg_mc_na"><a mfg="df_e" class="mwpg_mc_be" href="javascript:void(0);">编辑</a><a mfg="df_d" class="mwpg_mc_bd" href="javascript:void(0);">删除</a></div><div class="mwpg_mc_l">总距离：<strong mfg="df_ds"></strong></div></div><div mfg="se" style="display:none;"><div class="mwpg_mc_sl"><table><tr><th>线条颜色</th><td style="width:215px;"><div class="mwpg_mc_sc"><div mfg="se_c" class="mwpg_mc_sdc"></div><div mfg="se_cp" class="mwpg_mc_cl"></div></div></td><td><div title="当前样式" class="mwpg_mc_cs"><span mfg="se_cs" style="background-color:#F00;opacity:0.1;"></span></div></td></tr><tr><th>线条粗细</th><td colspan="2"><input mfg="se_st" type="text" class="mwpg_mc_ipt" maxlength="2" /><span class="mwpg_mc_tip">1-99</span></td></tr><tr><th>线条透明度</th><td colspan="2"><input mfg="se_t" type="text" class="mwpg_mc_ipt" maxlength="2" /><span class="mwpg_mc_tip">1-99</span></td></tr></table></div><div class="mwpg_ml_ea"><input mfg="se_s" class="mwpg_mc_bo" type="button" value="确定" /><a mfg="se_c" class="mwpg_mc_bc" href="javascript:void(0);">取消</a></div></div></div>'
			,cmarea:false
		});
		/**地图标记组件 - 画面气泡**/
		//infowin
		KConfig.set("iw_iwo_mma", {
            content:'<div class="mwpg_ma"><div mfg="ep" style="display:none;"><div class="mwpg_ma_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_ma_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_ma_bss" href="javascript:void(0);" title="更改样式"><span style="background-color:#F66;"></span></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_ma_ii"></textarea></td></tr><tr style="display:none"><th>图片</th><td colspan="2"><form mfg="ep_frm" enctype="multipart/form-data" method="post"><input name="[ep_frm_fn]" mfg="ep_frm_f" type="file" /><p>图片支持格式png,jpg,jpeg</p></form><div class="mwpg_ma_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_ma_ea"><input mfg="ep_s" class="mwpg_ma_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_ma_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df"><div class="mwpg_ma_i"><div class="mwpg_ma_ip"><img mfg="df_f" src="[df_fs]" /></div><p mfg="df_i"></p></div><div class="mwpg_ma_na"><a mfg="df_e" class="mwpg_ma_be" href="javascript:void(0);">编辑</a><a mfg="df_d" class="mwpg_ma_bd" href="javascript:void(0);">删除</a></div><div class="mwpg_ma_a">总面积:<strong mfg="df_ds"></strong></div></div><div mfg="se" style="display:none;"><div class="mwpg_ma_sl"><table><tr><th>边框颜色</th><td style="width:215px;"><div class="mwpg_ma_sc"><div mfg="se_bc" class="mwpg_ma_sdc"></div><div mfg="se_bcp" class="mwpg_ma_cl"></div></div></td><td><div title="当前样式" class="mwpg_ma_cs"><span mfg="se_cs" style="background-color:#F00;opacity:0.1;"></span></div></td></tr><tr><th>边框粗细</th><td colspan="2"><input mfg="se_st" type="text" class="mwpg_ma_ipt" maxlength="2" /><span class="mwpg_ma_tip">1-99</span></td></tr><tr><th>边框透明度</th><td colspan="2"><input mfg="se_t" type="text" class="mwpg_ma_ipt" maxlength="2" /><span class="mwpg_ma_tip">1-99</span></td></tr><tr><th>填充颜色</th><td colspan="2"><div class="mwpg_ma_sc"><div mfg="se_fc" class="mwpg_ma_sdc"></div><div mfg="se_fcp" class="mwpg_ma_cl"></div></div></td></tr><tr><th>填充透明度</th><td colspan="2"><input mfg="se_ft" type="text" class="mwpg_ma_ipt" maxlength="2" /><span class="mwpg_ma_tip">1-99</span></td></tr></table></div><div class="mwpg_ml_ea"><input mfg="se_s" class="mwpg_ma_bo" type="button" value="确定" /><a mfg="se_c" class="mwpg_ma_bc" href="javascript:void(0);">取消</a></div></div></div>'
			,cmarea:false
		});
		/**地图标记组件 - 画面气泡  flash上传图片版本**/
		//infowin
		KConfig.set("iw_iwo_mma_swf", {
            content:'<div class="mwpg_ma"><div mfg="ep" style="display:none;"><div class="mwpg_ma_ec"><table><tbody><tr><th>标题</th><td><input mfg="ep_t" class="mwpg_ma_it" type="text" /><span>最多18个字符</span></td><td><a mfg="ep_l" class="mwpg_ma_bss" href="javascript:void(0);" title="更改样式"><span style="background-color:#F66;"></span></a></td></tr><tr><th>说明</th><td colspan="2"><textarea mfg="ep_i" class="mwpg_ma_ii"></textarea></td></tr><tr><th>图片</th><td colspan="2"><span mfg="ep_frm"><input mfg="ep_frm_f" type="button" value=""/><span mfg="ep_frm_fname"></span><p>图片支持格式png,jpg,jpeg</p><input type="submit" style="display:none;"/></span><div class="mwpg_ma_ui" mfg="ep_p"><img src="" /><a href="javascript:void(0);">删除</a></div></td></tr></tbody></table></div><div class="mwpg_ma_ea"><input mfg="ep_s" class="mwpg_ma_bs" type="button" value="保存" /><a mfg="ep_c" class="mwpg_ma_bc" href="javascript:void(0);">取消</a></div></div><div mfg="df"><div class="mwpg_ma_i"><div class="mwpg_ma_ip"><img mfg="df_f" src="[df_fs]" /></div><p mfg="df_i"></p></div><div class="mwpg_ma_na"><a mfg="df_e" class="mwpg_ma_be" href="javascript:void(0);">编辑</a><a mfg="df_d" class="mwpg_ma_bd" href="javascript:void(0);">删除</a></div><div class="mwpg_ma_a">总面积:<strong mfg="df_ds"></strong></div></div><div mfg="se" style="display:none;"><div class="mwpg_ma_sl"><table><tr><th>边框颜色</th><td style="width:215px;"><div class="mwpg_ma_sc"><div mfg="se_bc" class="mwpg_ma_sdc"></div><div mfg="se_bcp" class="mwpg_ma_cl"></div></div></td><td><div title="当前样式" class="mwpg_ma_cs"><span mfg="se_cs" style="background-color:#F00;opacity:0.1;"></span></div></td></tr><tr><th>边框粗细</th><td colspan="2"><input mfg="se_st" type="text" class="mwpg_ma_ipt" maxlength="2" /><span class="mwpg_ma_tip">1-99</span></td></tr><tr><th>边框透明度</th><td colspan="2"><input mfg="se_t" type="text" class="mwpg_ma_ipt" maxlength="2" /><span class="mwpg_ma_tip">1-99</span></td></tr><tr><th>填充颜色</th><td colspan="2"><div class="mwpg_ma_sc"><div mfg="se_fc" class="mwpg_ma_sdc"></div><div mfg="se_fcp" class="mwpg_ma_cl"></div></div></td></tr><tr><th>填充透明度</th><td colspan="2"><input mfg="se_ft" type="text" class="mwpg_ma_ipt" maxlength="2" /><span class="mwpg_ma_tip">1-99</span></td></tr></table></div><div class="mwpg_ml_ea"><input mfg="se_s" class="mwpg_ma_bo" type="button" value="确定" /><a mfg="se_c" class="mwpg_ma_bc" href="javascript:void(0);">取消</a></div></div></div>'
			,cmarea:false
		});
		
    }

//$(window).bind("unload", function() {});
